' Gambas class file

Private $aModeButtons As New ToolButton[]
Private bFlag As Boolean
Private $hPrinter As New Printer As "Printer"
'Private $iCurPrinterResolution As Integer
Private $bVerif As Boolean
Private $bPrinting As Boolean
Private $iFileRes As Integer = 150

Static Public Function Run(hReport As Report)
  
  Dim hFPreview As FPreview
  
  hFpreview = New FPreview
  
  hFPreview.SetReport(hReport)
  hFPreview.ShowModal()
  
End

Public Sub _new()
  
  Dim s As String
  Dim hMenu As Menu
  
  For Each s In Printer.List
    cmbPrinter.Add(s)
    hMenu = New Menu(mnuPrint) As "mnuPrintPrinter"
    hMenu.Tag = s
    hMenu.Text = s
  Next
  
End

Private Sub SelectPrinter(Optional sName As String)
  
  Dim iPrinter As Integer
  
  If sName Then
    $hPrinter.Name = sName
  Else
    $hPrinter.Name = Printer.Default
  Endif
  
  Object.Lock(cmbPrinter)
  iPrinter = Max(0, cmbPrinter.List.Find($hPrinter.Name))
  Try cmbPrinter.Index = iPrinter
   Object.Unlock(cmbPrinter)
    
  'NOTE: force the printer fullpage mode because it make error on report placement
  $hPrinter.FullPage = True
  $hPrinter.Duplex = cmbDuplex.Index
  
  tgbGrayScale.Value = $hPrinter.GrayScale
  tgbFullPage.Value = $hPrinter.FullPage
  tgbReverseCopies.Value = $hPrinter.ReverseOrder
  tgbCollateCopies.Value = $hPrinter.CollateCopies
  
End

Public Sub SetReport(hReport As Report)
  
  View.Report = hReport
  GetValuesFromReport()
  
End

Private Sub GetValuesFromReport()
  
  cmbPaper.Index = View.Report.Paper
  $hPrinter.Orientation = View.Report.Orientation
  
  If View.Report.Paper = Printer.Custom Then
    pnlCustom.Enabled = True
    $hPrinter.PaperWidth = TSizeParse[View.Report.Width].ToInch() * 10
    $hPrinter.PaperHeight = TSizeParse[View.Report.Height].ToInch() * 10
  Else
    $hPrinter.Paper = View.Report.Paper
  Endif 
  
  cmbOrientation.Index = $hPrinter.Orientation
  cmbDuplex.Index = $hPrinter.Duplex
  cmbPaper.Index = $hPrinter.Paper
  View.Refresh
  
  Object.Lock(spWidth)
  spWidth.Value = $hPrinter.PaperWidth
  Object.Unlock(spWidth)
  Object.Lock(spHeight)
  spHeight.Value = $hPrinter.PaperHeight
  Object.Unlock(spHeight)
  
End

Public Sub sldZoom_Change()
  
  Dim hButton As ToolButton
  
  View.ScaleMode = View.Custom
  View.Zoom = sldZoom.Value / 100
  'lblZoom.Text = Str(Slider1.Value) & " %"
  bFlag = True
  For Each hButton In $aModeButtons
    hButton.Value = False
  Next
  
  bFlag = False  
  
End

Public Sub View_Zoom()
  
  Object.Lock(sldZoom)
  sldZoom.Value = View.Zoom * 100
  Object.Unlock(sldZoom)
  
  lblZoom.Text = Str(sldZoom.Value) & " %"
  
End

Public Sub Mode_Click()
  
  Dim hButton As ToolButton
  Dim hCurButton As ToolButton
  
  If bFlag Then Return
  bFlag = True
  hCurButton = Last
  
  For Each hButton In $aModeButtons
    If hButton = hCurButton Then 
      hButton.Value = True
    Else
      hButton.Value = False
    Endif
  Next
  
  bFlag = False
  
  'View.ScaleMode = hCurButton.Tag
  View.ScaleMode = hCurButton.Tag
  'View.Refresh
  'View.Refresh

End

Public Sub tgbGrayScale_Click()
  
  'Last.Background = IIf(Last.Value, Color.Gray, Color.Default)
  $hPrinter.GrayScale = Last.Value
  View._GrayScale = Last.Value
  
End

Public Sub tgbFullPage_Click()
  
  'Last.Background = IIf(Last.Value, Color.Gray, Color.Default)
  $hPrinter.FullPage = Last.Value
  
End

Public Sub tgbReverseCopies_Click()
  
  'Last.Background = IIf(Last.Value, Color.Gray, Color.Default)
  $hPrinter.ReverseOrder = Last.value
  
End

Public Sub tgbCollateCopies_Click()
  
  'Last.Background = IIf(Last.Value, Color.Gray, Color.Default)
  $hPrinter.CollateCopies = Last.Value
  
End

Public Sub cmbOrientation_Click()
  
  If View.Report.Orientation = Last.Index Then Return
  View.Report.Orientation = Last.Index
  'View.Report.Refresh
  View.Refresh
  GetValuesFromReport
  
End

Public Sub cmbPaper_Click()
  
  Dim i As Integer = Last.Index
  'Print "id "; View.Report.paper
  If View.Report.Paper = i Then Return 
  View.Report.Paper = i
  If i = 0 Then
    pnlCustom.Visible = True
  Else
    pnlCustom.Visible = False
    View.Refresh
    GetValuesFromReport
  Endif
  
End

Public Sub cmbDuplex_Click()
  
  $hPrinter.Duplex = Last.index
  
End

Public Sub txtFile_Click()
  
  Dialog.Path = txtFile.Text
  Dialog.Filter = ["*.pdf", ("PDF files"), "*.ps", ("Postscript files")]
  
  If Dialog.SaveFile() Then Return
  
  txtFile.Text = Dialog.Path
  $bVerif = True
  $hPrinter.OutputFile = Dialog.Path
  
End

Private Sub RefreshPrintButton()
  
  If $bPrinting Then
    
    btnPrint.Picture = Picture["icon:/small/cancel"]
    btnPrint.Text = ("Cancel")
    
  Else
    
    btnPrint.Picture = Picture[If(tabPrint.Index = 0, "icon:/small/printer", "icon:/small/pdf")]
    btnPrint.Text = ("Print")
    
  Endif
  
  btnPrint2.Picture = btnPrint.Picture
  btnPrint2.Text = btnPrint.Text
  
End

Public Sub tabPrint_Click()
  
  If tabPrint.Index = 0 Then
    $hPrinter.OutputFile = ""
    $hPrinter.Name = cmbPrinter.Text
    $hPrinter.Resolution = 1200 
  Else
    $hPrinter.OutputFile = txtFile.Text
    $hPrinter.Resolution = $iFileRes
    Object.Lock(cmbResolution)
    pnlResolution.Enabled = True
    Try cmbResolution.Index = Max(cmbResolution.Find(Str($iFileRes)), 0)
    Object.Unlock(cmbResolution)
  Endif
  
  RefreshPrintButton
  
End

Public Sub TextBox1_Change()
  
  View.Range = TextBox1.Text
  
End

Public Sub TextBox1_Click()
  
  Last.Text = ""
  'TextBox1_Change
  
End

Public Sub spWidth_Change()
  
  View.Report.Width = Str(Last.Value) & "mm"
  View.Refresh
  
End

Public Sub spHeight_Change()
  
  View.Report.Height = Str(Last.Value) & "mm"
  View.Refresh
  
End

Public Sub Button2_Click()
  
  View._ForceLayout
  
End

Public Sub cmbPrinter_Click()
  
  SelectPrinter(Last.Text)
  
End

Public Sub btnPrint_Click()
  
  Dim iReturn As Integer
  
  If btnPrint.Tag Then
    
    $hPrinter.Cancel
    btnPrint.Tag = False
    
  Else
    If Not View.Report Then Return
    
    If tabPrint.Index = 1 Then
      
      If Not $hPrinter.OutputFile Then txtFile_Click
      If Not $hPrinter.OutputFile Then Return
      
      If Exist($hPrinter.OutputFile) And Not $bVerif Then
        iReturn = Message.Warning("<tt>" & $hPrinter.OutputFile & "</tt>\n\n" & ("This file already exists.\nDo you want to replace it?"), ("Replace"), ("Cancel"))
        If iReturn = 2 Then Return
        Try Kill $hPrinter.OutputFile
        $bVerif = False
      Endif
      
    Endif
    
    $bPrinting = True
    btnPrint.Tag = True
    RefreshPrintButton
    
    $hPrinter.Print
    
  Endif
  
End

Public Sub Printer_Begin()
  
  hbZoom.Hide
  hbPrinting.Show
  Inc Application.Busy
  ProgressBar1.Value = 0
  ProgressBar1.Pulse = True
  lblPrint.Text = ("Layout...")
  
End

Public Sub Printer_Paginate()
  
  If View.Report._LayoutNotFinished Then
    View.LockLayout
    View.Report.Layout(View.Report.PageCount)
  Else
    $hPrinter.Count = View.PageCount
    ProgressBar1.Pulse = False
    lblPrint.Text = ("Printing...")
    View.UnlockLayout
  Endif
  
End

Public Sub Printer_Draw()
  
  If View.RangePages.Count = 0 Then 
    View.Report.Paint($hPrinter.Page)
  Else
    View.Report.Paint(View.RangePages[$hPrinter.Page - 1] + 1)
  Endif
  ProgressBar1.Value = $hPrinter.Page / View.PageCount
  
End

Public Sub Printer_End()
  
  'View.UnlockLayout
  hbPrinting.Hide
  hbZoom.Show
  Dec Application.Busy
  btnPrint.Tag = False
  $bPrinting = False
  RefreshPrintButton
  
End

Public Sub TextBox2_Change()
  
  $hPrinter.NumCopies = Last.Value
  
End

Public Sub Form_Close()
  
  If Component.IsLoaded("gb.settings") Then 
    'Settings.Write(Me, "FPreview")
    Settings.Write(View, "View")
    Settings["FPreview/OutputFile"] = txtFile.Text
    Settings["FPreview/Printer"] = $hPrinter.Name
    Settings["FPreview/PrintToFile"] = tabPrint.Index = 1
    Settings["FPreview/Duplex"] = cmbDuplex.Index
    Settings["FPreview/GrayScale"] = tgbGrayScale.Value
    Settings["FPreview/ReverseOrder"] = tgbReverseCopies.Value
    Settings["FPreview/CollateCopies"] = tgbCollateCopies.Value
    Settings["FPreview/FileResolution"] = $iFileRes
    Settings.Save()
  Endif
  
End

Public Sub Form_Open()
  
  Dim hButton As ToolButton
  
  $aModeButtons = [btnOnePage, btnTwoPages, btnFullWidth, btnRealSize]
  
  If Component.IsLoaded("gb.settings") Then 
    'Settings.Read(Me, "FPreview")
    Settings.Read(View, "View")
    
    If View.ScaleMode = View.Custom Then
      sldZoom.Value = View.Zoom
    Else
      For Each hButton In $aModeButtons
        hButton.Value = False
      Next
      $aModeButtons[View.ScaleMode - 1].Value = True
      
    Endif
    
    txtFile.Text = Settings["FPreview/OutputFile", User.Home &/ "report.pdf"]
    $hPrinter.OutputFile = txtFile.Text
    $hPrinter.Name = Settings["FPreview/Printer"] 
    If Settings["FPreview/PrintToFile"] = True Then 
      tabPrint.Index = 1
    Endif
    
    Try $hPrinter.Duplex = Settings["FPreview/Duplex"]
    Try $hPrinter.GrayScale = Settings["FPreview/GrayScale"] 
    Try $hPrinter.ReverseOrder = Settings["FPreview/ReverseOrder"] 
    Try $hPrinter.CollateCopies = Settings["FPreview/CollateCopies"] 
    Try $iFileRes = Settings["FPreview/FileResolution", 150] 
    Try $hPrinter.Duplex = Settings["FPreview/Duplex", Printer.Simplex] = cmbDuplex.Index
  Endif
  
  SelectPrinter($hPrinter.Name)
  btnPrint.Tag = False
  $bPrinting = False
  
  btnOnePage.Value = True
  tabPrint_Click
End

Public Sub btnZoomIn_Click()
  
  sldZoom.Value = 100 * 2 ^ (Int((Log2(sldZoom.Value / 100) + 0.5) * 2 + 0.5) / 2) + 0.5
  
End

Public Sub btnZoomOut_Click()
  
  sldZoom.Value = 100 * 2 ^ (Int((Log2(sldZoom.Value / 100)) * 2 - 0.5) / 2) + 0.5
  
End

Public Sub panSide_Arrange()
  
  With btnCloseSide
    .Move(.Parent.W - .W, 0, Desktop.Scale * 4, Desktop.Scale * 4)
  End With
  
End

Public Sub btnCloseSide_Click()
  
  panSide.Hide
  btnShowSide.Show
  btnPrint2.Show
  
End

Public Sub btnShowSide_Click()
  
  panSide.Show
  btnShowSide.Hide
  btnPrint2.Hide
  
End

Public Sub mnuPrint_Show()
  
  Dim hMenu As Menu
  
  mnuPrintPDF.Checked = tabPrint.Index = 1
  For Each hMenu In mnuPrint.Children
    If Not hMenu.Tag Then Continue
    If tabPrint.Index = 1 Then
      hMenu.Checked = False
    Else
      hMenu.Checked = hMenu.Text = cmbPrinter.Text
    Endif
  Next
  
End

Public Sub mnuPrintPDF_Click()
  
  tabPrint.Index = 1
  txtFile_Click
  
End

Public Sub mnuPrintPrinter_Click()
  
  tabPrint.Index = 0
  cmbPrinter.Text = Last.Text
  
End

Public Sub spResolution_Change()
  
End

Public Sub SpinBar1_Change()
  
  Last.Text = "toto" & Last.Value
  
End

Public Sub cmbResolution_Click()

  If tabPrint.Index = 0 Then
    $hPrinter.Resolution = 1200
    Else
    $iFileRes = cmbResolution.Text
    $hPrinter.Resolution = $iFileRes
  Endif

End
