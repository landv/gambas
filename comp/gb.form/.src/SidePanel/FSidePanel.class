' Gambas class file

'Static Private $hHandleH As Picture
'Static Private $hHandleV As Picture

Private $iOrientation As Integer
Private $iArrowType As Integer
Private $bFixed As Boolean
Private $X As Integer
Private $Y As Integer
Private $W As Integer
Private $H As Integer
Private $bVisible As Boolean
Private $MX As Integer
Private $MY As Integer
Private $iMax As Integer
Private $bOpened As Boolean
Private $hArrow As Image
Private $bSeparator As Boolean
Private $bCanMove As Boolean
Private $bInside As Boolean
Private $bDblClick As Boolean
Private $bTransparent As Boolean
Private $iMinSize As Integer

Private BUTTON_H As Integer = 6
Private BUTTON_H_TRANS As Integer = 4
Private BUTTON_W As Integer = 24

Private $hShowPanel As Panel
Private $hShowButtonLeft As DrawingArea
Private $hShowButtonRight As DrawingArea

' Static Public Sub _init()
'   
'   $hHandleH = Picture["img/handle-h.png"]
'   $hHandleV = Picture["img/handle-v.png"]
'   
' End


Public Sub _new()

  $bVisible = True
  $iOrientation = Align.Top
  $iMinSize = Desktop.Scale * 8
  'btnSide.Transparent = True
  'btnSide2.Transparent = True

End


Public Sub Form_Open()

  $bOpened = True
  RefreshAll

End

Private Sub GetLangOrientation(iOrientation As Integer) As Integer
  
  If System.RightToLeft Then 
    If iOrientation = Align.Left Then 
      Return Align.Right
    Else If iOrientation = Align.Right Then 
      Return Align.Left
    Endif 
  Endif 
  
  Return iOrientation
  
End


Public Function GetOrientation() As Integer

  Return GetLangOrientation($iOrientation)

End

Public Sub SetOrientation(iOrientation As Integer)

  Select Case iOrientation
    Case Align.Top, Align.Bottom
    Case Align.Left, Align.Right
    Case Else
      Return
  End Select

  $iOrientation = GetLangOrientation(iOrientation)
  RefreshArrow
  RefreshPanel

End

Private Sub RefreshPanel()

  Dim W As Integer
  Dim W2 As Integer
  Dim Y As Integer
  Dim D As Integer

  'IF NOT $bVisible THEN panSide.Hide
  If Not $bOpened Then Return

  'If $bSeparator Then S = 1

  Select Case $iOrientation

    Case Align.Top, Align.Bottom
      D = Me.ClientW

    Case Else
      D = Me.ClientH

  End Select

  'D = Max(0, D - 8)

  If D < (BUTTON_W * 2 + 16) Then
    W = Min(BUTTON_W, D - 16)
    W2 = 0
  Else
    W = Min(BUTTON_W, D / 2)
    W2 = Min(BUTTON_W, D - W)
  Endif

  Select Case $iOrientation

    Case Align.Bottom, Align.Right
      Y = 0

    Case Align.Top
      Y = Me.ClientH - BUTTON_H

    Case Align.Left
      Y = Me.ClientW - BUTTON_H

  End Select

  Select Case $iOrientation

    Case Align.Top, Align.Bottom

      panMove.Move(0, Y, Me.ClientW, BUTTON_H)

      If $bVisible Then
        If W2 Then
          btnSide.Move(0, 0, W, BUTTON_H)
          btnSide2.Move(Me.ClientW - W2, 0, W2, BUTTON_H)
          btnSide2.Show
        Else
          btnSide.Move(0, 0, W, BUTTON_H)
          'btnSide.Move((D - W) / 2, Y, W, BUTTON_H)
          btnSide2.Hide
        Endif
      Endif

      ' W2 = ME.ClientW - W - W2
      ' IF W2 > 0 THEN
      '   panMove.Move(W, Y, W2, BUTTON_H)
      '   panMove.Show
      ' ELSE
      '   panMove.Hide
      ' ENDIF

    Case Else

      panMove.Move(Y, 0, BUTTON_H, Me.ClientH)

      If $bVisible Then
        If W2 Then
          btnSide.Move(0, 0, BUTTON_H, W)
          btnSide2.Move(0, Me.ClientH - W2, BUTTON_H, W2)
          btnSide2.Show
        Else
          btnSide.Move(0, 0, BUTTON_H, W)
          'btnSide.Move(Y, (D - W) / 2, BUTTON_H, W)
          btnSide2.Hide
        Endif
      Endif

      ' W2 = ME.ClientH - W - W2
      ' IF W2 > 0 THEN
      '   panMove.Move(Y, W, BUTTON_H, W2)
      '   panMove.Show
      ' ELSE
      '   panMove.Hide
      ' ENDIF

  End Select

  'If $bTransparent Then panSide.Move(0, 0, Me.ClientW, Me.ClientH)
  
  If $bTransparent Then
    If $bSeparator Then
      D = 1
    Else
      D = 0
    Endif
  Else
    D = BUTTON_H
  Endif
  
  Select Case $iOrientation

    Case Align.Bottom
      sepSide.Move(0, 0, Me.ClientW, 1)
      panSide.Move(0, D, Me.ClientW, Me.ClientH - D)

    Case Align.Top
      sepSide.Move(0, Me.ClientH - 1, Me.ClientW, 1)
      panSide.Move(0, 0, Me.ClientW, Me.ClientH - D)

    Case Align.Right
      sepSide.Move(0, 0, 1, Me.ClientH)
      panSide.Move(D, 0, Me.ClientW - D, Me.ClientH)

    Case Align.Left
      sepSide.Move(Me.ClientW - 1, 0, 1, Me.ClientH)
      panSide.Move(0, 0, Me.ClientW - D, Me.ClientH)

  End Select
  
  sepSide.Visible = $bSeparator And $bVisible
  
  'IF $bVisible THEN panSide.Show
  
  'DEBUG $bVisible;; "(";; ME.X;; ME.Y;; ME.W;; ME.H;; ") (";; btnSide.X;; btnSide.Y;; btnSide.W;; btnSide.H;; btnSide.Visible;; ") (";; panSide.X;; panSide.Y;; panSide.W;; panSide.H;; panSide.Visible;; ")"
  'STOP
  
End

Public Function GetContainer() As Panel

  Return panSide

End

Private Sub GetParent() As SidePanel
  
  Return Me.Parent
  
End


Public Sub Form_Resize()

  RefreshPanel
  MoveShowButton
  GetParent()._Resize

End

Private Sub RefreshArrow()

  Dim iType As Integer
  
  If Not $bOpened Then Return

  Select Case $iOrientation
    Case Align.Top, Align.Bottom
      If $bVisible Xor ($iOrientation = Align.Bottom) Then
        iType = Align.Top
        'hPict = Picture["img/8/side-top.png"]
      Else
        iType = Align.Bottom
        'hPict = Picture["img/8/side-bottom.png"]
      Endif
    Case Align.Left, Align.Right
      If $bVisible Xor ($iOrientation = Align.Right) Then
        iType = Align.Left
        'hPict = Picture["img/8/side-left.png"]
      Else
        iType = Align.Right
        'hPict = Picture["img/8/side-right.png"]
      Endif
  End Select
  
  If Not Component.IsLoaded("gb.gtk") Then $hArrow = Main.GetArrow(iType, Desktop.Scale * 2)
  $iArrowType = iType
  btnSide.Refresh
  btnSide2.Refresh

  If Not $bFixed And Not Me.Parent.Design Then
    If $bVisible Then
      panMove.Mouse = If(IsVertical(), Mouse.SplitV, Mouse.SplitH)
    Else
      panMove.Mouse = Mouse.Pointing
    Endif
  Else
    panMove.Mouse = Mouse.Default
  Endif

End

Private Sub CreateShowButton() As DrawingArea
  
  Dim hCtrl As DrawingArea
  
  hCtrl = New DrawingArea($hShowPanel) As "ShowButton"
  hCtrl.Ignore = True
  'hCtrl.Painted = True
  hCtrl.Resize(Desktop.Scale, Desktop.Scale)
  hCtrl.Mouse = Mouse.Pointing
  
  Return hCtrl
  
End

Private Sub MoveShowButton()

  Dim D As Integer

  If $bVisible Then Return
  If Not $hShowPanel Then Return

  D = If($bTransparent, BUTTON_H_TRANS, 0)

  With Me.Parent
  
    Select Case $iOrientation
      Case Align.Top
        $hShowPanel.Move(.X, .Y, .W, BUTTON_H)
        If $hShowButtonLeft Then
          $hShowButtonLeft.Move(0, 0, BUTTON_W, BUTTON_H)
          $hShowButtonRight.Move(.W - BUTTON_W, 0, BUTTON_W, BUTTON_H)
        Endif
      Case Align.Bottom
        $hShowPanel.Move(.X, .Y - D, .W, BUTTON_H)
        If $hShowButtonLeft Then
          $hShowButtonLeft.Move(0, 0, BUTTON_W, BUTTON_H)
          $hShowButtonRight.Move(.W - BUTTON_W, 0, BUTTON_W, BUTTON_H)
        Endif
      Case Align.Left
        $hShowPanel.Move(.X, .Y, BUTTON_H, .H)
        If $hShowButtonLeft Then
          $hShowButtonLeft.Move(0, 0, BUTTON_H, BUTTON_W)
          $hShowButtonRight.Move(0, .H - BUTTON_W, BUTTON_H, BUTTON_W)
        Endif
      Case Align.Right
        $hShowPanel.Move(.X - D, .Y, BUTTON_H, .H)
        If $hShowButtonLeft Then
          $hShowButtonLeft.Move(0, 0, BUTTON_H, BUTTON_W)
          $hShowButtonRight.Move(0, .H - BUTTON_W, BUTTON_H, BUTTON_W)
        Endif
    End Select
    
  End With  

  '$hShowPanel.Move($hShowPanel.X - 2, $hShowPanel.Y - 2, $hShowPanel.W + 4, $hShowPanel.H + 4)

  $hShowPanel.Show
  $hShowPanel.Raise
    
End

Private Sub RefreshAll()

  Dim D As Integer
  Dim hParent As Container
  Dim hTabStrip As TabStrip
  Dim iIndex As Integer

  If Not $bOpened Then Return
  
  If $bVisible Then
    
    panSide.Show 'Enabled = TRUE
    
    If $hShowPanel Then $hShowPanel.Hide

  Else
    
    'DEBUG ME.Parent.W;; ME.CLientW
    panSide.Hide 'Enabled = FALSE
    
    If $bTransparent Then
      D = If($bSeparator, 1, 0)
    Else
      D = BUTTON_H
    Endif
    
    If Not $hShowPanel Then
      
      hParent = Me.Parent.Parent
      
      If hParent Is TabStrip Then
        hTabStrip = hParent
        iIndex = hTabStrip.Index
        hTabStrip.Index = hTabStrip.FindIndex(Me.Parent)
      Endif
      
      $hShowPanel = New Panel(hParent) As "panMove"
      
      If hTabStrip Then hTabStrip.Index = iIndex
      
      $hShowPanel.Ignore = True
      $hShowPanel.Mouse = Mouse.Pointing
      $hShowButtonLeft = CreateShowButton()
      $hShowButtonRight = CreateShowButton()
      
    Endif
    
    Select Case $iOrientation
      Case Align.Top
        Me.Parent.H = D
      Case Align.Bottom
        Me.Parent.Y += Me.Parent.H - D
        Me.Parent.H = D
      Case Align.Left
        Me.Parent.W = D
      Case Align.Right
        Me.Parent.X += Me.Parent.W - D
        Me.Parent.W = D
    End Select
    
    MoveShowButton
    
  Endif

  UpdateBackground
  RefreshArrow
  RefreshPanel
  RefreshButtons
  
  sepSide.Raise
  panMove.Raise
  
End


Private Sub TogglePanel()

  If Me.Parent.Design Then Return

  If $bVisible Then

    btnSide.Hide
    btnSide2.Hide
    
    With Me.Parent
      $X = .X
      $Y = .Y
      $W = .Width
      $H = .Height
    End With
    
    $bVisible = False
    
    RefreshAll
    
    Action.Raise(Me.Parent)

    GetParent()._Hide
    
  Else

    btnSide.Show
    btnSide2.Show
    
    $bVisible = True
    
    If $W And If $H Then 
      Me.Parent.Move($X, $Y, $W, $H)
      $W = 0
      $H = 0
    Endif
    
    RefreshAll
    
    Action.Raise(Me.Parent)    

    GetParent()._Show

  Endif

End

Public Sub btnSide_MouseUp()

  If Me.Parent.Design Then Return
  If Not Me.Parent.Enabled Then Return

  'Last.Tag = 1
  'Last.Refresh

  $bInside = False
  TogglePanel

End

Private Function IsVertical() As Boolean

  Return $iOrientation = Align.Top Or $iOrientation = Align.Bottom

End


Public Sub panMove_MouseDown()

  $bCanMove = False

  If Me.Parent.Design Then Return
  If Not Me.Parent.Enabled Then Return
  If $bFixed Then Return
  If Not $bVisible Then Return

  '$MX = Mouse.ScreenX - Me.Parent.W

  Select Case $iOrientation
    Case Align.Top
      $MY = Mouse.ScreenY - Me.Parent.H
      $iMax = Me.Parent.Parent.ClientH - Me.Parent.Y '- Desktop.Scale * 8
    Case Align.Bottom
      $MY = Mouse.ScreenY + Me.H
      $iMax = Me.Parent.Y + Me.Parent.H '+ Desktop.Scale * 8
    Case Align.Left
      $MX = Mouse.ScreenX - Me.Parent.W
      $iMax = Me.Parent.Parent.ClientW - Me.Parent.X '- Desktop.Scale * 8
    Case Align.Right
      $MX = Mouse.ScreenX + Me.W
      $iMax = Me.Parent.X + Me.Parent.W '+ Desktop.Scale * 8
  End Select
  
  $bCanMove = True
  $bInside = True
  
End

Public Sub panMove_MouseUp()

  $bInside = False
  If Not $bDblClick And If Not $bVisible Then TogglePanel
  $bDblClick = False
  
End


Private Function GetDim(H As Integer) As Integer
  
  Dim iMin As Integer

  iMin = Min($iMax, Max(BUTTON_H, $iMinSize))

  If H < BUTTON_H Then
    H = If($bTransparent, 1, BUTTON_H)
  Else If H < iMin Then
    H = iMin
  Endif

  Return H  
  
End


Public Sub panMove_MouseMove()

  Dim H As Integer
  Dim iMax As Integer

  If Not $bCanMove Then Return

  If Not Mouse.Left Then Return
  If Me.Parent.Design Then Return
  If Not Me.Parent.Enabled Then Return
  If $bFixed Then Return

  iMax = Max(0, $iMax - $iMinSize)

  Select Case $iOrientation
    Case Align.Top
      H = GetDim(Min(iMax, Mouse.ScreenY - $MY))
    Case Align.Bottom
      H = GetDim(Min(iMax, $MY - Mouse.ScreenY))
    Case Align.Left
      H = GetDim(Min(iMax, Mouse.ScreenX - $MX))
    Case Align.Right
      H = GetDim(Min(iMax, $MX - Mouse.ScreenX))
  End Select
  
  If H <= BUTTON_H Then
    If $bVisible Then 
      TogglePanel
      $bDblClick = True
      Return
    Endif
  Else
    If Not $bVisible Then
      TogglePanel
    Endif
  Endif

  Select Case $iOrientation
    Case Align.Top
      Me.Parent.H = H
    Case Align.Bottom
      Me.Parent.Move(Me.Parent.X, $iMax - H, Me.Parent.W, H)
    Case Align.Left
      Me.Parent.W = H
    Case Align.Right
      Me.Parent.Move($iMax - H, Me.Parent.Y, H, Me.Parent.H)
  End Select

  RefreshPanel
  
End

Public Function IsHidden() As Boolean

  Return Not $bVisible

End

Public Sub SetHidden(bHidden As Boolean)

  If bHidden = $bVisible Then TogglePanel

End

Public Function GetDimension() As Integer

  If IsVertical() Then
    If Not $bVisible Then
      Return $H
    Else
      Return Me.Parent.Height
    Endif
  Else
    If Not $bVisible Then
      Return $W
    Else
      Return Me.Parent.Width
    Endif
  Endif

End

Public Sub SetDimension(iDim As Integer)
  
  If IsVertical() Then
    If Not $bVisible Then
      $H = iDim
    Else
      Me.Parent.Height = iDim
    Endif
  Else
    If Not $bVisible Then
      $W = iDim
    Else
      Me.Parent.Width = iDim
    Endif
  Endif  
  
End


Public Function IsFixed() As Boolean

  Return $bFixed

End

Public Sub SetFixed(bFixed As Boolean)

  $bFixed = bFixed
  RefreshArrow

End

Public Sub panMove_DblClick()

  If Not Me.Parent.Enabled Then Return
  TogglePanel
  $bDblClick = True

End

Public Function GetTooltip() As String
  
  Return btnSide.ToolTip
  
End

Public Sub SetTooltip(Value As String)
  
  btnSide.ToolTip = Value
  btnSide2.ToolTip = Value
  panMove.ToolTip = Value
  
End

Public Sub SetDesign()

  RefreshArrow
  RefreshPanel
  
End


' PUBLIC SUB panMove_Draw()
' 
'   IF IsVertical() THEN
'     Draw.FillX = 0
'     Draw.FillY = panMove.H / 2 - 2
'     Draw.Tile($hHandleH, panMove.W * 0.1, panMove.H / 2 - 3, panMove.W * 0.8, 4)
'   ELSE
'     Draw.FillX = panMove.W / 2 - 2
'     Draw.FillY = 0
'     Draw.Tile($hHandleV, panMove.W / 2 - 3, panMove.H * 0.1, 4, panMove.H * 0.8)
'   ENDIF   
' 
' END

' Public Sub panMove_Enter()
' 
'   $iColor = panMove.Background
' 
'   If Not $bVisible Then Return
'   If $bFixed Then Return
'   If Me.Parent.Design Then Return
' 
'   'panMove.Background = Color.ButtonBackground
'   'btnSide.Background = Color.ButtonBackground  
'   'btnSide2.Background = Color.ButtonBackground  
' 
' End
' 
' Public Sub panMove_Leave()
' 
'   'panMove.Background = $iColor
'   'btnSide.Background = $iColor
'   'btnSide2.Background = $iColor
' 
' End

Public Sub btnSide_Draw()

  If Me.Parent.Design Or If Not $bTransparent Or If $bInside Then 
    
    DrawArrow(Last, $iOrientation)
  
    ' If $hArrow Then 
    '   Draw.Image($hArrow, (Last.W - $hArrow.W) / 2, (Last.H - $hArrow.H) / 2)
    ' Else
    '   S = Min(btnSide.W, btnSide.H)
    '   Draw.Style.Arrow((btnSide.W - S) \ 2, (btnSide.H - S) \ 2, S, S, $iArrowType)
    ' Endif
    
  Endif

End

Public Sub btnSide_Enter()

  Last.Refresh

End

Public Sub btnSide_Leave()

  Last.Refresh

End

Public Sub btnSide_MouseDown()

  'Last.Tag = 2
  'Last.Refresh

End

Public Sub HasSeparator() As Boolean
  
  Return $bSeparator
  
End

Public Sub SetSeparator(bVisible As Boolean)
  
  If $bSeparator = bVisible Then Return
  
  $bSeparator = bVisible
  RefreshAll
  'RefreshPanel
  
End

Private Sub UpdateBackground()

  ' If $bInside And If Not $bVisible Then
  '   panMove.Background = Color.SelectedBackground
  ' Else
  '  panMove.Background = Color.Default
  'Endif

End

Private Sub RefreshButtons()
  
  If $bTransparent Then
    If $bVisible Then
      btnSide.Refresh
      btnSide2.Refresh
    Else If $hShowButtonLeft Then
      $hShowButtonLeft.Refresh
      $hShowButtonRight.Refresh
    Endif
  Endif

End


Public Sub panMove_Enter()

  'Debug
  $bInside = True
  UpdateBackground
  RefreshButtons
  
End

Public Sub panMove_Leave()

  'Debug
  $bInside = False
  UpdateBackground
  RefreshButtons
  
End

Private Sub InvertOrientation(iOrient As Integer) As Integer
  
  Select Case iOrient
    Case Align.Left
      iOrient = Align.Right
    Case Align.Right
      iOrient = Align.Left
    Case Align.Top
      iOrient = Align.Bottom
    Case Align.Bottom
      iOrient = Align.Top
  End Select
  
  Return iOrient
  
End


Public Sub ShowButton_Draw()
  
  If $bTransparent And If Not $bInside And If Not Last.Hovered Then Return
  
  DrawArrow(Last, InvertOrientation($iOrientation))
  
End

Public Sub ShowButton_Enter()
  
  Last.Refresh
  
End

Public Sub ShowButton_Leave()
  
  Last.Refresh
  
End


Private Sub DrawArrow(hCtrl As Control, iOrient As Integer)

  Dim X, Y, W, H As Float
  
  X = hCtrl.W / 2
  Y = hCtrl.H / 2
  
  If hCtrl.W > hCtrl.H Then
    W = Desktop.Scale * 2 - 4
    H = Desktop.Scale - 2
  Else
    W = Desktop.Scale - 2
    H = Desktop.Scale * 2 - 4
  Endif
  
  X -= W / 2
  Y -= H / 2
  
  X += 1
  Y += 1
  W -= 2
  H -= 2
  
  If iOrient = Align.Left Or If iOrient = Align.Right Then
    Y += 1
    H -= 2
  Else
    X += 1
    W -= 2
  Endif
  
  Select Case iOrient
    
    Case Align.Right
      
      Paint.MoveTo(X, Y)
      Paint.LineTo(X + W, Y + H / 2)
      Paint.LineTo(X, Y + H)
    
    Case Align.Left
      
      Paint.MoveTo(X + W, Y)
      Paint.LineTo(X, Y + H / 2)
      Paint.LineTo(X + W, Y + H)
    
    Case Align.Bottom
      
      Paint.MoveTo(X, Y)
      Paint.LineTo(X + W / 2, Y + H)
      Paint.LineTo(X + W, Y)
    
    Case Align.Top
      
      Paint.MoveTo(X, Y + H)
      Paint.LineTo(X + W / 2, Y)
      Paint.LineTo(X + W, Y + H)
    
  End Select
  
  'Paint.Brush = Paint.Color(Color.SetAlpha(Color.TextBackground, 0))
  'Paint.LineWidth = 3
  'Paint.Stroke(True)
  Paint.Brush = Paint.Color(Color.SetAlpha(Color.TextForeground, 64))
  Paint.LineCap = Paint.LineCapRound
  Paint.LineJoin = Paint.LineJoinRound
  Paint.LineWidth = 2
  Paint.Stroke
  
End

Public Sub ShowButton_MouseDown()
  
  TogglePanel
  
End

Public Sub IsTransparent() As Boolean
  
  Return $bTransparent
  
End

Public Sub SetTransparent(bTransparent As Boolean)
  
  $bTransparent = bTransparent
  RefreshAll
  
End


Public Sub panMove_Menu()

  Dim hPopup, hMenu As Menu
  
  hPopup = New Menu(Me)
  
  hMenu = New Menu(hPopup) As "mnuHidden"
  hMenu.Text = ("Hidden")
  hMenu.Checked = IsHidden()
  
  hMenu = New Menu(hPopup) As "mnuTransparent"
  hMenu.Text = ("Transparent")
  hMenu.Checked = IsTransparent()
  
  hMenu = New Menu(hPopup)
  
  hMenu = New Menu(hPopup)
  hMenu.Text = ("Cancel")
  hMenu.Picture = Picture["icon:/small/close"]

  hPopup.Popup
  hPopup.Delete

End

Public Sub mnuHidden_Click()
  
  SetHidden(Not IsHidden())
  
End

Public Sub mnuTransparent_Click()
  
  SetTransparent(Not IsTransparent())
  
End

Public Sub GetMinSize() As Integer
  
  Return $iMinSize
  
End

Public Sub SetMinSize(iMinSize As Integer)
  
  $iMinSize = Max(Desktop.Scale, iMinSize)
  
End

