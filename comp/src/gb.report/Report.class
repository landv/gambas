' Gambas class file

CREATE
EXPORT
INHERITS ReportVBox
PRIVATE iCurPage AS Integer = 0
PRIVATE $iCount AS Integer = -1
PRIVATE $iResolution AS Integer
PRIVATE $bLayoutIsDirty AS Boolean = TRUE
PRIVATE $fZoom AS Float = 1.0
PROPERTY READ count AS Integer
PROPERTY Height AS String
PROPERTY Width AS String
PROPERTY Resolution AS Integer
PROPERTY Zoom AS Float
PRIVATE hData AS Object

EVENT Data()

PUBLIC SUB _New()
  object.Attach(ME, ME, "Report")
  ME.Width = 600
  ME.Height = 600
  ME._RelPage = 0
  
END

PUBLIC SUB Layout()
  IF NOT $bLayoutIsDirty THEN RETURN 
  MRTools.ResolutionAffichage = printer.Resolution / $iResolution
  $iCount = SUPER._SetGeometry(0, 0, MRTools.RealWidth(ME), MRTools.RealHeight(ME)) + 1
  MRTools.PageCount = $iCount
  $bLayoutIsDirty = FALSE
END


PUBLIC SUB Draw(Page AS Integer)
   
   IF $bLayoutIsDirty THEN Layout()
   
    IF page < 1 OR page > $iCount THEN 
      Error.Raise("This page does not exist")
    ENDIF
    DEC page
    ME._DrawBefore(Page, 0, 0)
    ME._Draw(Page, 0, 0)
    ME._DrawAfter(Page, 0, 0)
END

PRIVATE SUB FillPages(ctrl AS ReportContainer)

  DIM hChild AS Object
  DIM relHeight AS Integer
  FOR EACH hChild IN ctrl.Children
    hChild._Draw(ctrl._Left, ctrl._Top)
    IF hChild IS ReportContainer THEN FillPages(hChild)
  NEXT 

END


PRIVATE FUNCTION count_Read() AS Integer
  
  IF $bLayoutIsDirty THEN $iCount = -1
  
  RETURN $iCount

END

PRIVATE FUNCTION Height_Read() AS String

  RETURN SUPER.Height

END

PRIVATE SUB Height_Write(Value AS String)
  IF SUPER.Height <> Value THEN 
    SUPER.Height = Value
    $bLayoutIsDirty = TRUE
  ENDIF

END

PRIVATE FUNCTION Width_Read() AS String

  RETURN SUPER.Width

END

PRIVATE SUB Width_Write(Value AS String)
IF SUPER.Width <> Value THEN
  SUPER.Width = Value
  $bLayoutIsDirty = TRUE
ENDIF

END


PRIVATE FUNCTION Resolution_Read() AS Integer

  RETURN $iResolution

END

PRIVATE SUB Resolution_Write(Value AS Integer)
  IF $iResolution <> Value THEN
    $iResolution = Value
    $bLayoutIsDirty = TRUE
  ENDIF

END

PRIVATE FUNCTION Zoom_Read() AS Float

  RETURN $fZoom

END

PRIVATE SUB Zoom_Write(Value AS Float)

  $fZoom = Value

END

PUBLIC SUB Mosaic(Range AS String, Spacing AS String)

  DIM $fTempZ AS Float
  $fTempZ = $fZoom
  
  
  
END

PUBLIC SUB _Data()
  
  RAISE Data
  
END
