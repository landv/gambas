' Gambas class file

EXPORT
CREATE PRIVATE 
'Object Management

STATIC PUBLIC ObjectFromId AS NEW Collection
STATIC PUBLIC iCurPagePos AS Integer
STATIC PRIVATE $iLastId AS Integer

PRIVATE $iMyId AS Integer
PRIVATE $iParentId AS Integer
PRIVATE $iRelPage AS Integer
PRIVATE $vTag AS Variant
PRIVATE $fPadding AS Float
PROPERTY READ Id AS Integer
PROPERTY READ Parent AS ReportContainer
PROPERTY Tag AS Variant
PROPERTY Padding AS String

'Object properties
PRIVATE $fLeft AS Float = 0.0
PRIVATE $fTop AS Float = 0.0
PRIVATE $fWidth AS Float = 0.0
PRIVATE $fHeight AS Float = 0.0
PRIVATE $sHeightUnit AS String = "cm"
PRIVATE $sLeftUnit AS String = "cm"
PRIVATE $sWidthUnit AS String = "cm"
PRIVATE $sTopUnit AS String = "cm"
PRIVATE $sPadding AS String = "cm"

PROPERTY READ _Top AS Float

PROPERTY READ _Height AS Float

PROPERTY READ _Width AS Float

PROPERTY READ _Left AS Float

PROPERTY READ _Padding AS Float





PRIVATE $iForeColor AS Integer = Color.Black
PRIVATE $iBackColor AS Integer = Color.White
PRIVATE $iFillColor AS Integer = Color.Black
PRIVATE $iFillStyle AS Integer = Fill.None
PRIVATE $iLineWidth AS Integer = 1
PRIVATE $iLineStyle AS Integer = Line.None
PRIVATE $iVisible AS Boolean = TRUE
PRIVATE iExpand AS Boolean
PRIVATE $hFont AS NEW Font

PROPERTY Left AS String
PROPERTY Top AS String
PROPERTY Width AS String
PROPERTY Height AS String
PROPERTY ForeColor AS Integer
PROPERTY BackColor AS Integer
PROPERTY FillColor AS Integer
PROPERTY FillStyle AS Integer
PROPERTY LineWidth AS Integer
PROPERTY LineStyle AS Integer
PROPERTY Visible AS Boolean
PROPERTY {Font} AS Font

'Arrangement
PRIVATE $iExpand AS Integer
PROPERTY Expand AS Integer



PUBLIC SUB _New(OPTIONAL Parent AS ReportContainer = NULL)
  
  $iMyId = $iLastId
  INC $iLastId
  IF IsNull(Parent) THEN 
    $iParentId = -1
  ELSE
    $iParentId = Parent.Id
    Parent._Add(ME)
  ENDIF
  
END


PRIVATE FUNCTION Id_Read() AS Integer

  RETURN $iMyId

END

PRIVATE FUNCTION Parent_Read() AS ReportContainer

  RETURN ReportControl.ObjectFromId[$iParentId]

END

PRIVATE FUNCTION Left_Read() AS String

  RETURN Units.CmToUnit($fLeft, $sLeftUnit) & " " & $sLeftUnit

END

PRIVATE SUB Left_Write(Value AS String)
  DIM sp AS TSizeParse
  sp = MRTools.ScanValue(value)
  $fLeft = Units.UnitToCm(Value, sp.Unit)
  $sLeftUnit = sp.Unit

END

PRIVATE FUNCTION Top_Read() AS String

  RETURN Units.CmToUnit($fTop, $sTopUnit) & " " & $sTopUnit

END

PRIVATE SUB Top_Write(Value AS String)
  DIM sp AS TSizeParse
  sp = MRTools.ScanValue(value)
  
  $fTop = Units.UnitToCm(Value, sp.Unit)
  $sTopUnit = sp.Unit

END

PRIVATE FUNCTION Width_Read() AS String

  RETURN Units.CmToUnit($fWidth, $sLeftUnit) & " " & $sWidthUnit

END

PRIVATE SUB Width_Write(Value AS String)
  DIM sp AS TSizeParse
  sp = MRTools.ScanValue(value)
  
  $fWidth = Units.UnitToCm(Value, sp.Unit)
  $sWidthUnit = sp.Unit
  
END

PRIVATE FUNCTION Height_Read() AS String

  RETURN Units.CmToUnit($fHeight, $sHeightUnit) & " " & $sHeightUnit

END

PRIVATE SUB Height_Write(Value AS String)
  DIM sp AS TSizeParse
  sp = MRTools.ScanValue(value)
  $fHeight = Units.UnitToCm(Value, sp.Unit)
  $sHeightUnit = sp.Unit
  
END

PRIVATE FUNCTION ForeColor_Read() AS Integer

  RETURN $iForeColor

END

PRIVATE SUB ForeColor_Write(Value AS Integer)

  $iForeColor = Value

END

PRIVATE FUNCTION BackColor_Read() AS Integer

  RETURN $iBackColor

END

PRIVATE SUB BackColor_Write(Value AS Integer)

  $iBackColor = Value

END

PRIVATE FUNCTION FillColor_Read() AS Integer

  RETURN $iFillColor

END

PRIVATE SUB FillColor_Write(Value AS Integer)

  $iFillColor = Value

END

PRIVATE FUNCTION FillStyle_Read() AS Integer

  RETURN $iFillStyle

END

PRIVATE SUB FillStyle_Write(Value AS Integer)

  $iFillStyle = Value

END

PRIVATE FUNCTION LineWidth_Read() AS Integer

  RETURN $iLineWidth

END

PRIVATE SUB LineWidth_Write(Value AS Integer)

  $iLineWidth = Value

END

PRIVATE FUNCTION LineStyle_Read() AS Integer

  RETURN $iLineStyle

END

PRIVATE SUB LineStyle_Write(Value AS Integer)

  $iLineStyle = Value

END

PRIVATE FUNCTION Expand_Read() AS Integer

  RETURN $iExpand 

END

PRIVATE SUB Expand_Write(Value AS Integer)

  $iExpand = Value

END

PUBLIC SUB _GetSizeHints(AvailableW AS Integer, AvailableH AS Integer, TotalWidth AS Integer, TotalHeight AS Integer) AS Integer

  Error.Raise("Something goes wrong the _GetSizeHints is not correctly implemented")

END

' PUBLIC SUB _DrawBefore(Page AS Integer, x AS Integer, y AS Integer)
'   
' 
'     'Draw.Font.Size *= (Printer.Resolution / Draw.Resolution)
'   'Draw the background
'   IF ME.FillStyle <> fill.none THEN 
'     Draw.FillStyle = $iFillStyle
'     Draw.BackColor = $iBackColor
'     draw.FillColor = $iFillColor
'     Draw.LineStyle = line.None
'     Draw.Rect((x + _RealLeft) * Report.Zoom, (y + _RealTop) * Report.Zoom, _RealWidth * Report.Zoom, _RealHeight * Report.Zoom)
'   ENDIF
' END

PUBLIC SUB _DrawBefore(Page AS Integer, X AS Integer, Y AS Integer, hControl AS TControl, VirtualId AS Integer)

  DIM X1, Y1, X2, Y2 AS Integer
  
  

  X1 = (x + hControl.RealLeft) * MRTools.ReportZoom
  Y1 = (y + hControl.RealTop) * MRTools.ReportZoom
  X2 = (x + hControl.RealLeft + hControl.RealWidth - 1) * MRTools.ReportZoom
  Y2 = (y + hControl.RealTop + hControl.RealHeight - 1) * MRTools.ReportZoom

  'Draw.Line(X1, Y1, X2, Y2)
  'Draw.Line(X1, Y2, X2, Y1)

  IF Report.Debug THEN
    'IF ME.FillStyle = Fill.None THEN 'RETURN   
      Draw.LineStyle = Line.Dot
      Draw.ForeColor = Color.Black
      Draw.FillStyle = fill.None
      Draw.Rect(X1, Y1, X2 - X1 + 2, Y2 - Y1 + 2)
    'ENDIF
  ELSE 
    
    IF ME.FillStyle = fill.None THEN RETURN 
    Draw.FillStyle = $iFillStyle
    Draw.BackColor = $iBackColor
    Draw.ForeColor = $iForeColor
    Draw.FillColor = $iFillColor
    Draw.LineStyle = $iLineStyle 'Line.Solid
    Draw.Rect(X1, Y1, X2 - X1 + 2, Y2 - Y1 + 2)
  ENDIF 
  
  
  
    
END

PUBLIC SUB _Draw(Page AS Integer, X AS Integer, Y AS Integer, hControl AS TControl, VirtualId AS Integer)
  

    
  
END

PUBLIC SUB _DrawAfter(Page AS Integer, X AS Integer, Y AS Integer, hControl AS TControl, VirtualId AS Integer)
  
  DIM X1, Y1, X2, Y2 AS Integer

  X1 = (x + hControl.RealLeft) * MRTools.ReportZoom
  Y1 = (y + hControl.RealTop) * MRTools.ReportZoom
  X2 = (x + hControl.RealLeft + hControl.RealWidth - 1) * MRTools.ReportZoom
  Y2 = (y + hControl.RealTop + hControl.RealHeight - 1) * MRTools.ReportZoom

  'Draw the foreground
    'DRAW.ForeColor = COLOR.Red
    'ME.LineStyle = line.Solid
    IF ME.LineStyle <> Line.None THEN 
      Draw.LineStyle = $iLineStyle
      Draw.LineWidth = $iLineWidth
      Draw.ForeColor = $iForeColor
      draw.FillStyle = Fill.None
'< < < < < < < .mine
      'Draw.Rect((x + _RealLeft) * MRTools.ReportZoom, (y + _RealTop) * MRTools.ReportZoom, _RealWidth * MRTools.ReportZoom, _RealHeight * MRTools.ReportZoom)
'== == == =
      Draw.Rect(X1, Y1, X2 - X1 + 2, Y2 - Y1 + 2)
'> > > > > > > .r206
    ENDIF
  
END

PRIVATE FUNCTION Visible_Read() AS Boolean

  RETURN $iVisible  

END

PRIVATE SUB Visible_Write(Value AS Boolean)

  $iVisible = Value

END

PUBLIC SUB Move(X AS Float, Y AS Float, W AS Float, H AS Float)
  
  $fLeft = X
  $fTop = Y
  $fWidth = W
  $fHeight = H
  
END

PRIVATE FUNCTION Tag_Read() AS Variant

  RETURN $vTag  

END

PRIVATE SUB Tag_Write(Value AS Variant)

  $vTag = Value

END


PRIVATE FUNCTION Font_Read() AS Font

  RETURN $hFont

END

PRIVATE SUB Font_Write(Value AS Font)

  $hFont = Value

END

PRIVATE FUNCTION Padding_Read() AS String

  RETURN Units.CmToUnit($fPadding, $sPadding) & " " & $sPadding
  
END

PRIVATE SUB Padding_Write(Value AS String)
  DIM sp AS TSizeParse
  sp = MRTools.ScanValue(value)
  $fPadding = Units.UnitToCm(Value, sp.Unit)
  $sPadding = sp.Unit

END



PRIVATE FUNCTION _Top_Read() AS Float

  RETURN $fTop

END

PRIVATE FUNCTION _Height_Read() AS Float

  RETURN $fHeight

END

PRIVATE FUNCTION _Width_Read() AS Float

  RETURN $fWidth

END

PRIVATE FUNCTION _Left_Read() AS Float

  RETURN $fLeft

END

PRIVATE FUNCTION _Padding_Read() AS Float

  RETURN $fPadding

END

PUBLIC SUB _Free()
  
  
  
END

PUBLIC FUNCTION _SetChildGeometry(X AS Float, Y AS Float, W AS Float, H AS Float, ContPage AS Integer) AS Float
  
  
  
END

