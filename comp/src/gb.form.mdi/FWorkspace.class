' Gambas class file

STATIC PRIVATE $hTile AS Picture

PRIVATE $aWindow AS NEW Object[]
'PRIVATE $aWatcher AS NEW Object[]
PRIVATE $hCurrent AS CWindow
PRIVATE $bMove AS Boolean
PRIVATE $X AS Integer
PRIVATE $Y AS Integer
PRIVATE $W AS Integer
PRIVATE $H AS Integer
PRIVATE $bShowTitle AS Boolean
PRIVATE $iNoWait AS Integer
PRIVATE $hWatcher AS Watcher

PUBLIC SUB _new()
  
  IF NOT $hTile THEN $hTile = Picture["img/hash.png"]
  $hWatcher = NEW Watcher(panChild) AS "panChild"
    
END

PUBLIC FUNCTION GetActiveWindow() AS Window

  IF $hCurrent THEN RETURN $hCurrent.Window
  
END

PRIVATE FUNCTION GetIndex(hWin AS Window) AS Integer
  
  DIM iInd AS Integer
  
  FOR iInd = 0 TO $aWindow.Max
    IF $aWindow[iInd].Window = hWin THEN RETURN iInd
  NEXT
  
  RETURN -1
  
END

PUBLIC SUB Add(hWin AS Window, bResize AS Boolean, OPTIONAL iGrid AS Integer)
  
  DIM iInd AS Integer
  DIM hScrollview AS ScrollView
  DIM hWatcher AS Watcher
  DIM hWindow AS CWindow

  IF GetIndex(hWin) >= 0 THEN RETURN

  IF bResize THEN  
    hWin.Reparent(dwgBorder)
  ELSE
    hWin.Reparent(panWorkspace)
  ENDIF
  
  hWin.Hide
  
  hWindow = NEW CWindow
  hWindow.Window = hWin
  hWindow.Resizable = bResize
  hWindow.Grid = iGrid
  
  $aWindow.Add(hWindow)
  
  IF tabWorkspace.Visible THEN
  
    iInd = tabWorkspace.Count
    Object.Lock(tabWorkspace)
    INC tabWorkspace.Count
    tabWorkspace.Index = iInd
    Object.Unlock(tabWorkspace)
    Form_Resize
    
  ELSE

    btnTabClose.Show
    tabWorkspace.Show
    panTitle.Visible = $bShowTitle
    Form_Resize

  ENDIF
  
  hWindow.Watcher = NEW Watcher(hWin) AS "Watcher"
  UpdateTitle
  Activate
    
END

PUBLIC SUB SetResizable(hWin AS Window, bResize AS Boolean, OPTIONAL iGrid AS Integer)
  
  DIM iInd AS Integer = GetIndex(hWin)
  DIM hWindow AS CWindow
  
  IF iInd < 0 THEN RETURN
  
  hWindow = $aWindow[iInd]

  hWindow.Resizable = bResize
  hWindow.Grid = iGrid
  
  IF bResize THEN  
    hWin.Reparent(dwgBorder)
  ELSE
    hWin.Reparent(panWorkspace)
  ENDIF
  
  IF hWindow = $hCurrent THEN Activate
  
END

PUBLIC SUB Remove(hWin AS Window)
  
  DIM iInd AS Integer = GetIndex(hWin)

  IF hWin.Close() THEN RETURN

  INC $iNoWait
  
  IF $hCurrent = $aWindow[iInd] THEN $hCurrent = NULL
  $aWindow.Remove(iInd)  
  
  IF $aWindow.Count THEN
    IF iInd = 0 THEN 
      Object.Lock(tabWorkspace)
      tabWorkspace.Index = 1
      panChild.Reparent(tabWorkspace)
      tabWorkspace.Index = 0
      Object.Unlock(tabWorkspace)
    ENDIF
    tabWorkspace[iInd].Delete
  ELSE
    tabWorkspace.Hide
    btnTabClose.Hide
    Form_Resize
  ENDIF
  
  Activate
  
  DEC $iNoWait
  
END

PRIVATE SUB UpdateTitle(OPTIONAL hWin AS Window)
  
  DIM iInd AS Integer

  IF NOT hWin THEN
    IF NOT $hCurrent THEN RETURN
    hWin = $hCurrent.Window
  ENDIF
  
  iInd = GetIndex(hWin)

  WITH hWin

    tabWorkspace[iInd].Text = .Text
    tabWorkspace[iInd].Picture = .Icon
    IF $hCurrent AND IF $hCurrent.Window = hWin THEN
      lblTitle.Text = " " & .Text
      imgIcon.Picture = .Icon
    ENDIF
  
  END WITH
  
END


PUBLIC SUB Watcher_Title()

  'DEBUG LAST;; LAST.Control
  'IF NOT $hCurrent THEN RETURN
  'IF LAST.Control <> $hCurrent.Window THEN RETURN
  UpdateTitle(LAST.Control)
    
END

PUBLIC SUB Watcher_Resize()
  
  'DEBUG LAST;; LAST.Control
  IF NOT $hCurrent THEN RETURN
  IF LAST.Control <> $hCurrent.Window THEN RETURN
  MoveHandle 
  
END

PUBLIC SUB Watcher_Icon()

  'DEBUG LAST;; LAST.Control
  Watcher_Title  
  
END

PUBLIC SUB Watcher_Close()
  
  'DEBUG
  Remove(LAST.Control)
  
END


PRIVATE SUB MoveHandle()

  DIM hWin AS Window = $hCurrent.Window
  
  panRight.Move(hWin.Width, Max(0, (hWin.Height - panRight.Height) / 2))
  panDown.Move(Max(0, (hWin.Width - panRight.Width) / 2), hWin.Height)
  panRightDown.Move(hWin.Width, hWin.Height)
  dwgBorder.Move(0, 0, hWin.Width + 4, hWin.Height + 4)
  
  dwgBorder.Lower
  panRight.Raise
  panDown.Raise
  panRightDown.Raise
  
END

PRIVATE SUB GetParent() AS Workspace
  
  RETURN ME.Parent
  
END



PUBLIC SUB Activate(OPTIONAL hWindow AS Window)
  
  DIM hOld AS CWindow
  DIM hWin AS CWindow
  
  IF $aWindow.Count THEN 
  
    IF hWindow THEN
      TRY tabWorkspace.Index = GetIndex(hWindow)
      RETURN
    ENDIF
  
    hWin = $aWindow[tabWorkspace.Index]
    hOld = $hCurrent
  
    $hCurrent = hWin
    
    IF $hCurrent.Resizable THEN
      $hCurrent.Window.Move(0, 0)
      MoveHandle
      svwWorkspace.Raise
    ELSE
      panWorkspace.Raise
    ENDIF
    'WITH tabWorkspace
    '  $hCurrent.Move(.X + .ClientX, .Y + .ClientY, .ClientW, .ClientH)
    'END WITH
    
    WITH $hCurrent.Window
      .Show
      .Raise
      .SetFocus
    END WITH
    
    IF hOld AND IF hOld <> hWin THEN 
      IF $iNoWait = 0 THEN WAIT
      hOld.Window.Hide
      'WAIT 0.2
    ENDIF
    
    UpdateTitle
    
  ENDIF
  
  GetParent()._Activate
  
END

PUBLIC SUB tabWorkspace_Click()
  
  Activate()
  
END


PUBLIC SUB Form_Resize()

  DIM H AS Integer

  IF tabWorkspace.Visible THEN
    H = tabWorkspace.ClientY - 2
    'H = panChild.ScreenY - tabWorkspace.ScreenY
    IF btnTabClose.W <> H OR btnTabClose.H <> H THEN 
      btnTabClose.Resize(H - 2, H - 2)
      btnTabClose.Picture = Picture["icon:/" & (H - 10) & "/close"]
    ENDIF
    btnTabClose.Move(ME.ClientW - H + 1, 1)
    tabWorkspace.Move(0, 0, ME.ClientW - H, ME.ClientH)
    WITH tabWorkspace
      IF $bShowTitle THEN
        panTitle.Move(.X, H, .W + btnTabClose.W, panTitle.H)
        svwWorkspace.Move(.X, panTitle.H + H, .W + H, .H - panTitle.H - H)
        panWorkspace.Move(.X, panTitle.H + H, .W + H, .H - panTitle.H - H)
      ELSE 
        svwWorkspace.Move(.X, H, .W + H, .H - H)
        panWorkspace.Move(.X, H, .W + H, .H - H)
      ENDIF 
    END WITH 
    panWorkspace.BackColor = Color.Background
    panWorkspace.Border = Border.Raised
  ELSE
    svwWorkspace.Move(0, 0, ME.ClientW, ME.ClientH)
    panWorkspace.Move(0, 0, ME.ClientW, ME.ClientH)
    panWorkspace.BackColor = Color.Gray
    panWorkspace.Border = Border.None
    panWorkspace.Raise
  ENDIF

'   WITH tabWorkspace
'     DEBUG ME.W;; ME.H;; "/";; tabWorkspace.W;; tabWorkspace.H;; "/";; .ClientW;; .ClientH;; .ClientX;; .ClientY
'   END WITH 
  
END

PUBLIC SUB btnClose_Click()

  $aWindow[tabWorkspace.Index].Window.Close

END


PUBLIC SUB Handle_MouseDown()

  $bMove = TRUE  
  $X = Mouse.ScreenX
  $Y = Mouse.ScreenY
  $W = $hCurrent.Window.W
  $H = $hCurrent.Window.H
  
  'DEBUG Mouse.ScreenX;; Mouse.ScreenY
  'DEBUG $X;; $Y

END

PUBLIC SUB Handle_MouseMove()

  DIM W, H, G AS Integer
  DIM hPanel AS Panel

  IF NOT $bMove THEN RETURN
  
  hPanel = LAST

  WITH $hCurrent.Window

    W = .W
    H = .H

    'DEBUG "(";; W;; H;; ") + (";; Mouse.ScreenX;; Mouse.ScreenY;; ") -> ";

    IF hPanel <> panRight THEN H = $H + Mouse.ScreenY - $Y
    IF hPanel <> panDown THEN W = $W + Mouse.ScreenX - $X
    
    W = Max(1, W)
    H = Max(1, H)

    IF NOT Mouse.Shift THEN    
      G = $hCurrent.Grid 
      IF G THEN
        W = Max(1, Int(W / G + 0.5)) * G
        H = Max(1, Int(H / G + 0.5)) * G
      ENDIF
    ENDIF 
    
    'PRINT #File.Err, "(";; W;; H;; ")"
    
    .Resize(W, H)
  
  END WITH
  
  $bMove = FALSE
  MoveHandle  
  $bMove = TRUE

END

PUBLIC SUB Handle_MouseUp()

  $bMove = FALSE  

END

PUBLIC FUNCTION GetWindows() AS Object[]
  
  DIM aWin AS NEW Object[]
  DIM hWindow AS CWindow
  
  FOR EACH hWindow IN $aWindow
    aWin.Add(hWindow.Window)
  NEXT  
  
  RETURN aWin
  
END

PUBLIC SUB dwgBorder_Draw()

  RETURN
  Draw.LineStyle = Line.Solid
  Draw.LineWidth = 4
  Draw.ForeColor = Color.SelectedBackground
  Draw.Line(dwgBorder.W - 2, 0, dwgBorder.W - 2, dwgBorder.H)
  Draw.Line(0, dwgBorder.H - 2, dwgBorder.W, dwgBorder.H - 2)
  'Draw.Tile($hTile, dwgBorder.W - 8, 0, 8, dwgBorder.H)
  'Draw.Tile($hTile, 0, dwgBorder.H - 8, dwgBorder.W, 8)

END

PUBLIC SUB imgIcon_DblClick()

  btnClose_Click

END

PUBLIC SUB lblTitle_MouseDown()

  Activate  

END

PUBLIC SUB IsShowTitle() AS Boolean
  
  RETURN $bShowTitle
  
END

PUBLIC SUB SetShowTitle(bVal AS Boolean)
  
  $bShowTitle = bVal
  panTitle.Visible = bVal
  
END

PUBLIC SUB tabWorkspace_MouseUp()

  Activate

END

PUBLIC SUB tabWorkspace_Menu()

  GetParent()._Menu

END

PUBLIC SUB tabWorkspace_MouseWheel()

  IF Mouse.Delta < 0 THEN 
    tabWorkspace.Index = (tabWorkspace.Index + 1) MOD tabWorkspace.Count
  ELSE 
    tabWorkspace.Index = (tabWorkspace.Index + tabWorkspace.Count - 1) MOD tabWorkspace.Count
  ENDIF  

END

PUBLIC SUB panChild_Move()

  Form_Resize  

END

PUBLIC SUB panChild_Resize()

  Form_Resize  

END
