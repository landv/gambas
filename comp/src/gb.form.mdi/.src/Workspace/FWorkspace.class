' Gambas class file

Public CloseButton As Boolean 

Private $aWindow As New CWindow[]
Private $hCurrent As CWindow
Private $hLast As CWindow
Private $bMove As Boolean
Private $X As Integer
Private $Y As Integer
Private $W As Integer
Private $H As Integer
Private $iNoWait As Integer
Private $iBackground As Integer = Color.Default
Private $bNoClose As Boolean
Private $iLock As Integer
Private $bBorder As Boolean = True
Private $nDetach As Integer

Private Enum CLOSE_ALL, CLOSE_OTHER, CLOSE_RIGHT
Private $hImage As Image

' Public Sub _new()
'   
'   If Not $hTile Then $hTile = Picture["img/hash.png"]
'   '$hWatcher = NEW Watcher(panChild) AS "panChild"
'   'TitleBar = tabWorkspace
'   '$bLogo = Application.Name = "gambas" & System.Version
'   ' If $bLogo Then 
'   '   picLogo.Picture = Picture.Load("img/logo.png")
'   '   picLogo.Resize(picLogo.Picture.W, picLogo.Picture.H)
'   ' Endif
' 
' End

Public Sub Form_Open()
  
  UpdateSize
  
End


Public Function GetActiveWindow() As Window

  If $hCurrent Then Return $hCurrent.Window
  
End

Private Function GetIndex(hWin As Window) As Integer
  
  Dim iInd As Integer
  
  For iInd = 0 To $aWindow.Max
    If $aWindow[iInd].Window = hWin Then 
      'DEBUG $aWindow[iInd];; "=>";; iInd
      Return iInd
    Endif
  Next
  
  Return -1
  
End

Private Sub GetWorkspace(hWindow As Window) As Workspace
  
  Dim hCtrl As Control = hWindow
  
  While hCtrl
    If hCtrl Is Workspace Then Return hCtrl
    hCtrl = hCtrl.Parent
  Wend
  
End

Public Sub Add(hWin As Window, Optional bResize As Boolean, Optional iGrid As Integer)
  
  Dim iInd As Integer
  Dim hWindow As CWindow
  Dim hPrev As Workspace
  Dim hObserver As Observer
  Dim hTabButton As Container

  If GetIndex(hWin) >= 0 Then Return

  hPrev = GetWorkspace(hWin)
  If hPrev Then RemoveWindow(hWin)
  
  If bResize Then  
    hWin.Reparent(dwgBorder)
  Else
    hWin.Reparent(panWorkspace)
  Endif
  
  ' We must be sure that the window is opened, otherwise CheckWindow() will remove it.
  hWin.Show
  hWin.Hide
  
  hWindow = New CWindow
  hWindow.Window = hWin
  hWindow.Resizable = bResize
  hWindow.Grid = iGrid
  
  $aWindow.Add(hWindow)
  
  If $aWindow.Count > 1 Then
  
    iInd = tabWorkspace.Count
    Object.Lock(tabWorkspace)
    
    Inc tabWorkspace.Count
    tabWorkspace.Index = iInd
    tabWorkspace.Current.Text = ""
    
    Object.Unlock(tabWorkspace)
    
    UpdateSize
    
  Else

    If $iLock <= 0 Then ShowTabStrip

  Endif
  
  'DEBUG "ADD "; hWin
  
  hTabButton = tabWorkspace._GetButton(tabWorkspace.Count - 1)
  hObserver = New Observer(hTabButton.Children[0]) As "Button"
  
  hWindow.Observer = New Observer(hWin, True) As "Watcher"
  UpdateTitle(hWin)
  ActivateWindow()
    
End

' Private Sub GetTopLevelWindow(hCtrl As Control) As Window
' 
'   Dim hWin As Window
'   
'   Do
'     hWin = hCtrl.Window
'     If hWin.TopLevel Then Return hWin
'     hCtrl = hWin.Parent
'   Loop
' 
' End

Public Sub Detach(hWin As Window)
  
  Dim iInd As Integer = GetIndex(hWin)
  Dim hWindow As CWindow
  
  If iInd < 0 Then Error.Raise("Unknown window")
  If $nDetach = $aWindow.Max Then Error.Raise("Cannot detach the last window")
  
  hWindow = $aWindow[iInd]
  If hWindow.Detached Then Return

  tabWorkspace[iInd].Visible = False
  'hWin.Utility = True
  hWin.Reparent(Null)
  hWin.Show
  
  hWindow.Detached = True
  Inc $nDetach
    
  GetParent()._RaiseDetach(hWin)
  
End

Public Sub Attach(hWin As Window)
  
  Dim iInd As Integer = GetIndex(hWin)
  Dim hWindow As CWindow
  
  If iInd < 0 Then Error.Raise("Unknown window")
  
  hWindow = $aWindow[iInd]
  If Not hWindow.Detached Then Return

  tabWorkspace[iInd].Visible = True
  'hWin.Utility = False
  hWin.Reparent(panWorkspace)
  If tabWorkspace.Index = iInd Then hWin.Show
  
  hWindow.Detached = False
  Dec $nDetach
  
  ActivateWindow()
  
  GetParent()._RaiseAttach(hWin)
    
End


Public Sub SetResizable(hWin As Window, bResize As Boolean, Optional iGrid As Integer)
  
  Dim iInd As Integer = GetIndex(hWin)
  Dim hWindow As CWindow
  
  If iInd < 0 Then Return
  
  hWindow = $aWindow[iInd]

  hWindow.Resizable = bResize
  hWindow.Grid = iGrid
  
  If bResize Then  
    hWin.Reparent(dwgBorder)
  Else
    hWin.Reparent(panWorkspace)
  Endif
  
  If hWindow = $hCurrent Then ActivateWindow()
  
End

Public Sub Exist(hWin As Window) As Boolean
  
  Return GetIndex(hWin) >= 0
  
End


Private Sub RemoveWindow(hWin As Window, Optional bClose As Boolean)

  Dim hWindow As CWindow  
  Dim iInd As Integer = GetIndex(hWin)

  If iInd < 0 Then Return

  If bClose Then
    If Object.IsValid(hWin) And If Not hWin.Closed Then
      If hWin.Close() Then Return
    Endif
  Endif

  Inc $iNoWait

  hWindow = $aWindow[iInd]
  If hWindow.Detached Then Dec $nDetach

  If $hCurrent = hWindow Then $hCurrent = Null
  If $hLast = hWindow Then $hLast = Null
  
  $aWindow.Remove(iInd)  
  
  If $aWindow.Count Then
    If iInd = 0 Then 
      Object.Lock(tabWorkspace)
      tabWorkspace.Index = 1
      'panChild.Reparent(tabWorkspace)
      tabWorkspace.Index = 0
      Object.Unlock(tabWorkspace)
    Endif
    tabWorkspace[iInd].Delete
  Else
    HideTabStrip
  Endif
  
  If $hCurrent Then
    ActivateWindow($hCurrent.Window)
  Else
    ActivateWindow
  Endif
  
  Dec $iNoWait
  
End

Public Sub Remove((Window) As Window)
  
  RemoveWindow(Window)
  
End

Private Sub UpdateTitleFromIndex(iInd As Integer)
  
  Dim hObject As Object
  Dim sRichText As String
  
  With $aWindow[iInd].Window

    hObject = $aWindow[iInd].Window 
    $aWindow[iInd].Text = .Text 
    Try sRichText = hObject.RichText    
    If sRichText Then 
      tabWorkspace[iInd].RichText = sRichText
    Else
      tabWorkspace[iInd].Text = .Text
    Endif

    tabWorkspace[iInd].Picture = .Icon
    ' If $hCurrent And If $hCurrent.Window = hWin Then
    '   lblTitle.Text = " " & .Text
    '   imgIcon.Picture = .Icon
    ' Endif
  
  End With
  
End


Private Sub UpdateTitle(Optional hWin As Window)
  
  Dim iInd As Integer

  If Not hWin Then
    If Not $hCurrent Then Return
    hWin = $hCurrent.Window
  Endif
  
  iInd = GetIndex(hWin)
  If iInd < 0 Then Return
  
  UpdateTitleFromIndex(iInd)

End


Public Sub Watcher_Title()

  'DEBUG LAST.Name;; LAST.Title
  'IF NOT $hCurrent THEN RETURN
  'IF LAST.Control <> $hCurrent.Window THEN RETURN
  UpdateTitle(Last)
    
End

Public Sub Watcher_Resize()
  
  'DEBUG LAST;; LAST.Control
  If Not $hCurrent Then Return
  'IF LAST.Control <> $hCurrent.Window THEN RETURN
  MoveHandle 
  
End

Public Sub Watcher_Icon()

  'DEBUG LAST;; LAST.Control
  Watcher_Title  
  
End

Public Sub Watcher_Activate()
  
  ActivateWindow(Last)
  
End


Public Sub Watcher_Close()
  
  Dim hWin As Window = Last
  RemoveWindow(hWin)
  
End

Private Sub CheckWindow()
  
  Dim hWindow As CWindow
  Dim iInd As Integer
  
  While iInd < $aWindow.Count
    hWindow = $aWindow[iInd]
    If Object.IsValid(hWindow.Window) And If Not hWindow.Window.Closed Then 
      Inc iInd
      Continue
    Endif
    RemoveWindow(hWindow.Window)
  Wend
  
End


Private Sub MoveHandle()

  ' Dim hWin As Window = $hCurrent.Window
  ' 
  ' panRight.Move(hWin.Width, Max(0, (hWin.Height - panRight.Height) / 2))
  ' panDown.Move(Max(0, (hWin.Width - panRight.Width) / 2), hWin.Height)
  ' panRightDown.Move(hWin.Width, hWin.Height)
  ' dwgBorder.Move(0, 0, hWin.Width + 4, hWin.Height + 4)
  ' 
  ' dwgBorder.Lower
  ' panRight.Raise
  ' panDown.Raise
  ' panRightDown.Raise
  
End

Private Sub GetParent() As Workspace
  
  Return Me.Parent
  
End

' Private Sub IsDetached(hWindow As Window) As Boolean
' 
'   Dim iInd As Integer
'   
'   iInd = GetIndex(hWindow)
'   If iInd < 0 Then Return
'   Return Not tabWorkspace[iInd].Visible
'   
' End


Public Sub ActivateWindow(Optional hWindow As Window)
  
  Dim hWin As CWindow
  Dim iInd As Integer

  'IF $iLock > 0 THEN RETURN
  
  If $aWindow.Count Then 
  
    'DEBUG "ACTIVATE "; $hCurrent;; "->";;
    ' IF hWindow THEN 
    '   ERROR hWindow
    ' ELSE 
    '   ERROR $aWindow[tabWorkspace.Index].Window
    ' ENDIF
  
    If hWindow Then
      iInd = GetIndex(hWindow)
      If Not $aWindow[iInd].Detached Then
        Try tabWorkspace.Index = iInd
        Return
      Endif
    Else
      iInd = tabWorkspace.Index
    Endif
    
    hWin = $aWindow[iInd]
    If Not Object.IsValid(hWin.Window) Then Return

    $hCurrent = hWin
    
    'WITH tabWorkspace
    '  $hCurrent.Move(.X + .ClientX, .Y + .ClientY, .ClientW, .ClientH)
    'END WITH
    
    If $iLock = 0 Then
    
      If $hCurrent.Resizable Then
        $hCurrent.Window.Move(0, 0)
        MoveHandle
        svwWorkspace.Raise
      Else
        panWorkspace.Raise
      Endif
      
      With $hCurrent.Window
        If $hCurrent.Detached Then
          .Raise
        Else
          .Show
        Endif
        '.Raise
        If Not Application.ActiveControl Or If Application.ActiveControl.Window <> $hCurrent.Window Then
          .SetFocus
        Endif
      End With
      
      If Not $hCurrent.Detached And If $hCurrent <> $hLast Then 
        
        If $hLast Then
          $bNoClose = True
          $hLast.Window.Hide
          $bNoClose = False
        Endif
        $hLast = $hCurrent
        
      Endif
      
      UpdateTitle

    Endif 
        
  Endif

  If $iLock = 0 Then GetParent()._Activate
  
End

Public Sub tabWorkspace_Click()
  
  ActivateWindow()
  
End


Public Sub UpdateSize()

  Dim Y, H As Integer
  Dim W As Integer
  Dim X As Integer

  If tabWorkspace.Visible Then

    If imgBackground.Visible Then
      Me.Background = Color.Default
      imgBackground.Hide
      panWorkspace.Background = Color.Background
      'panWorkspace.Border = If($bBorder, Border.Plain, Border.None)
    Endif
    'If $bLogo Then picLogo.Hide
    
    With tabWorkspace
      
      X = .ClientX
      Y = .ClientY
      H = .ClientH
      W = .ClientW
      
      panWorkspace.Move(X, Y, W, H)
      svwWorkspace.Move(X, Y, W, H)
      
    End With
      

  Else

    svwWorkspace.Move(0, 0, Me.ClientW, Me.ClientH)
    panWorkspace.Move(0, 0, Me.ClientW, Me.ClientH)
    
    Me.Background = If($iBackground = Color.Default, Color.Merge(Color.Background, Color.Foreground), $iBackground) 
    imgBackground.Background = Me.Background
    If Not imgBackground.Visible Then
      imgBackground.Show
      panWorkspace.Border = Border.None
      panWorkspace.Raise
    Endif

  Endif

  If CloseButton Then 
    tabWorkspace.CloseButton = $aWindow.Count >= 1
  Else 
    tabWorkspace.CloseButton = False
  Endif
  
  'DEBUG tabWorkspace.Visible;; "Index =";; tabWorkspace.Index;; "ClientY =";; tabWorkspace.ClientY

  ' WITH tabWorkspace
  '   DEBUG ME.W;; ME.H;; "/";; tabWorkspace.W;; tabWorkspace.H;; "/";; .ClientW;; .ClientH;; .ClientX;; .ClientY
  ' END WITH 
  
End

Public Sub mnuClose_Click()

  $aWindow[tabWorkspace.Index].Window.Close
  'CheckWindow

End

Private Sub CloseWindows(iMode As Integer)

  Dim hWindow As CWindow
  Dim hCurrent As CWindow
  Dim bClose As Boolean
  
  hCurrent = $aWindow[tabWorkspace.Index]
  
  {Lock}
  
  For Each hWindow In $aWindow.Copy()
    
    Select Case iMode
      Case CLOSE_OTHER
        If hWindow = hCurrent Then Continue
      Case CLOSE_RIGHT
        If hWindow = hCurrent Then
          bClose = True
          Continue
        Else If Not bClose Or If hWindow.Detached Then
          Continue
        Endif
    End Select
    
    If hWindow.Window.Close() Then Break
    
  Next 
  
  'CheckWindow
  {Unlock}
  
  If iMode = CLOSE_ALL Then GetParent()._RaiseCloseAll()
  
End

Public Sub mnuCloseOther_Click()
  
  CloseWindows(CLOSE_OTHER)
  
End

Public Sub mnuCloseAll_Click()
  
  CloseWindows(CLOSE_ALL)

End

Public Sub mnuCloseRight_Click()
  
  CloseWindows(CLOSE_RIGHT)
  
End


Public Sub Handle_MouseDown()

  $bMove = True  
  $X = Mouse.ScreenX
  $Y = Mouse.ScreenY
  $W = $hCurrent.Window.W
  $H = $hCurrent.Window.H
  
  'DEBUG Mouse.ScreenX;; Mouse.ScreenY
  'DEBUG $X;; $Y

End

Public Sub Handle_MouseMove()

  Dim W, H, G As Integer
  Dim hPanel As Panel

  If Not $bMove Then Return
  
  hPanel = Last

  With $hCurrent.Window

    W = .W
    H = .H

    'DEBUG "(";; W;; H;; ") + (";; Mouse.ScreenX;; Mouse.ScreenY;; ") -> ";

    If hPanel <> panRight Then H = $H + Mouse.ScreenY - $Y
    If hPanel <> panDown Then W = $W + Mouse.ScreenX - $X
    
    W = Max(1, W)
    H = Max(1, H)

    If Not Mouse.Shift Then    
      G = $hCurrent.Grid 
      If G Then
        W = Max(1, Int(W / G + 0.5)) * G
        H = Max(1, Int(H / G + 0.5)) * G
      Endif
    Endif 
    
    'PRINT #File.Err, "(";; W;; H;; ")"
    
    .Resize(W, H)
  
  End With
  
  $bMove = False
  MoveHandle  
  $bMove = True

End

Public Sub Handle_MouseUp()

  $bMove = False  

End

Public Function GetCountWindows() As Integer
  
  Return $aWindow.Count
  
End


Public Function GetWindows() As Window[]
  
  Dim aWin As New Window[]
  Dim hWindow As CWindow
  
  For Each hWindow In $aWindow
    aWin.Add(hWindow.Window)
  Next  
  
  Return aWin
  
End

Public Sub dwgBorder_Draw()

  Return
  Draw.LineStyle = Line.Solid
  Draw.LineWidth = 4
  Draw.Foreground = Color.SelectedBackground
  Draw.Line(dwgBorder.W - 2, 0, dwgBorder.W - 2, dwgBorder.H)
  Draw.Line(0, dwgBorder.H - 2, dwgBorder.W, dwgBorder.H - 2)
  'Draw.Tile($hTile, dwgBorder.W - 8, 0, 8, dwgBorder.H)
  'Draw.Tile($hTile, 0, dwgBorder.H - 8, dwgBorder.W, 8)

End

Public Sub imgIcon_DblClick()

  mnuClose_Click

End

Public Sub lblTitle_MouseDown()

  ActivateWindow()

End

Public Sub tabWorkspace_MouseUp()

  ActivateWindow()

End

' Private Sub FindTabFromTitle(sTitle As String) As Integer
' 
'   Dim iInd As Integer
'   
'   For iInd = 0 To tabWorkspace.Count - 1
'     If tabWorkspace[iInd].Text = sTitle Then Return iInd
'   Next
' 
'   Return -1  
'   
' End


Public Sub tabWorkspace_Menu()

  Dim iInd As Integer
  Dim hMenu As Menu
  Dim aTitle As New String[]
  Dim sTitle As String
  Dim hWin As CWindow
  Dim sText As String
  
  'GetParent()._Menu

  mnuShow.Children.Clear

  For iInd = 0 To tabWorkspace.Count - 1
    aTitle.Add(tabWorkspace[iInd].Text & "\t" & Format(iInd, "000"))
  Next
  aTitle.Sort
  
  For Each sTitle In aTitle
    iInd = CInt(Mid$(sTitle, InStr(sTitle, "\t") + 1))
    With tabWorkspace[iInd]
      hMenu = New Menu(mnuShow) As "mnuWindow"
      sText = $aWindow[iInd].Text
      If Not sText Then sText = " "
      hMenu.Text = sText
      hMenu.Picture = .Picture
      hMenu.Checked = iInd = tabWorkspace.Index
      hMenu.Tag = iInd
    End With
  Next 

  mnuSort.Enabled = $aWindow.Count >= 2
  mnuDetach.Enabled = $nDetach < $aWindow.Max
  
  mnuAttach.Children.Clear
  
  For Each sTitle In aTitle
    iInd = CInt(Mid$(sTitle, InStr(sTitle, "\t") + 1))
    hWin = $aWindow[iInd]
    If Not hWin.Detached Then Continue
    With tabWorkspace[iInd]
      hMenu = New Menu(mnuAttach) As "mnuAttach"
      If .Text Then
        hMenu.Text = .Text
      Else 
        hMenu.Text = " "
      Endif
      hMenu.Picture = .Picture
      hMenu.Checked = iInd = tabWorkspace.Index
      hMenu.Tag = iInd
    End With
  Next 
  
  mnuAttach.Enabled = mnuAttach.Children.Count > 0
  
  mnuCloseRight.Enabled = tabWorkspace.Index < (tabWorkspace.Count - 1)
  mnuCloseOther.Enabled = $aWindow.Count >= 2
    
  mnuWindow.Popup
  
End

Public Sub mnuWindow_Click()
  
  ActivateWindow($aWindow[Last.Tag].Window)
  
End


Public Sub SetBackground(iColor As Integer)
  
  $iBackground = iColor
  UpdateSize
  'panWorkspace.Refresh
  
End

Public Sub GetBackground() As Integer
  
  Return $iBackground
  
End

Private Sub HideTabStrip()
  
  tabWorkspace.Hide
  UpdateSize  
  
End


Private Sub ShowTabStrip()
  
  If $aWindow.Count Then 
    tabWorkspace.Show
    UpdateSize
  Endif
  
End

Public Sub Lock()
  
  Inc $iLock 
  If $iLock = 1 Then 
    panWorkspace.Hide
    HideTabStrip
  Endif
  
End

Public Sub UnLock()
  
  If $iLock <= 0 Then Return
  
  Dec $iLock

  If $iLock = 0 Then 
    CheckWindow
    ActivateWindow
    ShowTabStrip
    panWorkspace.Show
  Endif
  
End

Public Sub GetOrientation() As Integer
  
  Return tabWorkspace.Orientation
  
End

Public Sub SetOrientation(iOrientation As Integer)
  
  tabWorkspace.Orientation = iOrientation
  UpdateSize
  
End

Public Sub mnuSort_Click()
  
  Dim iInd As Integer
  Dim aTitle As New String[]
  Dim aWindow As CWindow[]
  Dim hWin As Window
  Dim sTitle As String
  
  hWin = GetActiveWindow()
  
  For iInd = 0 To tabWorkspace.Count - 1
    aTitle.Add(tabWorkspace[iInd].Text & "\t" & Format(iInd, "000"))
  Next
  aTitle.Sort

  aWindow = New CWindow[$aWindow.Count]
  
  For iInd = 0 To aWindow.Max
    sTitle = aTitle[iInd]
    aWindow[iInd] = $aWindow[CInt(Mid$(sTitle, InStr(sTitle, "\t") + 1))]
  Next
  
  $aWindow = aWindow

  For iInd = 0 To $aWindow.Max  
    UpdateTitleFromIndex(iInd)
  Next
  
  ActivateWindow(hWin)
  
End

Public Sub mnuPreviousTab_Click()
  
  Try Dec tabWorkspace.Index
  
End

Public Sub mnuNextTab_Click()
  
  Try Inc tabWorkspace.Index
  
End

Public Sub tabWorkspace_Close(Index As Integer)

  If GetParent()._RaiseClose($aWindow[Index].Window) Then
    Stop Event
    Return
  Endif
  
  $aWindow[Index].Window.Close

End

Public Sub tabWorkspace_Arrange()

  UpdateSize
  
End

Public Sub Form_Resize()

  UpdateSize

End

Public Sub SetBorder(bBorder As Boolean)
  
  $bBorder = bBorder
  tabWorkspace.Border = bBorder
  UpdateSize
  
End

Public Sub HasBorder() As Boolean
  
  Return $bBorder
  
End

Public Sub imgBackground_Draw()

  If Not $hImage Then Return
  
  Paint.Brush = Paint.Image($hImage)
  Paint.Rectangle(0, 0, Paint.W, Paint.H)
  Paint.Fill
  
End

Public Sub GetImage() As Image
  
  Return $hImage
  
End

Public Sub SetImage(hImage As Image)
  
  $hImage = hImage
  panWorkspace.Refresh
  
End

Public Sub SetFont(hFont As Font)
  
  tabWorkspace.TextFont = hFont
  
End

Public Sub GetFont() As Font
  
  Return tabWorkspace.TextFont
  
End


Public Sub tabWorkspace_Move(Source As Integer, Target As Integer)

  Dim hWindow As CWindow
  Dim I As Integer

  hWindow = $aWindow[Source]
  $aWindow.Remove(Source)
  $aWindow.Add(hWindow, Target)

  For I = 0 To $aWindow.Max  
    UpdateTitleFromIndex(I)
  Next

End

Public Sub mnuDetach_Click()

  Detach($aWindow[tabWorkspace.Index].Window)
  
End

Public Sub mnuAttach_Click()
  
  Attach($aWindow[Last.Tag].Window)
  
End

Public Sub CloseAll()
  
  CloseWindows(CLOSE_ALL)

End

Public Sub tabWorkspace_CloseAll()

  CloseWindows(CLOSE_ALL)

End

Public Sub Button_MouseDown()
  
  If Mouse.Middle And If Not tabWorkspace.Closable Then
    tabWorkspace_Close(tabWorkspace._GetIndex(Last.Parent))
    Stop Event ' BUG: Needed, as sometimes the MouseDown event is raised twice
  Endif
  
End

Public Sub SetCloseWithMouse(bVal As Boolean)
  
  tabWorkspace.Closable = Not bVal
  
End

Public Sub IsCloseWithMouse() As Boolean
  
  Return Not tabWorkspace.Closable
  
End


