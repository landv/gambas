' Gambas class file

Export

Property Read Key As String
Property Read ParentKey As String
Property Text As String
Property RichText As String
Property Picture As Picture
Property Read Count, Children As Integer
Property Expanded As Boolean
Property Read X As Integer
Property Read Y As Integer
Property Read Width, W As Integer
Property Read Height, H As Integer
Property Editable As Boolean
Property Selected As Boolean
Property Background As Integer
Property Foreground As Integer
Property Font As Font

Private $sKey As String
Private $sParent As String
Private $sText As String
Private $sRichText As String
Private $hPicture As Picture
Private $bExpanded As Boolean
Private $bEditable As Boolean
Private $iBg As Integer = Color.Default
Private $iFg As Integer = Color.Default
Private $hFont As Font

Private $aChildren As String[]
Private $aText As String[]

Static Public _Tree As _TreeView

Public _Depth As Integer
Public _Rows As Integer
Public _Index As Integer
Public _GrandChildren As Integer

Event _Refresh
Private $iLock As Integer

Private Sub GetTree() As _TreeView
  
  Return Object.Parent(Me)
  
End

Private Sub GetView() As GridView
  
  Return GetTree().Children[0]
  
End

Public Sub _IsRoot() As Boolean
  
  Return Not $sKey
  
End

Public Sub _ComputeDepth()
  
  Dim hTree As _TreeView
  Dim iDepth As Integer
  Dim sChild As String

  If $sParent Then 
    iDepth = GetTree()[$sParent]._Depth + 1
  Else
    iDepth = 0
  Endif
  
  If iDepth = _Depth Then Return
  
  _Depth = iDepth
  
  If Not $aChildren Then Return
  
  hTree = GetTree()
  
  For Each sChild In $aChildren
    hTree[sChild]._ComputeDepth()
  Next
  
End

Public Sub _ComputeGrandChildren()
  
  Dim sChild As String
  Dim hTree As _TreeView
  
  _GrandChildren = 0
  If Not $aChildren Then Return
  
  hTree = GetTree()
  
  For Each sChild In $aChildren
    If hTree[sChild].Count Then Inc _GrandChildren
  Next
  
End


Public Sub _SetParent(sParent As String)
  
  $sParent = sParent
  _ComputeDepth()
  
End

Public Sub _new(sKey As String, sParent As String)
  
  $sKey = sKey
  $sParent = sParent
  
  _ComputeDepth()
  
  If sKey Then 
    _Rows = 1
    _ComputeRows(1)
  Else
    $bExpanded = True
  Endif
  
End

Public Sub _AddChild(sKey As String)
  
  If Not $aChildren Then $aChildren = New String[]
  $aChildren.Add(sKey)
  
  If $aChildren.Count = 1 Then 
    Try Inc GetTree()._GetParentItem(Me)._GrandChildren
  Endif
  
End

Public Sub _RemoveChild(hItem As _TreeView_Item)
  
  Dim hTree As _TreeView = GetTree()
  Dim I As Integer
  
  Try $aChildren.Remove(hItem._Index)
  
  For I = hItem._Index To $aChildren.Max
    hTree[$aChildren[I]]._Index = I
  Next
  
  If $aChildren.Count = 0 Then
    $aChildren = Null
    Try Dec hTree._GetParentItem(Me)._GrandChildren
  Endif
  
End

Public Sub _GetChildren() As String[]
  
  Return $aChildren
  
End


Private Function Key_Read() As String

  Return $sKey

End

Private Function ParentKey_Read() As String

  Return $sParent

End

Private Function Text_Read() As String

  Return $sText

End

Private Sub Text_Write(Value As String)

  Dim hTree As _TreeView = GetTree()

  $sText = Value
  If $iLock Then Return

  If hTree.Sorted Then hTree._SortParent($sParent)
  hTree._UpdateItemHeight(Me)
  hTree._RefreshView

End

Private Function RichText_Read() As String

  Return $sRichText 

End

Private Sub RichText_Write(Value As String)

  Dim hTree As _TreeView = GetTree()

  $sRichText = Value
  If $iLock Then Return
  
  If hTree.Sorted Then hTree._SortParent($sParent)
  hTree._UpdateItemHeight(Me)
  hTree._RefreshView

End

Private Function Picture_Read() As Picture

  Return $hPicture

End

Private Sub Picture_Write(Value As Picture)

  Dim hTree As _TreeView = GetTree()
  
  $hPicture = Value
  If $iLock Then Return
  
  hTree._UpdateItemHeight(Me)
  hTree._RefreshView
  
End

Private Function Count_Read() As Integer

  If $aChildren Then Return $aChildren.Count

End

Private Function Expanded_Read() As Boolean

  Return $bExpanded

End

Public Sub _ComputeRows(iAdd As Integer)

  Dim hTree As _TreeView = GetTree()
  Dim sKey As String
  Dim hItem As _TreeView_Item
  
  sKey = $sParent
  While sKey
    hItem = hTree[sKey]
    If Not hItem.Expanded Then Return
    hItem._Rows += iAdd
    sKey = hItem.ParentKey
  Wend

  hTree._AddCount(iAdd)
  
End


Private Sub Expanded_Write(Value As Boolean)

  Dim hTree As _TreeView = GetTree()
  Dim sKey As String
  Dim iOldRows As Integer
  Dim sCurrent As String
  
  If $bExpanded = Value Then Return
  
  hTree._SaveSelection
  
  sCurrent = hTree.Key
  
  $bExpanded = Value
  
  iOldRows = _Rows
  _Rows = 1
  If Value And If $aChildren Then
    For Each sKey In $aChildren
      _Rows += hTree[sKey]._Rows
    Next
  Endif

  If _Rows = iOldRows Then Return
  
  _ComputeRows(_Rows - iOldRows)
  
  hTree._UpdateItemHeight(Me, True)

  hTree._UpdateCurrent(sCurrent)

  hTree._RestoreSelection
  
  If Value Then hTree._EnsureVisible(Me, True)
  
  hTree._RaiseExpand($sKey, $bExpanded)
  
End

Private Function X_Read() As Integer

  Dim hView As GridView = GetView()
  'Dim FW As Integer = hView._GetFrameWidth()
  Return GetTree()._GetItemX(Me) - hView.ScrollX + hView.ClientX + hView.Padding '+ FW

End

Private Function Y_Read() As Integer

  Dim hTree As _TreeView = GetTree()
  Dim hView As GridView = GetView()
  'Dim FW As Integer = hView._GetFrameWidth()
  Return hView.Rows[hTree._ItemToRow(Me)].Y - hView.ScrollY + hView.Columns.Height + hView.ClientY

End

Public Sub _GetWidth() As Integer
  
  Dim W As Integer
  Dim hFont As Font
  
  If $hPicture Then W += $hPicture.W + Desktop.Scale \ 2
  hFont = $hFont
  If Not hFont Then hFont = GetTree().Font
  
  If $sRichText Then
    Return W + hFont.RichTextWidth($sRichText)
  Else
    Return W + hFont.TextWidth($sText)
  Endif
  
End

Public Sub _GetHeight() As Integer
  
  Dim PH As Integer
  Dim hFont As Font

  hFont = $hFont
  If Not hFont Then hFont = GetTree().Font
  PH = hFont.Height + (Desktop.Scale \ 4) * 2 + 2
  If $hPicture Then PH = Max(PH, $hPicture.H + (Desktop.Scale \ 4) * 2 + 2)
  Return PH
  
End

Private Function Width_Read() As Integer

  Return _GetWidth()
  
End

Private Function Height_Read() As Integer

  Dim hTree As _TreeView = GetTree()
  Dim hView As GridView = GetView()
  Return hView.Rows[hTree._ItemToRow(Me)].H

End

Public Sub Clear()
  
  Dim hTree As _TreeView = GetTree()
  
  hTree._SaveSelection
  While $aChildren
    hTree.Remove($aChildren[0])
  Wend
  hTree._RestoreSelection
  
End

Public Sub Delete()
  
  Dim hTree As _TreeView = GetTree()
  hTree.Remove($sKey)
  
End

Public Sub EnsureVisible()
  
  Dim hTree As _TreeView = GetTree()
  hTree._EnsureVisible(Me)
  
End

Public Sub MoveBefore(Optional (Key) As String)
  
  Dim hTree As _TreeView = GetTree()
  hTree._MoveItem(Me, Key, True)
  
End

Public Sub MoveAfter(Optional (Key) As String)
  
  Dim hTree As _TreeView = GetTree()
  hTree._MoveItem(Me, Key, False)
  
End

Public Sub MoveFirst()
  
  MoveAfter()
  
End

Public Sub MoveLast()
  
  MoveBefore()
  
End


Private Function Editable_Read() As Boolean

  Return $bEditable 

End

Private Sub Editable_Write(Value As Boolean)

  $bEditable = Value

End

Private Function Selected_Read() As Boolean

  Return GetTree()._IsItemSelected(Me)

End

Private Sub Selected_Write(Value As Boolean)

  GetTree()._SetItemSelected(Me, Value)

End


Public Sub Rename(Optional Column As Integer = 0)
  
  If Not $bEditable Then Return
  GetTree()._Rename(Me, Column)
  
End

Public Sub _compare(hOther As _TreeView_Item) As Integer
  
  Dim hColumnView As ColumnView
  Dim iSort As Integer
  
  If _Tree And If Not _Tree._RaiseCompare($sKey, hOther.Key) Then 
    Return _Tree.Compare
  Else
    Try hColumnView = GetTree()
    
    If hColumnView Then
      iSort = hColumnView.Columns.Sort
      If iSort > 0 Then
        Try Return String.Comp($aText[iSort - 1], hOther[iSort], gb.Natural + gb.IgnoreCase)
        If Error Then Return 0
      Endif
    Endif

    Return String.Comp($sText, hOther.Text, gb.Natural + gb.IgnoreCase)
  Endif
  
End

Public Sub _put(Text As String, Column As Integer)
  
  Dim hTree As _TreeView
  Dim hView As GridView
  
  hTree = GetTree()
  hView = GetView()
  
  If Column = 0 Then
    $sText = Text
  Else
    'If Column < 0 Or If Column >= hView.Columns.Count Then Error.Raise("Out of bounds")
    ' Be backward-compatible
    If Column < 0 Then Error.Raise("Out of bounds")
    
    If Not $aText Then 
      $aText = New String[Column]
    Else
      If Column >= $aText.Count Then $aText.Resize(Column)
    Endif
    
    $aText[Column - 1] = Text
  Endif
  
  If $iLock Then Return
  hTree._RefreshView()
  
End

Public Sub _get(Column As Integer) As String
  
  Dim hView As GridView

  If Column = 0 Then Return $sText
  
  hView = GetTree().Children[0]

  If Column < 0 Then Error.Raise("Out of bounds")
  
  Try Return $aText[Column - 1]
  
End


Public Sub Reparent(NewParent As String)
  
  Dim hTree As _TreeView = GetTree()
  
  If hTree Is ListView Then Error.Raise("Cannot reparent ListView items")
  hTree._ReparentItem(Me, NewParent)
  
End

Private Function Background_Read() As Integer

  Return $iBg

End

Private Sub Background_Write(Value As Integer)

  $iBg = Value

End

Private Function Foreground_Read() As Integer

  Return $iFg

End

Private Sub Foreground_Write(Value As Integer)

  $iFg = Value

End

Private Function Font_Read() As Font

  Return $hFont

End

Private Sub Font_Write(Value As Font)

  If Value Then
    $hFont = Value.Copy()
  Else
    $hFont = Null
  Endif

End

Public Sub _Lock()
  
  Inc $iLock
  
End

Public Sub _Unlock()
  
  Dim hTree As _TreeView
  
  Dec $iLock
  If $iLock = 0 Then
    hTree = GetTree()
    If hTree.Sorted Then hTree._SortParent($sParent)
    hTree._UpdateItemHeight(Me)
    hTree._RefreshView
  Endif
  
End
