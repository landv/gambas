' Gambas class file

Export

Inherits UserControl

Public Const _Properties As String = "*,Picture,Mode{Select.*}=Single,Orientation{Arrange.Horizontal;Vertical}=Vertical,Sorted,Editable,GridSize{Range:0;128},IconLines{Range:1;8}=2,Border=True,ScrollBar{Scroll.*}=Both"
Public Const _Group As String = "View"
Public Const _DefaultEvent As String = "Click"
Public Const _Similar As String = "ListView"

Property Mode As Integer
Property Orientation As Integer
Property Border As Boolean
Property ScrollBar As Integer
Property Font As Font
Property Background As Integer

Property Read Count As Integer
Property Read Current As _IconView_Item
Property Read Item As _IconView_Item
Property Read Available As Boolean
Property Key As String
Property Read Keys As String[]
Property Compare As Integer
Property Editable As Boolean
Property Sorted As Boolean
Property Ascending As Boolean
Property Picture As Picture

Property Read IconSize As Integer
Property IconLines As Integer
Property GridSize As Integer
Property Read Renaming As Boolean

Property Read ClientWidth, ClientW As Integer
Property Read ClientHeight, ClientH As Integer
Property ScrollX As Integer
Property ScrollY As Integer
Property Read ScrollW, ScrollWidth As Integer
Property Read ScrollH, ScrollHeight As Integer

Event Select
Event Activate 
Event Click 
Event Rename 
Event Cancel
Event Compare(Key As String, OtherKey As String)
Event Draw(X As Integer, Y As Integer, Width As Integer, Height As Integer, Key As String)

Private Enum EVENT_ACTIVATE, EVENT_CLICK, EVENT_RENAME

Private $iMode As Integer = Select.Single
Private $bHorizontal As Boolean

Private $hView As ScrollArea
'Private $hObserver As Observer

Private $cItems As New Collection
Private $aItems As New _IconView_Item[]
Private $cSelection As New Collection

Private $iIconSize As Integer
Private $iIconLines As Integer = 2
Private $iGridSize As Integer

Private $iGridWidth As Integer = 8
Private $iGridHeight As Integer = 8
Private $iPad As Integer

Private $nColumn As Integer

Private $iHover As Integer = -1
Private $iStart As Integer = -1
Private $iCurrent As Integer = -1

Private $bSelRect As Boolean
Private $X1 As Integer
Private $Y1 As Integer
Private $X2 As Integer
Private $Y2 As Integer
Private $hSelTimer As Timer

Private $iIntern As Integer = -1
Private $iBack As Integer = -1

Private $bSelectionChanged As Boolean
Private $hSelChangedTimer As Timer

Private $bSorted As Boolean
Private $bAscending As Boolean = True
Private $iCompare As Integer
Private $bCompareSet As Boolean

Private $bSortDirty As Boolean
Private $hUpdateSortTimer As Timer

Private $bEditable As Boolean
Private $hRenameBox As RenameBox
Private $iRename As Integer = -1
Private $iCurrentBefore As Integer

Private $hPicture As Picture

Private $sFindItem As String
Private $fFindTime As Float

Private $iLock As Integer
Private $hArrangeTimer As Timer

Public Sub _new()
  
  $hView = New ScrollArea(Me) As "ScrollArea"
  $hView.Background = Color.TextBackground
  $hView.Focus = True
  $hView.Tracking = True
  $hView.ScrollBar = Scroll.Vertical
  
  Me.Proxy = $hView
  
  Border_Write(True)
  '$hObserver = New Observer(Me) As "ScrollArea"
  
  $hSelChangedTimer = New Timer As "SelectionChanged"
  
End

Public Sub _get((Key) As String) As _IconView_Item
  
  Return $cItems[Key]
  
End

Public Sub Clear()
  
  ExitRename
  $cItems.Clear
  $aItems.Clear
  $cSelection.Clear
  $iCurrent = -1
  $iStart = -1
  $iHover = -1
  $iIntern = -1
  $iBack = -1
  $iIconSize = 0
  ScrollArea_Arrange
  
End

Public Sub Exist((Key) As String) As Boolean
  
  Return $cItems.Exist(Key)
  
End

Public Sub FindAt(X As Integer, Y As Integer) As Boolean
  
  $iIntern = FindIconAccurate(X, Y)
  Return $iIntern < 0
  
End

Private Sub SetIntern(iIntern As Integer)
  
  If iIntern < 0 Or iIntern > $aItems.Max Then
    $iBack = $iIntern
    $iIntern = -1
  Else
    $iIntern = iIntern
  Endif
  
End

Public Function MoveTo((Key) As String) As Boolean
  
  If Not $cItems.Exist(Key) Then 
    SetIntern(-1)
  Else
    SetIntern(_FindItem($cItems[Key]))
  Endif
  Return $iIntern < 0
  
End

Public Function MoveFirst() As Boolean
  
  SetIntern(0)
  Return $iIntern < 0
  
End

Public Function MoveNext() As Boolean
  
  SetIntern($iIntern + 1)
  Return $iIntern < 0
  
End

Public Function MovePrevious() As Boolean
  
  SetIntern($iIntern - 1)
  Return $iIntern < 0
  
End

Public Sub MoveBack()
  
  $iIntern = $iBack
  $iBack = -1
  
End

Public Sub _FindItem(hItem As _IconView_Item) As Integer
  
  If hItem Then 
    UpdateSort
    Return $aItems.FindByRef(hItem)
  Else
    Return -1
  Endif
  
End

Public Sub _UpdateIconSize((Picture) As Picture)
  
  If {Picture} And If Picture.Height > $iIconSize Then
    $iIconSize = Picture.Height
    ScrollArea_Arrange
  Else If Not {Picture} Or If Picture.Height < $iIconSize Then
    If Not $hArrangeTimer Then
      $hArrangeTimer = New Timer As "ArrangeTimer"
      $hArrangeTimer.Trigger
    Endif
  Endif
  
End

Public Sub ArrangeTimer_Timer()

  Dim hItem As _IconView_Item
  Dim hPicture As Picture
  
  $iIconSize = 0
  For Each hItem In $aItems
    hPicture = hItem.Picture
    If hPicture And If hPicture.Height > $iIconSize Then $iIconSize = hPicture.Height
  Next
  
  ScrollArea_Arrange
  $hArrangeTimer = Null
  
End


Public Function Add((Key) As String, Text As String, Optional (Picture) As Picture, Optional After As String) As _IconView_Item
  
  Dim hItem As _IconView_Item = New _IconView_Item As "IconViewItem"
  Dim hAfter As _IconView_Item
  Dim iPos As Integer
  
  If Not Key Then Error.Raise("Void key")
  If $cItems.Exist(Key) Then Error.Raise("Key already used")
  
  If After Then
    hAfter = $cItems[Key]
    If Not hAfter Then Error.Raise("After item does not exist")
  Endif
  
  hItem._Key = Key

  $cItems[Key] = hItem
  
  If hAfter Then
    iPos = _FindItem(hAfter) + 1
    $aItems.Add(hItem, iPos)
  Else
    $aItems.Add(hItem)
    iPos = $aItems.Max
  Endif
  
  $iIntern = iPos
  
  ScrollArea_Arrange

  hItem.Text = Text
  hItem.Picture = {Picture}
  
  _UpdateIconSize(Picture)
  _SortIsDirty
  
  Return hItem
  
End

Public Sub Remove((Key) As String)
  
  Dim hItem As _IconView_Item
  Dim iPos As Integer
  
  hItem = $cItems[Key]
  If Not hItem Then Return
  
  hItem.Selected = False
  iPos = _FindItem(hItem)
  $aItems.Remove(iPos)
  $cItems.Remove(Key)
  RefreshIcon(iPos)
  
  _SortIsDirty
  
  ScrollArea_Arrange
  
End

Private Sub FindIcon(X As Integer, Y As Integer, Optional bIgnoreOutside As Boolean) As Integer

  Dim iPos As Integer
  
  X -= $iPad
  Y -= $iPad
  
  If $bHorizontal Then 
    
    iPos = Y \ $iGridHeight
    If iPos >= $nColumn Then 
      If Not bIgnoreOutside Then Return -1
      iPos = $nColumn - 1
    Endif
    
    iPos += (X \ $iGridWidth) * $nColumn
    If iPos >= $aItems.Count Then 
      If Not bIgnoreOutside Then Return -1
      iPos = $aItems.Max
    Endif

  Else
  
    iPos = X \ $iGridWidth
    If iPos >= $nColumn Then 
      If Not bIgnoreOutside Then Return -1
      iPos = $nColumn - 1
    Endif
    
    iPos += (Y \ $iGridHeight) * $nColumn
    If iPos >= $aItems.Count Then 
      If Not bIgnoreOutside Then Return -1
      iPos = $aItems.Max
    Endif
    
  Endif
  
  Return iPos
  
End

Private Sub FindIconAccurate(X As Integer, Y As Integer) As Integer

  Dim iPos As Integer
  Dim hRect As Rect
  
  iPos = FindIcon(X, Y)
  
  If iPos >= 0 Then 
    hRect = New Rect
    GetIconGeometry(iPos, hRect)
    If Not $aItems[iPos]._Inside(hRect, Me, $bHorizontal, X, Y) Then Return -1
  Endif
  
  Return iPos
  
End

Private Sub GetRow(iPos As Integer) As Integer
  
  Return iPos \ $nColumn
  
End

Private Sub GetColumn(iPos As Integer) As Integer
  
  Return iPos - GetRow(iPos) * $nColumn
  
End

' Private Sub GetPos(iRow As Integer, iColumn As Integer) As Integer
'   
'   Return iColumn + iRow * $nColumn
'   
' End


Private Sub GetIconGeometry(iPos As Integer, hRect As Rect)
  
  Dim iCol, iRow As Integer
  
  iRow = GetRow(iPos)
  iCol = GetColumn(iPos)
  
  If $bHorizontal Then
    hRect.X = iRow * $iGridWidth + $iPad
    hRect.Y = iCol * $iGridHeight + $iPad
    hRect.W = $iGridWidth
    hRect.H = $iGridHeight
  Else
    hRect.X = iCol * $iGridWidth + $iPad
    hRect.Y = iRow * $iGridHeight + $iPad
    hRect.W = $iGridWidth
    hRect.H = $iGridHeight
  Endif
  
End

Public Sub _GetItemGeometry(hItem As _IconView_Item, hRect As Rect)
  
  GetIconGeometry(_FindItem(hItem), hRect)
  
End

Public Sub ScrollArea_Draw()
  
  Dim X, Y, W, H As Integer
  Dim X1, Y1, X2, Y2 As Integer
  Dim hItem As _IconView_Item
  Dim iPos, iLast, iCol, nCol As Integer
  Dim hRect As New Rect
  Dim hClip, hSaveClip As Rect
  Dim bHover As Boolean
  Dim bRaiseDraw As Boolean
  Dim bFocus As Boolean
  
  If $aItems.Count = 0 Then Return
  If $iLock Then Return
  
  bFocus = $hView.HasFocus
  
  hSaveClip = Paint.ClipRect
  
  If $hPicture Then 
    Draw.FillX = -$hView.ScrollX
    Draw.FillY = -$hView.ScrollY
    Draw.Tile($hPicture, 0, 0, Draw.Width, Draw.Height)
  Endif
  
  bRaiseDraw = Object.CanRaise(Me, "Draw")
  
  X = hSaveClip.X + $hView.ScrollX
  Y = hSaveClip.Y + $hView.ScrollY
  W = hSaveClip.W
  H = hSaveClip.H
  
  iPos = FindIcon(X, Y)
  
  If $bHorizontal Then
    nCol = FindIcon(X, Y + H - 1, True) - iPos + 1
  Else
    nCol = FindIcon(X + W - 1, Y, True) - iPos + 1
  Endif

  iLast = FindIcon(X + W - 1, Y + H - 1, True)
  iCol = 0
  
  While iPos <= iLast
    
    If iPos >= 0 And If iPos < $aItems.Count Then
      
      hItem = $aItems[iPos]
      GetIconGeometry(iPos, hRect)
      hRect.Translate(-$hView.ScrollX, -$hView.ScrollY)
      'Debug iPos
      hClip = hRect.Intersection(hSaveClip)
      If hClip Then
        bHover = iPos = $iHover
        'If $iMode = Select.Multiple And If iPos = $iStart Then bHover = True
        hItem._Draw(hRect, hClip, Me, $bHorizontal, bFocus, bHover, iPos = $iCurrent) ' _HaveFocus, $iMouseOver = k And Me.Tracking)
        If bRaiseDraw Then
          Paint.Save
          Raise Draw(hRect.X, hRect.Y, hRect.W, hRect.H, hItem.Key)
          Paint.Restore
        Endif
        
      Endif
      
    Endif
    
    Inc iCol
    Inc iPos
    If iCol >= nCol Then
      iPos += $nColumn - nCol
      iCol = 0
      'Debug "---"
    Endif
    
  Wend
  
  Draw.ClipRect = hSaveClip '(X, Y, W, H)
  
  If $bSelRect Then
    
    'Paint.Begin(Draw.Device)
    
    'Paint.Rectangle(X, Y, W, H)
    Paint.ClipRect = hSaveClip
    
    Paint.Translate(-$hView.ScrollX, -$hView.ScrollY)
    
    X1 = $X1
    Y1 = $Y1
    X2 = $X2
    Y2 = $Y2
    
    If X2 < X1 Then Swap X1, X2
    If Y2 < Y1 Then Swap Y1, Y2
    
    Paint.Rectangle(X1, Y1, X2 - X1 + 1, Y2 - Y1 + 1)
    Paint.Background = Color.SetAlpha(Color.SelectedBackground, 192)
    Paint.Fill
    Paint.Background = Color.SelectedBackground
    Paint.Rectangle(X1 + 0.5, Y1 + 0.5, X2 - X1, Y2 - Y1)
    Paint.LineWidth = 1
    Paint.Stroke
    
    'Paint.End
    
  Endif
  
  ' FIXME: GTK+ bug
  If $hRenameBox And If $hRenameBox.Visible Then $hRenameBox.Refresh
  
  'Debug ">>>"
  
End

Public Sub ScrollArea_Arrange()
  
  Dim W, H As Integer
  Dim nRow As Integer
  Dim DS As Integer
  
  If $iLock Then Return
  
  DS = Desktop.Scale
  
  W = $hView.ClientWidth
  H = $hView.ClientHeight
  
  If $aItems.Count = 0 Then 
    $hView.ResizeContents(4, 4)
    $hView.Refresh
    Return
  Endif
  
  ExitRename
  
  If $bHorizontal Then
    
    $iGridHeight = Max(DS, $iIconSize) + DS * 2
    $iGridHeight = Max($iGridHeight, Me.Font.Height * $iIconLines + DS)
    
    If $iGridSize Then
      $iGridWidth = $iGridSize * DS
    Else
      $iGridWidth = $iIconSize + DS * 2
    Endif

    $iGridWidth = Max($iGridWidth, $iIconSize + DS)
    
    $nColumn = Max(1, (H - $iPad * 2) \ $iGridHeight)
    nRow = ($aItems.Count + $nColumn - 1) \ $nColumn
    
    If nRow = 1 Then 
      $iGridWidth = Max($iGridWidth, W - $iPad * 2)
    Else
      $iGridHeight = Max(1, (H - $iPad * 2) \ $nColumn)
    Endif
    
    $hView.ResizeContents(nRow * $iGridWidth + $iPad * 2, Max(H, $nColumn * $iGridHeight + $iPad * 2))
    
  Else
    
    $iGridHeight = Max(DS * 4, $iIconSize) + $iIconLines * Me.Font.Height + DS * 3
    
    If $iGridSize Then
      $iGridWidth = $iGridSize * DS
    Else
      $iGridWidth = $iIconSize + DS * 2
    Endif
    $iGridWidth = Max($iGridWidth, Me.Font.Height * DS)
    
    $nColumn = Max(1, (W - $iPad * 2) \ $iGridWidth)
    $iGridWidth = Max(1, (W - $iPad * 2) \ $nColumn)
    
    nRow = ($aItems.Count + $nColumn - 1) \ $nColumn
    
    $hView.ResizeContents(Max(W, $nColumn * $iGridWidth + $iPad * 2), nRow * $iGridHeight + $iPad * 2)

  Endif
  
End

Public Sub ScrollArea_Resize()
  
  ScrollArea_Arrange
  
End


Public Sub ScrollArea_Scroll()
  
  If Not Me.Enabled Or If Me.Design Then Return
  ExitRename
  SetHoverItem(FindIconAccurate(Mouse.ScreenX - $hView.ScreenX - $hView.ClientX + $hView.ScrollX, Mouse.ScreenY - $hView.ScreenY - $hView.ClientY + $hView.ScrollY))
  
End

Private Function Count_Read() As Integer

  Return $aItems.Count

End

Private Sub RefreshIcon(iPos As Integer)
  
  Dim hRect As New Rect
  
  If $iLock Then Return
  If iPos < 0 Then Return
  GetIconGeometry(iPos, hRect)
  hRect.Translate(-$hView.ScrollX, -$hView.ScrollY)
  'Debug "Refresh:";; hRect.X;; hRect.Y;; hRect.W;; hRect.H
  $hView.View.Refresh(hRect.X, hRect.Y, hRect.W, hRect.H)
  
End

Private Sub SetHoverItem(iPos As Integer)
  
  Dim hItem As _IconView_Item
  
  If iPos = $iHover Then Return
  
  Swap iPos, $iHover
  
  RefreshIcon(iPos)
  RefreshIcon($iHover)
  
  $hView.Tooltip = ""
  If $iHover >= 0 Then 
    hItem = $aItems[$iHover]
    If hItem._IsEllipsized() Then $hView.Tooltip = hItem.Text
  Endif
  
End


Public Sub ScrollArea_Leave()
  
  SetHoverItem(-1)
  
End

Public Sub _EnsureVisible(iPos As Integer)
  
  Dim hRect As New Rect
  
  GetIconGeometry(iPos, hRect)
  $hView.EnsureVisible(hRect.X - $iPad, hRect.Y - $iPad, hRect.W + $iPad * 2, hRect.H + $iPad * 2)
  
End

Private Sub ToggleCurrentItem(iPos As Integer)
  
  Dim iOld As Integer
  
  $aItems[iPos].Selected = Not $aItems[iPos].Selected
  iOld = $iCurrent
  $iCurrent = iPos
  $iStart = iPos
  RefreshIcon(iOld)
  RefreshIcon($iCurrent)
  
  If $iCurrent >= 0 Then _EnsureVisible($iCurrent)
  
End

Private Sub SetCurrentItem(iCurrent As Integer, Optional bIgnoreOutside As Boolean, Optional bSelect As Boolean)
  
  Dim iOld As Integer
  
  If $bSelRect Then Return
  If iCurrent = $iCurrent Then Return
  
  iOld = $iCurrent
  
  If iCurrent < 0 Or If iCurrent > $aItems.Max Then
    iCurrent = -1
    If bIgnoreOutside Or If $iMode = Select.Single Then Return
  Endif
  
  If Not bSelect Then 
  
    If $iMode = Select.Single Then 
      UnselectAll
    Else If $iMode = Select.Multiple Then
      If iCurrent < 0 Or If Not $aItems[iCurrent].Selected Then UnselectAll
    Endif
  
    If iCurrent >= 0 Then
      $aItems[iCurrent].Selected = True
      $iCurrent = iCurrent
      $iStart = $iCurrent
    Endif
    
  Else
    
    If iCurrent >= 0 Then
      SelectRect(False)
      $iCurrent = iCurrent
      SelectRect(True)
    Endif
    
  Endif
  
  If $iCurrent >= 0 Then _EnsureVisible($iCurrent)
  
  RefreshIcon(iOld)
  RefreshIcon($iCurrent)
  
End


Private Function Current_Read() As _IconView_Item
  
  Try Return $aItems[$iCurrent]
  
End

Public Sub SelectAll()
  
  Dim hItem As _IconView_Item
  
  For Each hItem In $aItems
    hItem.Selected = True
  Next
  
End

Public Sub UnselectAll()
  
  Dim hItem As _IconView_Item
  
  If $cSelection.Count = 0 Then Return
  
  For Each hItem In $cSelection
    hItem.Selected = False
  Next
  $iCurrent = -1
  $iStart = -1
  
  SelectionChanged
  
End

Private Function Mode_Read() As Integer

  Return $iMode

End

Private Sub Mode_Write(Value As Integer)

  Dim iCurrent As Integer

  If $iMode = Value Then Return

  Select Case Value
    Case Select.None
      UnselectAll
    Case Select.Single
      iCurrent = $iCurrent
      UnselectAll
      SetCurrentItem($iCurrent)
    Case Select.Multiple
    Case Else
      Return
  End Select
  
  $iMode = Value

End

Public Sub ScrollArea_KeyPress()

  Dim iCode As Integer
  Dim bShift As Boolean
  Dim fNow As Float
  Dim iInd As Integer
  Dim iPos As Integer
  Dim iStart As Integer
  
  If Not Me.Enabled Or If Me.Design Then Return

  If $iMode = Select.None Then
    
  Else
  
    If $iMode = Select.Multiple Then
      bShift = Key.Shift
    Endif
  
    iCode = Key.Code
  
    If $bHorizontal Then
      Select iCode
        Case Key.Left
          iCode = Key.Up
        Case Key.Right
          iCode = Key.Down
        Case Key.Up
          iCode = Key.Left
        Case Key.Down
          iCode = Key.Right
      End Select
    Endif
  
    Select iCode
      
      Case Key.Left
        SetCurrentItem($iCurrent - 1, True, bShift)
        Stop Event
        
      Case Key.Right
        SetCurrentItem($iCurrent + 1, True, bShift)
        Stop Event
        
      Case Key.Up
        SetCurrentItem($iCurrent - $nColumn, True, bShift)
        Stop Event
      
      Case Key.Down
        If $iCurrent < 0 Then
          SetCurrentItem(0, True, bShift)
        Else
          SetCurrentItem($iCurrent + $nColumn, True, bShift)
        Endif
        Stop Event
        
      Case Key.Home
        SetCurrentItem(0, True, bShift)
        Stop Event
        
      Case Key.End
        SetCurrentItem($aItems.Max, True, bShift)
        Stop Event
        
      Case Key["A"]
        If Key.Control Then SelectAll
        
      Case Key.F2
        If $iCurrent >= 0 Then $aItems[$iCurrent].Rename
        
      Case Key.Space
        ScrollArea_DblClick
        
    End Select
    
    If Len(Key.Text) >= 2 Or If Asc(Key.Text) >= 32 And IsAscii(Key.Text) Or If Key.Code = Key.Backspace Then
      
      fNow = Timer
      iStart = $iCurrent
      If (fNow - $fFindTime) >= 2 Or iStart < 0 Then
        $sFindItem = ""
        Inc iStart
      Endif
      $fFindTime = fNow
      
      If Key.Code = Key.Backspace Then
        $sFindItem = String.Left$($sFindItem, -1)
      Else
        $sFindItem &= String.LCase(Key.Text)
      Endif
      
      iPos = iStart
      For iInd = 0 To $aItems.Max
        If iPos > $aItems.Max Then iPos = 0
        With $aItems[iPos]
          'Debug iInd;; .Text
          If String.LCase(.Text) Begins $sFindItem Then
            SetCurrentItem(iPos, True)
            Break
          Endif
        End With
        Inc iPos
      Next
      
    Endif
    
  Endif
  
End

Public Sub ScrollArea_MouseDown()
  
  Dim X, Y As Integer
  Dim iPos As Integer
  Dim bShift As Boolean
  Dim bCtrl As Boolean
  
  If Not Me.Enabled Or If Me.Design Then Return
  If $aItems.Count = 0 Then Return
  If $iMode = Select.None Then Return
  'If Not Mouse.Left Then Return
  
  $iCurrentBefore = $iCurrent
  
  If $iMode = Select.Multiple Then
    bShift = Mouse.Shift
    bCtrl = Mouse.Control
  Endif
  
  X = Mouse.X + $hView.ScrollX
  Y = Mouse.Y + $hView.ScrollY
  
  iPos = FindIconAccurate(X, Y)
  
  If iPos >= 0 Then
    
    If bCtrl Then
      ToggleCurrentItem(iPos)
    Else
      SetCurrentItem(iPos)
    Endif
    
  Else
    
    If Not bCtrl And If $iMode <> Select.Single Then UnselectAll
    
  Endif
  
End

Public Sub ScrollArea_MouseDrag()
  
  Dim X, Y As Integer
  Dim bShift As Boolean
  Dim bCtrl As Boolean
  Dim iPos As Integer
  
  If Not Me.Enabled Or If Me.Design Then Return
  If $aItems.Count = 0 Then Return
  If $iMode = Select.None Then Return
  'If Not Mouse.Left Then Return
  
  If $iMode = Select.Multiple And If Mouse.Left And If Not $bSelRect Then
    
    bShift = Mouse.Shift
    bCtrl = Mouse.Control
  
    X = Mouse.StartX + $hView.ScrollX
    Y = Mouse.StartY + $hView.ScrollY
    iPos = FindIconAccurate(X, Y)
    
    $bSelRect = True
    $X1 = X
    $Y1 = Y
    $X2 = X
    $Y2 = Y
    $hSelTimer = New Timer As "SelTimer"
    $hSelTimer.Delay = 50
    $hSelTimer.Start
    
    Inc $iLock
    If iPos >= 0 Then $aItems[iPos].Selected = Not $aItems[iPos].Selected
    Dec $iLock
    SelectRect(True)
    
  Endif
  
End


Private Sub UpdateSelRect(X As Integer, Y As Integer)
  
  X = Max($iPad, Min($hView.ScrollWidth - $iPad - 1, X))
  Y = Max($iPad, Min($hView.ScrollHeight - $iPad - 1, Y))
  
  If X <> $X2 Or If Y <> $Y2 Then
    
    SelectRect
    $X2 = X
    $Y2 = Y
    $hView.EnsureVisible($X2 - 16, $Y2 - 16, 32, 32)
    $hView.View.Refresh
    SelectRect
    
  Endif
  
End


Public Sub ScrollArea_MouseMove()
  
  Dim X, Y, iPos As Integer
  
  If Not Me.Enabled Or If Me.Design Then Return
  If $aItems.Count = 0 Then Return
  If $iMode = Select.None Then Return
  
  X = Mouse.X + $hView.ScrollX
  Y = Mouse.Y + $hView.ScrollY
  iPos = FindIconAccurate(X, Y)

  ' If iPos <> $iHover ThenNot
  '   If Mouse.Left And If $iMode = Select.Multiple And iPos >= 0 Then
  '     $aItems[iPos].Selected = Not $aItems[iPos].Selected
  '   Endif
  ' Endif
  
  If Not Mouse.Left And If Not Mouse.Right Then SetHoverItem(iPos)
  If $bSelRect And If Mouse.Left Then UpdateSelRect(X, Y)
  
End

Public Sub SelTimer_Timer()
  
  UpdateSelRect(Mouse.ScreenX - $hView.ScreenX + $hView.ScrollX, Mouse.ScreenY - $hView.ScreenY + $hView.ScrollY)
  
End

Private Sub SelectRect(Optional iSelect As Integer = 1)
  
  Dim X, Y, W, H As Integer
  Dim iPos, nCol, iLast, iCol As Integer
  Dim hItem As _IconView_Item
  Dim hRect As New Rect
  Dim hSel As Rect
  Dim hSelRect As Rect
  
  If Not $bSelRect Then
    GetIconGeometry($iStart, hRect)
    $X1 = hRect.X + hRect.W \ 2
    $Y1 = hRect.Y + hRect.H \ 2
    GetIconGeometry($iCurrent, hRect)
    $X2 = hRect.X + hRect.W \ 2 
    $Y2 = hRect.Y + hRect.H \ 2 
  Endif
  
  If $X1 = $X2 And If $Y1 = $Y2 Then Return
  
  X = Min($X1, $X2)
  Y = Min($Y1, $Y2)
  W = Abs($X2 - $X1) + 1
  H = Abs($Y2 - $Y1) + 1
  
  hSel = New Rect(X, Y, W, H)
  
  iPos = FindIcon(X, Y)
  If $bHorizontal Then
    nCol = FindIcon(X, Y + H - 1, True) - iPos + 1
  Else
    nCol = FindIcon(X + W - 1, Y, True) - iPos + 1
  Endif
  iLast = FindIcon(X + W - 1, Y + H - 1, True)
  
  iCol = 0
  
  While iPos <= iLast
    
    If iPos >= 0 And If iPos < $aItems.Count Then
      If $bSelRect Or If iPos <> $iStart Then
      
        GetIconGeometry(iPos, hRect)
        hRect.Adjust(2)
        
        hSelRect = hRect.Intersection(hSel)
        
        If hSelRect Then
          hItem = $aItems[iPos]
          If Not $bSelRect Or If hItem._Intersect(hRect, hSelRect, $bHorizontal) Then
            If iSelect = 1 Then
              hItem.Selected = Not hItem.Selected
            Else
              hItem.Selected = iSelect
            Endif
          Endif
        Endif
      
      Endif
    Endif
    
    Inc iCol
    Inc iPos
    If iCol >= nCol Then
      iPos += $nColumn - nCol
      iCol = 0
      'Debug "---"
    Endif
    
  Wend
  
End

Public Sub ScrollArea_MouseUp()
  
  If Not Me.Enabled Or If Me.Design Then Return
  If $aItems.Count = 0 Then Return
  
  If $bSelRect Then
    
    $bSelRect = False
    $hSelTimer = Null
    $hView.View.Refresh
    If $cSelection.Count And If $X1 <> $X2 Or $Y1 <> $Y2 Then SelectionChanged
    ' If Not Mouse.Control Then 
    '   UnselectAll
    '   ToggleSelectRect
    ' Endif
  Else
    
    If $iCurrent >= 0 Then 
      If $iCurrent = $iCurrentBefore Then
        '$aItems[$iCurrent].Rename
      Endif
      ' Click is always raised, Select may not
      RaiseEvent(EVENT_CLICK, $iCurrent)
    Endif
    
  Endif
  
End


Public Sub _SelectItem(hItem As _IconView_Item, bSelected As Boolean)
  
  If bSelected Then
    If $iMode = Select.Single Then
      SetCurrentItem(_FindItem(hItem))
    Endif
    $cSelection[hItem.Key] = hItem
  Else
    If $iMode = Select.Single Then
      SetCurrentItem(-1)
    Endif
    $cSelection.Remove(hItem.Key)
  Endif

  SelectionChanged
  
End

Public Sub _RefreshItem(hItem As _IconView_Item)
  
  If $iLock Then Return
  RefreshIcon(_FindItem(hItem))
  
End


Private Function Border_Read() As Boolean

  Return $hView.Border

End

Private Sub Border_Write(Value As Boolean)

  $hView.Border = Value
  $iPad = If(Value, Style.FrameWidth, 0)
  $hView.View.Refresh

End

Private Function ScrollBar_Read() As Integer

  Return $hView.Scrollbar

End

Private Sub ScrollBar_Write(Value As Integer)

  $hView.ScrollBar = Value

End

Private Function Item_Read() As _IconView_Item

  If $iIntern >= 0 Then Return $aItems[$iIntern]

End

Private Function Available_Read() As Boolean

  Return $iIntern >= 0

End

Private Sub RaiseEvent(iEvent As Integer, iItem As Integer) As Boolean
  
  Dim iSave As Integer = $iIntern
  Dim bCancel As Boolean
  
  $iIntern = iItem
  Select Case iEvent
    Case EVENT_ACTIVATE
      Raise Activate
    Case EVENT_CLICK
      Raise Click
    Case EVENT_RENAME
      bCancel = Raise Rename
  End Select
  $iIntern = iSave
  
  Return bCancel
  
End


Public Sub ScrollArea_DblClick()
  
  If Not Me.Enabled Or If Me.Design Then Return
  
  If $iCurrent >= 0 Then 
    RaiseEvent(EVENT_ACTIVATE, $iCurrent)
  Endif
  
End

Public Sub SelectionChanged_Timer()
  
  $bSelectionChanged = False
  Raise Select
  
End

Private Sub SelectionChanged()
  
  If $bSelectionChanged Then Return
  If $bSelRect Then Return
  
  $hSelChangedTimer.Trigger
  $bSelectionChanged = True
  
End

Private Function Key_Read() As String

  If $iCurrent >= 0 And If $iCurrent < $aItems.Count Then Return $aItems[$iCurrent].Key

End

Private Function Compare_Read() As Integer

  Return $iCompare

End

Private Sub Compare_Write(Value As Integer)

  $iCompare = Value
  $bCompareSet = True

End

Public Sub _CompareItem(sKey1 As String, sKey2 As String) As Boolean
  
  Raise Compare(sKey1, sKey2)
  If $bCompareSet Then
    $bCompareSet = False
    Return False
  Else 
    Return True
  Endif
  
End

Private Sub UpdateSort()
  
  If Not $bSorted Then Return
  If Not $bSortDirty Then Return
  $aItems.Sort(If($bAscending, gb.Ascent, gb.Descent))
  $bSortDirty = False
  $hView.View.Refresh
  
End


Private Function Sorted_Read() As Boolean

  Return $bSorted

End

Private Sub Sorted_Write(Value As Boolean)

  If $bSorted = Value Then Return
  $bSorted = Value
  If $bSorted Then $hUpdateSortTimer = New Timer As "UpdateSort"
  $bSortDirty = True
  UpdateSort

End

Private Function Editable_Read() As Boolean

  Return $bEditable

End

Private Sub Editable_Write(Value As Boolean)

  $bEditable = Value

End

Private Function Ascending_Read() As Boolean

  Return $bAscending

End

Private Sub Ascending_Write(Value As Boolean)

  If $bAscending = Value Then Return
  $bAscending = Value
  $bSortDirty = True
  UpdateSort

End

Public Sub UpdateSort_Timer()
  
  UpdateSort
  
End

Public Sub _SortIsDirty()
  
  If Not $bSorted Then Return
  If $bSortDirty Then Return
  $bSortDirty = True
  $hUpdateSortTimer.Trigger
  
End

Public Sub _MoveItem(hItem As _IconView_Item, iNewPos As Integer)
  
  Dim iPos As Integer
  
  If iNewPos < 0 Then Return
  
  iPos = _FindItem(hItem)
  If iNewPos = iPos Then Return
  
  $aItems.Remove(iPos)
  If iPos < iNewPos Then Dec iNewPos
  $aItems.Add(hItem, iNewPos)
  $hView.View.Refresh
  
End

Public Sub _IsHovered(hItem As _IconView_Item) As Boolean

  Dim iPos As Integer
  
  iPos = _FindItem(hItem)
  If iPos >= 0 Then Return iPos = $iHover
  
End


Private Function IconSize_Read() As Integer

  Return $iIconSize

End

Private Function GridSize_Read() As Integer

  Return $iGridSize

End

Private Sub GridSize_Write(Value As Integer)

  $iGridSize = Max(16, Min(1024, Value))
  ScrollArea_Arrange

End

Private Function IconLines_Read() As Integer

  Return $iIconLines

End

Private Sub IconLines_Write(Value As Integer)

  $iIconLines = Max(1, Min(8, Value))
  ScrollArea_Arrange

End

Public Sub _RenameItem(hItem As _IconView_Item)
  
  Dim hRect As New Rect
  
  ExitRename
  $iRename = _FindItem(hItem)
  
  _EnsureVisible($iRename)
  GetIconGeometry($iRename, hRect)
  hRect = hItem._GetTextRect(hRect, $bHorizontal)
  hRect.Adjust(-1)
  
  If Not $hRenameBox Then 
    Object.Lock(Me)
    $hRenameBox = New RenameBox(Me, 0, True) As "RenameBox"
    Object.Unlock(Me)
  Endif
  
  hRect.X = hRect.X - $hView.ScrollX + $hView.ScreenX - Me.ScreenX
  hRect.Y = hRect.Y - $hView.ScrollY + $hView.ScreenY - Me.ScreenY
  
  $hRenameBox.Move(hRect.X, hRect.Y, hRect.W, hRect.H)
  $hRenameBox.Alignment = If($bHorizontal, Align.Left, Align.Center)
  $hRenameBox.Text = hItem.Text
  $hRenameBox.Raise
  $hRenameBox.Show
  $hRenameBox.SetFocus
  
End

Private Sub ExitRename()
  
  If $hRenameBox Then 
    $hRenameBox.Hide
    $iRename = -1
    $hView.SetFocus
  Endif
  
End

Public Sub RenameBox_Activate()
  
  Dim bCancel As Boolean
  
  $aItems[$iRename].Text = $hRenameBox.Text
  bCancel = RaiseEvent(EVENT_RENAME, $iRename)
  If Not bCancel Then ExitRename
  
End

Public Sub RenameBox_KeyPress()
  
  If Key.Code = Key.Escape Then
    ExitRename
    Raise Cancel
  Else If Key.Code = Key.Enter Or If Key.Code = Key.Return Then
    RenameBox_Activate
    Stop Event
  Endif
  
End

Public Sub RenameBox_LostFocus()
  
  ExitRename
  
End

Private Function Orientation_Read() As Integer

  Return If($bHorizontal, Arrange.Horizontal, Arrange.Vertical)

End

Private Sub Orientation_Write(Value As Integer)

  Dim bHor As Boolean
  
  If Value = Arrange.Horizontal Then
    bHor = True
  Else If Value = Arrange.Vertical Then
    bHor = False
  Else
    Return
  Endif

  $bHorizontal = bHor
  $hView.ScrollBar = If($bHorizontal, Scroll.Horizontal, Scroll.Vertical)
  ScrollArea_Arrange

End

Private Function Font_Read() As Font

  Return Super.Font

End

Private Sub Font_Write(Value As Font)

  Super.Font = Value
  ScrollArea_Arrange

End

Private Function Picture_Read() As Picture

  Return $hPicture

End

Private Sub Picture_Write(Value As Picture)

  $hPicture = Value
  $hView.Refresh

End

Private Function Background_Read() As Integer

  Return $hView.Background

End

Private Sub Background_Write(Value As Integer)

  $hView.Background = Value

End

Private Sub Key_Write(Value As String)

  Dim hItem As _IconView_Item = $cItems[Value]
  
  If hItem Then
    SetCurrentItem(_FindItem(hItem))
  Else
    SetCurrentItem(-1)
  Endif

End

Public Sub _Begin()

  Inc $iLock
  
End

Public Sub _End()
  
  Dec $iLock
  If $iLock = 0 Then 
    ScrollArea_Arrange
    $hView.Refresh
  Endif
  
End


Private Function Renaming_Read() As Boolean

  Return $iRename >= 0

End

Private Function ClientWidth_Read() As Integer

  Return $hView.ClientW

End

Private Function ClientHeight_Read() As Integer

  Return $hView.ClientH

End

Private Function ScrollX_Read() As Integer

  Return $hView.ScrollX

End

Private Sub ScrollX_Write(Value As Integer)

  $hView.ScrollX = Value

End

Private Function ScrollY_Read() As Integer

  Return $hView.ScrollY

End

Private Sub ScrollY_Write(Value As Integer)

  $hView.ScrollY = Value

End

Private Function ScrollW_Read() As Integer

  Return $hView.ScrollW

End

Private Function ScrollH_Read() As Integer

  Return $hView.ScrollH

End

Public Sub Scroll(X As Integer, Y As Integer)
  
  $hView.Scroll(X, Y)
  
End

Public Sub ScrollArea_GotFocus()
  
  $hView.Refresh
  
End

Public Sub ScrollArea_LostFocus()
  
  $hView.Refresh
  
End

Public Sub ScrollArea_Font()

  Dim hItem As _IconView_Item
  
  For Each hItem In $aItems
    hItem._Invalidate
  Next
  
End

Private Function Keys_Read() As String[]

  Dim aKeys As New String[]

  For Each $cItems
    aKeys.Add($cItems.Key)
  Next
  Return aKeys

End
