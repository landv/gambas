' Gambas class file

PRIVATE CONST LIMIT_INC AS Integer = 64

PROPERTY READ Name AS String
PROPERTY READ Keys AS String[]
PROPERTY READ Count AS Integer
PROPERTY Sort AS String

PRIVATE $sTable AS String
PRIVATE $sFilter AS String
PRIVATE $aKey AS String[]
PRIVATE $aVal AS Object[]
'PRIVATE $iLastIndex AS Integer
PRIVATE $iCount AS Integer
PRIVATE $sSort AS String

PRIVATE $rData AS Result
PRIVATE $iDataIndex AS Integer

PRIVATE $aCol AS String[]

PUBLIC SUB _new(Table AS String, Filter AS String)
  
  $sTable = Table
  $sFilter = Filter
  RefreshKey

END

PRIVATE SUB RefreshKey()
  
  $aKey = DataConnection.GetPrimaryKey($sTable)
  IF $sSort THEN 
    $aKey = $aKey.Copy()
    $aKey.Add($sSort, 0)
  ENDIF
  Refresh
  
END


' PRIVATE FUNCTION Filter(sReq AS String) AS String
'   
'   IF $sFilter THEN
'     IF InStr(sReq, " WHERE") = 0 THEN
'       sReq &= " WHERE " & $sFilter
'     ELSE
'       sReq &= " AND " & $sFilter
'     ENDIF
'   ENDIF
'   
'   RETURN sReq
'   
' END

PRIVATE SUB LoadUntil(iIndex AS Integer)
  
  DIM hReq AS Request
  DIM rData AS Result
  DIM sKey AS String
  DIM aVal AS Variant[]
  DIM sReq AS String
  DIM iInd AS Integer
  DIM iCount AS Integer
  DIM iPos AS Integer
  DIM iLimit AS Integer
  
  IF iIndex < $aVal.Count THEN RETURN
  
  iLimit = (((iIndex - $aVal.Count) \ LIMIT_INC) + 1) * LIMIT_INC
  
  'sReq = "SELECT " & $aKey.Join(",") & " FROM " & $sTable
  hReq = Request.Select($aKey).From($sTable).Where($sFilter).OrderBy($aKey)
  
  IF $aVal.Count = 0 THEN
    rData = DB.Limit(iLimit).Exec(hReq.Get())
    iCount = rData.Count
  ELSE
    aVal = $aVal[$aVal.Max]
    'sReq &= " WHERE " & Where(aVal)
    hReq = hReq.Where(Common.MakeNextWhere($aKey, aVal))
    rData = DB.Limit(iLimit).Exec(hReq.Get())
    ' TODO: ne pas faire MoveNext si l'enregistrement $aVal[$aVal.Max] a disparu
    'rData.MoveNext
    iCount = rData.Count '- 1
  ENDIF
  
  iPos = $aVal.Count
  $aVal.Resize($aVal.Count + iCount)
  
  WHILE rData.Available
    aVal = NEW Variant[$aKey.Count]
    FOR iInd = 0 TO $aKey.Max
      aVal[iInd] = rData[$aKey[iInd]]
    NEXT
    $aVal[iPos] = aVal
    INC iPos
    rData.MoveNext
  WEND
  
END


PUBLIC SUB Refresh()
  
  $aVal = NEW Object[]
  $rData = NULL
  $iCount = DB.Exec(Request.Select("COUNT(*) AS nRecord").From($sTable).Where($sFilter).Get())[0]
  
END


' PUBLIC SUB SetColumns(aCol AS String[])
'   
'   $aCol = aCol.Copy()
'   
' END


PUBLIC FUNCTION _get(Index AS Integer) AS Result
  
  DIM hReq AS Request
  DIM sCol AS String
  DIM sReq AS String
  
  LoadUntil(Index)
  IF Index >= $aVal.Count THEN RETURN

  IF $rData THEN
    $rData.MoveTo(Index - $iDataIndex)
    IF $rData.Available THEN RETURN $rData
  ENDIF

  IF $aCol AND IF $aCol.Count THEN
    sCol = $aCol.Join(",")
  ELSE
    sCol = "*"
  ENDIF
  
  '$iDataIndex = Max(0, ((Index - (LIMIT_INC \ 2)) \ LIMIT_INC) * LIMIT_INC)
  $iDataIndex = Max(0, Index - (LIMIT_INC \ 2))

  IF $iDataIndex = 0 THEN
    hReq = Request.Select(sCol).From($sTable).Where($sFilter).OrderBy($aKey)
  ELSE
    hReq = Request.Select(sCol).From($sTable).Where($sFilter).Where(Common.MakeNextWhere($aKey, $aVal[$iDataIndex - 1])).OrderBy($aKey)
  ENDIF
  $rData = DB.Limit(LIMIT_INC).Exec(hReq.Get())
  
  'hReq = Request().Where($sFilter).Where(Common.MakeNextWhere($aKey, $aVal[$iDataIndex]))
  '$rData = DB.Limit(LIMIT_INC).Edit($sTable, hReq.Get())

  $rData.MoveTo(Index - $iDataIndex)
  
  RETURN $rData
    
END

PRIVATE FUNCTION Keys_Read() AS String[]
  
  RETURN DataConnection.GetPrimaryKey($sTable)
  
END


PUBLIC FUNCTION GetKeys(Index AS Integer) AS Variant[]
  
  DIM aVal AS Variant[]
  
  LoadUntil(Index)

  aVal = $aVal[Index]
  IF $sSort THEN
    aVal = aVal.Copy()
    aVal.Remove(0)
  ENDIF

  RETURN aVal
  
END


PRIVATE FUNCTION Name_Read() AS String
  
  RETURN $sTable
  
END

PRIVATE FUNCTION Sort_Read() AS String

  RETURN $sSort      

END

PRIVATE SUB Sort_Write(Value AS String)

  $sSort = Value  
  RefreshKey

END

PRIVATE FUNCTION Count_Read() AS Integer

  RETURN $iCount  

END
