' Gambas class file

Export

Inherits Panel

Event Change
Event BeforeSave(Data As Result)
Event BeforeDelete(Keys As Variant[])

Property Connection As Connection
Property Table As String
Property Filter As String
Property Read Modified As Boolean
Property Read Current As Variant[]
Property Read Index As Integer
Property Read Count As Integer
Property ReadOnly As Boolean
Property Sort As String
Property Ascending As Boolean
Property IgnoreParent As Boolean

'Property CacheSize As Integer

' Pb si on fait de Connection une propriété de l'IDE: le controle
' Connection doit être créé AVANT l'affectation à la propriété,
' et l'IDE ne sait pas gérer ça!

Public Const _Properties As String = "*,Connection{Connection},Table{Table},Filter,ReadOnly,IgnoreParent" ',CacheSize{Range:0;1024;64}"
Public Const _Group As String = "Data"
'PUBLIC CONST _DrawWith AS String = "DrawingArea"

Private $sTable As String
Private $sFilter As String
Private $bIgnoreParent As Boolean
Private $bReadOnly As Boolean
Private $bRequest As Boolean

Private $bCreate As Boolean

Private $hConn As DataConnection
Private $DB As Connection

Private $hTable As DataTable
Private $iIndex As Integer
Private $bNotVoid As Boolean
Private $bCheckModified As Boolean
Private $sError As String

Private Const ACTION_SAVE As Integer = 0
Private Const ACTION_CONTINUE As Integer = 1
Private Const ACTION_CANCEL As Integer = 2

Public Sub _new()
  
  Me.Arrangement = Arrange.None
  $iIndex = -1
  $bCreate = True
  
End

Private Sub IsMultiContainer(hCont As Container) As Boolean
  
  Dim hObj As Object = hCont
  Try Return hObj._MultiContainer
  
End

Private Sub AddChild(aChild As Object[], hChild As Control)
  
  If Not hChild.Visible Then Return
  If Common.IsControl(hChild) Or If hChild Is DataSource Or If hChild Is DataBrowser Or If hChild Is DataView Then
    aChild.Add(hChild)
  Else If hChild Is Container Then
    aChild.Insert(GetChildren(hChild))
  Endif
  
End


Private Function GetChildren(Optional hParent As Container = Me) As Object[]

  Dim hChild As Control
  Dim aChild As New Object[]
  Dim hTab As Object
  Dim iTab As Integer
  
  If IsMultiContainer(hParent) Then
  
    hTab = hParent
    For iTab = 0 To hTab.Count - 1
      For Each hChild In hTab[iTab].Children
        AddChild(aChild, hChild)
      Next
    Next
  
  Else
  
    For Each hChild In hParent.Children
      AddChild(aChild, hChild)
    Next
    
  Endif
  
  Return aChild
  
End


Private Sub SetFocus(sKey As String)
  
  Dim hChild As Object
  
  For Each hChild In GetChildren()
  
    If Common.IsControl(hChild) Then
      If hChild.Field = sKey Then
        hChild.SetFocus
        Return
      Endif
    Endif
  
  Next
  
End

Private Sub GetParent() As DataSource
  
  If Not $bIgnoreParent Then Return Common.GetSource(Me)
  
End


Private Function GetFilter() As String

  Dim hSrc As DataSource  
  Dim sReq As String
  Dim vVal As Variant
  Dim sField As String
  
  hSrc = GetParent()
  If hSrc Then 
    For Each sField In hSrc.GetKeys()
      'iPos = $hTable.Keys.Find(sField) 
      'IF iPos < 0 THEN CONTINUE
      vVal = hSrc[sField]
      If IsNull(vVal) Then Continue
      If sReq Then sReq &= " AND "
      sReq &= _GetDB().Subst(sField & " = &1", vVal)
    Next
  Endif
  
  If $sFilter Then
    If sReq Then sReq &= " AND "
    sReq &= $sFilter
  Endif

  Return sReq

End

Private Function CheckModified(Optional bSave As Boolean = True) As Boolean

  Dim hChild As Object
  Dim bModified As Boolean
  
  For Each hChild In GetChildren()
    If Common.IsControl(hChild) Or If hChild Is DataSource Then
      If hChild.Modified Then
        bModified = True
        Break
      Endif
    Endif
  Next
  
  If bModified And bSave Then
    $bCheckModified = True
    Me.Save()
    $bCheckModified = False
    Return False
  Else
    Return bModified
  Endif
  
End


Public Function MoveFirst() As Boolean

  If CheckModified() Then Return True
  If $hTable.Count = 0 Then Return True

  $iIndex = 0
  Redraw
  
End

Public Function MovePrevious() As Boolean

  If $bCreate Then Return MoveFirst()
  If $iIndex = 0 Then Return
  If CheckModified() Then Return True

  Dec $iIndex  
  Redraw
  
End

Public Function MoveNext() As Boolean

  If $bCreate Then Return MoveFirst()
  If $iIndex >= $hTable.Count - 1 Then Return  
  If CheckModified() Then Return True

  Inc $iIndex
  Redraw
  
End

Public Function MoveLast() As Boolean
  
  If CheckModified() Then Return True
  If $hTable.Count = 0 Then Return True

  $iIndex = $hTable.Count - 1
  Redraw
  
End

Public Function MoveTo(Index As Integer) As Boolean
  
  If CheckModified() Then Return True
  If Index = $iIndex Then Return

  $iIndex = Index
  Redraw
  
End


Private Sub Redraw(Optional bUpdate As Boolean)

  Dim hChild As Object

  SetCreateMode($iIndex < 0)

  For Each hChild In GetChildren()
    If Common.IsControl(hChild) Or If hChild Is DataSource Then
      hChild.Update
    Else If hChild Is DataBrowser Or If hChild Is DataView Then
      If bUpdate Then 
        hChild.Update
      Endif
    Endif
  Next

  Raise Change

End

Public Sub _OnDatabaseChange()
  
  Dim hChild As Object

  $hConn = Null
  Load
  
  For Each hChild In GetChildren()
    'DEBUG hChild.Name
    If hChild Is DataSource Then
      If Not hChild.Connection Then hChild._OnDatabaseChange()
    'Else If Common.IsControl(hChild) Or If hChild Is DataBrowser Or If hChild Is DataView Then
    '  Try hChild._OnDatabaseChange()
    Endif
  Next
  
End


Public Sub Update()
  
  Load
  
End

Public Sub Cancel()
  
  Redraw  
  
End

Public Sub _Check() As Boolean

  Dim hDB As Connection

  If Not $sTable Then Return True
  
  hDB = _GetDB()
  If Common.CheckDB(hDB) Then Return True
  
  If Not $hConn Then $hConn = New DataConnection(hDB)
  
End


Private Function Load() As Boolean
  
  If _Check() Then Goto VOID
  
  Try $hTable = New DataTable($hConn, $sTable, GetFilter())
  If Error Then 
    $sError = Error.Text
    Goto VOID
  Endif

  $bRequest = $hTable.Request
  
  $iIndex = -1
  
  Redraw(True)
  
  $bNotVoid = True
  Return
  
VOID:

  $hTable = Null
  $iIndex = -1
  If $bNotVoid Then
    $bNotVoid = False
    Redraw(True)
  Endif
  Return True
  
End

Public Sub Create(Optional bUpdate As Boolean)
  
  If CheckModified() Then Return

  If bUpdate Then $hTable.Refresh
  $iIndex = -1
  Redraw(bUpdate)
  SetFocus($hTable.Keys[0])
  
End

Public Sub _EditCurrent() As Result
  
  Dim aKey As String[]
  Dim aVal As Variant[]
  Dim hSrc As DataSource
  Dim sKey As String
  Dim iPos As Integer

  aVal = Me.Current
  If Not aVal Then Return
  aKey = $hTable.Keys
  
  hSrc = GetParent()
  If hSrc Then
    For Each sKey In hSrc.GetKeys()
      iPos = aKey.Find(sKey)
      If iPos >= 0 Then aVal[iPos] = hSrc[sKey]
    Next
  Endif

  Return _GetDB().Edit($sTable, Replace(Common.MakeWhere(aKey, aVal), "&", "&&"))

End

Public Sub _UpdateCurrent(rData As Result) As Boolean

  Dim bCancel As Boolean
  
  bCancel = Raise BeforeSave(rData)
  If bCancel Then Return True
  
  rData.Update
  $hTable.Refresh

  Redraw(True)
    
End

Public Sub _CreateCurrent() As Result
  
  Dim rData As Result
  Dim hSrc As DataSource
  Dim sKey As String
  
  rData = _GetDB().Create($sTable)

  hSrc = GetParent()
  If hSrc Then
    For Each sKey In hSrc.GetKeys()
      Try rData[sKey] = hSrc[sKey]
    Next
  Endif

  Return rData
  
End

Public Function Save(Optional bMessage As Boolean = True) As Boolean
  
  Dim aKey As String[]  
  Dim hChild As Object
  Dim rData As Result
  Dim sKey As String
  Dim iInd As Integer
  Dim aVal As Variant[]
  Dim bCancel As Boolean

  Inc Application.Busy
  
  For Each hChild In GetChildren()
    If Common.IsControl(hChild) Then
      If Not hChild.Valid Then
        Dec Application.Busy
        Message.Warning(("Invalid value."))
        hChild.SetFocus
        Return True
      Endif
    Endif
  Next
    
  aKey = $hTable.Keys
  
  If $bCreate Then

    rData = _CreateCurrent()

    For Each hChild In GetChildren()
      If Common.IsControl(hChild) Then
        rData[hChild.Field] = hChild.Value
      Endif
    Next
    
    For Each sKey In aKey
      If _GetInfo(sKey).ReadOnly Then Continue
      If IsNull(rData[sKey]) Then
        Dec Application.Busy
        Message.Warning(("You must fill all mandatory fields."))
        SetFocus(sKey)
        Return True
      Endif
    Next
    
    aVal = New Variant[aKey.Count]
    For iInd = 0 To aKey.Max
      aVal[iInd] = rData[aKey[iInd]]
    Next
    
    bCancel = Raise BeforeSave(rData)
    If Not bCancel Then rData.Update
  
    Redraw(True)
    If Not $bCheckModified Then Create(True)

  Else

    ' aVal = Me.Current
    ' 
    ' hSrc = Common.GetSource(Me)
    ' If hSrc Then
    '   For Each sKey In hSrc.GetKeys()
    '     iPos = aKey.Find(sKey)
    '     If iPos >= 0 Then aVal[iPos] = hSrc[sKey]
    '   Next
    ' Endif
    ' 
    ' rData = _GetDB().Edit($sTable, Replace(Common.MakeWhere(aKey, aVal), "&", "&&"))
    ' 'rData = $hTable[$iIndex]
    rData = _EditCurrent()
    If Not rData Or If Not rData.Available Then 
      Dec Application.Busy
      Return True
    Endif

    For Each hChild In GetChildren()
      If Common.IsControl(hChild) Then
        rData[hChild.Field] = hChild.Value
      Endif
    Next
    
    _UpdateCurrent(rData)
    If $iIndex >= $hTable.Count Then
      Create(True)
    Endif
    '$iIndex = -1
    'MoveTo($iIndex)
  
  Endif
  
Finally

  Dec Application.Busy

Catch

  If bMessage Then Message.Error(Error.Text)
  Return True
  
End

Public Sub _DeleteCurrent() As Boolean
  
  Dim aVal As Variant[]
  Dim aKey As String[]
  Dim hSrc As DataSource
  Dim sKey As String
  Dim iPos As Integer
  Dim bCancel As Boolean

  aVal = Me.Current
  If Not aVal Then Return True
  
  bCancel = Raise BeforeDelete(Current_Read())
  If bCancel Then Return True
  
  aKey = $hTable.Keys
  
  hSrc = GetParent()
  If hSrc Then
    For Each sKey In hSrc.GetKeys()
      iPos = aKey.Find(sKey)
      If iPos >= 0 Then aVal[iPos] = hSrc[sKey]
    Next
  Endif

  With _GetDB()
    .Exec(.SQL.Delete().From($sTable).Where(Common.MakeWhere(aKey, aVal))())
  End With
  
End


Public Function Remove() As Boolean

  If $bCreate Then
    Create()
    Return
  Endif
  
  If $iIndex >= 0 And $iIndex < $hTable.Count Then
    If _DeleteCurrent() Then Return
    Create(True)
  Else
    Create()
  Endif
  
End


Public Function _get((Key) As String) As Variant
  
  If $iIndex < 0 Then
    If Not $bRequest Then Return $hConn.GetDefaultValue($sTable, Key)
  Else 
    Try Return $hTable[$iIndex][Key]
  Endif
  
End

Public Function _GetInfo((Key) As String) As DataField
  
  If _Check() Then Return
  If Not $bRequest Then Return $hConn[$sTable, Key, $bCreate]
  Return $hTable.GetFieldInfo(Key)
  
End

Public Sub _GetDataConnection() As DataConnection
  
  Return $hConn
  
End


Public Function GetKeys() As String[]
  
  Return $hTable.Keys
  
End

' PRIVATE FUNCTION Connection_Read() AS Connection
' 
'   IF $hConn <> DB.Current THEN RETURN $hConn
'   
' END
' 
' PRIVATE SUB Connection_Write(hConn AS Connection)
'   
'   IF NOT hConn THEN hConn = DB.Current
'   
'   $hConn = hConn
'   Load
'   
' END


Private Function Table_Read() As String
  
  Return $sTable
  
End

Private Sub Table_Write(sTable As String)
  
  $sError = ""
  $sTable = sTable
  Load
  If $sError Then Error.Raise($sError)
  
End

Private Function Filter_Read() As String
  
  Return $sFilter
  
End

Private Sub Filter_Write(sFilter As String)
  
  $sFilter = sFilter
  Load
  
End

Private Function Modified_Read() As Boolean
  
  Return CheckModified()  
  
End

Private Function Current_Read() As Variant[]

  If $iIndex >= 0 And If $iIndex < $hTable.Count Then
    Return $hTable.GetKeys($iIndex).Copy()
  Endif
  
End

Private Sub SetCreateMode(bCreate As Boolean)

  If bCreate = $bCreate Then Return
  $bCreate = bCreate
  '$cInfo.Clear
  
End

Private Function Index_Read() As Integer
  
  Return $iIndex
  
End


Public Function _GetTable() As DataTable
  
  Return $hTable
  
End

Public Function _GetDB() As Connection
  
  Dim hSrc As DataSource
  
  If $DB Then Return $DB
  hSrc = Common.GetSource(Me)
  If hSrc Then Return hSrc._GetDB()
  Return DB.Current
  
End



Private Function ReadOnly_Read() As Boolean
  
  Return $bReadOnly Or $bRequest
  
End

Private Sub ReadOnly_Write(bReadOnly As Boolean)
  
  If $bReadOnly = bReadOnly Then Return
  $bReadOnly = bReadOnly
  Load
  
End


Private Function Sort_Read() As String

  Return $hTable.Sort  

End

Private Sub Sort_Write(Value As String)

  If CheckModified() Then
    If Save() Then Return
  Endif
  $hTable.Sort = Value
  Redraw

End

' Private Function CacheSize_Read() As Integer
' 
'   Return $hTable.LIMIT_INC
' 
' End
' 
' Private Sub CacheSize_Write(Value As Integer)
' 
'   If Value <= 0 Then Value = 64
'   
'   $hTable.LIMIT_INC = Value
' 
' End

Public Sub Reset()
  
  If Not $hTable Then Return
  $hTable.Reset()
  $hTable = Null
  Update
  
End

Public Sub ResetAll()
  
  $hConn.Reset
  
End

Private Function Connection_Read() As Connection

  Return $DB

End

Private Sub Connection_Write(Value As Connection)

  $DB = Value
  _OnDatabaseChange()

End

Private Function Count_Read() As Integer

  If $hTable Then Return $hTable.Count

End

Private Function Ascending_Read() As Boolean

  Return $hTable.Ascending

End

Private Sub Ascending_Write(Value As Boolean)

  If CheckModified() Then
    If Save() Then Return
  Endif
  $hTable.Ascending = Value
  Redraw

End

Private Function IgnoreParent_Read() As Boolean

  Return $bIgnoreParent

End

Private Sub IgnoreParent_Write(Value As Boolean)

  If Value = $bIgnoreParent Then Return
  $bIgnoreParent = Value
  Load

End
