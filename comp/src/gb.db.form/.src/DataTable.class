' Gambas class file

Public LIMIT_INC As Integer = 256

Event CacheResize()

Property Read Name As String
Property Read Keys As String[]
Property Read Count As Integer
Property Sort As String
Property Ascending As Boolean

Property Read CacheSize As Integer

Private $hConn As DataConnection
Private $DB As Connection
Private $sTable As String
Private $bRequest As Boolean
Private $sFilter As String
Private $aKey As String[]
Private $aVal As Object[]
'PRIVATE $iLastIndex AS Integer
Private $iCount As Integer
Private $sSort As String
Private $bAscent As Boolean

Private $rData As Result
Private $iDataIndex As Integer

Private $aCol As String[]

Public Sub _new(hConn As DataConnection, Table As String, Filter As String)
  
  Dim iPos As Integer
  Dim sStart As String
  
  $hConn = hConn
  $DB = hConn.Connection
  $sTable = Trim(Table)
  $sFilter = Filter
  
  iPos = InStr($sTable, " ")
  If iPos Then
    sStart = UCase(Left($sTable, iPos - 1))
    $bRequest = ["SELECT", "WITH", "PRAGMA"].Exist(sStart)
  Endif
  
  If Not $bRequest Then $hConn.CheckTable(Table)
  
  RefreshKey

End

Private Sub RefreshKey()
  
  If $bRequest Then
    $aKey = New String[]
  Else  
    $aKey = $hConn.GetPrimaryKey($sTable)
    If $sSort Then 
      $aKey = $aKey.Copy()
      $aKey.Add($sSort, 0)
    Endif
  Endif
  
  Refresh
  
End


' PRIVATE FUNCTION Filter(sReq AS String) AS String
'   
'   IF $sFilter THEN
'     IF InStr(sReq, " WHERE") = 0 THEN
'       sReq &= " WHERE " & $sFilter
'     ELSE
'       sReq &= " AND " & $sFilter
'     ENDIF
'   ENDIF
'   
'   RETURN sReq
'   
' END

Private Sub GetSortKeys() As String[]
  
  Dim aSort As String[]
  
  If $sSort Then
    aSort = $aKey.Copy()
    If Not $bAscent Then aSort[0] &= " DESC"
  Else
    aSort = $aKey
  Endif
  
  Return aSort
  
End


Private Sub LoadUntil(iIndex As Integer)
  
  Dim rData As Result
  Dim aVal As Variant[]
  Dim iInd As Integer
  Dim iCount As Integer
  Dim iPos As Integer
  Dim iLimit As Integer
  Dim aSort As String[]
  Dim hReq As SQLRequest
  Dim iBusy As Integer = Application.Busy
  
  If $aKey.Count = 0 Then Return
  
  If iIndex < $aVal.Count Then Return
  
  Inc Application.Busy
  
  iLimit = (((iIndex - $aVal.Count) \ LIMIT_INC) + 1) * LIMIT_INC
  
  aSort = GetSortKeys()
  
  'sReq = "SELECT " & $aKey.Join(",") & " FROM " & $sTable
  'hReq = Request.Select($aKey).From($sTable).Where($sFilter).OrderBy(aSort)

  hReq = $DB.SQL.Select($aKey).From($sTable).Where($sFilter).OrderBy(aSort)
  
  If $aVal.Count = 0 Then
    rData = $DB.Limit(iLimit).Exec(hReq())
    
    iCount = rData.Count
  Else
    aVal = $aVal[$aVal.Max]
    'sReq &= " WHERE " & Where(aVal)
    hReq = hReq.And().Where(Common.MakeNextWhere(aSort, aVal))
    
    rData = $DB.Limit(iLimit).Exec(hReq())
    ' TODO: ne pas faire MoveNext si l'enregistrement $aVal[$aVal.Max] a disparu
    'rData.MoveNext
    iCount = rData.Count '- 1
  Endif

  iPos = $aVal.Count
  $aVal.Resize($aVal.Count + iCount)
  
  While rData.Available
    aVal = New Variant[$aKey.Count]
    For iInd = 0 To $aKey.Max
      aVal[iInd] = rData[$aKey[iInd]]
    Next
    $aVal[iPos] = aVal
    Inc iPos
    rData.MoveNext
  Wend
  
  Raise CacheResize
  
Finally
  If iBusy <> Application.Busy Then Dec Application.Busy
End


Public Sub Refresh()
  
  $aVal = New Object[]
  $rData = Null
  $iCount = -1
  
End


' PUBLIC SUB SetColumns(aCol AS String[])
'   
'   $aCol = aCol.Copy()
'   
' END

Public Sub HasDataFor(Index As Integer) As Boolean
  
  If Not $rData Then Return
  Return Index <= $rData.Count
  
End


Public Function _get(Index As Integer) As Result
  
  Dim iBusy As Integer = Application.Busy
  Dim hReq As SQLRequest
  Dim aSort As String[]
  Dim aCol As String[]
  
  If $aCol And If $aCol.Count Then
    aCol = $aCol.Copy()
  Else
    aCol = Null
  Endif
  
  If $aKey.Count = 0 Then
  
    If Not $rData Then
      
      Inc Application.Busy
  
      If $bRequest Then
        If $sSort Then
          '$rData = $DB.Exec($sTable & " ORDER BY " & $sSort & If($bAscent, "", " DESC"))
          $rData = $DB.Exec($sTable & " ORDER BY " & $DB.Quote($sSort) & If($bAscent, "", " DESC"))
        Else
          $rData = $DB.Exec($sTable)
        Endif
      Else
        If $sSort Then
          If aCol Then aCol.Add($sSort, 0)
          hReq = $DB.SQL.Select(aCol).From($sTable).Where($sFilter).OrderBy($sSort & If($bAscent, "", " DESC"))
        Else
          hReq = $DB.SQL.Select(aCol).From($sTable).Where($sFilter)
        Endif
        
        $rData = $DB.Exec(hReq())
      Endif
  
      Raise CacheResize
      
    Endif
    
    $rData.MoveTo(Index)
  
  Else
  
    LoadUntil(Index)
  
    If Index >= $aVal.Count Then Return $rData
      
    If $rData Then
      $rData.MoveTo(Index - $iDataIndex)
      If $rData.Available Then Return $rData
    Endif
  
    Inc Application.Busy
  
    '$iDataIndex = Max(0, ((Index - (LIMIT_INC \ 2)) \ LIMIT_INC) * LIMIT_INC)
    $iDataIndex = Max(0, Index - (LIMIT_INC \ 2))
  
    aSort = GetSortKeys()
  
    If $iDataIndex = 0 Then
      hReq = $DB.SQL.Select(aCol).From($sTable).Where($sFilter).OrderBy(aSort)
    Else
      hReq = $DB.SQL.Select(aCol).From($sTable).Where($sFilter).And().Where(Common.MakeNextWhere(aSort, $aVal[$iDataIndex - 1])).OrderBy(aSort)
    Endif
    
    $rData = $DB.Limit(LIMIT_INC).Exec(hReq.Get())
    
    'hReq = Request().Where($sFilter).Where(Common.MakeNextWhere($aKey, $aVal[$iDataIndex]))
    '$rData = DB.Limit(LIMIT_INC).Edit($sTable, hReq.Get(DB))
  
    $rData.MoveTo(Index - $iDataIndex)
    
  Endif
  
  If iBusy <> Application.Busy Then Dec Application.Busy
  Return $rData
  
Finally
  If iBusy <> Application.Busy Then Dec Application.Busy
End

Private Function Keys_Read() As String[]
  
  If $bRequest Then
    Return New String[]
  Else
    Return $hConn.GetPrimaryKey($sTable)
  Endif
  
End


Public Function GetKeys(Index As Integer) As Variant[]
  
  Dim aVal As Variant[]
  
  If $aKey.Count = 0 Then Return Null
  
  LoadUntil(Index)

  Try aVal = $aVal[Index]
  If Error Then Return
  
  If $sSort Then
    aVal = aVal.Copy()
    aVal.Remove(0)
  Endif

  Return aVal
  
End

Public Sub SetKeys(Value As Variant[]) As Integer

  Dim iInd, iIndex As Integer
  Dim aComp As Variant[]
  
  Do
    
    aComp = GetKeys(iIndex)
    
    If Not aComp Then Return -1
    If aComp.Count <> Value.Count Then Return -1
    
    For iInd = 0 To aComp.Max
      If aComp[iInd] <> Value[iInd] Then Break
    Next
    
    If iInd = aComp.Count Then Return iIndex
    
    Inc iIndex
    
  Loop

End


Private Function Name_Read() As String
  
  Return $sTable
  
End

Private Function Sort_Read() As String

  Return $sSort

End

Private Sub Sort_Write(Value As String)

  If $sSort = Value Then Return
  $sSort = Value  
  $bAscent = True
  RefreshKey

End

Private Function Count_Read() As Integer

  If $iCount < 0 Then
    If $bRequest Then
      $iCount = Me[0].Count
    Else
      '$iCount = $DB.Exec(Request.Select("COUNT(*) AS nRecord").From($sTable).Where($sFilter).Get($DB))[0]
      $iCount = $DB.Exec($DB.SQL.Select("COUNT(*) AS nRecord").From($sTable).Where($sFilter)())[0]
    Endif
  Endif

  Return $iCount  

End

Public Sub GetFields() As String[]
  
  Dim hField As ResultField
  Dim aField As String[]
  
  If $bRequest Then
    aField = New String[]
    For Each hField In Me[0].Fields
      aField.Add(hField.Name)
    Next
    Return aField
  Else
    Return $hConn.GetFields($sTable)
  Endif
  
End

Public Sub GetFieldInfo(sField As String) As DataField
  
  Dim hField As DataField
  
  If $bRequest Then
    hField = New DataField
    hField.FromField(Me[0].Fields[sField])
    Return hField
  Else
    Return $hConn[$sTable, sField]
  Endif
  
End

Private Function CacheSize_Read() As Integer

  If $bRequest Then
    If $rData Then
      Return $rData.Count
    Else
      Return 0
    Endif
  Else
    Return $aVal.Count
  Endif

End

Public Sub Reset()

  If $bRequest Then
    $hConn.Reset()
  Else
    $hConn.Reset($sTable)
  Endif
  
End

Private Function Ascending_Read() As Boolean

  Return $bAscent

End

Private Sub Ascending_Write(Value As Boolean)

  If $bAscent = Value Then Return
  $bAscent = Value
  RefreshKey

End
