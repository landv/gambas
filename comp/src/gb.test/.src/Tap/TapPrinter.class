' Gambas class file

''' Low-level class for planning and printing test results in Test Anything Protocol ([TAP]) format.
''' 
''' [TAP]: http://testanything.org/tap-specification.html

Export

Private Const NO_PLAN As Integer = -1

Private $hOutput As Stream
Private $iPlan As Integer = NO_PLAN
Private $iTestsRun As Integer = 0
Private $iLast As Integer = 0

Property {Output} As Stream
Property Read Planned As Integer
Property Read Count As Integer
Property Read Last As Integer

Public Sub _new(Optional Tests As Integer, Optional Comment As String, Optional {Output} As Stream = File.Out)

    $hOutput = {Output}
    If Not IsMissing(Tests) Then Plan(Tests, Comment)

End

Public Sub Plan(Tests As Integer, Optional Comment As String)

    If $iTestsRun Then Error.Raise(Subst$(("Tests already started, at test #&1"), $iTestsRun))
    ' TAP specification lists '1..0 # Skipped: WWW::Mechanize not installed'
    ' as a valid example.
    If Tests <= NO_PLAN Then Error.Raise(("Number of tests must be non-negative"))
    $iPlan = Tests
    Print #$hOutput, "1.."; $iPlan;
    Print #$hOutput, IIf(Comment, " # " & Comment, "")

End

Public Sub Finish()

    If $iPlan > NO_PLAN Then Return ' already printed the "plan" line
    $iPlan = $iTestsRun
    Print #$hOutput, "1.."; $iPlan

End

Public Sub Test(Result As Boolean, Optional TestNr As Integer, Optional Description As String, Optional Directive As Integer, Optional Comment As String)

    Dim sDirective As String

    ' It is not advised to start a description with a number token because
    ' it will be interpreted as the (optional) test number. We issue a warning
    ' about this but fix it anyway by always printing the TestNr before *and*
    ' prefixing the Description with a dash, as is common.
    If Description Match "^[0-9]+(\\s|$)" Then
        Error Subst$(("Warning: Description '&1' should not start with a number"), Description)
    Endif
    If Description Like "*#*" Then
        Error.Raise(Subst$(("Description '&1' may not contain a '#' character"), Description))
    Endif

    Inc $iTestsRun
    If Not TestNr Then TestNr = $iTestsRun
    $iLast = TestNr
    If Not IsMissing(Directive) Then
        ' Matches the values of the Enum Tap.Todo, Tap.Skip
        sDirective = Choose(Directive, "TODO", "SKIP")
        If Not sDirective Then Error.Raise(Subst$(("Unsupported directive '&1'"), Directive))
    Endif

    Print #$hOutput, Subst$("&1 &2 - &3", IIf(Result, "ok", "not ok"), TestNr, Description);
    Print #$hOutput, IIf(sDirective, Subst$(" # &1&2", sDirective, IIf(Comment, " " & Comment, "")), "")

End

Public Sub BailOut(Optional Comment As String)

    Print #$hOutput, "Bail out!";; Comment

End

Public Sub Diagnostic(Comment As String)

    Print #$hOutput, "#";; Comment

End

Public Sub Print({Line} As String)

    Print #$hOutput, {Line}

End

Private Function Output_Read() As Stream

    Return $hOutput

End

Private Sub Output_Write(Value As Stream)

    $hOutput = Value

End

Private Function Planned_Read() As Integer

    Return $iPlan

End

Private Function Count_Read() As Integer

    Return $iTestsRun

End

Private Function Last_Read() As Integer

    Return $iLast

End
