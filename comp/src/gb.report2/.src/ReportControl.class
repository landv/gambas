' Gambas class file

Export
Create Private

Public Const _IsControl As Boolean = True
Public Const _IsContainer As Boolean = False
Public Const _Properties As String = "Left{ReportCoord},Top{ReportCoord},Width{ReportCoord},Height{ReportCoord},Brush{ReportBrush},Visible=True,Fixed,Font,Padding,Margin,Ignore,Expand,AutoResize,Tag,Range"
Public Const _Family As String = "Report"
Public _SizeInt As ReportSizeHints
Public _Count As Integer = 1
Public _Finished As Boolean
Private $iDataindex As Integer

Private $iIndex As Integer
Public _PageDataIndex As Integer
Public Name As String
'Object Management
Static Public _ObjectFromId As New Collection
Static Public _iCurPagePos As Integer
Static Private $iLastId As Integer
Static Private $aFont As String[] = ["DejaVu Serif", "Liberation Serif", "Bitstream Vera Serif", "Serif", "Arial"]

Property Read Id As Integer
Property Read Parent As ReportContainer
Property Tag As Variant
Property Padding As ReportPadding
Property Margin As ReportMargin
Property Brush As ReportBrush
'Property {Color} As Integer

Property Read _Top As Float               ''Top of the control in cm
Property Read _Height As Float            ''Height of the control in cm
Property Read _Width As Float             ''Width of the control in cm
Property Read _Left As Float              ''Left of the control in cm
Property Read _RelativeLeft As Boolean    ''Use percentage for Left pos?
Property Read _RelativeTop As Boolean     ''Use percentage for Top Pos?
Property Read _RelativeWidth As Boolean   ''Use percentage for width?
Property Read _RelativeHeight As Boolean  ''Use percentage for height ?
Property _Index As Integer
Property Range As String
Property Left As String
Property Top As String
Property X As String
Property Y As String
Property Width As String
Property Height As String
Property Visible As Boolean
Property {Font} As Font
Property Expand As Boolean
Property Ignore As Boolean
Property Fixed As Boolean
Property Autoresize As Boolean
Property Read {Report} As Report
Property _ReportId As Integer
Property Read DataIndex As Integer
Property ForceNewPage As Boolean
Property _DataIndex As Integer
'Public _DataIndex As New Collection
Private $bForceNewPage As Boolean
Private $iMyId As Integer
Private $iParentId As Integer
Private $vTag As Variant
Private $iReportId As Integer
Private $hBrush As ReportBrush
Private $iColor As Integer
Private $fLeft As Float = 0.0
Private $fTop As Float = 0.0
Private $fWidth As Float = 0.0
Private $fHeight As Float = 0.0
Private $sHeight As String = "0cm"
Private $sLeft As String = "0cm"
Private $sWidth As String = "0cm"
Private $sTop As String = "0cm"
Private $hPadding As New ReportPadding
Private $hMargin As New ReportMargin
Private $iVisible As Boolean = True
Private $hFont As New Font
Private $bExpand As Boolean
Private $bFixed As Boolean
Private $bAutoresize As Boolean = False
Private $bRelativeLeft As Boolean
Private $bRelativeTop As Boolean
Private $bRelativeWidth As Boolean
Private $bRelativeHeight As Boolean
Private $bIgnore As Boolean = False
Private $sRange As String

Public Sub _New(Optional Parent As ReportContainer = Null)

  Dim hRep As Report

  $iMyId = $iLastId
  Inc $iLastId
  If IsNull(Parent) Then
    $iParentId = -1
    $iReportId = $iMyId

  Else
    If Parent Is Report Then
      hRep = Parent
      $iParentId = hRep._Container.id
      hRep._Container._Add(Me)
      $iReportId = hRep.id
    Else
      $iParentId = Parent.Id
      Parent._Add(Me)
      $iReportId = Parent._ReportId
    Endif
  Endif

End

Private Function Id_Read() As Integer

  Return $iMyId

End

Private Function Parent_Read() As ReportContainer

  Return ReportControl._ObjectFromId[$iParentId]

End

Private Function Left_Read() As String

  Return $sLeft

End

Private Sub Left_Write(Value As String)

  $sLeft = Value
  Me.Report._LayoutIsDirty = True

End

Private Function Top_Read() As String

  Return $sTop

End

Private Sub Top_Write(Value As String)

  $sTop = Value
  Me.Report._LayoutIsDirty = True

End

Private Function Width_Read() As String

  Return $sWidth

End

Private Sub Width_Write(Value As String)

  $sWidth = Value
  Me.Report._LayoutIsDirty = True

End

Private Function Height_Read() As String

  Return $sHeight

End

Private Sub Height_Write(Value As String)

  $sHeight = Value
  Me.Report._LayoutIsDirty = True

End

Private Function Expand_Read() As Boolean

  Return $bExpand

End

Private Sub Expand_Write(Value As Boolean)

  $bExpand = Value
  Me.Report._LayoutIsDirty = True

End

Public Sub _GetSizeHints((AvailableW) As Float, (AvailableH) As Float, TotalWidth As Float, TotalHeight As Float, DataIndex As Integer) As ReportSizeHints

  'Error.Raise("Something goes wrong the _GetSizeHints is not correctly implemented")
  'Implementaion standart du sizeInt hors autoresize et hbox
  '

  Dim hMyHints As New ReportSizeHints

  If Me._RelativeHeight Then
    hMyHints.Height = TotalHeight * Me._Height / 100
  Else
    hMyHints.Height = Me._Height
  Endif

  If Me._RelativeWidth Then
    hMyHints.Width = TotalWidth * Me._Width / 100
  Else
    hMyHints.Width = Me._Width
  Endif
  Return hMyHints

End

Public Sub _PaintBeFore((Page) As Integer, (X) As Float, (Y) As Float, (hControl) As TControl, (DataIndex) As Integer)

End

Public Sub _Paint(Page As Integer, X As Float, Y As Float, hControl As TControl, DataIndex As Integer)

End

Public Sub _PaintFrame((Page) As Integer, (X) As Float, (Y) As Float, (hControl) As TControl, (DataIndex) As Integer)

  Me._Paint(Page, X, Y, hControl, DataIndex)

End

Public Sub _PaintAfter((Page) As Integer, (X) As Float, (Y) As Float, (hControl) As TControl, (DataIndex) As Integer)

End

Private Function Visible_Read() As Boolean

  Return $iVisible

End

Private Sub Visible_Write(Value As Boolean)

  $iVisible = Value
  Me.Report._LayoutIsDirty = True

End

Public Sub Move(X As Float, Y As Float, W As Float, H As Float)

  $fLeft = X
  $fTop = Y
  $fWidth = W
  $fHeight = H
  Me.Report._LayoutIsDirty = True

End

Private Function Tag_Read() As Variant

  Return $vTag

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value

End

Private Function Font_Read() As Font

  Dim hFont As Font
  Dim sFont As String
  Dim s As String

  If Not $hFont Then
    If $iParentId = -1 Then
      For Each s In $aFont
        If Fonts.Exist(s) Then
          hFont = New Font
          hFont.Name = s
          Break
        Endif
      Next
      If hFont Then
        hFont.Size = 12
      Else
        hFont = Paint.Font.Copy
      Endif

    Else
      hFont = _ObjectFromId[$iParentId].font
    Endif
    Return hFont
  Else
    Return $hFont
  Endif

End

Private Sub Font_Write(Value As Font)

  $hFont = Value '.Copy()
  Me.Report._LayoutIsDirty = True

End

Private Function Padding_Read() As ReportPadding

  Return $hPadding

End

Private Sub Padding_Write(Value As ReportPadding)

  $hPadding = Value
  Me.Report._LayoutIsDirty = True

End

Private Function _Top_Read() As Float

  Return $fTop

End

Private Function _Height_Read() As Float

  Return $fHeight

End

Private Function _Width_Read() As Float

  Return $fWidth

End

Private Function _Left_Read() As Float

  Return $fLeft

End

Public Function _SetChildGeometry((X) As Float, (Y) As Float, (W) As Float, (H) As Float, (ContPage) As Integer, (TCont) As TControl, (bInFixed) As Boolean)

End

Private Function Autoresize_Read() As Boolean

  Return $bAutoresize

End

Private Sub Autoresize_Write(Value As Boolean)

  $bAutoresize = Value
  Me.Report._LayoutIsDirty = True

End

Private Function _RelativeWidth_Read() As Boolean

  Return $bRelativeWidth

End

Private Function _RelativeHeight_Read() As Boolean

  Return $bRelativeHeight

End

''Convert recursively string values to unified values in cm
Public Sub _NormalizeUnits()

  Dim hSizeParse As TSizeParse

  'Left
  hSizeParse = New TSizeParse($sLeft, True)
  $fLeft = hSizeParse.GetValue()
  $bRelativeLeft = hSizeParse.IsRelative()

  'Right
  hSizeParse = New TSizeParse($sTop, True)
  $fTop = hSizeParse.GetValue()
  $bRelativeTop = hSizeParse.IsRelative()

  'Width
  hSizeParse = New TSizeParse($sWidth, True)
  $fWidth = hSizeParse.GetValue()
  $bRelativeWidth = hSizeParse.IsRelative()

  'Height
  hSizeParse = New TSizeParse($sHeight, True)
  $fHeight = hSizeParse.GetValue()
  $bRelativeHeight = hSizeParse.IsRelative()

  'Padding
  ' hSizeParse = New TSizeParse($sPadding, True)
  ' $fPadding = hSizeParse.GetValue()
  ' $bRelativePadding = hSizeParse.IsRelative()

  hSizeParse = New TSizeParse($hPadding.Left, True)
  $hPadding._Left = hSizeParse.GetValue()

  hSizeParse = New TSizeParse($hPadding.Right, True)
  $hPadding._Right = hSizeParse.GetValue()

  hSizeParse = New TSizeParse($hPadding.Top, True)
  $hPadding._Top = hSizeParse.GetValue()

  hSizeParse = New TSizeParse($hPadding.Bottom, True)
  $hPadding._Bottom = hSizeParse.GetValue()

  hSizeParse = New TSizeParse($hMargin.Left, True)
  $hMargin._Left = hSizeParse.GetValue()

  hSizeParse = New TSizeParse($hMargin.Right, True)
  $hMargin._Right = hSizeParse.GetValue()

  hSizeParse = New TSizeParse($hMargin.Top, True)
  $hMargin._Top = hSizeParse.GetValue()

  hSizeParse = New TSizeParse($hMargin.Bottom, True)
  $hMargin._Bottom = hSizeParse.GetValue()

  '

End

Private Function Ignore_Read() As Boolean

  Return $bIgnore

End

Private Sub Ignore_Write(Value As Boolean)

  $bIgnore = Value
  Me.Report._LayoutIsDirty = True

End

Private Function Report_Read() As Report

  Return ReportControl._ObjectFromId[$iReportId]

End

Private Function _ReportId_Read() As Integer

  Return $iReportId

End

Private Function Fixed_Read() As Boolean

  Return $bFixed

End

Private Sub Fixed_Write(Value As Boolean)

  $bFixed = Value

End

Public Sub _Reset()

  Me._DataIndex = 0

End

Private Function X_Read() As String

  Return $sLeft

End

Private Sub X_Write(Value As String)

  $sLeft = Value

End

Private Function Y_Read() As String

  Return $sTop

End

Private Sub Y_Write(Value As String)

  $sTop = Value

End

Private Function Brush_Read() As ReportBrush

  Return $hBrush

End

Private Sub Brush_Write(Value As ReportBrush)

  $hBrush = Value

End

' Private Function Color_Read() As Integer
'
'   Return $iColor
'
' End
'
' Private Sub Color_Write(Value As Integer)
'
'   $iColor = Value
'
' End

Public Function _GetActualBrush(X1 As Integer, Y1 As Integer, X2 As Integer, Y2 As Integer) As PaintBrush

  Dim hBrush As PaintBrush

  If $hBrush Then
    hBrush = $hBrush._PaintBrush(X1, Y1, X2, Y2)
  Else If $iColor Then
    hBrush = Paint.Color($iColor)
  Else
    Try hBrush = Me.Parent._GetActualBrush(X1, Y1, X2, Y2)
    If Not hBrush Then
      hBrush = Paint.Color(0)
    Endif
  Endif
  Return hBrush

End

Private Sub _ReportId_Write(Value As Integer)

  $iReportId = Value

End

Private Function _RelativeLeft_Read() As Boolean

  Return $bRelativeLeft

End

Private Function _RelativeTop_Read() As Boolean

  Return $bRelativeTop

End

Private Function DataIndex_Read() As Integer

  Return Me._Index 'Return Me._GetIndex()

End

Private Function Range_Read() As String

  Return $sRange

End

Private Sub Range_Write(Value As String)

  $sRange = Value

End

Public Function _GetIndex() As Integer

  Return Me._Index
  'Return Me.Parent._GetIndex()

End

Private Function _Index_Read() As Integer

  Return $iIndex

End

Private Sub _Index_Write(Value As Integer)

  $iIndex = Value

End

Private Function _DataIndex_Read() As Integer

  Return $iDataindex

End

Private Sub _DataIndex_Write(Value As Integer)
  'If Me.Tag = "Boite 2" And Value = 0 Then Stop
  'If Me.Report.$iCurPage = 0 Then Print "DataIndex: " & value
  'If Value = 0 Then Stop

  $iDataindex = Value
  'Stop
  'Print "_DataIndex " & Me.Tag & "  = " & $iDataindex

End

Private Function ForceNewPage_Read() As Boolean

  Return $bForceNewPage

End

Private Sub ForceNewPage_Write(Value As Boolean)

  $bForceNewPage = Value

End

Public Sub _Free()

End

Private Function Margin_Read() As ReportMargin

  Return $hMargin

End

Private Sub Margin_Write(Value As ReportMargin)

  $hMargin = Value

End

Public Sub Raise()

  _ObjectFromId[$iParentId]._Raise(Me)

End

Public Sub Lower()

  _ObjectFromId[$iParentId]._Lower(Me)

End
