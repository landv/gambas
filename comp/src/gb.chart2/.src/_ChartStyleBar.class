' Gambas class file

Inherits _ChartStyle
Property Read Symbols As String[] Use $aSymbols
Private $oXFont As New Font
Private $oYFont As New Font
Private $fXMaxValue As Float = 100.0
Private $fYMaxValue As Float = 100.0
Private $fXMinValue As Float
Private $fYMinValue As Float
Private $fXStep As Float = 1.0
Private $fYStep As Float = 1.0
Private $bShowArrows As Boolean
Private $fYAutoScale As Boolean
Private $bShowInterlines As Boolean
Private $sYPattern As String
Private $iInterLinesColor As Integer
Private $sYLabel As String
Private $sXLabel As String
Private $oLabelsFont As Font


Event Foo

Public Sub _new()

  $aSymbols = Super.Symbols.Insert(["X_Font", "X_MaxValue", "X_MinValue", "X_Step"
  "Y_Font", "Y_MaxValue", "Y_MinValue", "Y_Step", "Y_AutoScale", "ShowArrows", "ShowInterlines", "Y_Label", "X_Label", "LabelsFont"])

  '$aSymbols.ReadOnly = True
$oLabelsFont = Font["+4"]
End



Public Sub _get(Symbol As String) As Variant

  Select Case Symbol

    Case "X_Font"
      Return $oXFont
    Case "Y_Font"
      Return $oYFont
    Case "X_MinValue"
      Return $fXMinValue
    Case "X_MaxValue"
      Return $fXMaxValue
    Case "Y_MinValue"
      Return $fYMinValue
    Case "Y_MaxValue"
      Return $fYMaxValue
    Case "X_Step"
      Return $fXStep
    Case "Y_Step"
      Return $fYStep
    Case "Y_AutoScale"
      Return $fYAutoScale
    Case "Y_Pattern"
      Return $sYPattern
    Case "ShowArrows"
      Return $bShowArrows
    Case "ShowInterlines"
      Return $bShowInterlines
    Case "InterlinesColor"
      Return $iInterLinesColor
    Case "Y_Label"
      Return $sYLabel
    Case "X_Label"
      Return $sXLabel
    Case "LabelsFont"
      Return $oLabelsFont
    Case Else
      Return Super[Symbol]

  End Select

End


Public Sub _put(Value As Variant, Symbol As String)


  Select Case Symbol
    Case "X_Font"
      $oXFont = Value
    Case "Y_Font"
      $oYFont = Value
    Case "X_MinValue"
      $fXMinValue = Value
    Case "X_MaxValue"
      $fXMaxValue = Value
    Case "Y_MinValue"
      $fYMinValue = Value
    Case "Y_MaxValue"
      $fYMaxValue = Value
    Case "X_Step"
      $fXStep = Value
    Case "Y_Step"
      $fYStep = Value
    Case "Y_AutoScale"
      $fYAutoScale = Value
    Case "ShowArrows"
      $bShowArrows = Value
    Case "ShowInterlines"
      $bShowInterlines = Value
    Case "Y_Pattern"
      $sYPattern = Value
      Case "InterlinesColor"
      $iInterLinesColor = value
    Case "Y_Label"
      $sYLabel = Value
    Case "X_Label"
      $sXLabel = Value
    Case "LabelsFont"
      $oLabelsFont = Value
    Case Else
      Super[Symbol] = Value
  End Select

End

Public Function _GetParam(X As Integer, Y As Integer, Width As Integer, Height As Integer) As Collection

  Dim hChart As Chart = Me._GetParent()
  Dim hPr As Collection
  Dim fMax, fMin As Float
  Dim i, j As Integer
  Dim fArrowSize As Float
  Dim hData As ChartDatas
  Dim aLabels As String[]
  
  
  hpr = Super._GetParam(X, Y, Width, Height)
  hpr!Padding = Me!Padding * hChart._fProportionnal
  hpr!Ratio = hChart._fProportionnal
  ' Paint.Font = Me!Y_Font
  ' Paint.Font.Size = Paint.Font.Size * hpr!Ratio

  Paint.Font = Me!X_Font
  Paint.Font.Size = Paint.Font.Size * hpr!Ratio
  
  
  hpr!XTextHeight = Paint.Font.Height
  hpr!TicLenght = 5 * hpr!Ratio
  fArrowSize = IIf($bShowArrows, 20, 0) * hpr!Ratio
  hpr!ArrowSize = fArrowSize


  If $sYLabel Then 
    Paint.Font = $oLabelsFont
    Paint.Font.Size = Paint.Font.Size * hChart._fProportionnal
    hpr!YLabelWidth = Paint.Font.H + 10
  Else
    hpr!YLabelWidth = 0
  Endif
  
  If $sXLabel Then
    Paint.Font = $oLabelsFont
    Paint.Font.Size = Paint.Font.Size * hChart._fProportionnal
    hpr!XLabelHeight = Paint.Font.H 
  Else
      hpr!XLabelHeight = 0
  Endif
  
  If $fYAutoScale Then
    For j = 0 To hChart.Datas.Max
      For i = 0 To hChart.Datas[j].Values.Max
        fMax = Max(fMax, hChart.Datas[j].Values[i])
        fmin = Min(fMin, hChart.Datas[j].Values[i])
      Next
    Next
    fmin = Min(fmin, 0)
  Else
    fMax = $fYMaxValue 
    fMin = $fYMinValue
  Endif
    Paint.Font = $oYFont
    Paint.Font.Size = Paint.Font.Size * hPr!Ratio
    hpr!MaxYTextWidth = Paint.TextSize(Format(fMax, $sYPattern)).W

  hpr!Rect = New RectF
  With hpr!Rect
    .X = X + hpr!Padding + hpr!MaxYTextWidth + hpr!TicLenght + 10 + hpr!YLabelWidth
    .Y = Y + Max(hpr!Padding, Paint.TextSize(Str(fMax)).H / 2)
    If $bShowArrows Then .Y += fArrowSize
    .Bottom = Height - hpr!Padding - hpr!XTextHeight - hpr!TicLenght - 10 - hpr!XLabelHeight
    .Right = Width - hpr!Padding - fArrowSize

  End With


  For i = 0 To hChart.Datas.Max
    j = Max(hChart.Datas[i].Values.Count, j)
  Next

  hpr!SeriesWidth = hpr!Rect.Width / hChart.Datas.Count
  hpr!BarWidth = hpr!Rect.Width / j / hChart.Datas.Count

    
  hPr!YMaxValue = fMax
  hpr!YMinValue = fMin
  hPr!UnitHeight = hpr!Rect.H / (fMax - fMin)
  hPr!Center = hpr!Rect.H - Abs(fMin * hpr!UnitHeight)
  hPr!MaxDatas = j


  aLabels = New String[]
  
   If hChart.Datas.Count = 1 Then
    For i = 0 To j
      If i > hChart.Labels.Max Then
        aLabels.Add("")
      Else
        aLabels.Add(hChart.Labels[i])
      Endif
    Next

  Else
    For i = 0 To hChart.Datas.Max
      aLabels.Add(hChart.Datas[i].Text)
    Next
  Endif
  
  hpr!Labels = aLabels



  Return hpr

End



Public Sub _PaintBefore(hParam As Collection)


  'Paint.DrawRect(hParam!Rect.Left, hParam!Rect.Top, hParam!Rect.Width, hParam!Rect.Height, Color.Black)

  Dim f As Float
  Dim fBarH, h As Float

  Super._PaintBefore(hParam)


  If $bShowInterlines Then
    Paint.LineWidth = 1 * hParam!Ratio
    Paint.Background = $iInterLinesColor
    For f = 0 To $fYMaxValue Step $fYStep

      fBarH = f * hParam!UnitHeight
      h = hParam!Rect.Bottom - fBarH - Paint.Font.Height / 2
      If h < hParam!Rect.top Then Break
      Paint.MoveTo(hParam!Rect.Left, hParam!Rect.Bottom - fBarH)
      Paint.RelLineTo(hParam!Rect.W, 0)
      Paint.Stroke


    Next
  Endif

  'Draw InterLines Behind




End


Public Sub _PaintAfter(hParam As Collection)

  Dim hChart As Chart = Me._GetParent()
  Dim iCount As Integer = hChart.Datas[0].Values.Count
  Dim i As Integer
  Dim fBarH As Float
  Dim f As Float
  Dim sLabel As String
  Dim h As Float
  Dim aLabels As New String[]
  Dim sPattern As String
  Dim fTextPadding As Float
  Dim hRect As RectF
  Dim fCenter As Float = hParam!Rect.Y + hParam!Center


  'Draw bars
  Paint.Font = $oXFont
  Paint.Font.Size = Paint.Font.Size * hChart._fProportionnal
  Paint.Background = Color.Black
  Paint.LineWidth = 2 * hParam!Ratio
  Paint.MoveTo(hParam!Rect.Left, hParam!Rect.Bottom)
  Paint.RelLineTo(hParam!Rect.W, 0)

 
  f = hParam!Rect.Width / hParam!Labels.Count
  aLabels = hParam!Labels
  
  
  
  For i = 0 To aLabels.mAx
    'Paint.DrawRect(hParam!Rect.Left + hParam!BarWidth * i, hParam!Rect.Bottom + hParam!TicLenght, hParam!BarWidth, hParam!XTextHeight, color.black)
    Paint.MoveTo(hParam!Rect.Left + f * (i + 1), hParam!Rect.Bottom)
    Paint.RelLineTo(0, hParam!TicLenght)
    Paint.Stroke

    Paint.DrawText(aLabels[i], hParam!Rect.Left + f * i, hParam!Rect.Bottom + hParam!TicLenght, f, hParam!XTextHeight, align.Center)
  Next


  'Draw Y bar
  Paint.Font = $oYFont
  Paint.Font.Size = Paint.Font.Size * hChart._fProportionnal
  Paint.MoveTo(hParam!Rect.Left, hParam!Rect.Bottom)
  Paint.RelLineTo(0, -hParam!Rect.Height)

  sPattern = $sYPattern
  fTextPadding = hParam!Ratio * 10
  For f = 0 To hParam!YMaxValue Step $fYStep
    fBarH = f * hParam!UnitHeight
    h = fCenter - fBarH - Paint.Font.Height / 2
    If h < hParam!Rect.top Then Break
    Paint.MoveTo(hParam!Rect.Left, fCenter - fBarH)
    Paint.RelLineTo(-hParam!TicLenght, 0)
    Paint.Stroke
    Paint.DrawText(Format(f, sPattern), hParam!Rect.Left - hParam!TicLenght - hParam!MaxYTextWidth - fTextPadding, fCenter - fBarH - Paint.Font.Height / 2, hParam!MaxYTextWidth,, Align.Right)

  Next
  
  For f = $fYStep DownTo hParam!YMinValue Step $fYStep
    fBarH = f * hParam!UnitHeight
    h = fCenter - fBarH - Paint.Font.Height / 2
    If h < hParam!Rect.top Then Break
    Paint.MoveTo(hParam!Rect.Left, fCenter - fBarH)
    Paint.RelLineTo(-hParam!TicLenght, 0)
    Paint.Stroke
    Paint.DrawText(Format(f, sPattern), hParam!Rect.Left - hParam!TicLenght - hParam!MaxYTextWidth - fTextPadding, fCenter - fBarH - Paint.Font.Height / 2, hParam!MaxYTextWidth,, Align.Right)
  Next




  If $sYLabel Then
    Paint.Save
    Paint.Font = $oLabelsFont
    Paint.Font.Size = Paint.Font.Size * hParam!Ratio  
    hRect = Paint.TextSize($sYLabel)
    hRect.X = (hParam!Rect.X - hParam!TicLenght - hParam!MaxYTextWidth - fTextPadding) - hRect.W / 2 - hRect.H 
    hRect.Y = hParam!Rect.Top + (hParam!Rect.H - hRect.H) / 2
    Paint.Translate(hRect.X + hRect.W / 2, hRect.Y + hRect.H / 2)
    Paint.Rotate(Rad(90))
    Paint.Translate(-(hRect.X + hRect.W / 2), -(hRect.Y + hRect.H / 2))
    'Paint.Text(sTempText, iX, iY, iW, iH, Align.Center)
    Paint.DrawText($sYLabel, hRect.X, hRect.Y, hRect.W, hRect.H, Align.Center)
    Paint.Restore
  Endif

If $sXLabel Then
    Paint.Font = $oLabelsFont
    Paint.Font.Size = Paint.Font.Size * hParam!Ratio  
    H = Paint.TextSize($sXLabel).H

    Paint.DrawText($sXLabel, hParam!Rect.X, hParam!Rect.Bottom + hParam!TicLenght + hParam!XTextHeight + H / 2, hParam!Rect.W, H, Align.Center)
  Endif



  If $bShowArrows Then

    f = hParam!ArrowSize / 2
    Paint.MoveTo(hParam!Rect.Left, hParam!Rect.Top)
    Paint.RelLineTo(0, -f / 2)
    Paint.Stroke
    'Upper Arrow
    Paint.MoveTo(hParam!Rect.Left, hParam!Rect.Top - f / 2)
    Paint.RelLineTo(-f / 2, 0)
    Paint.RelLineTo(f / 2, -f)
    Paint.RelLineTo(f / 2, f)
    paint.ClosePath()
    Paint.Fill

    Paint.MoveTo(hParam!Rect.Right, hParam!Rect.Bottom)
    Paint.RelLineTo(f / 2, 0)
    Paint.Stroke
    Paint.MoveTo(hParam!Rect.Right + f / 2, hParam!Rect.Bottom)
    Paint.RelLineTo(0, -f / 2)
    Paint.RelLineTo(f, f / 2)
    Paint.RelLineTo(-f, f / 2)
    paint.ClosePath()
    Paint.Fill
  Endif


End



