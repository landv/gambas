' Gambas class file

Inherits _Frame
Property Title As String Use $sTitle
Property Position As Integer Use $iPosition
Property Visible As Boolean Use $bVisible
'Property {Font} As Font Use $oFont
Property SymbolStyle As String Use $sSymbolStyle
Property SymbolOutlineColor As Integer Use $iSymbolOutlineColor 
Property ShowPercent As Boolean Use $bShowPercent
Property InterlineColor As Integer Use $iInterlineColor
Property InterlineWidth As Float Use $fInterlineWidth
Property Font As Font Use $oFont
Property TitleFont As Font Use $oTitleFont
'Property Background As Integer Use $iBackground
'Property Border As Border Use $hBorder
Property TitleColor As Integer Use $iTitleColor
Property Color As Integer Use $iColor
Property Spacing As Integer Use $iSpace
Property TitleSpacing As Integer Use $iTitleSpace
Property Width As Integer Use $iWidth
Property Frame As _Frame Use $hFrame
Event foo
Private $iBackground As Integer

Public Sub _new()

  '$bVisible = True
  $oFont = New Font
  $iPosition = Align.Left
  $oTitleFont = New Font
  $iBackground = -1
  $hFrame = New _Frame
End




Public Sub _Paint(X As Integer, Y As Integer, Width As Integer, Height As Integer) As Rectf

  Dim hChart As Chart = _GetParent()
  Dim hRect As New Rectf
  Dim hInnerRect As Rect
  Dim hTextRect As Rectf
  Dim W As Float
  Dim aLabels As String[] = hChart.Labels
  Dim s As String
  Dim H As Float
  Dim f, j, Tot As Float
  Dim i As Integer
  Dim hPercentRect As RectF
  Dim hBorder As New Border
  Dim fSpace As Float = $iSpace * hChart._fProportionnal
  Dim fTitleSpace As Float = $iTitleSpace * hChart._fProportionnal
  
  ' If $hBorder Then 
  '   hBorder = $hBorder.Copy()
  ' Else
  '   hBorder = New Border
  ' Endif
  
  'Paint.save
  Paint.font = $oFont
  Paint.Font.Size *= hChart._fProportionnal
  'hBorder.Padding = 30
  H = Paint.Font.H
  ' Paint.Rectangle(X, Y, Width, Height)
  ' Paint.Background = Color.Red
  ' Paint.Stroke

  Paint.LineWidth = 1 * hChart._fProportionnal
  Select Case $iPosition
    Case Align.Top, Align.Bottom
      For Each s In aLabels
        f += Paint.TextSize(s).W
      Next



      hRect.Height = H * 3.5
      hRect.W = H * 2 + f + aLabels.Max * (H * 1.2 + H / 2) ', Width - H * 2)
      If $iWidth > 0 Then hRect.W = Max(hRect.W, $iWidth * hChart._fProportionnal)
      hRect.X = (Width + -hRect.W) / 2
      If $iPosition = Align.top Then
        hRect.Y = Y + H

      Else
        hRect.Y = Y + Height - hRect.H - H
      Endif
      hBorder.Padding = Max(hBorder.Padding, 10)
      i = hBorder.LeftPadding + hBorder.LeftWidth
      hRect.X = hRect.X - i
      hRect.Width = hRect.Width + i + hBorder.RightPadding + hBorder.Width
      i = hBorder.TopPadding + hBorder.TopWidth
      hRect.Y = hRect.Y - i
      hRect.H = hRect.H + i + hBorder.BottomPadding + hBorder.BottomWidth
      
      hInnerRect = hBorder.GetRect(hRect, True)

      Paint.Rectangle(hRect.X, hRect.Y, hRect.W, hRect.H)
      Paint.Stroke
      hRect.H += H
      If $sTitle Then
        Paint.Font.Bold = True
        Paint.DrawText($sTitle, hRect.X, hRect.Y, hRect.W, H, Align.Center)
        Paint.Font.bold = False

      Endif
      f = hRect.X + H / 2
      j = h * 1.5
      For Each s In aLabels
        DrawSymbol($sSymbolStyle, f, hRect.Y + j, H, H, hChart.Colors[i Mod hChart.Colors.Count], $iSymbolOutlineColor)
        Paint.Background = Color.Black
        f += H * 1.2
        Paint.DrawText(s, f, hRect.Y + j + H / 1.3)
        f += Paint.TextSize(s).W + H / 2
        Inc i
      Next

    Case Else

      'compute the largest label
      For Each s In aLabels
        hRect.W = Max(Paint.TextSize(s).W, f)
      Next
      'generate the rect
      'Test if the Title is larger than the largest label

      'take the title into account
      If $sTitle Then
        Paint.Font = $oTitleFont
        Paint.Font.Size = Paint.Font.Size * hChart._fProportionnal
        hRect.W = Max(Paint.TextSize($sTitle).W, hRect.W)
        Paint.Font = $oTitleFont
        Paint.Font.Size = $oTitleFont.Size * hChart._fProportionnal
        hRect.H = Paint.Font.H + fTitleSpace
      Endif
      
      If $iWidth > 0 Then hRect.W = Max(hRect.W, $iWidth * hChart._fProportionnal)
      hRect.H = hRect.H + aLabels.Count * (H + fSpace) - fSpace

      'Add the border and padding size to the legend size
      
      'hBorder.Padding = Max(hBorder.Padding, 10)
      'hBorder.Padding = hBorder.Padding * hChart._fProportionnal
      'hBorder.Width = hBorder.Width * hChart._fProportionnal
      'hBorder.Radius = hBorder.Radius * hChart._fProportionnal
      With $hFrame
      i = .Border.LeftPadding + .Border.LeftWidth
      hRect.Width = hRect.Width + i + .Border.RightPadding + .Border.Width
      i = hBorder.TopPadding + hBorder.TopWidth
      hRect.H = hRect.H + i + .Border.BottomPadding + .Border.BottomWidth
      If $iPosition = Align.Left Then
        hRect.X = X + H
      Else
        hRect.X = Width - hRect.W - H
      Endif
      hRect.Y = Y + (Height - hRect.H) / 2

      End With
      $hFrame.Rect = hRect
      'get the interior rect
      $hFrame._PaintBefore()
      hInnerRect = $hFrame._GetRect()

      'clip the drawing
      'hBorder.Clip(hRect)
      ' If $hBorder Then
      ' Paint.Rectangle(hRect.X, hRect.Y, hRect.W, hRect.H)
      ' Paint.Background = IIf($iBackground = -1, Color.Transparent, $iBackground)
      ' Paint.Fill
      ' hBorder.Paint(hRect)
      ' Endif

      'compute the title position
      f = hInnerRect.Y
      If $sTitle Then
        f += fTitleSpace
        Paint.Font.Bold = True
        Paint.Background = IIf($iTitleColor = -1, Color.Transparent, $iTitleColor)
        Paint.dRAWText($sTitle, hInnerRect.X, hInnerRect.Y, hInnerRect.W, H, Align.Center)
        Paint.Font.bold = False
        f += Paint.Font.H 
      Endif

      Paint.LineWidth = 1

      'Compute total of value for percentages
      For Each j In hChart.Datas[0].Values
        Tot = Tot + j
      Next
      'get the minimal percentage label rect
      hPercentRect = Paint.TextSize("000 %")


      Paint.font = $oFont
      Paint.Font.Size = Paint.Font.Size * hChart._fProportionnal

      For i = 0 To aLabels.Max
        s = aLabels[i]
        hTextRect = Paint.TextSize(s)
        DrawSymbol($sSymbolStyle, hInnerRect.X, f, H, H, hChart.Colors[i Mod hChart.Colors.Count], Color.Transparent)
        Paint.Background = $iColor
        hTextRect.Move(hInnerRect.X + H * 1.5, f)
        Paint.DrawText(s, hTextRect.X, hTextRect.Y, hTextRect.W, hTextRect.H, Align.Left)

        'Show percentages
        If $bShowPercent Then
          hPercentRect.Move(hTextRect.Right, hTextRect.Top)
          hPercentRect.W = hInnerRect.Right - H / 2 - hPercentRect.Left
          Paint.DrawText(Format(Floor(hChart.Datas[0].Values[i] / Tot * 100), "0") & " %", hPercentRect.X, hPercentRect.Y, hPercentRect.W, hPercentRect.H, align.Right)
        Endif
        'Break before drawing last separator
        If i = aLabels.Max Then Break
        'Draw separator
        Paint.AntiAlias = False
        Paint.LineWidth = $fInterlineWidth
        Paint.Background = $iInterlineColor
        Paint.MoveTo(hInnerRect.X, hTextRect.Bottom + fSpace / 2)
        Paint.LineTo(hInnerRect.Right, hTextRect.Bottom + fSpace / 2)
        Paint.stroke
        Paint.AntiAlias = True
        f += H + fSpace
      Next

      hRect.W += H



  End Select
  $hFrame._Paintafter
  Return hRect


End

Private Sub DrawSymbol(sSymbol As String, X As Float, Y As Float, W As Float, H As Float, iColor As Integer, iOutlineColor As Integer)

  Select Case sSymbol

    Case "circle"
      Paint.Ellipse(X, Y, W, H)
    Case "diam"
      Paint.MoveTo(X + W / 2, Y)
      Paint.RelLineTo(W / 2, H / 2)
      Paint.RelLineTo(-W / 2, H / 2)
      Paint.RelLineTo(-W / 2, -H / 2)
      Paint.ClosePath
    Case Else
      Paint.Rectangle(X, Y, W, H, 1)

  End Select


  Paint.Background = iColor
  Paint.Fill(True)
  Paint.Background = iOutlineColor
  Paint.Stroke

End




Public Sub _GetParent() As Chart

  Return Object.Parent(Me)

End



Private Function Width_Read() As Integer

  

End

Private Sub Width_Write(Value As Integer)

  

End
