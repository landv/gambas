' Gambas module file

Public Result As String

Private $cTool As New Collection

Private _NET_CLIENT_LIST As Integer

Private $aDataDir As String[]

Public Sub RunXdgUtil(sProg As String, aArg As String[], Optional bWait As Boolean) 
  
  Dim sCmd As String
  Dim sDir As String
  Dim aCmd As String[]
  Dim bAgain As Boolean
  'Dim hProcess As Process
  
  sCmd = $cTool[sProg]
  
  If Not sCmd Then 
    'Shell "which " & sProg & " 2>&1" To sCmd
    'If Process.LastValue Then 
      sDir = Temp$("xdg-utils")
      sDir = File.Dir(sDir) &/ File.BaseName(sDir)
      Try Mkdir sDir
      
    TRY_AGAIN:
    
      sCmd = sDir &/ sProg
      Copy "xdg-utils" &/ sProg To sCmd
      Shell "chmod a+x " & Shell$(sCmd) Wait
      
      If Process.LastValue Then
        If bAgain Then Error.Raise("Unable to install xdg tool: " & sProg)
        sDir = "~/tmp/xdg-utils"
        Try Mkdir "~/tmp"
        bAgain = True
        Goto TRY_AGAIN
      Endif
      
    'Endif
    sCmd = Trim(sCmd)
    $cTool[sProg] = sCmd
  Endif
  
  aCmd = [sCmd]
  aCmd.Insert(aArg)
  
  If bWait Then
  
    Exec aCmd To Result 
    
    Select Case Process.LastValue  
      Case 1
        Error.Raise("Syntax error")
      Case 2
        Error.Raise("File does not exist")
      Case 3
        Error.Raise("A required tool could not be found")
      Case 4
        Error.Raise("The action has failed")
      Case 5
        Error.Raise("File access forbidden")
    End Select 
    
  Else
  
    Exec aCmd
    
  Endif
  
End

Private Function SearchPathConfig(sXdgConfigHome As String, sXdgConfigDirs As String) As String
  
  Dim sDir As String
  
  For Each sDir In Split(sXdgConfigHome, ":")
    If Exist(sDir &/ "user-dirs.dirs") Then ' Devrait exister
      Return sDir &/ "user-dirs.dirs"
    Endif
  Next

  For Each sDir In Split(sXdgConfigDirs, ":")
    If Exist(sDir &/ "user-dirs.defaults") Then ' Sinon l'un
      Return sDir &/ "user-dirs.defaults"
    Else If Exist(sDir &/ "user-dirs.dirs") Then ' Ou l'autre
      Return sDir &/ "user-dirs.dirs"
    Endif
  Next
  
End

Private Function SearchPathVariable(sFileConfig As String, sDirectory As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim aLine As String[]
  
  hFile = Open sFileConfig For Input
  While Not Eof(hFile)
    Line Input #hFile, sLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If Left(sLine) = "#" Then Continue
    If sLine Begins sDirectory Then Break
    sLine = ""
  Wend
  
  aLine = Scan(sLine, sDirectory & "=*")
  If aLine.Count Then
    sLine = aLine[0]
    If Left(sLine) = Chr$(34) Then sLine = Mid$(sLine, 2, -1)
    If sLine Begins "$HOME/" Then sLine = Replace(sLine, "$HOME", System.User.Home)
    Return sLine
  Endif

End

Public Sub GetDesktopPath(Optional sType As String = "DESKTOP") As String

  Dim sDir, sXdgConfigHome, sXdgConfigDirs, sFileConfig As String
  
  sXdgConfigHome = Application.Env["XDG_CONFIG_HOME"] ' $XDG_CONFIG_HOME définie ?
  If Not sXdgConfigHome Then sXdgConfigHome = User.Home & "/.config" ' Sinon val. par défaut
  
  sXdgConfigDirs = Application.Env["XDG_CONFIG_DIRS"] ' $XDG_CONFIG_DIRS définie ?
  If Not sXdgConfigDirs Then sXdgConfigDirs = "/etc/xdg" ' Sinon val. par défaut
  
  sFileConfig = SearchPathConfig(sXdgConfigHome, sXdgConfigDirs)
  If sFileConfig Then
    sDir = SearchPathVariable(sFileConfig, "XDG_" & UCase(sType) & "_DIR") 
  Else 
    sDir = System.User.Home &/ "Desktop"
  Endif
  
  Return sDir
  
End

Public Sub GetDataDir() As String[]
  
  If Not $aDataDir Then
    $aDataDir = Split(Desktop.DataDir, ":", "", True)
    $aDataDir.Insert(Split(Env["XDG_DATA_DIRS"], ":", "", True))
  Endif
  
  Return $aDataDir
  
End


Public Sub Main()

  ' Dim hMime As DesktopMime
  ' 
  ' hMime = DesktopMime.FromFile("/bin/ls")
  ' Print hMime.Pattern
  ' Print hMime.Type
  'Print Desktop.Passwords["guygle.cgi/Connection/IndexMySQL"]
  Desktop.OpenTerminal
  
End



Public Sub X11_PropertyNotify((Window) As Integer, Atom As Integer)
  
  Debug Window;; X11.GetAtomName(Atom)
  
  If Window = X11.RootWindow And If Atom = _NET_CLIENT_LIST Then
  Endif
  
End

Public Sub X11_ConfigureNotify((Window) As Integer, X As Integer, Y As Integer, W As Integer, H As Integer)
  
  Debug Window;; X;; Y;; W;; H
  
End

