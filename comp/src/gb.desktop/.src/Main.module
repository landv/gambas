' Gambas module file

Class X11

Public Result As String

Private $cTool As New Collection

'Private _NET_CLIENT_LIST As Integer

Private $aDataDir As String[]
Private $sDesktop As String
Private $cSearchPath As New Collection

Public Sub RunXdgUtil(sProg As String, aArg As String[], Optional bWait As Boolean) 
  
  Dim sCmd As String
  Dim sDir As String
  Dim aCmd As String[]
  Dim bAgain As Boolean
  'Dim hProcess As Process
  
  sCmd = $cTool[sProg]
  
  If Not sCmd Then 
    'Shell "which " & sProg & " 2>&1" To sCmd
    'If Process.LastValue Then 
      sDir = Temp$("xdg-utils")
      sDir = File.Dir(sDir) &/ File.BaseName(sDir)
      Try Mkdir sDir
      
    TRY_AGAIN:
    
      sCmd = sDir &/ sProg
      Copy "xdg-utils" &/ sProg To sCmd
      Shell "chmod a+x " & Shell$(sCmd) Wait
      
      If Process.LastValue Then
        If bAgain Then Error.Raise("Unable to install xdg tool: " & sProg)
        sDir = "~/tmp/xdg-utils"
        Try Mkdir "~/tmp"
        bAgain = True
        Goto TRY_AGAIN
      Endif
      
    'Endif
    sCmd = Trim(sCmd)
    $cTool[sProg] = sCmd
  Endif
  
  aCmd = [sCmd]
  aCmd.Insert(aArg)
  
  If bWait Then
  
    Exec aCmd To Result 
    
    Select Case Process.LastValue  
      Case 1
        Error.Raise("Syntax error")
      Case 2
        Error.Raise("File does not exist")
      Case 3
        Error.Raise("A required tool could not be found")
      Case 4
        Error.Raise("The action has failed")
      Case 5
        Error.Raise("File access forbidden")
    End Select 
    
  Else
  
    Exec aCmd
    
  Endif
  
End

Private Function SearchPathConfig(sXdgConfigHome As String, sXdgConfigDirs As String) As String
  
  Dim sDir As String
  
  For Each sDir In Split(sXdgConfigHome, ":")
    If Exist(sDir &/ "user-dirs.dirs") Then ' Devrait exister
      Return sDir &/ "user-dirs.dirs"
    Endif
  Next

  For Each sDir In Split(sXdgConfigDirs, ":")
    If Exist(sDir &/ "user-dirs.defaults") Then ' Sinon l'un
      Return sDir &/ "user-dirs.defaults"
    Else If Exist(sDir &/ "user-dirs.dirs") Then ' Ou l'autre
      Return sDir &/ "user-dirs.dirs"
    Endif
  Next
  
End

Private Function SearchPathVariable(sFileConfig As String, sDirectory As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim aLine As String[]
  
  hFile = Open sFileConfig For Input
  While Not Eof(hFile)
    Line Input #hFile, sLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If Left(sLine) = "#" Then Continue
    If sLine Begins sDirectory Then Break
    sLine = ""
  Wend
  
  aLine = Scan(sLine, sDirectory & "=*")
  If aLine.Count Then
    sLine = aLine[0]
    If Left(sLine) = Chr$(34) Then sLine = Mid$(sLine, 2, -1)
    If sLine Begins "$HOME/" Then sLine = Replace(sLine, "$HOME", System.User.Home)
    Return sLine
  Endif

End

Public Sub GetDesktop() As String

  If Not $sDesktop Then

    If Application.Env["KDE_FULL_SESSION"] Then
      
      If Application.Env["KDE_SESSION_VERSION"] = "4" Then
        $sDesktop = "KDE4"
      Else If Application.Env["KDE_SESSION_VERSION"] = "5" Then
        $sDesktop = "KDE5"
      Else
        $sDesktop = "KDE"
      Endif

    Else
      
      Select Case UCase(Application.Env["XDG_CURRENT_DESKTOP"])
        Case "LXDE"
          $sDesktop = "LXDE"
        Case "UNITY"
          $sDesktop = "UNITY"
        Default
          $sDesktop = UCase(Application.Env["XDG_CURRENT_DESKTOP"])
          If $sDesktop Begins "X-" Then $sDesktop = Mid$($sDesktop, 3)
      End Select
      
    Endif
    
    If Not $sDesktop Then
    
      If Application.Env["GNOME_DESKTOP_SESSION_ID"] Then
        $sDesktop = "GNOME"
      Else If Application.Env["MATE_DESKTOP_SESSION_ID"] Or If Application.Env["MATECORBA_SOCKETDIR"] Then
        $sDesktop = "MATE"
      Else If Application.Env["E_BIN_DIR"] And If Application.Env["E_LIB_DIR"] Then
        $sDesktop = "ENLIGHTENMENT"
      Else If Application.Env["WMAKER_BIN_NAME"] Then
        $sDesktop = "WINDOWMAKER"
      Else If Application.Env["DESKTOP_SESSION"] = "LXDE" Then
        $sDesktop = "LXDE"
      Else If UCase(Env["DESKTOP_SESSION"]) = "XCFE" Then
        $sDesktop = "XFCE"
      Else If UCase(Env["XDG_MENU_PREFIX"]) Begins "XCFE" Then
        $sDesktop = "XFCE"
      Else If InStr(Env["XDG_DATA_DIR"], "/xfce") Then
        $sDesktop = "XFCE"
      Endif
      
    Endif

  Endif

  Return $sDesktop

End

Public Sub GetDesktopPath(Optional sType As String = "DESKTOP") As String

  Dim sDir, sXdgConfigHome, sXdgConfigDirs, sFileConfig As String
  
  sXdgConfigHome = Application.Env["XDG_CONFIG_HOME"] ' $XDG_CONFIG_HOME définie ?
  If Not sXdgConfigHome Then sXdgConfigHome = User.Home & "/.config" ' Sinon val. par défaut
  
  sXdgConfigDirs = Application.Env["XDG_CONFIG_DIRS"] ' $XDG_CONFIG_DIRS définie ?
  If Not sXdgConfigDirs Then sXdgConfigDirs = "/etc/xdg" ' Sinon val. par défaut
  
  sFileConfig = SearchPathConfig(sXdgConfigHome, sXdgConfigDirs)
  If sFileConfig Then
    sDir = SearchPathVariable(sFileConfig, "XDG_" & UCase(sType) & "_DIR") 
  Else 
    sDir = System.User.Home &/ "Desktop"
  Endif
  
  Return sDir
  
End

Public Sub GetDataDir() As String[]
  
  Dim sDir As String
  
  If Not $aDataDir Then
    $aDataDir = [Desktop.DataDir] 'Split(Desktop.DataDir, ":", "", True)
    sDir = Env["XDG_DATA_DIRS"]
    If Not sDir Then sDir = "/usr/local/share:/usr/share"
    $aDataDir.Insert(Split(sDir, ":", "", True))
  Endif
  
  Return $aDataDir
  
End


Public Sub Main()

  'Dim hMime As DesktopMime
  
  'DesktopFile.FromMime("application/vnd.oasis.opendocument.text")
  ' hMime = DesktopMime.FromFile("/bin/ls")
  ' Print hMime.Type
  
  Print Desktop.Types.Count
  
End



' Public Sub X11_PropertyNotify((Window) As Integer, Atom As Integer)
'   
'   'Debug Window;; X11.GetAtomName(Atom)
'   
'   If Window = X11.RootWindow And If Atom = _NET_CLIENT_LIST Then
'   Endif
'   
' End

Public Sub X11_ConfigureNotify((Window) As Integer, X As Integer, Y As Integer, W As Integer, H As Integer)
  
  Debug Window;; X;; Y;; W;; H
  
End

Public Sub GetDesktopVar(sVar As String) As String[]

  Dim sValue As String
  
  sValue = Env[sVar]
  If sValue Then Return Split(sValue, ":")
  
  If Not sValue Then
    Select Case sVar
      Case "XDG_CONFIG_HOME"
        Return [User.Home &/ ".config"]
      Case "XDG_CONFIG_DIRS"
        Return ["/etc/xdg"]
      Case "XDG_DATA_HOME"
        Return [User.Home &/ ".local/share"]
      Case "XDG_DATA_DIRS"
        Return ["/usr/local/share", "/usr/share"]
    End Select
  Endif
  
End


Public Sub MakeSearchPath(sKey As String, aList As String[]) As String[]

  Dim iPos As Integer
  Dim sDir As String
  Dim aDir As String[]
  Dim sVar As String
  Dim aResult As New String[]
  
  If $cSearchPath.Exist(sKey) Then Return $cSearchPath[sKey]
  
  aDir = aList.Copy()
  
  While aDir.Count
    
    sDir = aDir[0]
    aDir.Remove(0)
    
    If sDir Begins "$" Then
      
      iPos = InStr(sDir, "/")
      If iPos = 0 Then iPos = Len(sDir) + 1
      For Each sVar In GetDesktopVar(Mid$(sDir, 2, iPos - 2))
        aDir.Add(sVar &/ Mid$(sDir, iPos + 1))
      Next
      Continue
    
    Endif
    
    sDir = Replace(sDir, "$desktop", LCase(GetDesktop()))
    If Exist(sDir) Then aResult.Add(sDir)
    
  Wend
  
  $cSearchPath[sKey] = aResult
  Return aResult
  
End
