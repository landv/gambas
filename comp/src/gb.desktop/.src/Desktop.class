' Gambas class file

Export

Class X11

Static Property Read ScreenSaver As _Desktop_ScreenSaver
Static Property Count As Integer
Static Property Current As Integer
Static Property Read Windows As _Desktop_Windows
Static Property ActiveWindow As Integer
Static Property Read RootWindow As Integer
Static Property Showing As Boolean
Static Property Read Passwords As _Desktop_Passwords
Static Property Read Path As String
Static Property Read Types As String[]

Static Property Read DataDir As String
Static Property Read ConfigDir As String
Static Property Read CacheDir As String
Static Property Read RuntimeDir As String

Static Property Read NetworkAvailable As Boolean
Static Property Read RemoteDisplay As Boolean

Static Private $cDesktop As Collection
Static Private $cExt As Collection
Static Private $aImgExt As String[]
Static Private $sSessionType As String
Static Private $bRemoteDisplay As Boolean
Static Private $bRemoteDisplayChecked As Boolean
Static Private $aDesktopType As String[]

Static Public Sub _init()
  
  $sSessionType = LCase(Env["XDG_SESSION_TYPE"])
  If $sSessionType <> "wayland" Then
    $sSessionType = "x11"
    Component.Load("gb.desktop.x11")
  Endif
  
End

Static Public Sub SendMail({To} As String[], Optional Cc As String[], Optional Bcc As String[], Optional Subject As String, Optional Body As String, Optional Attachment As String)

  Dim aArg As String[]
  'xdg-email [--utf8] [--cc address] [--bcc address] [--subject text] [--body text
  ' ] [--attach file] { mailto-uri | address(es) }

  aArg = ["--utf8"]
  If CC And If CC.Count Then
    aArg.Add("--cc")
    aArg.Insert(CC)
  Endif
  If BCC And If BCC.Count Then
    aArg.Add("--bcc")
    aArg.Insert(BCC)
  Endif
  If Subject Then
    aArg.Add("--subject")
    aArg.Add(Subject)
  Endif
  If Body Then
    aArg.Add("--body")
    aArg.Add(Body)
  Endif
  If Attachment Then
    aArg.Add("--attach")
    aArg.Add(Attachment)
  Endif

  If {To} And If To.Count Then
    aArg.Insert({To})
  Endif

  Main.RunXdgUtil("xdg-email", aArg)

End

Static Public Sub {Open}(Url As String, Optional {Wait} As Boolean)

  If Url = "~" Then
    Url = User.Home
  Else If Url Begins "~/" Then
    Url = User.Home & Mid$(Url, 2)
  Endif

  Main.RunXdgUtil("xdg-open", [Url], {Wait})

End

' Static Private Function Menus_Read() As _DesktopMenus
'
'   Return _DesktopMenus
'
' End
'
'
' Static Private Function Icons_Read() As _DesktopIcons
'
'   Return _DesktopIcons
'
' End

Static Private Function ScreenSaver_Read() As _Desktop_ScreenSaver

  Return _Desktop_ScreenSaver

End

'  GB_STATIC_METHOD("Find", "Integer[]", CDESKTOP_find, "[(Title)s(Application)s(Role)s]"),

Static Public Sub FindWindow(Optional Title As String, (Application) As String, Role As String) As Integer[]

  Return X11.FindWindow(Title, Application, Role)

End

' STATIC PRIVATE SUB InitKeys()
'
'   $cKeys = NEW Collection
'   $cKeys["Ã©"] = "eacute"
'
' END

Static Public Sub SendKeys(Keys As String)

  Dim iInd As Integer
  Dim sCar As String
  Dim iPos As Integer
  Dim aRelease As New String[]
  Dim bHold As Boolean
  Dim sErr As String
  Dim iLen As Integer = String.Len(Keys)

  Do

    Inc iInd
    If iInd > iLen Then Break

    sCar = String.Mid$(Keys, iInd, 1)

    If sCar = "[" Then
      iPos = String.InStr(Keys, "]", iInd)
      If iPos = 0 Then Break
      sCar = String.Mid$(Keys, iInd + 1, iPos - iInd - 1)
      iInd = iPos
      If Not sCar Then Continue
    Else If sCar = "{" And If Not bHold Then
      bHold = True
      Continue
    Else If sCar = "}" And If bHold Then
      bHold = False
      aRelease.Reverse
      For Each sCar In aRelease
        'DEBUG sCar;; FALSE
        X11.SendKey(sCar, False)
      Next
      aRelease.Clear
      Continue
    Endif

    If Len(sCar) >= 2 Then
      Try sCar = Conv(sCar, "UTF-8", "LATIN1")
    Endif

    If bHold Then
      'DEBUG sCar;; TRUE
      X11.SendKey(sCar, True)
      aRelease.Add(sCar)
    Else
      'DEBUG sCar;; TRUE
      X11.SendKey(sCar, True)
      'DEBUG sCar;; FALSE
      X11.SendKey(sCar, False)
    Endif

  Loop

Catch

  sErr = Error.Text & ": '" & sCar & "'"

  For Each sCar In aRelease
    X11.SendKey(sCar, False)
  Next

  Error.Raise(sErr)

End

Static Public Sub OpenTerminal(Optional {Dir} As String) ', Optional Command As String)

  Dim sExec As String
  Dim sCmd As String
  Dim bNoDir As Boolean
  'Dim Command As String
  Dim aProg As String[]
  Dim sProg As String
  Dim sDesktop As String

  sDesktop = Main.GetDesktop()

  Select Case sDesktop

    Case "KDE", "KDE4", "KDE5"
      aProg = ["konsole"]
    Case "GNOME", "UNITY", "UBUNTU:GNOME"
      aProg = ["gnome-terminal"]
    Case "MATE", "CINNAMON"
      aProg = ["mate-terminal", "gnome-terminal"]
    Case "XFCE"
      aProg = ["xfce4-terminal", "gnome-terminal"]
    Case "LXDE"
      aProg = ["lxterminal"]
    Case "CYGWIN"
      aProg = ["mintty.exe"] 
    Case Else
      aProg = New String[]

  End Select
  
  aProg.Add("xterm")
  
  For Each sProg In aProg
    If System.Exist(sProg) Then Break
    sProg = ""
  Next
  
  If Not sProg Then Error.Raise("No terminal program found")
  
  sExec = sProg
  
  Select Case sProg

    Case "konsole"
      
      If sDesktop <> "KDE" Then
        If {Dir} Then
          sExec = "konsole --workdir " & Shell$({Dir})
          bNoDir = True
        Endif
        'If Command Then sExec &= " -e " & Shell$(Command)
      Endif
      
    Case "gnome-terminal", "mate-terminal"
      If {Dir} Then
        sExec &= " --working-directory=" & Shell$({Dir})
        bNoDir = True
      Endif
      'If Command Then sExec &= " -x " & Shell$(Command)
      
  End Select

  If {Dir} And If Not bNoDir Then
    sCmd = "(cd " & Shell$({Dir}) & "; " & sExec & ")"
  Else
    sCmd = sExec
  Endif

  Shell sCmd

End

Static Public Sub _get(Index As Integer) As _DesktopVirtual

  Dim hVirtual As _DesktopVirtual

  If Not $cDesktop Then $cDesktop = New Collection

  hVirtual = $cDesktop[Index]
  If Not hVirtual Then
    hVirtual = New _DesktopVirtual(Index)
    $cDesktop[Index] = hVirtual
  Endif
  Return hVirtual

End

Static Private Function Current_Read() As Integer

  Try Return X11.GetWindowProperty(X11.RootWindow, Atom["_NET_CURRENT_DESKTOP"])[0]

End

Static Private Sub Current_Write(Value As Integer)

  X11.SendClientMessageToRootWindow(Atom["_NET_CURRENT_DESKTOP"], [Value])

End

Static Private Function Count_Read() As Integer

  Try Return X11.GetWindowProperty(X11.RootWindow, Atom["_NET_NUMBER_OF_DESKTOPS"])[0]
  Return 1

End

Static Private Sub Count_Write(Value As Integer)

  X11.SendClientMessageToRootWindow(Atom["_NET_NUMBER_OF_DESKTOPS"], [Value])

End

Static Private Function Windows_Read() As _Desktop_Windows

  Return _Desktop_Windows

End

Static Private Function ActiveWindow_Read() As Integer

  Return X11.GetWindowProperty(X11.RootWindow, Atom["_NET_ACTIVE_WINDOW"])[0]

End

Static Private Sub ActiveWindow_Write(Value As Integer)

  X11.SendClientMessageToRootWindow(Atom["_NET_ACTIVE_WINDOW"], [1, X11.Time, Value, 0, 0], Value)

End

Static Private Function Showing_Read() As Boolean

  Return X11.GetWindowProperty(X11.RootWindow, Atom["_NET_SHOWING_DESKTOP"])[0]

End

Static Private Sub Showing_Write(Value As Boolean)

  X11.SendClientMessageToRootWindow(Atom["_NET_SHOWING_DESKTOP"], [If(Value, 1, 0)])

End

' Static Private Function Width_Read() As Integer
'
'   Dim iWidth As Integer
'
'   Try iWidth = X11.GetWindowProperty(Atom["_NET_DESKTOP_GEOMETRY"])[0]
'   If iWidth = 0 Then iWidth = Super.Width
'   Return iWidth
'
' End
'
' Static Private Function Height_Read() As Integer
'
'   Dim iHeight As Integer
'
'   Try iHeight = X11.GetWindowProperty(Atom["_NET_DESKTOP_GEOMETRY"])[1]
'   If iHeight = 0 Then iHeight = Super.Height
'   Return iHeight
'
' End

' Static Private Function W_Read() As Integer
'
'   Return Width_Read()
'
' End
'
' Static Private Function H_Read() As Integer
'
'   Return Height_Read()
'
' End

Static Private Function Passwords_Read() As _Desktop_Passwords

  Return _Desktop_Passwords

End

Static Private Function Path_Read() As String

  Return Main.GetDesktopPath()

End

Static Private Function RootWindow_Read() As Integer

  Return X11.RootWindow

End

Static Public Sub RunAsRoot(Command As String)

  'Main.RunXdgUtil("xdg-su", ["-c", Command])

  Dim sExec As String
  
  Select Case Main.GetDesktop()
    
    Case "KDE", "KDE4", "KDE5"
      sExec = "kdesudo"
      ' newer SuSE have no kdesudo, but a kdesu
      If Not System.Exist(sExec) Then sExec = "kdesu"
    Case "LXDE"
      sExec = "lxde-sudo"
    Case Else
      sExec = "gksudo"
      ' gksu with an argument raise a gksudo
      If Not System.Exist(sExec) Then sExec = "gksu"
    
  End Select
    
  If Not System.Exist(sExec) Then Error.Raise("No graphical sudo program found")
  
  Exec [sExec, Command]

End

Static Public Sub GetFileIcon(Path As String, Size As Integer, Optional Preview As Boolean) As Picture

  Dim hImage As Image
  Dim hIcon As Image
  Dim sIcon As String
  Dim hPict As Picture

  If IsDir(Path) Then Return Picture["icon:/" & CStr(Size) & "/directory"]

  If Not $cExt Then InitFileExt

  If Preview And If $aImgExt.Exist(File.Ext(Path)) Then
    If Stat(Path).Size <= 65536 Then

      Try hImage = Image.Load(Path)
      If Not Error Then
        If Not (hImage.Width = Size And hImage.Height = Size) Then
          If hImage.Width > hImage.Height Then
            hImage = hImage.Stretch(Size, (Size * hImage.Height) \ hImage.Width)
          Else
            hImage = hImage.Stretch((Size * hImage.Width) \ hImage.Height, Size)
          Endif
        Endif
        
        If Size <= 24 Then Return hImage.Picture

        hIcon = New Image(hImage.W + 4, hImage.H + 4, Color.Transparent)
        Paint.Begin(hIcon)
        Paint.AntiAlias = False
        Paint.Rectangle(0, 0, hIcon.W, hIcon.H)
        Paint.Brush = Paint.Color(Color.Gray)
        Paint.Stroke
        Paint.End
        hIcon.DrawImage(hImage, 2, 2)

        Return hIcon.Picture
        
      Else
        
        Return Picture["icon:/" & Size & "/image"]
        
      Endif

    Endif

  Endif

  Try hPict = DesktopMime.FromFile(Path).GetIcon(Size).Picture
  If hPict Then Return hPict

  Try sIcon = $cExt[File.Ext(Path)]
  If sIcon Then Return Picture["icon:/" & CStr(Size) &/ sIcon]

  With Stat(Path)

    If InStr(.Perm[System.User.Name], "x") Then Return Picture["icon:/" & CStr(Size) &/ "exec"]

  End With

Catch

  Error "gb.desktop: unable to get icon for file: "; File.Name(Path)

End

Static Private Sub InitFileExt()

  $cExt = New Collection
  $cExt["html"] = "html"
  $cExt["htm"] = "html"
  $cExt["css"] = "html"
  $cExt["tar"] = "archive"
  $cExt["gz"] = "archive"
  $cExt["tgz"] = "archive"
  $cExt["bz2"] = "archive"
  $cExt["z"] = "archive"
  $cExt["zip"] = "archive"
  $cExt["xz"] = "archive"
  $cExt["txt"] = "text"
  $cExt["log"] = "text"
  $cExt["md"] = "text"
  $cExt["mp3"] = "audio"
  $cExt["ogg"] = "audio"
  $cExt["wav"] = "audio"
  $cExt["mpg"] = "video"
  $cExt["mpeg"] = "video"
  $cExt["avi"] = "video"
  $cExt["wmv"] = "video"
  $cExt["mov"] = "video"
  $cExt["gambas"] = "gambas"
  $cExt["c"] = "text"
  $cExt["cpp"] = "text"
  $cExt["cc"] = "text"
  $cExt["h"] = "text"
  $cExt["java"] = "text"
  $cExt["perl"] = "text"
  $cExt["py"] = "text"
  $cExt["deb"] = "package"
  $cExt["rpm"] = "package"
  $cExt["iso"] = "cdrom"
  $cExt["jpg"] = "image"
  $cExt["jpeg"] = "image"
  $cExt["png"] = "image"
  $cExt["gif"] = "image"
  $cExt["xpm"] = "image"
  $cExt["bmp"] = "image"
  $cExt["ico"] = "image"
  $cExt["xcf"] = "image"
  $cExt["svg"] = "vector"
  $cExt["svgz"] = "vector"

  $aImgExt = ["png", "jpeg", "jpg", "gif", "xpm", "bmp", "ico"]

End

Static Private Sub GetDir(sVar As String, sDefault As String) As String
  
  Dim sPath As String = Env[sVar]
  If sPath Then 
    Return sPath 
  Else 
    Return sDefault
  Endif
  
End

Static Private Function DataDir_Read() As String

  Return GetDir("XDG_DATA_HOME", User.Home &/ ".local/share")

End

Static Private Function ConfigDir_Read() As String

  Return GetDir("XDG_CONFIG_HOME", User.Home &/ ".config")

End

Static Private Function CacheDir_Read() As String

  Return GetDir("XDG_CACHE_HOME", User.Home &/ ".cache")

End

Static Private Function RuntimeDir_Read() As String

  Dim sPath As String = Env["XDG_RUNTIME_DIR"]
  
  If Not sPath Then
    sPath = File.Dir(Temp$())
    Error "gb.desktop: warning: XDG_RUNTIME_DIR is not set. Default to "; sPath
  Endif
  
  Return sPath

End

Static Private Sub FindExec(sExec As String) As String
  
  If Exist("/sbin/" & sExec) Then Return "/sbin/" & sExec
  If Exist("/usr/sbin/" & sExec) Then Return "/usr/sbin/" & sExec
  Return sExec
  
End

Static Private Function NetworkAvailable_Read() As Boolean

  Dim sOutput As String
  Dim sLine As String

  Shell "LC_ALL=C " & FindExec("ifconfig") & " -a" To sOutput
  If Not sOutput Then Shell "LC_ALL=C " & FindExec("ip") & " addr" To sOutput
  
  For Each sLine In Split(Trim(sOutput), "\n")
    sLine = Trim(sLine)
    If sLine Begins "inet addr:" Then
      If sLine Not Begins "inet addr:127.0.0.1" Then Return True
    Else If sLine Begins "inet " Then
      If sLine Not Begins "inet 127.0.0.1" Then Return True
    Endif
  Next

End

Static Public Sub GetDirectory(Type As String) As String
  
  Return Main.GetDesktopPath(Type)
  
End

Static Private Function RemoteDisplay_Read() As Boolean

  Dim sDisplay As String
  
  If Not $bRemoteDisplayChecked Then
    If $sSessionType = "x11" Then
      sDisplay = Env["DISPLAY"]
      If sDisplay And If Left(sDisplay) <> ":" Then $bRemoteDisplay = True
    Endif
    $bRemoteDisplayChecked = True
  Endif
  
  Return $bRemoteDisplay
  
End

Static Private Function Types_Read() As String[]

  If Not $aDesktopType Then 
    $aDesktopType = Split(Desktop.Type, ":")
    $aDesktopType.ReadOnly = True
  Endif
  
  Return $aDesktopType

End

Static Public Sub Is(Type As String) As Boolean
  
  Return Types_Read().Exist(Type, gb.IgnoreCase)
  
End

