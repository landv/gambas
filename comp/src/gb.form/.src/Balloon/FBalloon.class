' Gambas class file

Private Const ROUND_SIZE As Integer = 8
Private Const PADDING As Integer = 8
Private Const BACKGROUND_COLOR As Integer = &HFFFFDF&
Private Const BACKGROUND_COLOR2 As Integer = &HBFBFA7& 

Static Private $iDelay As Integer = 5000

Private ARROW_HEIGHT As Integer

Private $hObs As Observer
Private $hWatcher2 As Watcher
Private $hCtrl As Control

Private $X As Integer
Private $Y As Integer
Private $W As Integer
Private $H As Integer
Private $DX As Integer
Private $DY As Integer
Private $fShow As Float
Private $sOld As String
Private $bInside As Boolean

' Private Sub DrawRoundRect(X As Integer, Y As Integer, W As Integer, H As Integer)
' 
'   Dim hRound As Image
'   
'   If Not $hRound Then $hRound = Image.Load("img/round.png")
' 
'   hRound = $hRound.Copy()
'   Draw.Image(hRound, X, Y)
'   hRound.Mirror(True, False)
'   Draw.Image(hRound, X + W - ROUND_SIZE, Y)
'   hRound.Mirror(False, True)
'   Draw.Image(hRound, X + W - ROUND_SIZE, Y + H - ROUND_SIZE)
'   hRound.Mirror(True, False)
'   Draw.Image(hRound, X, Y + H - ROUND_SIZE)
' 
'   Draw.FillStyle = Fill.Solid
'   Draw.LineStyle = Line.None
'   
'   Draw.FillColor = BACKGROUND_COLOR
'   Draw.Rect(X + ROUND_SIZE, Y, W - ROUND_SIZE * 2, ROUND_SIZE)
'   Draw.Rect(X, Y + ROUND_SIZE, W, H - ROUND_SIZE * 2)
'   Draw.Rect(X + ROUND_SIZE, Y + H - ROUND_SIZE, W - ROUND_SIZE * 2, ROUND_SIZE)
'   Draw.LineStyle = Line.Solid
'   Draw.Foreground = &H808080& '&H808070&
'   Draw.Line(X + ROUND_SIZE, Y, X + W - ROUND_SIZE - 1, Y)
'   Draw.Line(X + ROUND_SIZE, Y + H - 1, X + W - ROUND_SIZE, Y + H - 1)
'   Draw.Line(X, Y + ROUND_SIZE, X, Y + H - ROUND_SIZE - 1)
'   Draw.Line(X + W - 1, Y + ROUND_SIZE, X + W - 1, Y + H - ROUND_SIZE - 1)
'   
' End

Private Sub GetTopLevel(hCtrl As Control) As Window
  
  Dim hWin As Window

  If Not hCtrl Then Return  
  hWin = hCtrl.Window
  Do
    If hWin.TopLevel Then Return hWin
    hWin = hWin.Parent.Window
  Loop
  
End

Private Sub MakeBorder(Optional W As Integer, H As Integer)
  
  Dim hImage As Image
  Dim DX, DY, DW, DH As Integer 'Current screen's dimensions
  Dim SX, SY, CX, CY As Integer
  Dim X, Y, X1, Y1, X2, Y2, X3, Y3, Y4 As Integer
  Dim hWin As Window
  Dim sNew As String
  Dim hCtrl As Control
  
  $X = $hCtrl.ScreenX
  $Y = $hCtrl.ScreenY

  If $DX < 0 Then
    SX = $X + $hCtrl.W \ 2
  Else 
    SX = $X + $DX
  Endif 
  If $DY < 0 Then 
    SY = $Y + $hCtrl.H \ 2
  Else 
    SY = $Y + $DY
  Endif
  
  'DEBUG $hCtrl;; "SX =";; SX;; "SY =";; SY
  
  hWin = GetTopLevel($hCtrl)
  'DEBUG hWin
  
  CX = hWin.ScreenX + hWin.W \ 2
  CY = hWin.ScreenY + hWin.H \ 2
  
  With Screens[hWin.Screen]
    DX = .X
    DY = .Y
    DH = .H
    DW = .W
  End With
  
  
  'DEBUG "CX =";; CX;; "CY =";; CY
'   IF SX < (DW \ 2) THEN 
'     X = Max(0, SX - ME.W \ 2 - 32)
'   ELSE 
'     X = Min(DW - ME.W, SX - ME.W \ 2 + 32)
'   ENDIF
' 
  If W <= 0 Then 
    W = $W
    H = $H
  Endif

  If SX < CX And SX >= W Then 
    X = SX - W \ 2 - ARROW_HEIGHT
  Else 
    X = SX - W \ 2 + ARROW_HEIGHT
  Endif

  'X = DX + Max(4, Min(DW - W - 4, X))
  X = Min(X, DX + DW - W - 4)
  X = Max(X, DX)
  
  'IF SY < (DH \ 2) THEN 
  
  'DEBUG SY;; CY;; ME.H
  
  If (SY >= CY And SY < (DY + DH - H)) Or SY < (DY + H) Then 
    Y1 = 1
    'Y4 = ARROW_HEIGHT
    Y2 = ARROW_HEIGHT + 1
    Y = SY
    Y4 = Y2 
  Else 
    Y1 = H - 1
    'Y4 = H - ARROW_HEIGHT
    Y2 = H - ARROW_HEIGHT - 1
    Y = SY - H
    Y4 = Y2
  Endif
  
  Y3 = Y2
  
  'Y = DY + Max(4, Min(DH - H - 4, Y))
  Y = Min(Y, DY + DH - H - 4)
  Y = Max(Y, DY)
  
  'Debug "X =";; X;; "Y =";; Y;; "W =";; W;; "H =";; H

  X1 = Min(Max(16, SX - X), W - 16)
  'X2 = W \ 2 - 12
  'X3 = X2 + 24
  If X1 < (W \ 2) Then 
    X2 = X1
    X3 = X1 + ARROW_HEIGHT
  Else
    X2 = X1 - ARROW_HEIGHT
    X3 = X1
  Endif
  X2 = Max(X2, 16)

  'Debug "X1="; X1;; "X2="; X2;; "X3="; X3

  Me.Move(X, Y, W, H)
  
  sNew = ARROW_HEIGHT & " " & Me.W & " " & Me.H & " " & X1 & " " & Y1 & " " & X2 & " " & Y2 & " " & X3 & " " & Y3
  If sNew <> $sOld Then

    'DEBUG sNew
    'ME.Hide
    '
    ' hImage = New Image(Me.W, Me.H, Color.Transparent)
    ' Paint.Begin(hImage)
    ' 
    ' PaintRoundRect(0, ARROW_HEIGHT, Paint.W, Paint.H - ARROW_HEIGHT * 2, 12)
    ' Paint.Brush = Paint.Color(Me.Background)
    ' Paint.Fill
    ' PaintRoundRect(0.5, ARROW_HEIGHT + 0.5, Paint.W - 1, Paint.H - ARROW_HEIGHT * 2 - 1, 12)
    ' iColor = Color.Black 'Color.Merge(&H808080, Me.Background)
    ' Paint.Brush = Paint.Color(iColor)
    ' Paint.LineWidth = 1
    ' Paint.Stroke
    ' 
    ' Paint.End
    ' 
    ' hPict = hImage.Picture
    ' 
    
    hImage = New Image(Me.W, Me.H, Color.Transparent)
  
    ' Draw.Begin(hImage)
    ' 
    ' 'Draw.FillRect(0, 0, Draw.W, Draw.H, Color.White)
    ' DrawRoundRect(0, ARROW_HEIGHT, Me.W, Me.H - ARROW_HEIGHT * 2)
    ' 
    ' Draw.FillStyle = Fill.Solid
    ' Draw.LineStyle = Line.None
    ' 
    ' Draw.FillColor = iColor
    ' 'DrawInternalRect(0, ARROW_HEIGHT, ME.W, ME.H - ARROW_HEIGHT * 2)
    ' Draw.Polygon([X1, Y1, X2, Y2, X3, Y3])
    ' 
    ' Draw.FillColor = BACKGROUND_COLOR 'Me.Background
    ' 'DrawInternalRect(1, ARROW_HEIGHT + 1, ME.W - 2, ME.H - (ARROW_HEIGHT + 1) * 2)
    ' Draw.Polygon([X1, Y1, X2, Y2, X3, Y3])
    ' Draw.End

    Paint.Begin(hImage)    
    
    Paint.Background = Color.Merge(Color.TooltipBackground, Color.TooltipForeground)
    Paint.LineWidth = 2
    'Paint.Translate(0.5, 0.5)
    Paint.Rectangle(1, ARROW_HEIGHT, hImage.W - 2, hImage.H - ARROW_HEIGHT * 2, 6)
    Paint.MoveTo(X2, Y4)
    Paint.LineTo(X3, Y4)
    Paint.MoveTo(X2, Y2)
    Paint.LineTo(X1, Y1)
    Paint.LineTo(X3, Y3)
    Paint.Stroke
    'Paint.Translate(-0.5, -0.5)

    Paint.Background = Color.TooltipBackground
    Paint.Rectangle(1, ARROW_HEIGHT, hImage.W - 2, hImage.H - ARROW_HEIGHT * 2, 6)
    Paint.Fill
    Paint.Polygon([X1, Y1, X2, Y2, X3, Y3])
    Paint.Fill

    'Paint.Translate(0.5, 0.5)
    
    Paint.End
    
    'hImage.Save("~/balloon.png")
    'hImage.Erase(Color.White)
    
    Me.Picture = hImage.Picture
    
    $sOld = sNew
    
  Endif 
  
  hCtrl = Application.ActiveControl
  
  Try GetTopLevel(hCtrl).Show
  Try hCtrl.SetFocus
  
  If Not Me.Visible Then 
    hWin = Application.ActiveWindow
    Me.Show
    ' If hWin Then 
    '   Debug hWin
    '   hWin.Show
    '   Wait
    '   hWin.Show
    ' Endif
  Else  
    Form_Show
    Me.Raise
  Endif
  
  $fShow = Timer
  
End

Public Sub Run(sMsg As String, hCtrl As Control, hIcon As Picture, DX As Integer, DY As Integer)
  
  Dim hWin As Window
  
  'IF hCtrl <> $hCtrl THEN 
  '  DEBUG
  '  ME.Hide
  'ELSE
    Form_Hide
  'ENDIF
  
  txtMessage.W = Max(hCtrl.W / 2, 768)
  txtMessage.Text = Replace(sMsg, "\n", "<br>")
  txtMessage.Adjust
  If txtMessage.W < 64 Then txtMessage.W = 64
  
  $W = txtMessage.W + 2
  $H = txtMessage.Font.RichTextHeight(txtMessage.Text, $W)
  txtMessage.Resize($W, $H)

  $hCtrl = hCtrl
  ARROW_HEIGHT = Min(16, $hCtrl.H \ 4 + 8)
  $DX = DX
  $DY = DY

  hWin = GetTopLevel($hCtrl)
  If Not hWin.Modal Then hWin.Show
  
  $hObs = New Observer(hWin) As "Window"
  $hWatcher2 = New Watcher($hCtrl) As "Watcher"

  If hIcon Then 
    imgIcon.Picture = hIcon
    imgIcon.Resize(hIcon.Width, hIcon.Height)
    imgIcon.Show
    $W += imgIcon.W + 8 + PADDING * 2
    $H = Max($H, imgIcon.H) + PADDING * 2 + ARROW_HEIGHT * 2
    imgIcon.Move(PADDING, PADDING + ARROW_HEIGHT)
    txtMessage.Move(imgIcon.X + imgIcon.W + 8, PADDING + ARROW_HEIGHT) ', ME.W - 32 - imgIcon.W - 8)
  Else
    imgIcon.Hide
    $W += PADDING * 2
    $H += PADDING * 2 + ARROW_HEIGHT * 2
    txtMessage.Move(PADDING, PADDING + ARROW_HEIGHT) ', ME.W - 32)
  Endif

  MakeBorder($W, $H)
  
  'Debug Me.SkipTaskbar
  'Me.SkipTaskbar = True
  
End


Public Sub Form_Show()

  'timCheck.Enabled = FALSE
  'GetTopLevel($hCtrl).Show
  timCheck.Start

End

Public Sub Form_Hide()

  timCheck.Stop
  $hObs = Null
  $hWatcher2 = Null

End

Public Sub Watcher_Hide()
  
  'Debug
  Me.Close
  
End

' PUBLIC SUB Form_Deactivate()
'   
'   ME.Hide
'   
' END

Public Sub txtMessage_MouseDown()

  'Debug 
  Me.Close

End

Public Sub Form_MouseDown()

  'Debug 
  Me.Close

End

Public Sub Window_Move()
  
  If Not Me.Visible Then Return
  
  If Abs($hCtrl.ScreenX - $X) >= 4 Or Abs($hCtrl.ScreenY - $Y) >= 4 Then
    MakeBorder
  Endif
  
End

Public Sub Window_Hide()
  
  'Debug
  Me.Close
  
End

Public Sub timCheck_Timer()

  If $bInside Or If Not Object.IsValid($hCtrl) Or If (Timer - $fShow) > ($iDelay / 1000) Then
    Me.Close
    Return 
  Endif 

  If Abs($hCtrl.ScreenX - $X) >= 4 Or Abs($hCtrl.ScreenY - $Y) >= 4 Then
    MakeBorder
  Endif
  
End

Public Sub GetControl() As Control
  
  If Me.Visible Then Return $hCtrl
  
End


Static Public Sub GetDelay() As Integer
  
  Return $iDelay
  
End

Static Public Sub SetDelay(iDelay As Integer)

  $iDelay = iDelay
  
End

Public Sub Form_Open()

  txtMessage.Foreground = Color.TooltipForeground
  
End
