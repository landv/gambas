' Gambas class file

Export
Inherits UserControl

Public Const _Properties As String = "*,Border,Arrangement{Arrange.Row;Column;Vertical;Horizontal;Fill}=Row,Padding=10,Spacing=10,Column,AutoCenter,ShowShadow,ShowPage"
Public Const _Group As String = "View"
Public Const _Similar As String = "GridView"

'Public Enum Portrait, Paysage
'Public Enum None, PagesWidth, PageHeight
Property DocWidth, PageWidth As Integer
Property DocHeight, PageHeight As Integer
Property Count As Integer
Property Read Max As Integer
Property Read Layout As _DocumentLayout
Property Zoom, Scale As Float
Property Column, Row As Integer
Property Arrangement As Integer
Property Padding As Integer 
Property Spacing As Integer
Property ShowShadow As Boolean
Property ShowPage As Boolean
Property Read Item As _DocumentItem
Property Read FirstVisibleDocument As Integer
Property Read LastVisibleDocument As Integer
Property AutoCenter As Boolean
Property Border As Boolean
Property Desaturate As Boolean

Private $bAutoCenter As Boolean
Private $iColumn As Integer 
Private $bShowShadow As Boolean = True
Private $iPadding As Integer = 10
Private $fScaledPadding As Integer
Private $iArrangement As Integer 
Private $hView As ScrollArea
Private $iDocWidth As Integer = 210
Private $iDocHeight As Integer = 297
Private $hLayout As New _DocumentLayout
'Info du layout
Private $iFirstVisibleColumn As Integer
Private $iLastVisibleColumn As Integer
Private $iFirstVisibleLine As Integer
Private $iFirstVisibleDocument As Integer
Private $iLastVisibleDocument As Integer
Private $iLastVisibleLine As Integer
Private $colLayout As New Collection
Private $colImage As New Collection
Private $iCount As Integer = 0

Private $fScaledDocWidth As Float  ''Largeur reelle du doc a l'affichage (zoom)
Private $fScaledDocHeight As Float ''Hauteur reelle du doc a l'affichage (zoom)
Private $fScaledSpace As Float     '' Taille reelle de l'espacement a l'affichage(zoom)
Private $fMaxPageHeight As Float ''Hauteur du plus grand doc
Private $fMaxPageWidth As Float  ''Largeur du plus grand doc
Private $iMaxPageHeight As Integer
Private $iMaxPageWidth As Integer
Private $iSpacing As Integer = 10    ''Taille de l'espacement
Private $iNbreLines As Integer     ''Nombre de ligne totale
Private $tmrLoad As New Timer As "tmrLoad"
Private $tmrRefresh As New Timer As "tmrRefresh"
Private $aImageToLoad As New Integer[]
Private $aImageLoaded As New Integer[]
Private $iNbreDocByLine As Integer
Private $hDocItem As _DocumentItem
Private $iIntern As Integer
Private $iCurrent As Integer
Private $fZoom As Float = 1.0
Private $aSelected As New Integer[]
Private $fCenter As Float
Private $iSX As Integer
Private $iSY As Integer
Private $MX As Integer
Private $MY As Integer
Private $bShowPage As Boolean
Private $hObs As Observer

Event Layout(Page As Integer)
Event Draw(Page As Integer, Width As Integer, Height As Integer)
Event Finished
Event Zoom
Private $bDesaturate As Boolean

Public Sub _new()
  
  $hView = New ScrollArea(Me) As "View"
  $hView.Background = Color.LightForeground
  $hView.Border = False
  '$tmrLoad.Delay = 100
  Me.Proxy = $hView
  $hDocItem = New _DocumentItem As "Doc"
  $hObs = New Observer($hView.View) As "Obs"
End

Public Sub tmrLoad_Timer()
  
  Dim hImg As Image
  Dim iPage As Integer
  Dim iDocWidth, iDocHeight As Integer
  
  If $aImageToLoad.Count = 0 Then
    '$tmrLoad.Stop
    Raise Finished
    Return
  Endif
  
  iPage = $aImageToLoad.pop()
  
  If $colLayout.Exist(iPage) Then
    iDocWidth = $colLayout[iPage].Width
    iDocHeight = $colLayout[iPage].Height
  Else
    iDocWidth = $iDocWidth
    iDocHeight = $iDocHeight
  Endif
  
  'Raise Layout(iPage)
  
  hImg = New Image(iDocWidth * $fZoom, iDocHeight * $fZoom, Color.White)
  Paint.Begin(hImg)
  'Paint.Scale($fZoom, $fZoom)
  Raise Draw(iPage, iDocWidth * $fZoom, iDocHeight * $fZoom)
  Paint.End
  If $bDesaturate Then hImg.Desaturate()
  $colImage[iPage] = hImg
  $aImageLoaded.Add(iPage)
  $tmrLoad.Trigger
  $tmrRefresh.Trigger
  
End

Public Sub View_Draw()
  
  Dim i, j, k As Integer
  Dim sText As String
  Dim W As Integer
  Dim D As Integer
  
  If $iCount = 0 Then Return 
  
  Select Case $iArrangement
    Case Arrange.Horizontal
      k = $iFirstVisibleDocument
      i = 0
      For j = $iFirstVisibleDocument To $iLastVisibleDocument
        DrawDoc(j, i, j)
        
      Next
    Case Arrange.None, Arrange.Row, Arrange.LeftRight
      k = $iFirstVisibleDocument 
      For i = $iFirstVisibleLine To $iLastVisibleLine
        For j = 0 To $iNbreDocByLine - 1
          
          DrawDoc(k, i, j)
          
          Inc k
          If k > $iLastVisibleDocument Then Goto SHOW_PAGE
          If k >= $iCount Then Goto SHOW_PAGE
        Next
      Next
      
    Case Arrange.Column, Arrange.TopBottom
      k = $iFirstVisibleDocument
      For j = $iFirstVisibleColumn To $iLastVisibleColumn
        'Print "ilastviscol : " & $iLastVisibleColumn
        For i = 0 To $iNbreLines - 1
          DrawDoc(k, i, j)
          Inc k
          If K > $iLastVisibleDocument Then Goto SHOW_PAGE
          If K >= $iCount Then Goto SHOW_PAGE
        Next
      Next
      
    Case Arrange.Vertical
      j = 0
      For i = $iFirstVisibleDocument To $iLastVisibleDocument
        DrawDoc(i, i, j)
      Next
    Case Arrange.Fill
      'DrawDoc($iFirstVisibleDocument, 0, 0)
      i = 0
      For j = $iFirstVisibleDocument To $iLastVisibleDocument
        DrawDoc(j, 0, i)
        Inc i 
        
      Next
  End Select
  
SHOW_PAGE:

  If $bShowPage Then
    
    D = Desktop.Scale
    sText = CStr($iFirstVisibleDocument + 1) & " / " & CStr($iCount)
    W = Paint.Font.TextWidth(sText) + D * 2
    Paint.FillRect(Paint.W - W - D, D, W, Paint.Font.H + D, Color.SetAlpha(Color.TextForeground, 128))
    Paint.Background = Color.SetAlpha(Color.TextBackground, 128)
    Paint.DrawText(sText, Paint.W - W - D + 1, D, W, Paint.Font.H + D, Align.Center)
    Paint.Background = Color.TextBackground
    Paint.DrawText(sText, Paint.W - W - D, D, W, Paint.Font.H + D, Align.Center)
    
  Endif
  
End

Private Sub DrawDoc(Page As Integer, iRow As Integer, iCol As Integer)
  
  Dim iDocX, iDocY As Integer
  Dim fShad As Float = $fZoom * ($iSpacing / 4)
  Dim hImage As Image
  
  'Dim fFullContentWidth As Float

  If $colLayout.Exist(Page) Then
    $fScaledDocWidth = $colLayout[Page].Width * $fZoom
    $fScaledDocHeight = $colLayout[Page].Height * $fZoom
  Else
    $fScaledDocWidth = $iDocWidth * $fZoom
    $fScaledDocHeight = $iDocHeight * $fZoom
  Endif
  
  'Define the doc position
  If System.RightToLeft Then 
    iDocX = $hView.ClientW - $fScaledPadding - (iCol * ($fMaxPageWidth + $fScaledSpace)) - $fMaxPageWidth + $hView.ScrollX
  Else
    iDocX = $fScaledPadding + iCol * ($fMaxPageWidth + $fScaledSpace) + ($fMaxPageWidth - $fScaledDocWidth) / 2 - $hView.ScrollX
  Endif
  iDocY = $fScaledPadding + iRow * ($fMaxPageHeight + $fScaledSpace) + ($fMaxPageHeight - $fScaledDocHeight) / 2 - $hView.ScrollY
  
  If $bAutoCenter Then
    If $iArrangement = Arrange.Column Then
      iDocY -= $fCenter
    Else
      If System.RightToLeft Then 
        iDocX -= $fCenter
      Else
        iDocX += $fCenter
      Endif
    Endif
  Endif
  
  'Draw the doc
  If $bShowShadow Then 
    Paint.Save
    Paint.Translate(fShad, fShad)
    Paint.Rectangle(iDocX + $fScaledDocWidth - fShad, iDocY, fShad, $fScaledDocHeight)
    Paint.Rectangle(iDocX, iDocY + $fScaledDocHeight - fShad, $fScaledDocWidth, fShad)
    Paint.Brush = Paint.Color(Color.SetAlpha(Color.Black, 192))
    Paint.Fill
    Paint.Restore
  Endif
  
  If $colImage.Exist(Page) Then
    
    hImage = $colImage[Page]
    Paint.DrawImage(hImage, iDocX, iDocY, $fScaledDocWidth, $fScaledDocHeight)
    Paint.Rectangle(iDocX, iDocY, $fScaledDocWidth, $fScaledDocHeight)
    Paint.Brush = Paint.Color(Color.Black)
    Paint.Stroke
    
  Else
    
    Paint.Rectangle(iDocX, iDocY, $fScaledDocWidth, $fScaledDocHeight)
    Paint.Brush = Paint.Color(Color.White)
    Paint.Fill(True)
    Paint.Brush = Paint.Color(Color.Black)
    Paint.Stroke
    
  Endif
  
  If $aSelected.Find(page) > -1 Then
    Paint.Rectangle(iDocX, iDocY, $fScaledDocWidth, $fScaledDocHeight)
    Paint.Brush = Paint.Color(Color.SetAlpha(Color.SelectedBackground, 192))
    Paint.Fill()
  Endif
  
End

Private Sub RefreshLayoutNeeds()
  
  Dim i As Integer
  
  For i = 0 To $iCount - 1
    Raise Layout(i)
    
    If $hLayout.Width <> 0 Or If $hLayout.Height <> 0 Or If $hLayout.Orientation <> 1 Then
      $colLayout[i] = $hLayout
      $hLayout = New _DocumentLayout
    Endif
  Next
  DoLayout
  
End

Private Sub DoLayout()
  
  Dim hLayout As _DocumentLayout
  Dim i As Integer
  Dim atmp As New Integer[]
  'Dim fOldZoom As Float = $fZoom
  
  If $iCount = 0 Then Return
  $fCenter = 0
  
  'TODO: go
  '$tmrLoad.Stop
  'Found the maxPage Size
  $iMaxPageHeight = $iDocHeight
  $iMaxPageWidth = $iDocWidth
  
  For Each hLayout In $colLayout
    $iMaxPageWidth = Max($iMaxPageWidth, hLayout.Width)
    $iMaxPageHeight = Max($iMaxPageHeight, hLayout.Height)
  Next
  ' If $iVisibleCount > 0 Then 
  '   $iNbreDocByLine = $iVisibleCount
  ' Endif
  
  Select Case $iArrangement
    Case Arrange.Row, Arrange.None, Arrange.LeftRight
      
      If $iColumn Then 
        SetZoom($hView.ClientW / (($iMaxPageWidth + $iSpacing) * $iColumn - $iSpacing + $iPadding * 2))
      Endif
      
      $fMaxPageWidth = $iMaxPageWidth * $fZoom
      $fMaxPageHeight = $iMaxPageHeight * $fZoom
      $fScaledSpace = $iSpacing * $fZoom
      $fScaledPadding = $iPadding * $fZoom
      $iNbreDocByLine = Max(($hView.ClientW - $fScaledPadding) / ($fMaxPageWidth + $fScaledSpace), 1)
      'Calculate the first visible line
      $iFirstVisibleLine = Floor($hView.ScrollY / ($fMaxPageHeight + $fScaledSpace))
      $iFirstVisibleDocument = $iFirstVisibleLine * $iNbreDocByLine 
      
      ''Debug "Premier doc visible : " & $iFirstVisibleDocument
      'Calculate how many doc are visibles
      $iLastVisibleColumn = Floor(($hView.ScrollX + $hView.ClientWidth) / ($fMaxPageWidth + $fScaledSpace))
      $iLastVisibleLine = Ceil(($hView.ScrollY + $hView.ClientH) / ($fMaxPageHeight + $fScaledSpace)) 
      $iLastVisibleDocument = Min($iLastVisibleLine * $iNbreDocByLine, $iCount - 1) 
      
      'If $bAutoCenter Then $fCenter = (($hView.ClientW - (($iMaxPageWidth + $iSpacing) * $iNbreDocByLine - $iSpacing + $iPadding * 2)) / 2) * $fZoom
      
    Case Arrange.Column, Arrange.TopBottom
      
      If $iColumn Then 
        SetZoom($hView.ClientH / (($iMaxPageHeight + $iSpacing) * $iColumn - $iSpacing + $iPadding * 2))
      Endif
      
      $fMaxPageWidth = $iMaxPageWidth * $fZoom
      $fMaxPageHeight = $iMaxPageHeight * $fZoom
      $fScaledSpace = $iSpacing * $fZoom
      $fScaledPadding = $iPadding * $fZoom
      
      $iNbreLines = Max(($hView.ClientHeight - $fScaledPadding) / ($fMaxPageHeight + $fScaledSpace), 1)
      
      $iNbreDocByLine = Ceil($iCount / $iNbreLines)
      $iFirstVisibleColumn = Floor($hView.ScrollX / ($fMaxPageWidth + $fScaledSpace))
      $iFirstVisibleDocument = $iFirstVisibleColumn * $iNbreLines
      $iLastVisibleColumn = Floor(($hView.ScrollX + $hView.ClientWidth) / ($fMaxPageWidth + $fScaledSpace))
      $iLastVisibleDocument = Min($iLastVisibleColumn * $iNbreLines + 1, $iCount - 1) 
      
      'If $bAutoCenter Then $fCenter = Max((($hView.ClientH - (($iMaxPageHeight + $iSpacing) * $iNbreLines - $iSpacing + $iPadding * 2)) / 2), 0) * $fZoom
      
    Case Arrange.Horizontal
      SetZoom($hView.ClientH / ($iMaxPageHeight + 2 * $iPadding))
      
      $fMaxPageWidth = $iMaxPageWidth * $fZoom
      $fMaxPageHeight = $iMaxPageHeight * $fZoom
      $fScaledSpace = $iSpacing * $fZoom
      $fScaledPadding = $iPadding * $fZoom
      
      $iNbreDocByLine = $iCount
      $iFirstVisibleLine = 0
      $iLastVisibleLine = 0
      
      $iLastVisibleColumn = Floor(($hView.ScrollX + $hView.ClientWidth) / ($fMaxPageWidth + $fScaledSpace))
      $iFirstVisibleDocument = Floor($hView.ScrollX / ($fMaxPageWidth + $fScaledSpace))
      $iFirstVisibleColumn = $iFirstVisibleDocument
      $iLastVisibleDocument = Min(Floor(($hView.ScrollX + $hView.ClientWidth) / ($fMaxPageWidth + $fScaledSpace)), $iCount - 1)
      
    Case Arrange.Vertical
      
      SetZoom($hView.ClientW / ($iMaxPageWidth + 2 * $iPadding))
      
      $fMaxPageWidth = $iMaxPageWidth * $fZoom
      $fMaxPageHeight = $iMaxPageHeight * $fZoom
      $fScaledSpace = $iSpacing * $fZoom
      $fScaledPadding = $iPadding * $fZoom
      $iNbreDocByLine = 1
      
      'Calculate the first visible line
      $iFirstVisibleLine = Floor($hView.ScrollY / ($fMaxPageHeight + $fScaledSpace))
      $iFirstVisibleDocument = $iFirstVisibleLine * $iNbreDocByLine 
      'Debug "Premier doc visible : " & $iFirstVisibleDocument
      'Calculate how many doc are visibles
      $iLastVisibleLine = Ceil(($hView.ScrollY + $hView.ClientH) / ($fMaxPageHeight + $fScaledSpace)) 
      $iLastVisibleDocument = Min($iLastVisibleLine * $iNbreDocByLine, $iCount - 1)
      
    Case Arrange.Fill
      '$hView.ScrollBar = Scroll.None
      
      If $iDocHeight > $iDocWidth * Max($iColumn, 1) Then
        SetZoom($hView.ClientH / ($iDocHeight + $iPadding * 2))
      Else
        SetZoom($hView.ClientW / (($iDocWidth + $iPadding * 2) + ($iDocWidth + $iSpacing) * $iColumn))
        If ($iDocHeight + 2 * $iPadding) * $fZoom > $hView.ClientH Then 
          SetZoom($hView.ClientH / ($iDocHeight + $iPadding * 2))
        Endif
      Endif
      
      $fMaxPageWidth = $iMaxPageWidth * $fZoom
      $fMaxPageHeight = $iMaxPageHeight * $fZoom
      $fScaledSpace = $iSpacing * $fZoom
      $fScaledPadding = $iPadding * $fZoom
      $iFirstVisibleDocument = $iCurrent
      $iNbreDocByLine = Max($iColumn, 1)
      $iLastVisibleDocument = Min($iCurrent + $iNbreDocByLine - 1, $iCount - 1)
      If $bAutoCenter Then 
        $fCenter = Max(($hView.ClientW - (($fMaxPageWidth + $fScaledSpace) * $iNbreDocByLine - $fScaledSpace + $fScaledPadding * 2)) / 2, 0)
        'Print $fCenter
      Endif
      
      $hView.Scroll(0, 0)
      
  End Select
  
  'Calculate the Max doc per line (mini 1 doc)
  
  'If $iVisibleCount = 0 Then
  
  'Endif
  
  'Calculate the full Layout height
  $iNbreLines = Ceil($iCount / $iNbreDocByLine)
  
  'Debug "Nombre de doc par lignes : " & $iNbreDocByLine
  'Debug "Nombre de lignes : " & $iNbreLines
  'Debug "Première colonne : " & $iFirstVisibleColumn
  'Debug "Dernière colonne : " & $iLastVisibleColumn
  'Debug "Premier Doc : " & $iFirstVisibleDocument1
  'Debug "Dernier doc : " & $iLastVisibleDocument
  ' Object.Lock($hView)
  ' $hView.ScrollX = $hView.ScrollX / fOldZoom * $fZoom
  ' $hView.ScrollY = $hView.ScrollY / fOldZoom * $fZoom
  ' Object.Unlock($hView)
  'Setup the virtual space
  $hView.ResizeContents($fScaledPadding * 2 + ($fMaxPageWidth + $fScaledSpace) * $iNbreDocByLine - $fScaledSpace, $fScaledPadding * 2 + ($fMaxPageHeight + $fScaledSpace) * $iNbreLines - $fScaledSpace)
  
  'Remove all unused image from the buffer
  For i = 0 To $aImageLoaded.Max
    If $aImageLoaded[i] < $iFirstVisibleDocument Or If $aImageLoaded[i] > $iLastVisibleDocument Then
      $colImage[$aImageLoaded[i]] = Null
      'Debug "Remove image : " & $aImageLoaded[i]
    Else
      atmp.Add($aImageLoaded[i])
    Endif
  Next
  $aImageLoaded = atmp
  
  'Setup the images to load
  
  For i = $iFirstVisibleDocument To $iLastVisibleDocument 
    If Not $aImageLoaded.Exist(i) Then
      If Not $aImageToLoad.Exist(i) Then $aImageToLoad.push(i)
    Endif
  Next
  $aImageToLoad.Sort
  $aImageToLoad = $aImageToLoad.Reverse()
  'If $aImageToLoad.Count > 0 Then 
  $tmrLoad.Trigger
  
End

Private Function DocWidth_Read() As Integer
  
  Return $iDocWidth
  
End

Private Sub DocWidth_Write(Value As Integer)
  
  If $iDocWidth = Value Then Return
  $iDocWidth = value
  DoLayout
  $tmrRefresh.Trigger
  
End

Private Function DocHeight_Read() As Integer
  
  Return $iDocHeight
  
End

Private Sub DocHeight_Write(Value As Integer)
  
  If $iDocHeight = Value Then Return
  $iDocHeight = Value
  DoLayout
  $tmrRefresh.Trigger
  
End

Private Function Count_Read() As Integer
  
  Return $iCount
  
End

Private Sub Count_Write(Value As Integer)
  
  $iCount = Value
  '$aImageLoaded.Clear
  ' $aImageToLoad.Clear
  '$colImage.Clear
  RefreshLayoutNeeds
  '$tmrRefresh.Trigger
  
End

Private Function Max_Read() As Integer
  
  Return $iCount - 1
  
End

Private Function Layout_Read() As _DocumentLayout
  
  Return $hLayout
  
End

Public Sub View_Arrange()
  
  DoLayout
  $tmrRefresh.Trigger
  
End

Public Sub View_Scroll()
  
  $iSX = $hView.ScrollX
  $iSY = $hView.ScrollY
  '$tmrLoad.Stop
  $aImageToLoad.Clear
  DoLayout
  
End

Private Function Zoom_Read() As Float
  
  Return $fZoom
  
End

Private Sub SetZoom(fValue As Float)
  
  If fValue = $fZoom Then Return
  $fZoom = fValue
  $aImageLoaded.Clear
  $aImageToLoad.Clear
  Raise Zoom
  
End

Private Sub Zoom_Write(Value As Float)
  
  Select Case $iArrangement
    Case Arrange.None, Arrange.Row, Arrange.Column, Arrange.LeftRight, Arrange.TopBottom
      SetZoom(Min(Max(Value, 1 / 8), 8))
      DoLayout
      $tmrRefresh.Trigger
  End Select
  
End

Public Sub Refresh()
  
  $aImageLoaded.Clear
  $aImageToLoad.Clear
  $colImage.Clear
  DoLayout
  $tmrRefresh.Trigger
  
End

Public Sub Reset()
  
  $aImageLoaded.Clear
  $aImageToLoad.Clear
  $colImage.Clear
  RefreshLayoutNeeds
  'DoLayout
  $tmrRefresh.Trigger
  
End

Public Sub tmrRefresh_Timer()
  
  $hView.Refresh
  
End

Private Function Arrangement_Read() As Integer
  
  Return $iArrangement
  
End

Private Sub Arrangement_Write(Value As Integer)
  
  If Value = $iArrangement Then Return
  If Value = Arrange.Fill Then
    $hView.ScrollBar = Scroll.None
  Else
    $hView.ScrollBar = Scroll.Both
  Endif
  
  $iArrangement = Value
  'SetAutoScale
  '$aImageLoaded.Clear
  '$colImage.Clear
  DoLayout
  $tmrRefresh.Trigger
  'Raise Zoom
  
End

' Private Function VisibleCount_Read() As Integer
'   
'   Return $iVisibleCount
'   
' End
' 
' Private Sub VisibleCount_Write(Value As Integer)
'   
'   $iVisibleCount = Value
'   DoLayout
'   
' End

Private Function Padding_Read() As Integer
  
  Return $iPadding
  
End

Private Sub Padding_Write(Value As Integer)
  
  If Value = $iPadding Then Return
  $iPadding = Value
  DoLayout
  
End

Private Function ShowShadow_Read() As Boolean
  
  Return $bShowShadow
  
End

Private Sub ShowShadow_Write(Value As Boolean)
  
  $bShowShadow = Value
  $tmrRefresh.Trigger
  
End

Private Function Spacing_Read() As Integer
  
  Return $iSpacing 
  
End

Private Sub Spacing_Write(Value As Integer)
  
  If value = $iSpacing Then Return
  $iSpacing = Value
  DoLayout
  
End

Public Sub Goto(Page As Integer)
  
  Dim iPageCol, iPageRow As Integer
  
  Page = Max(Min(Page, $iCount - 1), 0)
  
  Select Case $iArrangement
    Case Arrange.None, Arrange.Row, Arrange.LeftRight
      iPageRow = Floor(Page / $iNbreDocByLine)
      $hView.ScrollY = iPageRow * ($fMaxPageHeight + $fScaledSpace)
      
    Case Arrange.Column, Arrange.TopBottom
      iPageCol = Floor(page / $iNbreLines)
      $hView.ScrollX = iPageCol * ($fMaxPageWidth + $fScaledSpace)
      
    Case Arrange.Vertical
      $hView.ScrollY = Page * ($fMaxPageHeight + $fScaledSpace)
      
    Case Arrange.Horizontal
      $hView.ScrollX = Page * ($fMaxPageWidth + $fScaledSpace)
      
    Case Arrange.Fill
      $iCurrent = Page
      DoLayout
      $tmrRefresh.Trigger
  End Select
  
End

Public Sub View_MouseWheel()
  
  If $iArrangement = Arrange.Fill Then
    $iCurrent = Max(0, Min($iCurrent - (Mouse.Delta * Max($iColumn, 1)), $iCount - 1))
    $hView.Scroll(0, 0)
    View_Scroll
    Stop Event
  Else
    If Mouse.Control Then
      Me.Zoom = $fZoom * 2 ^ (Mouse.Delta / 4)
      $hView.Scroll($iSX, $iSY)
    Endif
    Stop Event
  Endif
  $iSX = $hView.ScrollX
  $iSY = $hView.ScrollY
  
End

'WorkAround to lock Scrolling when contol key is pressed
Public Sub Obs_MouseWheel()
  
  If Mouse.Control Then
    $hView.UseMouse = False
  Else
    $hView.UseMouse = True
  Endif
  
End


Public Function Find(X As Integer, Y As Integer) As Integer
  
  Dim iRow, iCol As Integer
  Dim iPage As Integer
  
  iRow = GetPageRow(Y)
  iCol = GetPageCol(X)
  
  If iRow = -1 Or If iCol = -1 Then Return -1
  
  Select Case $iArrangement
    Case Arrange.None, Arrange.Row
      iPage = iRow * $iNbreDocByLine + iCol
      If iPage < $iCount - 1 Then 
        Return iPage
      Else 
        Return -1
      Endif
      
    Case Arrange.Column
      iPage = iCol * $iNbreDocByLine + iRow
      If iPage < $iCount - 1 Then 
        Return iPage
      Else 
        Return -1
      Endif
      
    Case Arrange.Horizontal
      Return iCol
      
    Case Arrange.Vertical
      Return iRow
      
  End Select
  
End

Private Function GetPageRow(Y As Integer) As Integer
  
  Dim iStart, iMiddle As Integer
  Dim iEnd As Integer = $iLastVisibleLine
  Dim iRow As Integer = -1
  Dim iDocPos As Integer
  
  Y += $hView.ScrollY
  iStart = $iFirstVisibleLine
  
  Repeat
    iMiddle = Int(iStart + (iEnd - iStart) / 2)
    iDocPos = ($fScaledPadding + (iMiddle * ($fMaxPageHeight + $fScaledSpace)))
    '     Print Y
    ' Print "DocY : " & (iDocPos - 1)
    ' Print "DocY + Width : " & (iDocPos + $fMaxPageHeight)
    If Y > iDocPos - 1 And If Y < iDocPos + $fMaxPageHeight Then
      'trouvé
      iRow = iMiddle
    Else
      If Y < iDocPos Then
        iEnd = iMiddle - 1
      Else
        iStart = iMiddle + 1
      Endif
      
    Endif
  Until iRow <> -1 Or iMiddle > iEnd + 1 Or iStart > iEnd
  'Print "iRow : " & iRow
  Return iRow
  
End

Private Function GetPageCol(X As Integer) As Integer
  
  Dim iStart, iMiddle As Integer
  Dim iEnd As Integer = $iLastVisibleColumn - 1
  Dim iCol As Integer = -1
  Dim iDocPos As Integer
  ' Print "X=" & X
  X += $hView.ScrollX
  iStart = $iFirstVisibleColumn
  
  Repeat
    iMiddle = Int(iStart + (iEnd - iStart) / 2)
    iDocPos = ($fScaledPadding + (iMiddle * ($fMaxPageWidth + $fScaledSpace)))
    'Print X
    'Print "DocX : " & (iDocPos - 1)
    ' Print "DocX + Width : " & (iDocPos + $fMaxPageWidth)
    If X > iDocPos - 1 And If X < iDocPos + $fMaxPageWidth Then
      'Print "trouvé"
      iCol = iMiddle
    Else
      If X < iDocPos Then
        iEnd = iMiddle - 1
      Else
        iStart = iMiddle + 1
      Endif
      
    Endif
  Until iCol <> -1 Or iMiddle > iEnd + 1 Or iStart > iEnd
  'Print "iCol : " & iCol
  Return iCol
  
End

Public Function _GetItemWidth(Index As Integer) As Integer
  
  If $colLayout.Exist(Index) Then Return $colLayout[Index].Width
  Return $iDocWidth
  
End

Public Function _GetItemHeight(Index As Integer) As Integer
  
  If $colLayout.Exist(Index) Then Return $colLayout[Index].Height
  Return $iDocHeight
  
End

' Public Function _SetItemVisible(Index As Integer) As Integer
'   
'   Me.Goto(Index)
'   
' End

Public Sub _Get(Index As Integer) As _DocumentItem
  
  If Index > $iCount - 1 Then Return Null
  $hDocItem._Index = Index
  Return $hDocItem
  
End

Public Function MoveTo(Index As Integer) As Boolean
  
  If Index < 0 Or index > $iCount + 1 Then Return True
  $iIntern = Index
  
End

Public Function MoveFirst() As Boolean
  
  If $iCount = 0 Then Return True
  $iIntern = 0
  
End

Public Function MoveNext() As Boolean
  
  If $iIntern + 1 >= $iCount Then Return True
  Inc $iIntern
  
End

Public Function MovePrevious() As Boolean
  
  If $iIntern = 0 Then Return True
  Dec $iIntern
  
End

Private Function Item_Read() As _DocumentItem
  
  $hDocItem._Index = $iIntern
  Return $hDocItem
  
End

' Private Function Current_Read() As _DocumentItem
'   
'   $hDocItem._Index = $iCurrent
'   Return $hDocItem
'   
' End

Public Sub View_MouseDown()
  
  $MX = Mouse.X
  $MY = Mouse.Y
  If Me.Arrangement = Arrange.Fill Or If Me.Arrangement = Arrange.None Then Return
  $hView.Mouse = Mouse.Pointing
  'Try $iCurrent = Find(Mouse.x, Mouse.Y)
  '$aSelected.Clear
  '$aSelected.Add($iCurrent)
  '$tmrRefresh.Trigger
  
End

Public Sub View_MouseMove()
  
  If Mouse.Left Then
    
    If Me.Arrangement = Arrange.Fill Or If Me.Arrangement = Arrange.None Then Return
    'Print $MX - Mouse.X
    $hView.ScrollX += $MX - Mouse.X
    $MX = Mouse.X
    
    $hView.ScrollY += $MY - Mouse.Y
    $MY = Mouse.Y
    
    $tmrRefresh.Trigger
    
  Endif
  
End

Public Sub View_MouseUp()
  
  $hView.Mouse = Mouse.Normal
  
End


Public Function _IsVisible(Index As Integer) As Boolean
  
  Return (Index >= $iFirstVisibleDocument And index <= $iLastVisibleDocument)
  
End

' Public Function _GetX(Index As Integer) As Integer
'   
' End
' 
' Public Function _GetY(Index As Integer) As Integer
'   
' End

Private Function FirstVisibleDocument_Read() As Integer
  
  Return $iFirstVisibleDocument
  
End

Private Function LastVisibleDocument_Read() As Integer
  
  Return $iLastVisibleDocument
  
End

Private Function Column_Read() As Integer
  
  Return $iColumn
  
End

Private Sub Column_Write(Value As Integer)
  
  If Value = $iColumn Then Return
  $iColumn = Value
  DoLayout
  
End

Private Function AutoCenter_Read() As Boolean
  
  Return $bAutoCenter 
  
End

Private Sub AutoCenter_Write(Value As Boolean)
  
  If value = $bAutoCenter Then Return
  $bAutoCenter = Value
  $tmrRefresh.Trigger
  
End

Private Function Border_Read() As Boolean

  Return $hView.Border

End

Private Sub Border_Write(Value As Boolean)

  $hView.Border = Value

End

Private Function ShowPage_Read() As Boolean

  Return $bShowPage

End

Private Sub ShowPage_Write(Value As Boolean)

  If $bShowPage = Value Then Return
  $bShowPage = Value
  $hView.Refresh

End

Private Function Desaturate_Read() As Boolean

  Return $bDesaturate

End

Private Sub Desaturate_Write(Value As Boolean)

  If $bDesaturate = Value Then Return
  $bDesaturate = Value
  Reset

End
