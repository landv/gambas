' Gambas class file

Class Desktop

Public (DirView) As DirView 
Public (FileView) As FileView

Event Change
Event {Select}
Event GetIcon(Path As String)
Event ShowHidden
Event Cancel

Private mnuBookmark As Menu
Private mnuEditBookmark As Menu
Private mnuShowHiddenFiles As Menu
Private mnuShowDetailed As Menu
Private mnuShowPreview As Menu
Private mnuUncompress As Menu
Private mnuRename As Menu
Private mnuCopy As Menu
Private mnuDelete As Menu
Private mnuDeleteDir As Menu
Private mnuProperty As Menu

Private $bView As Boolean
Private $aFilter As String[]
Private $bFile As Boolean
Private $hBookmarkList As CBookmarkList
Private $hCurrentBookmark As CBookmark
Private $bShowBookmark As Boolean
Private $hWatch As Watcher
'Private $bPressed As Boolean

Private $sLast As String
Private $aHistory As New String[]
Private $iHistory As Integer = -1
Private $bNoSaveHistory As Boolean

Static Private $aIconSize As Integer[] = [16, 22, 32, 48, 64, 96, 128, 192, 256]
Static Private $hGradient As Image


Public Sub _new(Optional bFile As Boolean)

  Dim hChild As Control
  Dim iCol As Integer
  
  DirView = dvwChoose
  FileView = fvwChoose
  
  $hGradient = New Image(dwgGradient.W, dwgGradient.H, Color.Transparent)
  
  Paint.Begin($hGradient)

  iCol = Style.BackgroundOf(Me)
  
  Paint.Brush = Paint.LinearGradient(0, 0, Paint.W, 0, [Color.SetAlpha(iCol, 255), iCol], [0, 1])
  Paint.Rectangle(0, 0, Paint.W, Paint.H)
  Paint.Fill
  
  Paint.End
  
  ScrollArea(DirView.Proxy.Proxy.Proxy).Shadow = True
  
  For Each hChild In FileView.Children
    Do
      If hChild Is ScrollArea Then
        ScrollArea(hChild).Shadow = True
        Break
      Endif
      hChild = hChild.Proxy
      If Not hChild Then Break
    Loop
    
  Next
  
  $bShowBookmark = True
  $hBookmarkList = New CBookmarkList

  sldIconSize.Value = $aIconSize.Find(32)

  'btnParent.Picture = Main.GetArrow(Align.Left, 16).Picture
  
  $hWatch = New Watcher(fvwChoose) As "FileView"

  FillMenu

  SetRoot()
  
  $bFile = bFile
  
  If Not bFile Then 
    UpdateFilterPanel
    UpdateView
  Else
    btnView_Click
    btnView.Visible = False
    txtFile.Visible = True
    cmbFilter.Visible = True
    SetMulti(False)
    'SetFont(Me.Font)
    SetFilter()
  Endif
  
  SetBookmark($hBookmarkList.FindBest(System.User.Home))
  $sLast = dvwChoose.Current
  SaveToHistory
  
End


' Public Sub txtDir_Change()
' 
'   $sActivate = txtDir.Text
'   dvwChoose.Current = txtDir.Text
' 
' End

' Public Sub txtDir_Click()
' 
'   'cmbDir_Activate
' 
' End

Private Sub UpdateLabelDir()
  
  Dim sDir As String
  Dim sName As String
  Dim sPath As String
  Dim hDirButton As DirButton
  Dim hCtrl As Control
  Dim aCtrl As New Control[]
  
  For Each hCtrl In panDir.Children
    If hCtrl Is DirButton Then aCtrl.Add(hCtrl)
  Next
  For Each hCtrl In aCtrl
    hCtrl.Delete
  Next
  
  sDir = dvwChoose.Current
  
  sPath = "/"
  For Each sName In Split(Mid$(sDir, 2), "/")
    
    sPath &/= sName
    
    If Not IsBookmarkVisible() Then
      If dvwChoose.Root Begins sPath Then Continue
    Endif
    
    hDirButton = New DirButton(panDir) As "DirButton"
    hDirButton.Path = sPath
    
  Next

  btnParent.Enabled = sDir <> "/"
  
  dwgGradient.Raise
  
End

Public Sub DirButton_Click()
  
  Dim sDir As String = Last.Path
  
  If sDir = dvwChoose.Current Then
    ' Just refresh the file view
    DirCache[dvwChoose.Current].Clear
    fvwChoose.Reload
  Else
    SetDir(sDir)
  Endif
  
End



Public Sub dvwChoose_Click()

  If dvwChoose.Current = $sLast Then Return
  
  SaveToHistory
  $sLast = dvwChoose.Current

  If panView.Visible Then 
    fvwChoose.Dir = dvwChoose.Current
    fvwChoose.Reload
  Endif

  UpdateLabelDir

  ' IF $sActivate THEN
  '   IF $sActivate = dvwChoose.Current THEN
  '     IF cmbDir.Find($sActivate) = 0 THEN cmbDir.Add($sActivate)
  '   ENDIF
  '   $sActivate = ""
  ' ENDIF

  If txtFile.ReadOnly Then
    txtFile.Text = ""
  Else
    txtFile_Change
  Endif

  Raise Change

End


Public Sub Form_Open()

  'DirView = dvwChoose
  'FileView = fvwChoose

  btnProperty.Visible = Component.IsLoaded("gb.desktop") 

  UpdateLabelDir
  'If $bFile Then txtFile.SetFocus
  Raise Change

End

Private Sub UpdateZoom()
  
  panIconSize.Visible = Not fvwChoose.ShowDetailed And $bView And fvwChoose.Visible
  
End

Private Sub UpdateView()

  panView.Visible = $bView
  mnuShowDetailed.Visible = $bView
  mnuShowPreview.Visible = $bView
  btnDetail.Visible = $bView
  btnPreview.Visible = $bView

End

Public Sub btnView_Click()

  $bView = Not $bView
  UpdateView
  If $bView Then
    fvwChoose.Dir = dvwChoose.Current
    splChoose.Layout = [1, 2]
  Endif
  UpdateZoom

End

Public Sub mnuShowDetailed_Click()

  fvwChoose.ShowDetailed = Not fvwChoose.ShowDetailed
  mnuShowDetailed.Checked = fvwChoose.ShowDetailed
  Object.Lock(btnDetail)
  btnDetail.Value = fvwChoose.ShowDetailed
  Object.Unlock(btnDetail)
  UpdateZoom
  ' If fvwChoose.ShowDetailed Then
  '   btnDetailed.Picture = Picture["icon:/small/view-icon"]
  ' Else
  '   btnDetailed.Picture = Picture["icon:/small/view-detail"]
  ' Endif

End

' Private Sub AddToHistory(sDir As String)
'   
'   Dim iInd As Integer
'   
'   iInd = $aHistory.Find(sDir)
'   If iInd >= 0 Then $aHistory.Remove(iInd)
'   $aHistory.Add(sDir)
'   While $aHistory.Count > 16
'     $aHistory.Remove(0)
'   Wend
' 
'   Object.Lock(txtDir)
'   txtDir.List = $aHistory  
'   Object.Unlock(txtDir)
'   
' End

Private Sub UpdateBookmarkButton()
  
  If IsBookmarkVisible() And If $hCurrentBookmark Then
    btnBookmark.Text = $hCurrentBookmark.Name
    btnBookmark.Picture = Picture[$hCurrentBookmark.Icon]
    btnRoot.Picture = Picture["icon:/small/system"]
    mnuEditBookmark.Enabled = $hBookmarkList.GetEditableCount() > 0
    btnBookmark.Show
    dvwChoose.HideRoot = True
  Else
    'btnBookmark.Text = File.Name(dvwChoose.Root)
    btnRoot.Picture = dvwChoose.Picture 'Picture["icon:/small/directory"]
    dvwChoose.HideRoot = False
    btnBookmark.Hide
  Endif
  
  btnBookmark.Tooltip = dvwChoose.Root
  
End


Private Sub SetBookmark(hBookmark As CBookmark)
  
  'If Not hBookmark Then Return
  
  $hCurrentBookmark = hBookmark
  
  If hBookmark Then
    SetRoot(hBookmark.Path)
    dvwChoose.Picture = Picture[hBookmark.Icon]
  Endif
  
  UpdateBookmarkButton
  
End


Public Sub SetDir(sDir As String)

  If sDir = dvwChoose.Current Then Return
  
  If IsBookmarkVisible() Then
    SetBookmark($hBookmarkList.FindBest(sDir))
  Endif
  
  dvwChoose.Current = sDir

End

Public Function GetDir() As String

  Return dvwChoose.Current

End

Public Function GetShowDetailed() As Boolean

  Return fvwChoose.ShowDetailed

End

Public Sub SetShowDetailed(bShowDetailed As Boolean)

  If fvwChoose.ShowDetailed <> bShowDetailed Then mnuShowDetailed_Click

End

Public Function GetFileVisible() As Boolean

  Return panView.Visible

End

Public Sub SetFileVisible(bVisible As Boolean)

  If panView.Visible <> bVisible Then btnView_Click

End

Public Function GetShowHidden() As Boolean

  Return fvwChoose.ShowHidden

End

Private Sub UpdateShowHidden()
  
  dvwChoose.ShowHidden = fvwChoose.ShowHidden
  mnuShowHiddenFiles.Checked = fvwChoose.ShowHidden
  
End


Public Sub mnuShowHiddenFiles_Click()

  fvwChoose.ShowHidden = Not fvwChoose.ShowHidden
  UpdateShowHidden
  Raise ShowHidden

End

Public Sub mnuShowPreview_Click()

  btnPreview.Value = Not btnPreview.Value

End


Public Sub SetShowHidden(bShowHidden As Boolean)

  If bShowHidden = fvwChoose.ShowHidden Then Return
  mnuShowHiddenFiles_Click

End

Public Function GetMulti() As Boolean

  Return fvwChoose.Mode = Select.Multiple

End

Public Sub SetMulti(bMulti As Boolean)

  fvwChoose.Mode = If(bMulti, Select.Multiple, Select.Single)

End

Public Function GetPath() As String

  If GetMulti() Then Return

  'CheckFile()
  If txtFile.Text Then 
    Return dvwChoose.Current &/ txtFile.Text
  Endif

End

Public Sub SetPath(sPath As String)

  Dim sMsg As String
  
  If Not IsDir(File.Dir(sPath)) Then sMsg = ("Directory not found.")
  
  If File.IsHidden(sPath) Then SetShowHidden(True)
  
  SetDir(File.Dir(sPath))

  If Not GetMulti() Then 
  
    fvwChoose.Current = File.Name(sPath)
    If txtFile.ReadOnly Then
      txtFile.Text = fvwChoose.Current
    Else 
      txtFile.Text = File.Name(sPath)
    Endif
    
  Endif
  
  If sMsg Then Message.Error(sMsg & "\n\n" & sPath)

End


Public Function GetPaths() As String[]

  Dim aPath As New String[]
  Dim sFile As String
  Dim sPath As String

  If GetMulti() Then

    For Each sFile In fvwChoose.Selection
      aPath.Add(dvwChoose.Current &/ sFile)
    Next
    
  Else
    
    sPath = GetPath()
    If sPath Then aPath.Add(sPath)

  Endif

  Return aPath

End


Public Sub fvwChoose_Select()

  If fvwChoose.Current Or If txtFile.ReadOnly Then
    txtFile.Text = fvwChoose.Current
  Endif
  
  If $bFile Then Raise Change
  
End

Public Sub SetShowDirectory(bShow As Boolean)

  fvwChoose.ShowDirectory = bShow

End

Public Function GetShowDirectory() As Boolean

  Return fvwChoose.ShowDirectory

End


' Public Sub SetFont(hFont As Font)
' 
'   'fvwChoose.Font = hFont
'  ' DEC fvwChoose.Font.Grade
' 
' End

Public Sub fvwChoose_Activate()

  If IsDir(dvwChoose.Current &/ fvwChoose.Current) Then
    dvwChoose.Current &/= fvwChoose.Current
  Else
    Raise {Select}
  Endif

End

Public Sub SetFilter(Optional aFilter As String[])

  Dim iInd As Integer

  cmbFilter.Clear
  $aFilter = New String[]

  If aFilter Then

    If Odd(aFilter.Count) Then aFilter.Remove(aFilter.Max)

    For iInd = 0 To aFilter.Max Step 2
      If aFilter[iInd] = "*" Then Continue 
      $aFilter.Add(aFilter[iInd])
      cmbFilter.Add(aFilter[iInd + 1] & " (" & aFilter[iInd] & ")")
    Next

  Endif

  $aFilter.Add("*")
  cmbFilter.Add(("All files (*)"))

  cmbFilter.Index = 0
  UpdateFilterPanel

End

Public Sub SetFilterIndex(iInd As Integer)
  
  If iInd < 0 Then iInd = cmbFilter.Count - 1
  Try cmbFilter.Index = iInd
  
End

Public Sub GetFilterIndex() As Integer
  
  Return cmbFilter.Index
  
End


Public Function GetFilter() As String[]

  Dim iInd As Integer
  Dim aFilter As New String[]

  For iInd = 0 To $aFilter.Max
    aFilter.Add($aFilter[iInd])
    aFilter.Add(cmbFilter[iInd].Text)
  Next

  Return aFilter

End


Public Sub cmbFilter_Click()

  fvwChoose.Filter = Split($aFilter[cmbFilter.Index], ";", Chr$(34), True)

End

Public Sub dvwChoose_Activate()

  If Not $bFile Then Raise {Select}

End

Public Sub fvwChoose_Icon(Path As String)

  Raise GetIcon(Path)    

End

Public Sub dvwChoose_Icon(Path As String)

  Raise GetIcon(Path)    

End


Public Sub SetReadOnly(bReadOnly As Boolean)
  
  If Not $bFile Then Return 
  txtFile.ReadOnly = bReadOnly
  
End

Public Sub GetReadOnly() As Boolean
  
  If Not $bFile Then Return
  Return txtFile.ReadOnly
  
End

Public Sub SetPicture(hPict As Picture)

  dvwChoose.Picture = hPict
  If Not IsBookmarkVisible() Then UpdateBookmarkButton
  
End 

Public Sub GetPicture() As Picture
  
  Return dvwChoose.Picture
  
End

Public Sub txtFile_GotFocus()

  If Not txtFile.ReadOnly Then txtFile.SelectAll

End

' Private Sub GetRealLink(sLink As String) As String
'   
'   If Left(sLink) <> "/" Then sLink = Mid$(sLink, 2)
'   Return sLink  
'   
' End

Public Sub mnuBookmark_Click()

  Dim hMenu As Menu = Last
  Dim sLink As String = hMenu.Tag
  Dim hBookmark As CBookmark = $hBookmarkList.FindBookmark(sLink)

  SetBookmark(hBookmark)
  btnBookmark_DblClick
  
End


Public Sub SetRoot(Optional sRoot As String)
  
  Dim hBookmark As CBookmark

  If sRoot <> "/" And If Right(sRoot) = "/" Then sRoot = Left(sRoot, -1)

  If sRoot = dvwChoose.Root Then Return

  Try dvwChoose.Root = sRoot

  hBookmark = $hBookmarkList.FindBookmark(sRoot)
  SetBookmark(hBookmark)
  
End

Public Sub GetRoot() As String
  
  Return dvwChoose.Root
  
End

Public Sub SetPrivateBookmarks(aBookmark As Collection[])
  
  $hBookmarkList.Private = aBookmark
  FillMenu
  
End

Public Sub GetPrivateBookmarks() As Collection[]
  
  Return $hBookmarkList.Private
  
End

Public Sub mnuAddBookmark_Click()

  Dim sLink As String = dvwChoose.Current
  
  If $hBookmarkList.FindBookmark(sLink) Then Return 
  
  Inc Application.Busy
  $hBookmarkList.AddBookmark(sLink)
  $hBookmarkList.Save
  FillMenu
  SetRoot(sLink)
  
Finally
  Dec Application.Busy

End

Public Sub mnuRemoveBookmark_Click()

  Inc Application.Busy
  $hBookmarkList.RemoveBookmark(dvwChoose.Root)
  $hBookmarkList.Save
  FillMenu
  SetDir(dvwChoose.Current)
  
Finally
  Dec Application.Busy

End

Public Sub GetSettings() As Variant[]
  
  If Not $bFile Then 
    Return [1, CVariant(dvwChoose.Root), dvwChoose.Current, Null, $bView, splChoose.Layout, fvwChoose.Settings, GetFilterIndex()]
  Else
    Return [1, CVariant(dvwChoose.Root), dvwChoose.Current, fvwChoose.Current, $bView, splChoose.Layout, fvwChoose.Settings, GetFilterIndex()]
  Endif 

End

Public Sub SetSettings(aVar As Variant[])
  
  'Dim bBookmark As Boolean = True
  Dim iZoom As Integer = -1
  
  If TypeOf(aVar[0]) = gb.Integer Then
    
    Try SetRoot(aVar[1])
    Try fvwChoose.Settings = aVar[6]
    UpdateShowHidden
    Try SetDir(aVar[2])
    If $bFile Then Try fvwChoose.Current = aVar[3]
    Try $bView = Not aVar[4]
    If Not Error Then btnView_Click
    splChoose.Layout = aVar[5]
    Try SetFilterIndex(aVar[7])
    
    Try iZoom = $aIconSize.Find(fvwChoose.IconSize)
    If iZoom >= 0 Then sldIconSize.Value = iZoom

  Else
  
    If Not $bFile Then 
    
      'Try bBookmark = aVar[6]
      Try SetRoot(aVar[0])
      Try SetDir(aVar[1])
      Try $bView = Not aVar[2]
      If Not Error Then btnView_Click
      splChoose.Layout = aVar[3]
      Try fvwChoose.Settings = aVar[5]
      Try iZoom = $aIconSize.Find(aVar[6])
      If iZoom >= 0 Then sldIconSize.Value = iZoom
      
    Else
    
      'Try bBookmark = aVar[8]
      Try SetRoot(aVar[0])
      Try SetDir(aVar[1])
      Try fvwChoose.Current = aVar[2]
      Try $bView = Not aVar[3]
      If Not Error Then btnView_Click
      Try splChoose.Layout = aVar[4]
      Try fvwChoose.Settings = aVar[6]
      Try SetFilterIndex(aVar[7])
      Try iZoom = $aIconSize.Find(aVar[8])
      If iZoom >= 0 Then sldIconSize.Value = iZoom
      
    Endif
    
  Endif

  btnPreview.Value = fvwChoose.ShowPreview
  btnDetail.Value = fvwChoose.ShowDetailed

  UpdateShowHidden
  ShowBookmark($bShowBookmark)
  
End

Public Sub mnuCreateDirectory_Click()

  dvwChoose.NewFolder

End


Public Sub mnuRefresh_Click()

  DirCache[dvwChoose.Current].Clear
  dvwChoose.Reload
  fvwChoose.Reload
  
End

Public Sub splChoose_Resize()

  'DEBUG splChoose.Layout  

End

Public Sub SetSplitter(bOn As Boolean)
  
  btnView.Visible = bOn
  
End

Public Sub GetSplitter() As Boolean
  
  Return btnView.Visible
  
End

Public Sub Reload()
  
  mnuRefresh_Click
  
End

Public Sub SetDialogButtonVisible(bVisible As Boolean)
  
  panButton.Visible = bVisible
  UpdateFilterPanel
  
End

Public Sub IsDialogButtonVisible() As Boolean
  
  Return panButton.Visible 
  
End


' Public Sub ShowAutomaticExtension(bShow As Boolean)
'   
'   chkExt.Visible = bShow
'   
' End
' 
' Public Sub SetAutomaticExtension(bVal As Boolean)
'   
'   chkExt.Value = bVal
'   
' End

 Private Sub CheckFile() As Boolean ' FIXME: If 'As Boolean' is forgotten, and 'Return True' is removed, we can get an interpreter crash
  
  Dim sPath As String
  
  If Not txtFile.Visible Then Return
  If txtFile.ReadOnly Then Return
  
  sPath = txtFile.Text
  If InStr(sPath, "/") = 0 Then Return
  
  txtFile.Text = File.Name(sPath)
  SetDir(File.Dir(sPath))
  Return True
  
End


Public Sub btnOK_Click()

  If CheckFile() Then Return
  Raise Select

End

Public Sub btnCancel_Click()

  Raise Cancel

End

Private Sub GetHeight(hCont As Container) As Integer
  
  Dim H As Integer
  Dim hChild As Control
  
  For Each hChild In hCont.Children
    If hChild.Visible Then H = Max(H, hChild.Y + hChild.H)
  Next
  
  Return H
  
End


Public Sub UpdateFilterPanel()

  Dim H As Integer
  Dim M As Integer

  Object.Lock(panFilter)
  
  cmbFilter.Enabled = cmbFilter.Count > 1
  cmbFilter.Show 'Visible = txtFile.Visible
  If Not cmbFilter.Enabled And If Not panButton.Visible Then cmbFilter.Hide

  If panFilter.Margin Then M = Desktop.Scale * 2

  If panButton.Visible Then
    panFilter.H = Max(panButton.H, GetHeight(panExtension)) + M
    panFilter.Show
  Else
    H = GetHeight(panExtension)
    If H Then
      panFilter.H = H + M
      panFilter.Show
    Else
      panFilter.Hide
    Endif
  Endif
  
  Object.Unlock(panFilter)

End

Public Sub GetExtensionContainer() As Container
  
  Return panExtension
  
End

Public Sub panExtension_Arrange()

  UpdateFilterPanel

End

Private Sub AddBookmarkMenu(hBookmark As CBookmark)
  
  Dim hMenu As Menu
  
  hMenu = New Menu(mnuBookmark) As "mnuBookmark"
  hMenu.Tag = hBookmark.Link
  hMenu.Text = hBookmark.Name
  hMenu.Picture = Picture[hBookmark.Icon]
  hMenu.Enabled = hBookmark.Exist()
  
End


Private Sub FillMenu()
  
  Dim hBookmark As CBookmark
  Dim hMenu As Menu
  Dim sType As String
  Dim sOldType As String
  
  mnuPopup.Children.Clear
  
  If IsBookmarkVisible() Then 
  
    mnuBookmark = New Menu(mnuPopup)
    mnuBookmark.Name = "mnuBookmark"
    mnuBookmark.Text = ("Bookmarks")
    mnuBookmark.Picture = Picture["icon:/small/bookmark"]
    
    For Each hBookmark In $hBookmarkList
      sType = Left(hBookmark.Link)
      If sOldType And If sType <> sOldType Then hMenu = New Menu(mnuBookmark)
      sOldType = sType
      AddBookmarkMenu(hBookmark)
    Next
    btnBookmark.Menu = "mnuBookmark"
    
    hMenu = New Menu(mnuBookmark)
    
    hMenu = New Menu(mnuBookmark) As "mnuAddBookmark"
    hMenu.Text = ("&Bookmark current directory")
    hMenu.Picture = Picture["icon:/small/add"]
    
    'hMenu = New Menu(mnuBookmark) As "mnuRemoveBookmark"
    'hMenu.Text = ("&Remove bookmark")
    'hMenu.Picture = Picture["icon:/small/remove"]
    
    hMenu = New Menu(mnuBookmark) As "mnuEditBookmark"
    hMenu.Text = ("&Edit bookmarks...")
    hMenu.Picture = Picture["icon:/small/edit"]
    mnuEditBookmark = hMenu
    
    hMenu = New Menu(mnuBookmark)
    
  Endif
  
  hMenu = New Menu(mnuPopup) As "mnuShowDetailed"
  hMenu.Text = ("Show &details")
  hMenu.Checked = fvwChoose.ShowDetailed
  hMenu.Visible = fvwChoose.Visible
  mnuShowDetailed = hMenu
    
  hMenu = New Menu(mnuPopup) As "mnuShowHiddenFiles"
  hMenu.Text = ("Show &hidden files")
  hMenu.Checked = fvwChoose.ShowHidden
  'hMenu.Visible = fvwChoose.Visible
  mnuShowHiddenFiles = hMenu
  
  hMenu = New Menu(mnuPopup) As "mnuShowPreview"
  hMenu.Text = ("Show &image preview")
  hMenu.Checked = fvwChoose.ShowPreview
  hMenu.Visible = fvwChoose.Visible
  mnuShowPreview = hMenu
  
  hMenu = New Menu(mnuPopup)
  
  hMenu = New Menu(mnuPopup) As "mnuRename"
  hMenu.Text = ("&Rename")
  'hMenu.Picture = Picture["icon:/small/archive"]
  mnuRename = hMenu
  
  hMenu = New Menu(mnuPopup) As "mnuCopy"
  hMenu.Text = ("Copy")
  hMenu.Picture = Picture["icon:/small/copy"]
  mnuCopy = hMenu
  
  hMenu = New Menu(mnuPopup) As "mnuDelete"
  hMenu.Text = ("&Delete")
  hMenu.Picture = Picture["icon:/small/delete"]
  mnuDelete = hMenu
  
  hMenu = New Menu(mnuPopup) As "mnuDeleteDir"
  hMenu.Text = ("&Delete")
  hMenu.Picture = Picture["icon:/small/delete"]
  mnuDeleteDir = hMenu
  
  hMenu = New Menu(mnuPopup)
  
  hMenu = New Menu(mnuPopup) As "mnuUncompress"
  hMenu.Text = ("&Uncompress file")
  hMenu.Picture = Picture["icon:/small/archive"]
  mnuUncompress = hMenu
  
  hMenu = New Menu(mnuPopup) As "mnuCreateDirectory"
  hMenu.Text = ("&Create directory")
  hMenu.Picture = Picture["icon:/small/new-dir"]
  
  If Component.IsLoaded("gb.desktop") Then
    hMenu = New Menu(mnuPopup) As "mnuOpenFolder"
    hMenu.Text = ("Open in &file manager...")
    hMenu.Picture = Picture["icon:/small/file-manager"]
  Endif
  
  hMenu = New Menu(mnuPopup) As "mnuRefresh"
  hMenu.Text = ("&Refresh")
  hMenu.Picture = Picture["icon:/small/refresh"]
  
  If Component.IsLoaded("gb.desktop") Then
    
    hMenu = New Menu(mnuPopup)
    
    hMenu = New Menu(mnuPopup) As "mnuProperty"
    hMenu.Text = ("&Properties")
    hMenu.Picture = Picture["icon:/small/info"]
    mnuProperty = hMenu
    
  Endif
  
End

Public Sub IsBookmarkVisible() As Boolean
  
  Return $bShowBookmark 'btnBookmark.Enabled
  
End

Public Sub ShowBookmark(bShow As Boolean)
  
  'If $bShowBookmark = bShow Then Return
  $bShowBookmark = bShow
  FillMenu
  UpdateBookmarkButton
  
End

Public Sub mnuEditBookmark_Click()
  
  'If Not $hCurrentBookmark Then Return
  'If Not $hCurrentBookmark.IsEditable() Then Return
  FEditBookmark.Run($hBookmarkList)
  
  $hBookmarkList.Save
  FillMenu
  UpdateBookmarkButton
  
End

Public Sub btnBookmark_DblClick()

  If $hCurrentBookmark Then dvwChoose.Current = $hCurrentBookmark.Path
  dvwChoose.Reload

End

Public Sub dvwChoose_KeyPress()

  If dvwChoose.Renaming Then Return

  Select Case Key.Code
    Case Key.F5 
      mnuRefresh_Click
    Case Key.F4
      mnuShowHiddenFiles_Click
    Case Key.F6
      mnuShowDetailed_Click
    Case Key.BackSpace
      btnParent_Click
  End Select

End

Public Sub fvwChoose_KeyPress()

  dvwChoose_KeyPress

End

Public Sub dvwChoose_Menu()

  mnuUncompress.Hide
  mnuShowDetailed.Hide
  mnuShowPreview.Hide
  mnuRename.Show
  mnuDelete.Hide
  mnuDeleteDir.Hide
  Try mnuDeleteDir.Visible = Dir(dvwChoose.Current).Count = 0

  dvwChoose.SetFocus
  mnuPopup.Popup

End

Public Sub fvwChoose_Menu()

  Dim sFile As String = fvwChoose.Current
  
  If sFile Like "*.tar.gz" Or If sFile Like "*.tar.bz2" Or If sFile Like "*.tgz" Or If sFile Like "*.tar" Or If sFile Like "*.zip" Then
    mnuUncompress.Show
  Else
    mnuUncompress.Hide
  Endif
  
  mnuShowDetailed.Show
  mnuShowPreview.Show
  mnuRename.Visible = sFile
  mnuDelete.Visible = sFile
  mnuDeleteDir.Hide

  mnuPopup.Popup

End

Public Sub sldIconSize_Change()

  fvwChoose.IconSize = $aIconSize[sldIconSize.Value]
  sldIconSize.Tooltip = fvwChoose.IconSize

End

Public Sub btnZoomOut_Click()

  Dec sldIconSize.Value

End

Public Sub btnZoomIn_Click()

  Inc sldIconSize.Value

End

Public Sub FileView_Show()
  
  FillMenu
  UpdateZoom
  
End

Public Sub FileView_Hide()
  
  FileView_Show
  
End

Public Sub mnuRename_Click()
  
  If dvwChoose.HasFocus Then
    dvwChoose.Rename
  Else
    fvwChoose.Rename
  Endif
  
End

Private Sub URLQuote(Path As String) As String
  
  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String
  
  For iInd = 1 To Len(Path)
    sCar = Mid$(Path, iInd, 1)
    If sCar = " " Then 
      sCar = "+"
    Else If IsLetter(sCar) Or If IsDigit(sCar) Or If InStr("-._~,$!/", sCar) Then 
    Else 
      sCar = "%" & Hex$(Asc(sCar), 2)
    Endif
    sRes &= sCar
  Next

  Return sRes
  
End

Public Sub mnuCopy_Click()
  
  Dim aPath As String[]
  Dim I As Integer
  
  If dvwChoose.HasFocus Then
    aPath = [dvwChoose.Current]
  Else
    aPath = GetPaths()
  Endif
  
  If aPath.Count = 0 Then Return
  
  For I = 0 To aPath.Max
    aPath[I] = "file://" & URLQuote(aPath[I])
  Next
  
  Clipboard.Copy(aPath.Join(gb.CrLf) & gb.CrLf, "text/uri-list")
  
End


Public Sub mnuUncompress_Click()
  
  'Dim sResult As String
  Dim sOutput As String
  Dim iMsg As Integer
  Dim sPath As String
  Dim sShow As String
  Dim hTreeView As TreeView
  Dim aOutput As String[]
  Dim iPos As Integer
  
  Inc Application.Busy
  
  Select Case File.Name(fvwChoose.Current)
    
    Case Like "*.tar.gz", "*.tar.bz2", "*.tgz", "*.tar"
      
      Shell "cd " & Shell(fvwChoose.Dir) & ";tar tf " & Shell$(fvwChoose.Current) To sOutput
  
      For Each sOutput In Split(Trim(sOutput), "\n")
        
        If Right(sOutput) = "/" Then 
          sOutput = Left$(sOutput, -1)
          If Not sShow Then sShow = sOutput
        Endif
        sPath = fvwChoose.Dir &/ sOutput
        
        If Exist(sPath) Then
          
          If iMsg <> 1 Then
            Application.Busy = 0
            iMsg = Message.Warning("<b>" & sOutput & "</b><p>" & ("This file or directory already exists."), ("Overwrite all"), ("Overwrite"), ("Cancel"))
            If iMsg = 3 Then Return
            Inc Application.Busy
          Endif
          
          Shell "rm -rf " & Shell$(fvwChoose.Dir &/ sOutput) Wait
          
        Endif
        
      Next
      
    Case Like "*.zip"
      
      Shell "cd " & Shell(fvwChoose.Dir) & ";unzip -l " & Shell$(fvwChoose.Current) To sOutput
      
      aOutput = Split(sOutput, "\n")
      If aOutput.Count > 2 Then iPos = InStr(aOutput[1], "Name")
      If iPos = 0 Then
        Application.Busy = 0
        Message.Warning(("Cannot list archive contents"))
        Return
      Endif
      
      aOutput.Remove(0, 2)
      Try aOutput.Remove(aOutput.Max - 1, 2)
      
      For Each sOutput In aOutput
        
        sOutput = Trim(Mid$(sOutput, iPos))
        
        If Right(sOutput) = "/" Then 
          sOutput = Left$(sOutput, -1)
          If Not sShow Then sShow = sOutput
        Endif
        sPath = fvwChoose.Dir &/ sOutput
        
        If Exist(sPath) Then
          
          If iMsg <> 1 Then
            Application.Busy = 0
            iMsg = Message.Warning("<b>" & sOutput & "</b><p>" & ("This file or directory already exists."), ("Overwrite all"), ("Overwrite"), ("Cancel"))
            If iMsg = 3 Then Return
            Inc Application.Busy
          Endif
          
          Shell "rm -rf " & Shell$(fvwChoose.Dir &/ sOutput) Wait
          
        Endif
        
      Next
      
    Case Else
      Application.Busy = 0
      Message.Error(("Cannot uncompress file.") & "\n\n" & ("Unknown archive."))
      Return
      
  End Select

  If Process.LastValue Then Goto _CANNOT_UNCOMPRESS
  
  Select Case File.Name(fvwChoose.Current)
    
    Case Like "*.tar.gz", "*.tgz"
      Shell "cd " & Shell(fvwChoose.Dir) & ";tar xfz " & Shell$(fvwChoose.Current) Wait
      'Exec ["/bin/tar", "xfz", "-C", fvwChoose.Dir, sPath] To sResult
      
    Case Like "*.tar.bz2"
      Shell "cd " & Shell(fvwChoose.Dir) & ";tar xfj " & Shell$(fvwChoose.Current) Wait
      'Exec ["/bin/tar", "xfj", "-C", fvwChoose.Dir, sPath] To sResult
      '
    Case Like "*.tar"
      Shell "cd " & Shell(fvwChoose.Dir) & ";tar xf " & Shell$(fvwChoose.Current) Wait
      
    Case Like "*.zip"
      Shell "cd " & Shell(fvwChoose.Dir) & ";unzip -q " & Shell$(fvwChoose.Current) Wait
      
  End Select
  
  If Process.LastValue Then Goto _CANNOT_UNCOMPRESS
  
  Wait ' Let watch events proceed
  
  Dec Application.Busy
  
  Reload
  
  hTreeView = dvwChoose.Proxy
  If sShow Then 
    Try hTreeView[fvwChoose.Dir &/ sShow].EnsureVisible
    Try hTreeView[fvwChoose.Dir &/ sShow].Selected = True
  Endif
  
  Return
  
_CANNOT_UNCOMPRESS:

  Application.Busy = 0
  Message.Error(("Cannot uncompress file."))
  Return

Catch
  
  Application.Busy = 0
  Message.Error(("Cannot uncompress file.") & "\n\n" & Error.Text)
  
End

Public Sub mnuDelete_Click()
  
  Dim sPath As String = fvwChoose.Current
  
  If Not sPath Then Return
  sPath = fvwChoose.Dir &/ sPath
  
  Message.Title = ("Delete file")
  If Message.Warning("<b>" & File.Name(sPath) & "</b><p>" & ("Do you really want to delete that file?"), ("&Delete"), ("Cancel")) = 2 Then Return
  
  Kill sPath
  mnuRefresh_Click
  
Catch
  
  Message.Error(("Unable to delete file.") & "\n\n" & Error.Text)
  
End

Public Sub mnuDeleteDir_Click()
  
  Dim sPath As String = dvwChoose.Current
  
  If Not sPath Then Return
  
  Message.Title = ("Delete directory")
  If Message.Warning("<b>" & File.Name(sPath) & "</b><p>" & ("Do you really want to delete that directory?"), ("&Delete"), ("Cancel")) = 2 Then Return
  
  Rmdir sPath
  mnuRefresh_Click
  
Catch
  
  Message.Error(("Unable to delete directory.") & "\n\n" & Error.Text)
  
End


Public Sub SetFocus()
  
  txtFile.SetFocus
  
End

Public Sub mnuOpenFolder_Click()
  
  Desktop.Open(dvwChoose.Current)
  
End


Public Sub mnuProperty_Click()
  
  If dvwChoose.HasFocus Or If Not fvwChoose.Current Then
    If Not dvwChoose.Current Then Return
    FFileProperties.Run(dvwChoose.Current)
  Else
    FFileProperties.Run(fvwChoose.Dir &/ fvwChoose.Current)
  Endif
  
End

Public Sub btnParent_Click()

  Dim hBookmark As CBookmark
  Dim sDir As String = dvwChoose.Current

  If sDir = dvwChoose.Root And sDir <> "/" Then
    
    hBookmark = $hBookmarkList.FindBest(File.Dir(sDir))
    If hBookmark Then
      SetBookmark(hBookmark)
    Else
      dvwChoose.Root = File.Dir(sDir)
      SetBookmark(Null)
    Endif

  Endif
  
  dvwChoose.Current = File.Dir(sDir)

End

Public Sub btnParent_Draw()

  Dim iFlag As Integer

  If btnParent.Hovered And If btnParent.Enabled Then iFlag += Draw.Hover
  If Not btnParent.Enabled Then iFlag += Draw.Disabled
  If btnParent.HasFocus Then iFlag += Draw.Focus
  
  If btnParent.Hovered Then Draw.Style.Button(0, 0, btnParent.W, btnParent.H, False, iFlag, True)
  Draw.Style.Arrow((btnParent.W - 8) \ 2, (btnParent.H - 8) \ 2, 8, 8, Align.Left, iFlag)

End

' Public Sub btnParent_Enter()
' 
'   btnParent.Refresh
' 
' End
' 
' Public Sub btnParent_Leave()
' 
'   btnParent.Refresh
' 
' End

' Public Sub btnParent_MouseDown()
' 
'   $bPressed = True
'   btnParent.Refresh
' 
' End
' 
' Public Sub btnParent_MouseUp()
' 
'   $bPressed = False
'   btnParent.Refresh
'   If btnParent.Hovered Then btnParent_Click
' 
' End

Public Sub SetBorder(bBorder As Boolean)
  
  panBorder.Border = If(bBorder, Border.Plain, Border.None)
  
End

Public Sub HasBorder() As Boolean
  
  Return panBorder.Border <> Border.None
  
End

Public Sub SetShowFile(bShow As Boolean)

  txtFile.Visible = bShow
  UpdateFilterPanel

End

Public Function GetShowFile() As Boolean

  Return txtFile.Visible

End

Public Sub HasMargin() As Boolean
  
  Return panFilter.Margin
  
End

Public Sub SetMargin(bMargin As Boolean)
  
  panFilter.Margin = bMargin
  Me.Spacing = Not bMargin
  
End


Public Sub btnPreview_Click()

  fvwChoose.ShowPreview = btnPreview.Value
  mnuShowPreview.Checked = btnPreview.Value

End

Public Sub GetShowPreview() As Boolean
  
  Return fvwChoose.ShowPreview
  
End

Public Sub SetShowPreview(bPreview As Boolean)
  
  btnPreview.Value = bPreview
  
End


' Private Sub UpdateDirText()
' 
'   txtDir.Text = Ellipsize($sDirText, txtDir.Font, txtDir.W)
' 
' End


' Public Sub panToolbar_Arrange()
' 
'   UpdateDirText
' 
' End

Public Sub txtFile_Change()

  If Not GetMulti() Then Try fvwChoose.Current = txtFile.Text

End

Public Sub btnBookmark_Click()

  dvwChoose.Current = dvwChoose.Root

End

Private Sub UpdateHistoryButtons()

  btnBack.Enabled = $iHistory > 0
  btnForward.Enabled = $iHistory < $aHistory.Max
  If btnBack.Enabled Then btnBack.Tooltip = $aHistory[$iHistory - 1]
  If btnForward.Enabled Then btnForward.Tooltip = $aHistory[$iHistory + 1]

End

Private Sub SaveToHistory()

  If $bNoSaveHistory Then Return
  
  $aHistory.Resize($iHistory + 1)
  $aHistory.Add(dvwChoose.Current)
  Inc $iHistory
  UpdateHistoryButtons

End

Public Sub btnBack_Click()

  If $iHistory = 0 Then Return
  $bNoSaveHistory = True
  Dec $iHistory
  SetDir($aHistory[$iHistory])
  $bNoSaveHistory = False
  UpdateHistoryButtons

End

Public Sub btnForward_Click()

  If $iHistory = $aHistory.Max Then Return
  $bNoSaveHistory = True
  Inc $iHistory
  SetDir($aHistory[$iHistory])
  $bNoSaveHistory = False
  UpdateHistoryButtons

End

Public Sub btnRoot_Click()

  If IsBookmarkVisible() Then
    SetDir("/")
  Else
    SetDir(dvwChoose.Root)
  Endif

End

Public Sub dwgGradient_Draw()

  Paint.DrawImage($hGradient, 0, 0)

End

Public Sub panDir_Arrange()

  dwgGradient.Move(panDir.W - dwgGradient.W, 0, dwgGradient.W, panDir.H)

End

Public Sub btnBookmark_Menu()

  dvwChoose.Current = dvwChoose.Root
  dvwChoose_Menu

End
