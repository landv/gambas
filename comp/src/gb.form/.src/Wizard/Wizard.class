' Gambas class file

Export
Inherits UserContainer

Public Const _Properties As String = "*,Count{Range:1;256}=1,Index,Text,TextFont,Picture,ShowTitle=True,ShowIndex=False,ShowButton=True,Border=True,ActionText,ActionPicture,Animated"
Public Const _DefaultEvent As String = "Change"
Public Const _Similar As String = "TabStrip"
Public Const _IsMultiContainer As Boolean = True

Event BeforeChange
Event Change
Event Cancel
Event Click
Event {Close}

Property Count As Integer
Property Index As Integer
Property Read LastIndex As Integer
Property Text As String
Property Picture As Picture
Property ShowTitle As Boolean
Property ShowIndex As Boolean
Property Border As Boolean
Property TextFont As Font
Property ActionText As String
Property ActionPicture As Picture
Property Animated As Boolean
Property ShowButton As Boolean

Private $hWizard As FWizard
Private $aStep As New _WizardContainer[]
Private $iCurrent As Integer = -1
Private $iLast As Integer = -1
Private $bShowIndex As Boolean
Private $sActionText As String
Private $hActionPicture As Picture
Private $iAllowAnimation As Integer
Private $bAnimated As Boolean

Public Sub _new()

  $hWizard = New FWizard(Me) As "Wizard"
  'Object.Attach($hWizard, Me, "Wizard")

  Me.Count = 1
  'ME.Index = 0

End

Private Function Count_Read() As Integer

  Return $aStep.Count

End

Private Sub Count_Write(iCount As Integer)

  Dim iInd As Integer
  Dim hStep As _WizardContainer

  If iCount < 1 Then Error.Raise("Bad argument")
  If iCount = $aStep.Count Then Return

  If iCount < $aStep.Count Then

    For iInd = $aStep.Max To iCount Step -1
      hStep = $aStep[iInd]
      If hStep.Children.Count Then Error.Raise("Wizard step is not empty")
    Next

    For iInd = $aStep.Max To iCount Step -1
      $aStep[iInd].Delete
    Next

    $aStep.Remove(iCount, -1)
    Index_Write(Min($iCurrent, $aStep.Max))

  Else

    For iInd = $aStep.Count To iCount - 1
      hStep = New _WizardContainer($hWizard.GetContainer()) As "WizardContainer"
      hStep.Tag = iInd
      $aStep.Add(hStep)
      hStep.Text = Subst(("Step #&1"), CInt(iInd + 1))
    Next
    'ME.Index = iCount - 1
    Index_Write(0)

  Endif

End

Private Sub GetNext(iInd As Integer) As Integer
  
  Do
    Inc iInd
    If iInd >= $aStep.Count Then Return -1
    If $aStep[iInd].Enabled Then Return iInd
  Loop
  
End

Private Sub GetPrevious(iInd As Integer) As Integer
  
  Do
    Dec iInd
    If iInd < 0 Then Return -1
    If $aStep[iInd].Enabled Then Return iInd
  Loop
  
End


Private Function Index_Read() As Integer

  Return $iCurrent

End

Private Sub DoAnimate(iSrc As Integer, iDest As Integer)

  Dim fTime As Float
  Dim hCont As Container
  Dim hSrc As _WizardContainer
  Dim hDest As _WizardContainer
  Dim Y As Integer
  
  Y = If($hWizard.GetBorder(), 1, 0)
  
  hCont = $hWizard.GetContainer()
  hSrc = $aStep[iSrc]
  hDest = $aStep[iDest]
  
  hSrc.Show
  hDest.Show
  hSrc.Ignore = True
  hDest.Ignore = True
  
  If iDest > iSrc Then
    
    hDest.Move(hCont.W, Y)
    
    fTime = Timer
    While hDest.X > 0
      hDest.X = Max(0, hCont.W * (1 - (Timer - fTime) * 8))
      hSrc.X = hDest.X - hCont.W
      Wait
    Wend
    
  Else
    
    hDest.Move(- hCont.W, Y)
    
    fTime = Timer
    While hDest.X < 0
      hDest.X = Min(0, - hCont.W * (1 - (Timer - fTime) * 8))
      hSrc.X = hDest.X + hCont.W
      Wait
    Wend
    
  Endif

  hDest.Raise
  hSrc.Ignore = False
  hDest.Ignore = False
    
End

Private Sub Index_Write(iIndex As Integer)

  Dim bCancel As Boolean
  Dim bWasNext As Boolean

  If iIndex < 0 Or iIndex >= $aStep.Count Then Error.Raise("Bad index")

  If iIndex = $iCurrent Then Return
  
  If Not $aStep[iIndex].Enabled Then Return

  If iIndex > $iCurrent Then
  
    bWasNext = iIndex = GetNext($iCurrent)
    
    bCancel = Raise BeforeChange
    If bCancel Then Return
    
    If bWasNext Then
      iIndex = GetNext($iCurrent)
      If iIndex < 0 Then Return
    Endif
  
  Endif

  If $bAnimated And If $iAllowAnimation Then DoAnimate($iCurrent, iIndex)

  Me._Container = $aStep[iIndex]

  $iLast = $iCurrent
  $iCurrent = iIndex

  RefreshWizard

  Raise Change
  Raise Click

End

Private Sub GetEnabledIndex(iCurrent As Integer) As Integer
  
  Dim iCount As Integer
  Dim iIndex As Integer
  
  iIndex = -1
  Do
    iIndex = GetNext(iIndex)
    If iIndex > iCurrent Then Return
    Inc iCount
    If iIndex = iCurrent Then Return iCount
  Loop
  
End


Private Sub RefreshWizard()

  Dim hCurrent As _WizardContainer
  Dim iIndex As Integer
  Dim sText As String

  If $iCurrent >= 0 Then

    hCurrent = $aStep[$iCurrent]
    hCurrent.Show
    hCurrent.Raise
    
    sText = hCurrent.Text
    If $bShowIndex Then
      iIndex = GetEnabledIndex($iCurrent)
      If iIndex Then sText = CStr(iIndex) & ". " & sText
    Endif
    $hWizard.SetTitle(sText, hCurrent.Picture)
    $hWizard.SetPosition($iCurrent, GetPrevious($iCurrent) >= 0, GetNext($iCurrent) >= 0)
   
    'Wait

  Endif

  If $iLast >= 0 And $iLast <= $aStep.Max Then
    $aStep[$iLast].Lower
    $aStep[$iLast].Hide
  Endif

End


Private Function Text_Read() As String

  Return $aStep[$iCurrent].Text

End

Private Sub Text_Write(sText As String)

  $aStep[$iCurrent].Text = sText

End

Private Function Picture_Read() As Picture

  Return $aStep[$iCurrent].Picture

End

Private Sub Picture_Write(hPict As Picture)

  $aStep[$iCurrent].Picture = hPict

End

Public Sub WizardContainer__Refresh()

  RefreshWizard

End

Public Function _get(Index As Integer) As _WizardContainer

  If Index < 0 Or Index >= $aStep.Count Then Error.Raise("Bad index")
  Return $aStep[Index]

End

Public Sub Wizard_Previous()

  Dim iInd As Integer = GetPrevious($iCurrent)
  If iInd >= 0 Then 
    Inc $iAllowAnimation
    Index_Write(iInd)
    Dec $iAllowAnimation
  Endif

End

Public Sub MovePrevious()
  
  Wizard_Previous
  
End

Public Sub Wizard_Next()

  Dim iInd As Integer = GetNext($iCurrent)
  Dim bCancel As Boolean
  
  If iInd >= 0 Then
    Inc $iAllowAnimation
    Index_Write(iInd)
    Dec $iAllowAnimation
  Else
    bCancel = Raise BeforeChange
    If bCancel Then Return
    Raise {Close}
  Endif

End

Public Sub MoveNext()
  
  Wizard_Next
  
End


Public Sub Wizard_Cancel()

  Raise Cancel

End

Private Function ShowTitle_Read() As Boolean

  Return $hWizard.GetShowTitle()

End

Private Sub ShowTitle_Write(Value As Boolean)

  $hWizard.SetShowTitle(Value)

End

Private Function Border_Read() As Boolean

  Return $hWizard.GetBorder()

End

Private Sub Border_Write(Value As Boolean)

  $hWizard.SetBorder(Value)

End

Private Function LastIndex_Read() As Integer

  Return $iLast  

End

Private Function ShowIndex_Read() As Boolean

  Return $bShowIndex

End

Private Sub ShowIndex_Write(Value As Boolean)

  $bShowIndex = Value
  RefreshWizard

End

Private Function TextFont_Read() As Font

  Return $hWizard.GetTextFont()

End

Private Sub TextFont_Write(Value As Font)

  $hWizard.SetTextFont(Value)

End

Private Function ActionText_Read() As String

  Return $sActionText

End

Private Sub ActionText_Write(Value As String)

  $sActionText = Value
  If GetNext($iCurrent) < 0 Then $hWizard.UpdateActionButton

End

Private Function ActionPicture_Read() As Picture

  Return $hActionPicture

End

Private Sub ActionPicture_Write(Value As Picture)

  $hActionPicture = Value
  If GetNext($iCurrent) < 0 Then $hWizard.UpdateActionButton

End

Private Function Animated_Read() As Boolean

  Return $bAnimated

End

Private Sub Animated_Write(Value As Boolean)

  $bAnimated = Value

End

Private Function ShowButton_Read() As Boolean

  Return $hWizard.GetShowButton()

End

Private Sub ShowButton_Write(Value As Boolean)

  $hWizard.SetShowButton(Value)

End
