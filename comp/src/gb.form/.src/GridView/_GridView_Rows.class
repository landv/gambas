' Gambas class file

Export

' 	GB_PROPERTY("Height", "i", CGRIDROWS_height),
' 	GB_PROPERTY("H", "i", CGRIDROWS_height),
' 	GB_PROPERTY("Resizable", "b", CGRIDROWS_resizable),
' 	//GB_PROPERTY("Moveable", "b", CGRIDROWS_moveable),
' 	GB_METHOD("Select", NULL, CGRIDROWS_select, "[(Start)i(Length)i]"),
' 	GB_METHOD("SelectAll", NULL, GridViewRows_SelectAll, NULL),
' 	GB_METHOD("UnselectAll", NULL, GridViewRows_UnselectAll, NULL),
' 	GB_METHOD("Remove", NULL, CGRIDROWS_remove, "(Start)i[(Length)i]"),
' 	GB_METHOD("Insert", NULL, CGRIDROWS_insert, "(Start)i[(Length)i]"),
' 

Property Count As Integer
Property Read Max As Integer
Property Width, W As Integer
Property Resizable As Boolean
Property Height, H As Integer
Property Read Selection As Integer[]

Event _Refresh

'Private $aRows As New _GridView_Row[]
Private $nRows As Integer
Private $cHeight As Collection
Private $aHeight As Integer[]
Private $bResizable As Boolean = True
Private $cText As Collection
Private $iDefaultHeight As Integer 
Private $iWidth As Integer

Private $hSel As New GridViewSelection

Public Sub _GetSel() As GridViewSelection
  
  Return $hSel
  
End

Private Sub GetView() As GridView
  
  Return Object.Parent(Me)
  
End

Private Function Count_Read() As Integer
  
  Return $nRows
  
End

Private Sub Count_Write(Value As Integer)

  Dim iRow As Integer
  
  If Value = $nRows Then Return
  
  $nRows = Value
  
  If $aHeight Then
    While $aHeight.Count
      If $aHeight[$aHeight.Max] < $nRows Then Break
      iRow = $aHeight[$aHeight.Max]
      $cHeight.Remove(iRow)
      $aHeight.Remove($aHeight.Max)
    Wend
  Endif

End

Public Sub _get(Row As Integer) As _GridView_Row
  
  Dim hRow As _GridView_Row
  
  hRow = New _GridView_Row As "Row"
  hRow._Row = Row
  Return hRow
  
End

Public Sub _GetDefaultRowHeight() As Integer
  
  If $iDefaultHeight > 0 Then Return $iDefaultHeight
  Return GetView().Font.Height + 6
  
End

Public Sub _GetRowY(iRow As Integer) As Integer
  
  Dim Y As Integer
  Dim DH As Integer = _GetDefaultRowHeight()
  Dim I As Integer
  
  Y = iRow * DH
  
  If $cHeight Then
    
    For Each I In $aHeight
      If I < iRow Then Y += $cHeight[I] - DH
    Next
  Endif
  
  Return Y
  
End

Public Sub _GetRowHeight(iRow As Integer) As Integer
  
  'Debug iRow;; System.Backtrace.Join("|")
  Try Return $cHeight[iRow]
  Return _GetDefaultRowHeight()
  
End

Private Sub AddSorted(iRow As Integer)
  
  Dim I, J As Integer
  
  I = 0
  J = $aHeight.Max
  
  If J < 0 Or If iRow > $aHeight[J] Then
    $aHeight.Add(iRow)
    Return
  Endif
  
  '' TODO: Binary search
  $aHeight.Add(iRow)
  $aHeight.Sort
  
End

Public Sub _ResetRowHeight(iRow As Integer)
  
  Dim hView As GridView = GetView()
  
  If $cHeight.Exist(iRow) Then
    $cHeight.Remove(iRow)
    $aHeight.Remove($aHeight.Find(iRow))
    hView._ResizeContents()
    hView._RaiseRowResize(iRow)
  Endif
  
End

Public Sub _SetRowHeight(iRow As Integer, H As Integer)
  
  Dim hView As GridView = GetView()
  Dim DH As Integer = _GetDefaultRowHeight()
  Dim OH As Integer
  
  H = Min(1024, H)
  
  If Not $cHeight Then 
    $cHeight = New Collection
    $aHeight = New Integer[]
  Endif
  
  If H = DH Then
    _ResetRowHeight(iRow)
    Return
  Endif
  
  If H < 0 Then H = hView._GetPreferredHeight(iRow)
  
  If H >= 0 Then
    OH = -1
    Try OH = $cHeight[iRow]
    If H <> OH Then
      If OH < 0 Then AddSorted(iRow)
      $cHeight[iRow] = H
      hView._ResizeContents()
      hView._RaiseRowResize(iRow)
    Endif
  Endif
  
End

Private Function Width_Read() As Integer
  
  With GetView()
    If $nRows Then
      If .Header = .Vertical Or If .Header = .Both Then 
        If $iWidth Then
          Return $iWidth
        Else
          Return .Font.TextWidth("9") * (1 + CInt(Log10(Max(1, $nRows)))) + 8
        Endif
      Endif
    Endif
  End With
  
End

Public Sub _GetHeight() As Integer
  
  Dim H, DH, HR As Integer
  
  DH = _GetDefaultRowHeight()
  H = DH * $nRows
  If $cHeight Then
    H -= DH * $cHeight.Count
    For Each HR In $cHeight
      H += HR
    Next 
  Endif
  
  Return H
  
End

Public Sub _FindRowFromPos(Y As Integer) As Integer
  
  Dim iRow, YY, H As Integer
  Dim DH As Integer = _GetDefaultRowHeight()
  
  If $cHeight Then
    For Each iRow In $aHeight
      YY = iRow * DH
      If Y < YY Then Break
      H = $cHeight[iRow]
      If Y < (YY + H) Then Return iRow
      Y -= H - DH
    Next
  Endif
  
  iRow = Y / DH
  If iRow < 0 Or If iRow >= $nRows Then iRow = -1
  Return iRow
  
End

Private Function Resizable_Read() As Boolean
  
  Return $bResizable
  
End

Private Sub Resizable_Write(Value As Boolean)
  
  $bResizable = Value
  
End

Public Sub _GetRowText(iRow As Integer) As String
  
  Dim sText As String
  
  If $cText Then sText = $cText[iRow]
  If Not sText Then sText = CStr(iRow + 1)
  Return sText
  
End

Public Sub _SetRowText(iRow As Integer, sText As String)
  
  Dim W As Integer
  
  If Not $cText Then $cText = New Collection
  $cText[iRow] = sText
  If sText Then
    W = GetView().Font.TextWidth(sText) + 8
    If W > Width_Read() Then $iWidth = W
  Endif
  
End

Public Sub Select(Optional Start As Integer = 0, Optional Length As Integer = 1)
  
  If GetView().Mode <> Select.Multiple Then Return
  
  If Start < 0 Then Return
  If Start >= $nRows Then Return
  If Length < 0 Then Length = $nRows - Start
  
  $hSel.Select(Start, Length)
  GetView()._RaiseSelect
  
End

Public Sub UnSelect(Optional Start As Integer = 0, Optional Length As Integer = 1)
  
  If GetView().Mode <> Select.Multiple Then Return
  
  If Start < 0 Then Return
  If Start >= $nRows Then Return
  If Length < 0 Then Length = $nRows - Start
  
  $hSel.UnSelect(Start, Length)
  GetView()._RaiseSelect
  
End

Public Sub SelectAll()
  
  If GetView().Mode <> Select.Multiple Then Return
  
  $hSel.UnSelectAll
  $hSel.Select(0, $nRows)
  GetView()._RaiseSelect
  
End

Public Sub UnSelectAll()
  
  If GetView().Mode <> Select.Multiple Then Return
  
  $hSel.UnSelectAll
  GetView()._RaiseSelect
  
End

Public Sub _IsSelected(iRow As Integer) As Boolean
  
  Return $hSel.IsSelected(iRow)
  
End

Public Sub _SaveSelection() As GridViewSelection
  
  Return $hSel.Copy()
  
End

Public Sub _RestoreSelection(hSel As GridViewSelection)
  
  $hSel = hSel.Copy()
  
End

Private Sub Height_Read() As Integer
  
  Return _GetDefaultRowHeight()
  
End

Private Sub Height_Write(Value As Integer)
  
  $iDefaultHeight = Value
  GetView()._ResizeContents()
  
End

Private Function Max_Read() As Integer
  
  Return $nRows - 1
  
End

Private Sub Width_Write(Value As Integer)
  
  $iWidth = Max(0, Value)
  
End

Public Sub Remove(Start As Integer, Optional Length As Integer = 1)
  
  GetView()._RemoveRows(Start, Length)
  
End

Public Sub Insert(Start As Integer, Optional Length As Integer = 1)
  
  GetView()._InsertRows(Start, Length)
  
End

Public Sub _Clear()
  
  If $cHeight Then
    $cHeight.Clear
    $aHeight.Clear
  Endif
  
End

'' Return an integer array of all the selected rows

Private Function Selection_Read() As Integer[]

  Return $hSel._GetSelectedRows()

End
