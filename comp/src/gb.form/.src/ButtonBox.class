' Gambas class file

Export

Inherits UserControl

Public Const _Properties As String = "*,Action,Text,Alignment{Align.Normal;Left;Center;Right}=Normal,Picture,ReadOnly,Border=True,Button=True"
Public Const _DefaultEvent As String = "Click"
Public Const _DefaultSize As String = "24,4"
Public Const _Similar As String = "TextBox"

Event Click
Event Change
Event Activate

Property Picture As Picture
Property Text As String
Property Read Length As Integer
Property ReadOnly As Boolean
Property Border As Boolean
Property Read Editor As MaskBox
Property Button As Boolean
Property Alignment As Integer

'Private $hPanel As Panel
Private $hBackground As DrawingArea
Private $bBorder As Boolean
Private $hTextBox As MaskBox
Private $hButton As ToolButton
'Private $hObserver As Observer

Public Sub _new()
  
  $hBackground = New DrawingArea(Me) As "Background"
  '$hBackground.Arrangement = Arrange.Horizontal

  $hTextBox = New MaskBox($hBackground) As "TextBox"
  $hTextBox.Border = False
  $hTextBox.Expand = True
  
  Me.Proxy = $hTextBox
  
  $hButton = New ToolButton($hBackground) As "Button"
  $hButton.W = 24
  $hButton.Picture = Picture["./img/select.png"]
  
  Border_Write(True)
  
End

Private Function Picture_Read() As Picture

  Return $hButton.Picture

End

Private Sub Picture_Write(Value As Picture)

  If Not Value Then Value = Picture["./img/select.png"]
  $hButton.Picture = Value

End

Private Function Text_Read() As String

  Return $hTextBox.Text

End

Private Sub Text_Write(Value As String)

  $hTextBox.Text = Value

End

Public Sub Button_Click()
  
  $hTextBox.SetFocus
  Raise Click
  
End

Private Function ReadOnly_Read() As Boolean

  Return $hTextBox.ReadOnly

End

Private Sub ReadOnly_Write(Value As Boolean)

  $hTextBox.ReadOnly = Value

End

Public Sub Background_GotFocus()
  
  $hTextBox.SetFocus

End

Public Sub Clear()
  
  $hTextBox.Clear
  
End

Private Function Length_Read() As Integer

  Return $hTextBox.Length

End

Private Function Border_Read() As Boolean

  Return $bBorder

End

Private Sub Border_Write(Value As Boolean)

  $bBorder = Value
  '$hBackground.Padding = If(Value, Style.TextBoxFrameWidth, 0)
  '$hBackground.Margin = Value
  'Debug $hBackground.Padding
  Background_Arrange
  Me.Refresh

End

' Public Sub Background_Arrange()
'   
'   '$hBackground.Move(0, 0, $hPanel.W, $hPanel.H)
'   Dim iPad As Integer = If($bBorder, 3, 0)
'   
'   If $hButton.Visible Then
'     $hTextBox.Move(iPad, iPad, $hBackground.W - $hButton.W - iPad * 2, $hBackground.H - iPad * 2)
'     $hButton.Move($hBackground.W - $hButton.W - iPad, iPad, $hButton.W, $hBackground.H - iPad * 2)
'   Else
'     $hTextBox.Move(iPad, iPad, $hBackground.W - iPad * 2, $hBackground.H - iPad * 2)
'   Endif
'   
' End


Public Sub Background_Draw()
  
  Dim FW, FH As Integer
  Dim iBg As Integer = Color.TextBackground
  
  If Me.Background <> Color.Default Then iBg = Me.Background
  
  FW = If($bBorder, Style.FrameWidth, 0)
  FH = If($bBorder, Style.FrameWidth, 0)
  
  Draw.FillRect(FW, FH, Me.W - FW * 2, Me.H - FH * 2, iBg)
  If $bBorder Then 
    '$hBackground.Background = Me.Background
    Draw.Style.Panel(0, 0, Me.W, Me.H, Border.Sunken, If(Me.HasFocus, Draw.Focus, Draw.Normal))
  Endif
  
End

Private Function Editor_Read() As MaskBox

  Return $hTextBox

End


Private Function Button_Read() As Boolean

  Return $hButton.Visible

End

Private Sub Button_Write(Value As Boolean)

  $hButton.Visible = Value

End

Private Function Alignment_Read() As Integer

  Return $hTextBox.Alignment

End

Private Sub Alignment_Write(Value As Integer)

  $hTextBox.Alignment = Value

End

Public Sub TextBox_GotFocus()
  
  Me.Refresh
  
End

Public Sub TextBox_LostFocus()
  
  Me.Refresh
  
End


Public Sub TextBox_Activate()
  
  Raise Activate
  
End

Public Sub TextBox_Change()
  
  Raise Change
  
End

Public Sub Background_Arrange()
  
  Dim FW, FH As Integer
  
  FW = If($bBorder, Style.FrameWidth, 0)
  FH = If($bBorder, Style.FrameWidth, 0)
  
  If System.RightToLeft Then
    $hButton.Move(FW, FH, 24, Me.H - FH * 2)
    $hTextBox.Move($hButton.X + $hButton.W, FH, Me.W - FW * 2 - $hButton.W, Me.H - FH * 2)
  Else
    $hTextBox.Move(FW, FH, Me.W - FW * 2 - $hButton.W, Me.H - FH * 2)
    $hButton.Move($hTextBox.X + $hTextBox.W, FH, 24, Me.H - FH * 2)
  Endif
  
End
