' Gambas class file

Export
Inherits _MapLayer

Private Const _Point As Integer = 1          'Item Types
Private Const _MultiPoint As Integer = 8
Private Const _Polyline As Integer = 3
Private Const _Polygon As Integer = 5
Private Const _Circle As Integer = 33

' Private Dash As Float[] = [3, 2]            'Line Styles (and Dash values)
' Private DashDot As Float[] = [3, 2, 1, 2]
' Private DashDotDot As Float[] = [3, 2, 1, 2, 1, 2]
' Private Dot As Float[] = [1, 2]

Property Read Count As Integer            '' Returns the total of Shapes
Property Read Max As Integer              '' Returns the greatest index
Property Read Key As String               '' Returns Shape associated Key
Property {Color} As Integer               '' Returns or sets the Shape's items default Color, or outline color
Property FillColor As Integer             '' Returns or sets the Shape's items default Fill Color
Property LineWidth As Integer             '' Returns or sets the Shape's items default Line Width
Property {Image} As Image                 '' Returns or sets the Shapes's Points default Image. If set, will override the default Icon. To revert to default Icon, set this to Null
Public LineStyle As Integer = Line.Solid  '' Returns or sets the Shape's items default Line Style
Private $iColor As Integer
Private $iFillColor As Integer
Private $iLineWidth As Integer = 2
'Private $iLineStyle As Integer
Private $aInView As New Integer[]
Private $aShapeNames As New String[]
Private $aShapes As New _ShapeItem[]
Private $sLastKey As String
Private $hImage As Image                  '' Stores user defined default by Property Image

'Private $hImgPoint As Image
'Property Points As Shapes

'Private $colKeyShape As New Collection


Public Sub _new(Parent As Object)

  Object.Attach(Me, Parent, "Layer")
 ' $hImgPoint = Image.Load("point.png")

End

Public Sub _Load()

  Dim hMap As Map = Me._GetMap()
  Dim pt1, pt2 As Point

  $aInView.Clear
  For i As Integer = 0 To $aShapes.Max
    If Not ($aShapes[i].Type = _Point) Then
      pt1 = Geo.MapPointToPixel($aShapes[i].Bounds.TopLeft, hMap.Zoom)
      pt2 = Geo.MapPointToPixel($aShapes[i].Bounds.BottomRight, hMap.Zoom)
      If pt2.x - pt1.x < 2 And If pt2.y - pt1.y < 2 Then Continue
    Endif
    With $aShapes[i].Bounds
      If .Lon2 > hMap.Bounds.Lon Then 
        If .lon < hMap.Bounds.lon2
          If .lat2 < hMap.Bounds.Lat Then
            If .Lat > hMap.Bounds.Lat2 Then
              $aInView.Add(i)
            Endif
          Endif
        Endif
      Endif
    End With
  Next

  If Map.Debug Then Debug "Number of items displayed : " & $aInView.Count

End

'' Adds a Point object to current Shape
'' - If Icon not defined, assume default Icon
'' - If Color defined, Icon assume defined color
Public Sub AddPoint(Key As String, Points As MapPoint, Optional {Color} As Integer, Optional Icon As Image) As _ShapeItem

  If $aShapeNames.Exist(Key) Then Error.Raise("This key already exist")

  Dim hItem As New _ShapeItem(Key) As "Item"

  If Not IsMissing(Icon) Then hItem.Image = Icon
  If Not IsMissing({Color}) Then hItem.Color = {Color}

  hItem.Type = _Point
  hItem.Center = Points
  hItem.Points = Points
  hItem.Bounds = MapBounds(Points, Points)
  $aShapes.Add(hItem)
  $aShapeNames.Add(Key)

  Return hItem

End

'' Adds a Multipoint object to current Shape
Public Sub AddMultipoint(Key As String, Points As MapPoint[], Optional {Color} As Integer, Optional Icon As Image) As _ShapeItem

  'If $aShapeNames.Exist(Key) Then Error.Raise("Key already exist: " & Key)

  Dim hItem As New _ShapeItem(Key) As "Item"

  If Not IsMissing(Icon) Then hItem.Image = Icon
  If Not IsMissing({Color}) Then hItem.Color = {Color}

  hItem.Type = _MultiPoint
  hItem.Center = MapPoint.GetCenter(Points) 'GetCenter(Points)
  hItem.Points = Points
  hItem.Bounds = GetPointBounds(Points)
  $aShapes.Add(hItem)
  $aShapeNames.Add(Key)

  Return hItem

End

'' Adds a Polyline object to current Shape
Public Sub AddPolyLine(Key As String, Points As MapPoint[], Optional {Color} As Integer, Optional {LineWidth} As Integer, Optional {LineStyle} As Integer) As _ShapeItem

  'If $aShapeNames.Exist(Key) Then Error.Raise("Key already exist: " & Key)

  Dim hItem As New _ShapeItem(Key) As "Item"

  If Not IsMissing({Color}) Then hItem.Color = {Color}
  If Not IsMissing({LineWidth}) Then hItem.LineWidth = {LineWidth}
  If Not IsMissing({LineStyle}) Then hItem.LineStyle = {LineStyle}

  hItem.Type = _Polyline
  hItem.Center = MapPoint.GetCenter(Points) 'GetCenter(Points)
  hItem.Bounds = GetPointBounds(Points)
  hItem.Points = Points
  $aShapes.Add(hItem)
  $aShapeNames.Add(Key)

  Return hItem

End

'' Adds a Polygon object to current Shape
Public Sub AddPolygon(Key As String, Points As MapPoint[][], Optional {Color} As Integer, Optional {LineWidth} As Integer, Optional {LineStyle} As Integer) As _ShapeItem

  'If $aShapeNames.Exist(Key) Then Error.Raise("Key already exist: " & Key)

  Dim hItem As New _ShapeItem(Key) As "Item"

  If Not IsMissing({Color}) Then hItem.Color = {Color}
  If Not IsMissing({LineWidth}) Then hItem.LineWidth = {LineWidth}
  If Not IsMissing({LineStyle}) Then hItem.LineStyle = {LineStyle}

  hItem.Type = _Polygon
  hItem.Center = MapPoint.GetCenter(Points[0]) 'GetCenter(Points[0])
  hItem.Bounds = GetPointBounds(Points[0])
  hItem.Points = Points
  $aShapes.Add(hItem)
  $aShapeNames.Add(Key)

  Return hItem

End

'' Adds a Circle object to current Shape
'fillcolor should come after color, but i dont want to break anything...
Public Sub AddCircle(Key As String, Center As MapPoint, Radius As Float, Optional {Color} As Integer, Optional {LineWidth} As Integer, Optional {LineStyle} As Integer, Optional {FillColor} As Integer) As _ShapeItem

  If $aShapeNames.Exist(Key) Then Error.Raise("Key already exist: " & Key)

  Dim P1, P2, P3, P4 As MapPoint
  Dim hItem As New _ShapeItem(Key) As "Item"

  If Not IsMissing({Color}) Then hItem.Color = {Color}
  If Not IsMissing({FillColor}) Then hItem.FillColor = {FillColor}
  If Not IsMissing({LineWidth}) Then hItem.LineWidth = {LineWidth}
  If Not IsMissing({LineStyle}) Then hItem.LineStyle = {LineStyle}

  hItem.Type = _Circle
  hItem.Points = Center
  hItem.Center = Center
  hItem.Radius = Radius

  P1 = MapPoint.From(Center, 0, Radius)
  P2 = MapPoint.From(Center, 90, Radius)
  P3 = MapPoint.From(Center, 180, Radius)
  P4 = MapPoint.From(Center, 270, Radius)

  hItem.Bounds.TopLeft = MapPoint(P1.Lat, P4.Lon)
  hItem.Bounds.BottomRight = MapPoint(P3.Lat, P2.Lon)

  $aShapes.Add(hItem)
  $aShapeNames.Add(Key)

  Return hItem

End

'' Draws the Mapshape Layer and Itens
Public Sub Draw()

  Dim pt, pt2 As Point
  Dim hMap As Map = Me._GetMap()
  Dim hPoly As Integer[]
  Dim iColor, iBack As Integer
  Dim hShape As _ShapeItem
  Dim iAlpha As Integer

  If $aShapes.Count = 0 Then Return
  For i As Integer = 0 To $aInView.Max

    'TODO: Check opacity
    hShape = $aShapes[$aInView[i]]
    'Set ForeColor
    iColor = IIf(hShape.Color = -1, $iColor, hShape.Color)
    iAlpha = Color.GetAlpha(icolor)
    iColor = Color.SetAlpha(icolor, Min(iAlpha + (255 - (255 * Me.Opacity)), 255))

    'Set BackColor
    iBack = IIf(hShape.FillColor = -1, $iFillColor, hShape.FillColor)
    If iBack = -1 Then iBack = Color.transparent
    'If hShape.Type = Circle Then Stop
    iAlpha = Color.GetAlpha(iBack)
    iBack = Color.SetAlpha(iBack, Min(iAlpha + (255 - (255 * Me.Opacity)), 255))

    'Set LineWidth
    Paint.LineWidth = IIf(hShape.LineWidth > -1, hShape.LineWidth, $iLineWidth)

    'Set LineStyle
    Dim tmpLineStyle As Integer
    tmpLineStyle = IIf(hShape.LineStyle <> -1, hShape.LineStyle, LineStyle)
    Select Case tmpLineStyle
      Case Line.Dash
        Paint.Dash = [3, 2]
      Case Line.DashDot
        Paint.Dash = [3, 2, 1, 2]
      Case Line.DashDotDot
        Paint.Dash = [3, 2, 1, 2, 1, 2]
      Case Line.Dot
        Paint.Dash = [1, 2]
      Case Line.None
        Paint.Dash = [0]
      Case Else
        Paint.Dash = Null
    End Select

    'TODO: Allow to define color for selected item
    'Force Color for selected
    If hShape.Selected Then iColor = Color.White

    'Draw
    Select Case hShape.Type
      Case _Point
        pt = Geo.MapPointToPixel(hShape.Points, hMap.zoom)
        If hShape.Image Then
          'Draws centralized
          Paint.DrawImage(IIf(hShape.Color, hShape.Image.Colorize(hShape.Color), hShape.Image), pt.X - hMap.PixelBox.X - hShape.Image.Height / 2, pt.Y - hMap.PixelBox.Y - hShape.Image.width / 2)
        Else
          'Draws with default "red point" icon offset
          Paint.DrawImage(Me.Image, pt.X - hMap.PixelBox.X - 16, pt.Y - hMap.PixelBox.Y - 32)
        Endif

      Case _MultiPoint
        For j As Integer = 0 To hShape.Points.Max
          pt = Geo.MapPointToPixel(hShape.Points[j], hMap.zoom)
          ' If hShape.Image Then
          '   Paint.DrawImage(hShape.Image, pt.X - hMap.PixelBox.X - 16, pt.Y - hMap.PixelBox.Y - 32)
          ' Else
          '   Paint.DrawImage(Me.Image, pt.X - hMap.PixelBox.X - 16, pt.Y - hMap.PixelBox.Y - 32)
          ' Endif
          If hShape.Image Then
            'Draws centralized
            Paint.DrawImage(IIf(hShape.Color, hShape.Image.Colorize(hShape.Color), hShape.Image), pt.X - hMap.PixelBox.X - hShape.Image.Height / 2, pt.Y - hMap.PixelBox.Y - hShape.Image.width / 2)
          Else
            'Draws with default "red point" icon offset
            Paint.DrawImage(Me.Image, pt.X - hMap.PixelBox.X - 16, pt.Y - hMap.PixelBox.Y - 32)
          Endif
        Next

      Case _Polygon
        hPoly = New Integer[]
        For j As Integer = 0 To hShape.Points[0].Max
          pt = Geo.MapPointToPixel(hShape.Points[0][j], hMap.zoom)
          hPoly.Add(pt.x - hMap.PixelBox.X)
          hPoly.Add(pt.y - hMap.PixelBox.Y)
        Next
        Paint.LineWidth = hShape.LineWidth
        Paint.Brush = Paint.Color(iBack)
        Paint.Polygon(hPoly)
        Paint.Fill(True)
        Paint.Brush = Paint.Color(iColor)
        Paint.Stroke

      Case _Polyline
        If hShape.Points.Count = 0 Then Continue
        pt = Geo.MapPointToPixel(hShape.Points[0], hMap.zoom)
        Paint.MoveTo(pt.x - hMap.PixelBox.X, pt.y - hMap.PixelBox.Y)
        For j As Integer = 1 To hShape.Points.Max
          pt = Geo.MapPointToPixel(hShape.Points[j], hMap.zoom)
          Paint.LineTo(pt.x - hMap.PixelBox.X, pt.y - hMap.PixelBox.Y)
        Next
        Paint.Brush = Paint.Color(iColor)
        Paint.Stroke

      Case _Circle
        pt = hMap.MapPointToPixelRel(hShape.Bounds.TopLeft)
        pt2 = hMap.MapPointToPixelRel(hShape.Bounds.BottomRight)
        Paint.Ellipse(pt.x, pt.y, pt2.x - pt.x, pt2.y - pt.y)
        Paint.Brush = Paint.Color(iBack)
        'Paint.Brush = Paint.Color(hShape.FillColor)
        Paint.Fill(True)
        Paint.Brush = Paint.Color(icolor)
        'Paint.Brush = Paint.Color(hShape.Color)
        Paint.Stroke
    End Select
  Next

End

'' Returns a Shape Item
Public Function GetItem(Key As String) As _ShapeItem

  'If Not $aShapeNames.Exist(Key) Then Error.Raise("Item not found: " & Key)
  Return $aShapes[$aShapeNames.Find(Key)]

End

'' Hidden method so can be an readable Array
'' - Returns a _ShapeItem
'' - See GetItem
Public Function _get(Key As String) As _ShapeItem

  Dim iRet As Integer
  iRet = $aShapeNames.Find(key)
  If iRet = -1 Then
    Return Null
  Else
    Return $aShapes[iRet]
  Endif

End

' '' Returns associated Map
' Private Function GetMap() As Map
'   
'   Return Object.Parent(Me)
'   
' End

Private Function Color_Read() As Integer

  Return $icolor

End

Private Sub Color_Write(Value As Integer)

  $icolor = Value

End

'' Wrapper to MapPoint.GetCenter() since I dont want to break anything :-D
'' - See MapPoint.GetCenter()
Static Public Function GetCenter(hPoints As MapPoint[]) As MapPoint
  Return MapPoint.GetCenter(hPoints)      'just a jump...
'   'TODO: testar essa função, comportamento estranho. considerar mover para dentro da classe MapPoint
'   Dim tmpA, A, Gx, Gy As Float
'   Dim j As Integer
'   'calcul du centre
'   A = 0
'   gx = 0
'   Gy = 0
'   For k As Integer = 0 To hPoints.Max
'     j = IIf(k + 1 <= hPoints.Max, k + 1, 0)
'     tmpA = (hPoints[k].Lon * hPoints[j].Lat) - (hPoints[j].Lon * hPoints[k].Lat)
'     A += tmpA
'     Gx += tmpA * (hPoints[k].Lon + hPoints[j].Lon)
'     Gy += tmpA * (hPoints[k].Lat + hPoints[j].Lat)
'   Next
'   A = A / 2
'   gx = gx / (6 * A) 
'   gy = gy / (6 * A) 
' 
'   Return MapPoint(GY, GX)
' Catch
' 
End

Private Function GetPointBounds(hMapPoints As MapPoint[]) As MapBounds

  Dim X, Y, X2, Y2 As Float

  X = hMapPoints[0].Lon
  Y = hMapPoints[0].Lat
  X2 = X
  Y2 = Y
  For Each hPoint As MapPoint In hMapPoints
    X = Min(hPoint.lon, X)
    Y2 = Min(hPoint.lat, Y2)
    X2 = Max(hPoint.lon, X2)
    Y = Max(hPoint.lat, Y)
  Next

  Return MapBounds(MapPoint(Y, X), MapPoint(Y2, X2))

End

Private Function Count_Read() As Integer

  Return $aShapes.Count

End

'' Deletes the specified Shape Item
Public Function Remove(Key As String) As Boolean

  Dim iRet As Integer
  iRet = $aShapeNames.Find(key)
  If iRet = -1 Then Return False
  $aShapeNames.Remove(iRet)
  $aShapes.Remove(iRet)
  _Load()

  Return True

End

'' Returns if the specified Shape Item actually exists
Public Sub Exist(Key As String) As Boolean

  Return $aShapeNames.Exist(Key)

End

Private Function Image_Read() As Image

  If $hImage Then Return $hImage Else Return Image.Load("point.png")

End

Private Sub Image_Write(Value As Image)

  $hImage = Value
  '$hImgPoint = Value

End

Public Sub Refresh()

  For Each hItem As _ShapeItem In $aShapes
    Select Case hItem.Type
      Case _Point
        hItem.Center = hItem.Points
        hItem.Bounds = MapBounds(hItem.Points, hItem.Points)
      Case _Polyline, _MultiPoint
        hItem.Center = MapPoint.GetCenter(hItem.Points) 'GetCenter(hItem.Points)
        hItem.Bounds = GetPointBounds(hItem.Points)
      Case _Polygon
        hItem.Center = MapPoint.GetCenter(hItem.Points[0]) 'GetCenter(hItem.Points[0])
        hItem.Bounds = GetPointBounds(hItem.Points[0])
      Case _Circle
        Dim P1, P2, P3, P4 As MapPoint
        P1 = MapPoint.From(hItem.Center, 0, hItem.Radius)
        P2 = MapPoint.From(hItem.Center, 90, hItem.Radius)
        P3 = MapPoint.From(hItem.Center, 180, hItem.Radius)
        P4 = MapPoint.From(hItem.Center, 270, hItem.Radius)
        hItem.Bounds.TopLeft = MapPoint(P1.Lat, P4.Lon)
        hItem.Bounds.BottomRight = MapPoint(P3.Lat, P2.Lon)
    End Select
  Next

End

Private Function Max_Read() As Integer

  Return $aShapes.Max

End

Public Function GetSelected() As _ShapeItem[]

  Dim aShapeItem As New _ShapeItem[]

  For i As Integer = 0 To $aShapes.Max
    If $aShapes[i].Selected Then aShapeItem.Add($aShapes[i])
  Next

  Return aShapeItem

End

Public Sub UnselectAll()

  For i As Integer = 0 To $aShapes.Max
    $aShapes[i].Selected = False
  Next

End

Public Sub SelectAll()

  For i As Integer = 0 To $aShapes.Max
    $aShapes[i].Selected = True
  Next

End

Public Sub Item_Select()

  If $sLastKey <> Last.key Then 
    Try _get($sLastKey).Selected = False       'Try Me._get($sLastKey).Selected = False
    $sLastKey = Last.Key
  Endif

End

Private Function Key_Read() As String

  Return $sLastKey

End

Public Function Find(hMp As MapPoint) As _ShapeItem

  Dim hShape As _ShapeItem
  Dim hMap As Map = Me._GetMap()
  'Optimize by just looking in the view zone
  If hMap.Bounds.InBounds(hMp) Then 
    For i As Integer = 0 To $aInView.Max
      hShape = $aInView[i]
      If hShape.Type = _Point Then
        If hShape.Near(hMp, hMap.Zoom, 10) Then Return hShape
      Else
        If hShape.Contains(hMp) Then Return hShape
      Endif
    Next
  Else
    For i As Integer = 0 To $aShapes.Max
      hShape = $aShapes[i]
      If hShape.Type = _Point Then
        If hShape.Near(hMp, hMap.Zoom, 10) Then Return hShape
      Else
        If hShape.Contains(hMp) Then Return hShape
      Endif
    Next
  Endif

End

'' Clear all shape itens in this Layer
Public Sub Clear()

  $aShapes.Clear
  $aShapeNames.Clear

End

Private Function LineWidth_Read() As Integer

  Return $iLineWidth

End

Private Sub LineWidth_Write(Value As Integer)

  $iLineWidth = Max(Value, 1)

End

Private Function FillColor_Read() As Integer

  Return $iFillColor

End

Private Sub FillColor_Write(Value As Integer)

  $iFillColor = Value

End
