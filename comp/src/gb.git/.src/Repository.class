' Gambas class file

Export

Property Read Path As String
Property Read Workdir As String
Property Read _Handle As Pointer
Property Read Branches As _RepositoryBranches
Property Read LocalBranches As _RepositoryBranches
Property Read RemoteBranches As _RepositoryBranches
Property Read Index As GitIndex
Property Read Head As GitCommit

Private $repo As Pointer
Private $index As GitIndex

Public Sub _new(Optional Path As String)

  If Path Then $repo = FFIRepository.Open(Path)

End

Public Sub _Repo(repo As Pointer)

  $repo = repo

End


Public Sub _free()

  FFIRepository.Free($repo)

End

Public Sub Status() As GitStatus

  Dim status As New GitStatus

  status._Statuses(FFIStatus.GetStatuses($repo))

  Return status
End

Public Sub Reset(files As String[], Optional Commit As GitCommit = Null)

  If Not Commit Then Commit = Me.Head
  FFIRepository.ResetDefault($repo, files, Commit._Handle)

End

Private Function Head_Read() As GitCommit

  Return New GitCommit(FFIRepository.GetHead($repo))

End

Private Function Path_Read() As String

  Return FFIRepository.GetPath($repo)

End

Private Function Workdir_Read() As String

  Return FFIRepository.GetWorkdir($repo)

End

Private Function _Handle_Read() As Pointer

  Return $repo

End

Private Function Branches_Read() As _RepositoryBranches

  Return New _RepositoryBranches(Me, FFIBranch.GIT_BRANCH_ALL)

End

Private Function LocalBranches_Read() As _RepositoryBranches

  Return New _RepositoryBranches(Me, FFIBranch.GIT_BRANCH_LOCAL)

End

Private Function RemoteBranches_Read() As _RepositoryBranches

  Return New _RepositoryBranches(Me, FFIBranch.GIT_BRANCH_REMOTE)

End

Private Function Index_Read() As GitIndex

  If Not $index Then $index = New GitIndex(FFIIndex.GetIndex($repo))
  Return $index

End
