' Gambas class file

Export

Event _Fake

Public _Line As Integer

Property Text As String
Property Read Length As Integer
Property Read Limit As Boolean
Property Read InitialState As _TextEditor_State
Property Read Height, H As Integer
Property Expanded As Boolean
Property Breakpoint As Boolean
Property Disabled As Boolean
Property Bookmark As Boolean

Private Sub GetView() As TextEditor
  
  Return Object.Parent(Me)
  
End


Private Sub GetDoc() As CDocument

  Return GetView()._GetDocument()

End

Private Function Text_Read() As String

  Return GetDoc().Lines[_Line]

End

Private Function Length_Read() As Integer

  Return GetDoc().LineLength[_Line]

End

Private Sub Text_Write(Value As String)

  With GetView()
    If ._GetDocument().Lines[_Line] <> Value Then
      .SaveCursor
      .Begin
      .Remove(0, _Line, String.Len(._GetDocument().Lines[_Line]), _Line)
      .Insert(Value)
      .End
      .RestoreCursor
    Endif
  End With

End

Public Sub Refresh()
  
  With GetDoc()
    .Info(_Line).ClearHighlight
    .HighlightFrom(_Line)
    .Refresh(_Line)
  End With
  
End


Private Function Limit_Read() As Boolean

  Return GetDoc().Info(_Line).Limit

End

Private Function Breakpoint_Read() As Boolean

  Return GetDoc().HasBreakpoint(_Line)

End

Private Sub Breakpoint_Write(Value As Boolean)

  GetDoc().SetBreakpoint(_Line, Value, GetDoc().IsBreakpointDisabled(_Line))
  Refresh

End

Private Function Bookmark_Read() As Boolean

  Return GetDoc().HasBookmark(_Line)

End

Private Sub Bookmark_Write(Value As Boolean)

  GetDoc().SetBookmark(_Line, Value)
  Refresh

End

Private Function InitialState_Read() As _TextEditor_State

  Dim hState As _TextEditor_State

  hState = New _TextEditor_State
  If _Line > 0 Then hState._State = GetDoc().Info(_Line - 1)
  Return hState

End

Public Sub Purge(Optional KeepComment As Boolean, KeepString As Boolean, Replace As String = " ") As String

  Dim hDoc As CDocument = GetDoc()
  Dim aColor As Byte[]
  Dim sPurge As String
  Dim I As Integer
  Dim iState As Byte
  Dim sText As String
  Dim X As Integer
  Dim bReplace As Boolean
  
  sText = hDoc.Lines[_Line]
  aColor = GetDoc().Info(_Line).Colors
  If Not aColor Then Return sText
  
  X = 1
  For I = 0 To aColor.Max Step 2
    iState = aColor[I]
    bReplace = False
    If Not KeepComment Then
      If iState = Highlight.Comment Or If iState = Highlight.Help Then
        bReplace = True
      Endif
    Else If Not KeepString And If iState = Highlight.String Then
      bReplace = True
    Endif
    If bReplace Then
      sPurge &= String$(aColor[I + 1], Replace)
    Else
      sPurge &= String.Mid$(sText, X, aColor[I + 1])
    Endif
    X += aColor[I + 1]
  Next
  
  Return sPurge
  
End

Private Function Expanded_Read() As Boolean

  Return GetView()._IsRowExpanded(_Line)

End

Private Sub Expanded_Write(Value As Boolean)

  With GetView()
    If Value Then
      ._ExpandRow(_Line)
    Else
      ._CollapseRow(_Line)
    Endif
  End With

End

Private Function Height_Read() As Integer

  Return GetView()._GetRowHeight(_Line)

End

Private Function Disabled_Read() As Boolean

  Return GetDoc().IsBreakpointDisabled(_Line)

End

Private Sub Disabled_Write(Value As Boolean)

  GetDoc().SetBreakpoint(_Line, GetDoc().HasBreakpoint(_Line), Value)
  Refresh

End

Public Sub Paint(X As Integer, Y As Integer)
  
  GetView()._PaintRow(_Line, X, Y)
  
End

