' Gambas class file

Static Public Const Name As String = ""

Static Public Const BRACES_OPEN As String = "([{"
Static Public Const BRACES_CLOSE As String = ")]}"
Static Public Const STRING_DELIM As String = "\""
Static Public Const ESCAPE_CHAR As String = "\\"

Public CloseBraces As Boolean
Public CloseStrings As Boolean
Public InsideStringEscape As Boolean

Static Public Sub _init()
  
  Try Component.Load("gb.util")
  
End


Static Public Sub _get(Type As String) As TextEditorMode

	Try Return Object.New("TextEditorMode_" & Type)
	'Error.Raise("Cannot load highlighter: '" & Type & "'")
	Return New TextEditorMode

End

Public Sub IsIdentCar(sCar As String) As Boolean
  
  If IsLetter(sCar) Or If IsDigit(sCar) Then Return True
  
End

Public Sub InsideString(hEditor As TextEditor) As Boolean
  
  Dim iLen As Integer
  Dim I As Integer
  Dim sInside As String
  Dim sLine As String
  Dim sCar As String
  Dim sDelim As String
  Dim iCol As Integer
  
  InsideStringEscape = False

  iCol = hEditor.Column
  If iCol = 0 Then Return
  
  sLine = hEditor.Current.Text
  iLen = hEditor.Current.Length
  sDelim = Me.STRING_DELIM
  
  For I = 1 To iCol
    
    sCar = String.Mid$(sLine, I, 1)
    
    If sCar = sInside Then
      sInside = ""
    Else If InStr(sDelim, sCar) Then
      If Not sInside Then sInside = sCar
    Else If sCar = ESCAPE_CHAR Then
      If sInside Then 
        If I = iCol Then InsideStringEscape = True
        Inc I
      Endif
    Endif
    
  Next
  
  If sInside Then
    I = InStr(sLine, sInside, iCol + 1)
    If I = 0 Then
      InsideStringEscape = True
    Endif
  Endif
  
  Return sInside
  
  ' If Not sInside Then Return
  ' 
  ' For I = I To iLen
  '   
  '   sCar = String.Mid$(sLine, I, 1)
  '   If sCar = sInside Then Return True
  '   If sCar = ESCAPE_CHAR Then Inc I
  '   
  ' Next
  ' 
  ' Return False
  
End

Public Sub BetweenBraces(hEditor As TextEditor) As Boolean

  Dim sLine As String
  Dim X As Integer
  Dim iLen As Integer
  Dim iPos As Integer
  
  If InsideString(hEditor) Then Return
  
  sLine = hEditor.Current.Text
  iLen = hEditor.Current.Length
  X = hEditor.Column
  
  If X = 0 Or If X = iLen Then Return
  
  iPos = InStr(Me.BRACES_OPEN, String.Mid$(sLine, X, 1))
  If iPos = 0 Then Return
  
  Return String.Mid$(sLine, X + 1, 1) = Mid$(Me.BRACES_CLOSE, iPos, 1)
  
End



Public Sub CanCloseBraces(hEditor As TextEditor) As Boolean
  
  Dim sLine As String
  Dim X As Integer
  Dim iLen As Integer
  Dim sCar As String

  If Not CloseBraces Then Return
  
  sLine = hEditor.Current.Text
  iLen = hEditor.Current.Length
  X = hEditor.Column
  
  If X >= iLen Then Return True
  
  sCar = String.RemoveDiacritics(String.Mid$(sLine, X + 1, 1))
  If IsLetter(sCar) Or If IsNumber(sCar) Then Return False
  
  'If InsideString(hEditor) Then Return
  
  Return True
  
End


Public Sub OnKeyPress(hEditor As TextEditor) As Boolean
  
  Dim sLine As String
  Dim X As Integer
  Dim sCar As String
  Dim iPos As Integer
  Dim sText As String
  Dim sSearch As String
  
  sText = Key.Text
  
  If Key.Code = Key.BackSpace Then
    
    If Not CloseBraces And If Not CloseStrings Then Return

    If hEditor.Selected Then Return
    
    X = hEditor.Column
    If X = 0 Then Return

    sLine = hEditor.Current.Text
    sCar = String.Mid$(sLine, X, 1)
    
    sSearch = ""
    If CloseBraces Then sSearch = Me.BRACES_OPEN
    If CloseStrings Then sSearch &= Me.STRING_DELIM
    
    iPos = InStr(sSearch, sCar)
    If iPos = 0 Then Return
    
    sSearch = ""
    If CloseBraces Then sSearch = Me.BRACES_CLOSE
    If CloseStrings Then sSearch &= Me.STRING_DELIM
    
    sCar = String.Mid$(sLine, X + 1, 1)
    If sCar <> Mid$(sSearch, iPos, 1) Then Return
        
    hEditor.SaveCursor()
    hEditor.Select(X - 1, hEditor.Line, X + 1, hEditor.Line)
    hEditor.Insert("")
    hEditor.RestoreCursor()
    hEditor.Goto(X - 1, hEditor.Line)    
    Return True
    
  Endif
  
  InsideStringEscape = False
  
  If CloseBraces Then
  
    iPos = InStr(Me.BRACES_OPEN, sText)
    If iPos Then
      
      If hEditor.Selected Then
        If hEditor.SelectionLine = hEditor.Line Then
          hEditor.Insert(sText & hEditor.SelectedText & Mid$(Me.BRACES_CLOSE, iPos, 1))
          Return True
        Endif
      Endif
      
      If CanCloseBraces(hEditor) Then
        
        hEditor.Begin
        hEditor.SaveCursor()
        hEditor.Insert(sText)
        hEditor.Insert(Mid$(Me.BRACES_CLOSE, iPos, 1))
        hEditor.RestoreCursor()
        hEditor.Goto(hEditor.Column + 1, hEditor.Line)
        hEditor.End
        '$bCanCloseBracesComputed = False
        Return True
        
      Endif
      
      Return
      
    Endif
  
    iPos = InStr(Me.BRACES_CLOSE, sText)
    If iPos Then
      
      If String.Mid$(hEditor.Current.Text, hEditor.Column + 1, 1) = sText Then
        hEditor.Goto(hEditor.Column + 1, hEditor.Line)
        Return True
      Endif
      
      Return
      
    Endif
    
  Endif
  
  If CloseStrings Then 
  
    iPos = InStr(Me.STRING_DELIM, sText)
    If iPos Then
      
      ' If hEditor.Selected Then
      '   If hEditor.SelectionLine = hEditor.Line Then
      '     hEditor.Insert(sText & hEditor.SelectedText & sText)
      '     Return True
      '   Endif
      ' Endif
      
      If Not InsideString(hEditor) Then
        
        hEditor.SaveCursor()
        hEditor.Insert(sText & sText)
        hEditor.RestoreCursor()
        hEditor.Goto(hEditor.Column + 1, hEditor.Line)
        Return True
        
      Else If hEditor.Column < hEditor.Current.Length Then
        
        If Not InsideStringEscape Then
          
          If String.Mid$(hEditor.Current.Text, hEditor.Column + 1, 1) = sText Then
            hEditor.Goto(hEditor.Column + 1, hEditor.Line)
            Return True
          Endif
        
          hEditor.SaveCursor()
          hEditor.Insert(sText & sText)
          hEditor.RestoreCursor()
          hEditor.Goto(hEditor.Column + 1, hEditor.Line)
          Return True
          
        Endif
        
      Endif
      
    Endif
    
  Endif
  
  '$bCanCloseBracesComputed = False
    
End
