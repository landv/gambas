' Gambas class file

Inherits TextHighlighter

Public Const Name As String = "javascript"

Private Const IDENT_CAR As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$"
Private Const DIGIT_CAR As String = "0123456789.+-eE"

Static Private $cKeyword As New Collection
Static Private $cOperator As New Collection
Static Private $aKeywords As String[]

Static Public Sub _init()
  
  Dim sStr As String
  
  $aKeywords = New String[]
  
  For Each sStr In ["break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "enum", "export", "extends", "finally", "for",
    "function", "if", "import", "in", "instanceof", "new", "return", "super", "switch", "throw", "try", "typeof", "var", "void", "while", "with", "yield"]
    $cKeyword[sStr] = 0
    $aKeywords.Add(sStr)
  Next

  For Each sStr In ["false", "null", "this", "true", "undefined", "NaN", "Infinity"]
    $cKeyword[sStr] = 1
    $aKeywords.Add(sStr)
  Next

  For Each sStr In ["{", "}", ".", ">=", "+", "<<", "!", "=", ">>=", ";", "==", "-", ">>", "~", "+=", ">>>=", "(", ",", "!=", "*", ">>>", "&&", "-=", "&=", ")", "<", "===", "%", "&", "||", "*=", "|=", "[", ">", "!==", "++", "|", "?", "%=", "^=",
    "--", "^", ":", "<<=", "]", "<=", "/", "/="]
    $cOperator[sStr] = True
  Next
  
End

Public Sub GetKeywords() As String[]
  
  Return $aKeywords
  
End

Public Sub Run(sText As String)
  
  Dim iState As Integer
  Dim iTag As Integer
  Dim iLenText As Integer
  Dim iPos As Integer
  Dim sCar As String
  Dim bSingleLineComment As Boolean
  Dim bSingleQuoteString As Boolean
  Dim sIdent As String
  Dim bTestShowLimit As Boolean
  Dim bLastExpr As Boolean
  
  iState = TextHighlighter.State
  iTag = TextHighlighter.Tag
  iLenText = String.Len(sText)
  bLastExpr = True
  If iState = Highlight.Operator Then bLastExpr = False
  
  For iPos = 1 To iLenText

    sCar = String.Mid$(sText, iPos, 1)
    
    If TextHighlighter_Html.AllowCode And If sCar = "<" And String.Mid$(sText, iPos, 2) = "<%" Then
      TextHighlighter_Html.MeetCodeAt = iPos
      TextHighlighter.State = iState
      TextHighlighter.Tag = iTag
      Return
    Endif
  
    If iState = Highlight.Normal Then
    
      If sCar = "/" Then
        sCar = String.Mid$(sText, iPos + 1, 1)
        If sCar = "/" Then
          iState = Highlight.Comment
          bSingleLineComment = True
        Else If sCar = "*" Then
          sCar = String.Mid$(sText, iPos + 2, 1)
          If sCar = "*" Then
            iState = Highlight.Help
          Else
            iState = Highlight.Comment
          Endif
          bSingleLineComment = False
        Else If Not bLastExpr And If String.Mid$(sText, iPos + 1, 1) <> " " Then ' Regular expression
        
          sIdent = sCar
          
          While iPos < iLenText
            Inc iPos
            sCar = String.Mid$(sText, iPos, 1)
            If sCar = "\\" Then
              Inc iPos
              sIdent &= sCar & String.Mid$(sText, iPos, 1)
              Continue
            Endif
            sIdent &= sCar
            If sCar = "/" Then
              Break
            Endif
          Wend
          
          While iPos < iLenText
            Inc iPos
            sCar = String.Mid$(sText, iPos, 1)
            If Not IsLetter(sCar) Then 
              Dec iPos
              Break
            Endif
            sIdent &= sCar
          Wend
          
          TextHighlighter.Add(Highlight.DataType, String.Len(sIdent))
          iState = Highlight.Normal
          Continue
        Else
          TextHighlighter.Add(Highlight.Operator)
          Continue
        Endif
        
      Else If sCar = "\"" Then
        iState = Highlight.String
        bSingleQuoteString = False
      Else If sCar = "'" Then
        iState = Highlight.String
        bSingleQuoteString = True
      Else If Asc(sCar) <= 32 Then 
      
      Else If IsDigit(sCar) Then
      
        sIdent = sCar
        sCar = String.Mid$(sText, iPos + 1, 1)
        If sCar = "x" Or If sCar = "X" Then
          sIdent &= sCar
          Inc iPos
          While iPos < iLenText
            Inc iPos
            sCar = String.Mid$(sText, iPos, 1)
            If Not IsHexa(sCar) Then
              Dec iPos
              Break
            Endif
            sIdent &= sCar
          Wend
        Else
          While iPos < iLenText
            Inc iPos
            sCar = String.Mid$(sText, iPos, 1)
            If InStr(DIGIT_CAR, sCar) = 0 Then
              Dec iPos
              Break
            Endif
            sIdent &= sCar
          Wend
        Endif
      
        TextHighlighter.Add(Highlight.Number, String.Len(sIdent))
        iState = Highlight.Normal
        bLastExpr = True
        Continue
        
      Else If Len(sCar) >= 2 Or If InStr(IDENT_CAR, sCar) Then
        
        sIdent = sCar
        
        While iPos < iLenText
          Inc iPos
          sCar = String.Mid$(sText, iPos, 1)
          If Len(sCar) = 1 And If Not IsDigit(sCar) And If InStr(IDENT_CAR, sCar) = 0 Then
            Dec iPos
            Break
          Endif
          sIdent &= sCar
        Wend
        
        If $cKeyword.Exist(sIdent) Then
          iState = Highlight.Keyword
          If sIdent = "function" Then bTestShowLimit = True
          bLastExpr = $cKeyword[sIdent] = 1
        Else
          iState = Highlight.Symbol
          bLastExpr = True
        Endif
        
        TextHighlighter.Add(iState, String.Len(sIdent))
        iState = Highlight.Normal
        Continue
      
      Else
      
        sIdent = sCar
        
        While iPos < iLenText
          If $cOperator.Exist(sIdent) Then Break
          Inc iPos
          sCar = String.Mid$(sText, iPos, 1)
          If IsLetter(sCar) Or If IsDigit(sCar) Or If IsBlank(sCar) Then
            Dec iPos
            Break
          Endif
          sIdent &= sCar
        Wend
        
        bLastExpr = False

        If $cOperator.Exist(sIdent) Then
          iState = Highlight.Operator
          If sIdent = ")" Or If sIdent = "]" Then bLastExpr = True
        Else
          iState = Highlight.Error
        Endif
        
        TextHighlighter.Add(iState, String.Len(sIdent))
        iState = Highlight.Normal
        
        'Dec iPos
        Continue
      
      Endif
      
    Else If iState = Highlight.Comment Or If iState = Highlight.Help Then
    
      If Not bSingleLineComment Then
        sCar = String.Mid$(sText, iPos, 2)
        If sCar = "*/" Then
          TextHighlighter.Add(iState, 2)
          Inc iPos
          iState = Highlight.Normal
          Continue
        Endif
      Endif
      
    Else If iState = Highlight.String Then
    
      If sCar = "\\" Then
        sCar = String.Mid$(sText, iPos + 1, 1)
        If sCar = "x" Then
          TextHighlighter.Add(iState, 3)
          iPos += 2
          Continue
        Else If sCar = "u" Then
          TextHighlighter.Add(iState, 5)
          iPos += 4
          Continue
        Else
          TextHighlighter.Add(iState, 2)
          Inc iPos
          Continue
        Endif
      Else If sCar = "\"" And If Not bSingleQuoteString Then
        TextHighlighter.Add(iState)
        iState = Highlight.Normal
        bLastExpr = True
        Continue
      Else If sCar = "'" And If bSingleQuoteString Then
        TextHighlighter.Add(iState)
        iState = Highlight.Normal
        bLastExpr = True
        Continue
      Endif
      
    Endif
    
    TextHighlighter.Add(iState)
    
  Next
  
  If iState = Highlight.Comment And If bSingleLineComment Then
    iState = Highlight.Normal
  Endif
  
  If iState <> Highlight.Comment And If iState <> Highlight.Help Then
    iState = Highlight.Normal
  Endif
  
  TextHighlighter.Limit = False
  If bTestShowLimit Then
    If LTrim(sText) Begins "function" Or If Trim(sText) Like "*: function(*" Then
      TextHighlighter.Limit = True
    Endif
  Endif
  
  TextHighlighter.State = iState
  TextHighlighter.Tag = iTag
  
End
