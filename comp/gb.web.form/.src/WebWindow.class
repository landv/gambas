' Gambas class file

Inherits WebControl

'Public Const _Properties As String = "*,Text"
'Public Const _DefaultEvent As String = "Click"

'Event Click

Property X As String
Property Y As String
Property Width, W As String
Property Height, H As String
Property Child As WebForm
Property Resizable As Boolean
Property Modal As Boolean

Property PopupControl As WebControl
Property PopupAlignment As Integer
Property ParentControl As WebControl

Private $sX As String
Private $sY As String
Private $sWidth As String
Private $sHeight As String
Private $iFormId As Integer
Private $bResizable As Boolean
Private $bModal As Boolean
Private $iPopupControlId As Integer
Private $iPopupAlignment As Integer
Private $iParentControlId As Integer

Public Sub IsPopup() As Boolean

  Return $iPopupControlId

End

Public Sub _RenderStyleSheet()
  
  Me._StartStyleSheet
  
  Me._AddStyleSheet("display:flex;")
  Me._AddStyleSheet("flex-flow:column;")
  
  If Not IsPopup() Then
  
    If $sX And If $sY Then
      Me._AddStyleSheet("transform:translate(" & $sX & "," & $sY & ");")
    Else
  
    ' If $sX Then Me._AddStyleSheet("left:" & $sX & ";")
    ' If $sY Then Me._AddStyleSheet("top:" & $sY & ";")
    
      WebForm._AddJavascript("gw.window.center(" & JS(Me.Name) & ")")
    Endif
    
  Endif
  
  If $sWidth Then 
    Me._AddStyleSheet("width:" & $sWidth & ";")
    'Me._AddStyleSheet("max-width:" & $sWidth & ";")
  Endif
  If $sHeight Then Me._AddStyleSheet("height:" & $sHeight & ";")
  
  Me._EndStyleSheet
  
End

Private Sub GetTitle() As String

  Dim hForm As WebForm

  Try hForm = WebControl.FromId($iFormId)
  If hForm Then Return hForm.Title

End

Public Sub _Render()
  
  Dim sOpen As String
  
  If Not IsPopup() Then
  
    Print "<div class=\"gw-window-titlebar\" id=\""; Me.Name; "-titlebar\">"
    Print "<button class=\"gw-window-button gw-window-close-button\""; Me._GetUpdateJS("onclick", "#close"); ">";
    Print "<img src=\""; Html(Application.Root &/ "gw-close.png"); "\">";
    Print "</button>"
    Print "<div class=\"gw-window-title\">"; GetTitle(); "</div>"
    If $bResizable Then
      Print "<button class=\"gw-window-button gw-window-max-button\" onclick=\"gw.window.maximize("; JS(Me.Name); ");\">";
      Print "<img src=\""; Html(Application.Root &/ "gw-max.png"); "\">";
      Print "</button>"
    Endif
    Print "</div>"
    
  Endif
  
  Print "<div class=\"gw-window-contents\">"
  If $iFormId Then 
    With WebControl.FromId($iFormId)
      ._BeforeRender()
      ._Render()
      ._AfterRender()
    End With
  Endif
  Print "</div>"
  
  If IsPopup() Then
  
    sOpen = "gw.window.popup(" & JS(Me.Name) & "," & JS($bResizable) & "," & JS(WebControl.FromId($iPopupControlId).Name) & "," & If($iPopupAlignment = Align.Right, "'right'", "'left'")
    If Me["min-width"] Then sOpen &= "," & JS(Me["min-width"]) & "," & JS(Me["min-height"]) 
    sOpen &= ");"
    
  Else
    
    sOpen = "gw.window.open(" & JS(Me.Name) & "," & JS($bResizable) & "," & JS($bModal)
    If Me["min-width"] Then sOpen &= "," & JS(Me["min-width"]) & "," & JS(Me["min-height"]) 
    sOpen &= ");"
    
  Endif
  
  WebForm._AddJavascript(sOpen)
  
End


Private Function X_Read() As String

  Return $sX

End

Private Sub X_Write(Value As String)

  If $sX = Value Then Return
  $sX = Value
  If $sX And If IsDigit($sX) Then $sX &= "em"
  Me._SetProperty("X", Value)

End

Private Function Y_Read() As String

  Return $sY

End

Private Sub Y_Write(Value As String)

  If $sY = Value Then Return
  $sY = Value
  If $sY And If IsDigit($sY) Then $sY &= "em"
  Me._SetProperty("Y", Value)

End

Private Function Width_Read() As String

  Return $sWidth 

End

Private Sub Width_Write(Value As String)

  If $sWidth = Value Then Return
  $sWidth = Value
  If $sWidth And If IsDigit($sWidth) Then $sWidth &= "em"
  Me._SetProperty("Width", Value)

End

Private Function Height_Read() As String

  Return $sHeight

End

Private Sub Height_Write(Value As String)

  If $sHeight = Value Then Return
  $sHeight = Value
  If $sHeight And If IsDigit($sHeight) Then $sHeight &= "em"
  Me._SetProperty("Height", Value)

End

Public Sub Move(X As String, Y As String, Optional Width As String, Height As String)
  
  X_Write(X)
  Y_Write(Y)
  If Not IsMissing(Width) Then Width_Write(Width)
  If Not IsMissing(Height) Then Height_Write(Height)
  
End

Public Sub Resize(Width As String, Height As String)
  
  Width_Write(Width)
  Height_Write(Height)
  
End

Public Sub _UpdateProperty(sProp As String, vValue As Variant)
  
  Dim hChild As WebForm
  
  If sProp = "#geometry" Then 
    
    If Not Me["min-width"] Then
      Me["min-width"] = Left(vValue[2], -2)
      Me["min-height"] = Left(vValue[3], -2)
    Endif
    Inc Me._NoRefresh
    Try Move(vValue[0], vValue[1], vValue[2], vValue[3])
    Dec Me._NoRefresh
  
  Else If sProp = "#close" Then
    
    hChild = Child_Read()
    If hChild Then hChild.Close
    
  Endif
  
End

Private Function Child_Read() As WebForm

  If $iFormId Then Return WebControl.FromId($iFormId)

End

Private Sub Child_Write(Value As WebForm)

  Dim sType As String
  
  $iFormId = Value.Id
  
  sType = Object.Type(Value)
  If Value = Object.Class(Value).Instance Then sType = "!" & sType
  
  Me._SetProperty("#child", [sType, Value.Name])

End


Public Sub _InitSpecialProperty(sProp As String, vVal As Variant)
  
  Dim hChild As WebForm
  Dim aWindow As String[]
  Dim sClass As String
  
  If sProp = "#child" Then
    
    aWindow = vVal
    WebControl._NextName = aWindow[1]
    sClass = aWindow[0]
    If sClass Begins "!" Then
      hChild = Class.Load(Mid$(sClass, 2)).AutoCreate()
    Else
      hChild = Object.New(sClass)
    Endif
    hChild._Window = Me.Id
    $iFormId = hChild.Id
    
  Endif
  
End

Private Function Resizable_Read() As Boolean

  Return $bResizable

End

Private Sub Resizable_Write(Value As Boolean)

  $bResizable = Value
  Me._SetProperty("Resizable", Value)

End

Public Sub Delete()

  Dim hChild As WebForm
  
  hChild = Child_Read()
  If hChild Then hChild.Delete
  Super.Delete()
  
End

Private Function Modal_Read() As Boolean

  Return $bModal

End

Private Sub Modal_Write(Value As Boolean)

  $bModal = Value
  Me._SetProperty("Modal", Value)

End

Public Sub _RefreshReply() As Boolean
  
  If Super._RefreshReply() Then Return
  Child_Read()._RefreshReply()
  
End

Private Function PopupControl_Read() As WebControl

  If $iPopupControlId Then Return WebControl.FromId($iPopupControlId)

End

Private Sub PopupControl_Write(Value As WebControl)

  $iPopupControlId = Value.Id
  If IsPopup() Then
    Me.Class = "gw-popup"
  Else
    Me.Class = ""
  Endif
  Me._SetProperty("PopupControl", Value)

End

Private Function PopupAlignment_Read() As Integer

  Return $iPopupAlignment

End

Private Sub PopupAlignment_Write(Value As Integer)

  $iPopupAlignment = Value
  Me._SetProperty("PopupAlignment", Value)

End

Public Sub Close(Optional vReturnValue As Variant)
  
  If Not Me.Child.Persistent Then
    WebForm._AddReplyBefore("gw.window.close(" & JS(Me.Name) & ")")
  Endif
  WebForm._AddReplyBefore("gw.window.refresh()")
  
  If IsPopup() Then PopupControl_Read().SetFocus
  If $iParentControlId Then Object.Raise(WebControl.FromId($iParentControlId), "Dialog", [Child_Read(), vReturnValue])
  'If $iParentControlId Then WebForm._AddReply("gw.raise(" & JS(WebControl.FromId($iParentControlId).Name) & ",);")
  
End

Private Function ParentControl_Read() As WebControl

  If $iParentControlId Then Return WebControl.FromId($iParentControlId)

End

Private Sub ParentControl_Write(Value As WebControl)

  If Value Then
    $iParentControlId = Value.Id
  Else
    $iParentControlId = 0
  Endif
  Me._SetProperty("ParentControl", Value)

End
