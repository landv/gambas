' Gambas class file

Export

Inherits LogHandler

'' Holds the path of the file
Private $sPath As String

'' Holds a stram to the log file
Private $sLogFile As Stream

Private $bLogRotateEnabled As Boolean = False
Private $lLogRotateSize As Long

Public Sub _new(sPath As String, Optional iMinLevel As Integer = LogLevel.Info)

  $sPath = sPath

  Me.Level = iMinLevel

End

Public Sub Open()

  If Me.Step > 0 Then Error.Raise("Handler already initialized!")

  If IsDir($sPath) Then
    $sPath = $sPath &/ Application.Name & ".log"
  Endif

  If Not Access(File.Dir($sPath), gb.Write) Then Error.Raise("Log file not writable.")

  If Exist($sPath) Then
    $sLogFile = Open $sPath For Write Append
  Else
    $sLogFile = Open $sPath For Write Create
  Endif

  Me.Step = 1

End

Public Sub Write(sMessage As String, Optional iLevel As Integer)

  If Me.Step <> 1 Then Error.Raise("Uninitialized or already closed handler!")

  If Not Me.isEnabledFor(iLevel) Then Return

  Print #$sLogFile, sMessage

  If $bLogRotateEnabled And LogRotator.shouldRotate($sPath, $lLogRotateSize) Then

    Close $sLogFile

    '' Should automatically rename the old files
    LogRotator.Rotate($sPath)

    $sLogFile = Open $sPath For Write Create

  Endif

End

Public Sub Close()

  If Me.Step <> 1 Then Error.Raise("Uninitialized or already closed handler!")

  Inc Me.Step

  Close $sLogFile

End

Public Function GetOutput() As String

  Return $sPath

End

Public Sub RotateAfter(lSize As Long)

  If Me.Step > 0 Then Error.Raise("Handler already initialized!")

  If lSize <= 0 Then Error.Raise("The LogRotate size must be greater than 0")

  $bLogRotateEnabled = True

  $lLogRotateSize = lSize

End
