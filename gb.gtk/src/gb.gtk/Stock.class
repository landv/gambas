' Gambas class file
EXPORT 

STATIC PROPERTY READ List AS String[]

STATIC PRIVATE $bInit AS Boolean
STATIC PRIVATE $aIconPath AS String[]
STATIC PRIVATE $cIconMap AS Collection
STATIC PRIVATE $aList AS String[]
STATIC PRIVATE $aSizeDec AS Integer[] = [192, 128, 96, 72, 64, 48, 36, 32, 24, 22, 20, 16, 12]
STATIC PRIVATE $aSizeInc AS Integer[] = [12, 16, 20, 22, 24, 32, 36, 48, 64, 72, 96, 128, 192]

STATIC PRIVATE SUB SearchDesktop()

  IF Application.Theme THEN RETURN
  
  IF Application.Env["KDE_FULL_SESSION"] THEN 
    Application.Theme = "kde"
  ELSE IF Application.Env["GNOME_DESKTOP_SESSION_ID"] THEN 
    Application.Theme = "gnome"
  ENDIF
  
END


STATIC PRIVATE SUB LoadMap(sPath AS String)
  
  DIM hFile AS File
  DIM sLig AS String
  DIM aMap AS String[]
  DIM cMap AS NEW Collection

  IF $cIconMap.Exist(File.BaseName(sPath)) THEN RETURN

  hFile = OPEN sPath
  WHILE NOT Eof(hFile)
    LINE INPUT #hFile, sLig
    sLig = Trim(sLig)
    IF Left(sLig) = "'" OR Left(sLig) = "#" THEN CONTINUE
    aMap = Scan(sLig, "* *")
    IF aMap.Count >= 2 THEN
      cMap[aMap[0]] = aMap[1]
    ENDIF
  WEND
  CLOSE #hFile
  
  $cIconMap[File.BaseName(sPath)] = cMap
    
END


STATIC PRIVATE SUB AddPath(sMap AS String, sPath AS String)
  
  IF NOT Exist(sPath) THEN RETURN 
  
  IF sMap THEN
    $aIconPath.Add(sMap & ":" & sPath)
    LoadMap("stock/" & sMap & ".map")  
  ELSE 
    $aIconPath.Add(sPath)
  ENDIF
  
END



STATIC PRIVATE SUB InitTheme()
  
  DIM hFile AS File
  DIM sLig AS String
  DIM aMap AS String[]
  DIM sStyle AS String
  DIM sIconPath AS String
  DIM sPath AS String
  DIM cMap AS Collection
  DIM sTheme AS String

  $aIconPath = NEW String[]
  $cIconMap = NEW Collection
  
  SearchDesktop

  IF Application.Theme = "gnome" THEN
    
    TRY EXEC ["gconftool", "-g", "/desktop/gnome/interface/icon_theme"] TO sTheme

    IF sTheme THEN 
      sTheme = Trim(sTheme)
      AddPath("gnome", "/usr/share/icons" &/ sTheme)
      AddPath("gnome", "/usr/X11R6/share/icons" &/ sTheme)
    ENDIF

    AddPath("gnome", "/usr/share/icons/hicolor")
    AddPath("gnome", "/usr/X11R6/share/icons/hicolor")
    AddPath("gnome", "/usr/share/icons/gnome")
    'AddPath("gnome", "/opt/gnome")
    AddPath("gnome", "stock/gtk")
    AddPath("", "stock/qt")     
    
  ELSE IF Application.Theme = "kde" THEN
  
    TRY EXEC ["kde-config", "--path", "icon"] TO sIconPath
    IF sIconPath THEN 
  
      sIconPath = Trim(sIconPath)
  
      sStyle = "kdeclassic"
      hFile = OPEN "~/.kde/share/config/kdeglobals"
      WHILE NOT Eof(hFile)
        LINE INPUT #hFile, sLig
        IF sLig = "[Icons]" THEN 
          WHILE NOT Eof(hFile)
            LINE INPUT #hFile, sLig
            IF Left(sLig) = "[" THEN BREAK
            IF sLig LIKE "Theme=*" THEN 
              sStyle = Mid$(sLig, 7)
              BREAK
            ENDIF 
          WEND
          BREAK
        ENDIF 
      WEND
      CLOSE #hFile
      
      FOR EACH sPath IN Split(sIconPath, ":")
        AddPath("kde", sPath &/ sStyle)
      NEXT
      FOR EACH sPath IN Split(sIconPath, ":")
        AddPath("kde", sPath &/ "crystalsvg") ' default theme hardcoded in KDE sources
      NEXT
      
      AddPath("", "stock/qt")
     
    ENDIF
    
  ENDIF
  
  IF $aIconPath.Count = 0 THEN 
    AddPath("gnome", "/usr/share/icons/gnome")
    AddPath("gnome", "stock/gtk")
  ENDIF
  
  'DEBUG "Stock path:";; $aIconPath.Join(" ")
   
  $bInit = TRUE
   
END

STATIC PUBLIC FUNCTION _get(Key AS String) AS Picture

  DIM sPrefix AS String
  DIM sPath AS String
  DIM hPict AS Picture
  DIM iPos AS Integer
  DIM iSize AS Integer
  DIM iTry AS Integer
  DIM hImage AS Image
  DIM sTemplate AS String
  DIM sFile AS String

  'IF Right(Key, 4) <> ".png" THEN Key &= ".png"

  IF NOT $bInit THEN InitTheme

  iPos = InStr(Key, "/")
  IF iPos THEN 
    iSize = Val(Left$(Key, iPos - 1))
    Key = Mid$(Key, iPos + 1)
  ELSE 
    iSize = 16
  ENDIF

  FOR EACH sPath IN $aIconPath
  
    iPos = InStr(sPath, ":")
    IF iPos THEN 
      sFile = $cIconMap[Left$(sPath, iPos - 1)][Key]
      IF NOT sFile THEN sFile = Key & ".png"
      sPath = Mid$(sPath, iPos + 1)
    ELSE 
      sFile = Key & ".png"
    ENDIF
  
    IF Left(sPath) = "/" THEN   
      sTemplate = sPath &/ "&1x&1" &/ sFile
    ELSE 
      sTemplate = sPath &/ "&1" &/ sFile
    ENDIF 
    
    TRY hPict = Picture[Subst(sTemplate, iSize)]
    IF hPict THEN RETURN hPict
    
    hImage = NULL
    
    FOR EACH iTry IN $aSizeInc
      IF iTry <= iSize THEN CONTINUE
      TRY hImage = Image.Load(Subst(sTemplate, iTry))
      IF NOT ERROR THEN BREAK
    NEXT
    
    IF NOT hImage THEN 
    
      FOR EACH iTry IN $aSizeDec
        IF iTry >= iSize THEN CONTINUE
        TRY hImage = Image.Load(Subst(sTemplate, iTry))
        IF NOT ERROR THEN BREAK
      NEXT
    
    ENDIF
    
    IF hImage THEN  
      hPict = hImage.Stretch(iSize, iSize, TRUE).Picture
      Picture[Subst(sTemplate, iSize)] = hPict
      RETURN hPict
    ENDIF

  NEXT
  
  DEBUG "Cannot find: "; Key

END


STATIC PRIVATE FUNCTION List_Read() AS String[]

  IF NOT $aList THEN 
    $aList = Split(File.Load("stock/map"), "\n", "", TRUE)
  ENDIF 
  
  RETURN $aList  

END
