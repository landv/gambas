#RpcStruct

C
Count
r
i

_New
m


Add
m

(Name)s(Value)v(dataType)i
Value
m
v
(Index)i
dataType
m
i
(Index)i
Clear
m


Copy
m
RpcStruct

Key
m
s
(Index)i
Reverse
m


Remove
m

(Index)s
#RpcClient

C
offLine
C
i
0
httpSync
C
i
1
httpAsync
C
i
2
Mode
p
i

URL
p
s

RpcMethod
r
RpcFunction

:Reply
:

(Data)v
:BadReply
:

(Code)s
_New
m

(remoteFunction)RpcFunction;
EvalReply
m
v
(sCad)s
hHttp_GotData
m

(Data)s
hHttp_GotError
m


Call
m
v
(Data)Variant[];
#RpcArray

C
Count
r
i

Length
r
i

Add
m

(Value)v(dataType)i
dataType
m
i
(Index)i
Pop
m
v

Push
m

(Value)v(dataType)i
Clear
m


Copy
m
RpcStruct

Reverse
m


Remove
m

(Index)i
_New
m


_Get
m
v
(Index)i
_Put
m

(Data)v(Index)i
#RpcType

C
xInteger
C
i
0
xBoolean
C
i
1
xDouble
C
i
2
xString
C
i
3
xBase64
C
i
4
xDate
C
i
5
xStruct
C
i
6
xArray
C
i
7
xVoid
C
i
8
ToType
M
i
(type)s
ToString
M
s
(type)i
#RpcServer

C
Count
r
i

Listening
r
b

:RemoteCall
:

(Method)s(Params)Variant[];
Unregister
m

(methodName)s
Register
m

(remoteFunction)RpcFunction;
Listen
m

(Port)i(MaxConn)i
Stop
m


SetReply
m

(Data)v
miniSrv_ProcessData
m

(Data)s
miniSrv_GotData
m
b
(Data)s
_New
m


#RpcFunction

C
MethodName
r
s

Count
r
i

ReturnType
r
i

Help
p
s

_get
m
i
(Index)i
_New
m

(Name)s(DataTypes)Integer[];(Ret)i
#XmlRpc

C
xInteger
C
i
0
xBoolean
C
i
1
xDouble
C
i
2
xString
C
i
3
xBase64
C
i
4
xDate
C
i
5
xStruct
C
i
6
xArray
C
i
7
xVoid
C
i
8
ToType
M
i
(type)s
ToString
M
s
(type)i
