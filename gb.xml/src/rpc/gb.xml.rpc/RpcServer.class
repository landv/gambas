'***************************************************************************
' 
' RpcServer.class
' 
' (c)2005 - Daniel Campos Fernández
' 
' XML-RPC Component
' 
' Realizado para la Junta de Extremadura.
' Consejería de Educación Ciencia y Tecnología.
' Proyecto gnuLinEx
'
' This program Is free software; you can redistribute it And / Or modify
' it under the terms OF the GNU General PUBLIC License AS published by
' the Free Software Foundation; either version 1, Or (at your option)
' any later version.
' 
' This program Is distributed IN the hope that it will be useful,
' but WITHOUT ANY WARRANTY; WITHOUT even the implied WARRANTY OF
' MERCHANTABILITY Or FITNESS FOR A PARTICULAR PURPOSE.See the
' GNU General PUBLIC License FOR more details.
' 
' You should have received a COPY OF the GNU General PUBLIC License
' along WITH this program; IF Not, WRITE TO the Free Software
' Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
' 
'***************************************************************************
EXPORT

PRIVATE Methods AS Object[]
PRIVATE miniSrv AS miniServer
PRIVATE CurrIndex AS Integer

PROPERTY READ Count AS Integer
PROPERTY READ Listening AS Boolean

EVENT RemoteCall(Method AS String, Params AS Variant[])

FUNCTION Count_Read() AS Integer

  RETURN Methods.Count()

END

FUNCTION Listening_Read() AS Boolean

  IF miniSrv THEN RETURN TRUE
  RETURN FALSE

END


PUBLIC SUB Unregister(methodName AS String)

  DIM Bucle AS Integer

  IF CurrIndex <> - 1 THEN
    Error.Raise("Unable to Unregister a function in a RemoteCall event")
    RETURN
  END IF

  FOR Bucle = 0 TO Methods.Count - 1

    IF Methods[Bucle].MethodName = MethodName THEN

      Methods[Bucle] = NULL
      Methods.Remove(Bucle)
      RETURN

    END IF

  NEXT

END


PUBLIC SUB Register(remoteFunction AS RpcFunction)

  DIM Bucle AS Integer

  IF remoteFunction.MethodName = "system.listMethods" THEN
    Error.Raise("system.listMethods is a reserved keyword")
    RETURN
  END IF

  IF remoteFunction.MethodName = "system.methodSignature" THEN
    Error.Raise("system.methodSignature is a reserved keyword")
    RETURN
  END IF

  IF remoteFunction.MethodName = "system.methodHelp" THEN
    Error.Raise("system.methodHelp is a reserved keyword")
    RETURN
  END IF

  IF remoteFunction = NULL THEN
    Error.Raise("Null function")
    RETURN
  END IF

  FOR Bucle = 0 TO Methods.Count - 1

    IF Methods[Bucle] = remoteFunction THEN
      Error.Raise("Function already registered")
      RETURN
    END IF

    IF Methods[Bucle].methodName = remoteFunction.methodName THEN
      Error.Raise("Function already registered")
      RETURN
    END IF

  NEXT

  Methods.Add(remoteFunction)



END

PUBLIC SUB Listen(Port AS Integer, MaxConn AS Integer)

  IF Port < 1 Or Port > 65535 THEN
    Error.Raise("Invalid port number")
    RETURN
  END IF

  IF MaxConn < 0 THEN
    Error.Raise("Invalid maximum connections number")
    RETURN
  END IF

  IF miniSrv THEN miniSrv = NULL
  miniSrv = NEW miniServer AS "miniSrv"
  TRY miniSrv.Listen(Port, MaxConn)
  IF ERROR THEN
    miniSrv = NULL
    Error.Raise("Unable to listen at port " & Port)
  END IF

END

PUBLIC SUB Stop()

  IF miniSrv THEN
    miniSrv.Close()
    miniSrv = NULL
  END IF

END


PUBLIC SUB SetReply(Data AS Variant)

  DIM Xml AS NEW XmlWriter

  IF CurrIndex = - 1 THEN
    Error.Raise("No remote function available")
    RETURN
  END IF

  Xml.Open("", TRUE)
  Xml.StartElement("methodResponse")
  Xml.StartElement("params")
  Xml.StartElement("param")
  IF Not Tools.AddValue(Xml, Data, Methods[CurrIndex].ReturnType) THEN
    miniSrv.SetReply(tools.FaultReply(8, "internal server error"))
    Error.Raise("Invalid type conversion")
    RETURN
  END IF

  miniSrv.SetReply(Xml.EndDocument())




END


PUBLIC SUB miniSrv_ProcessData(Data AS String)

  DIM Xml AS NEW XmlReader
  DIM Bucle AS Integer
  DIM hPar AS NEW Variant[]
  DIM hP AS RpcAtom
  DIM Counter AS Integer

  Xml = NEW XmlReader
  Xml.FromString(Data)

  tools.Find(Xml, "methodCall")
  TRY Xml.Read()
  IF Not tools.Find(Xml, "params") THEN
    miniSrv.SetReply(tools.FaultReply(4, "params field not found"))
    CurrIndex = - 1
    RETURN
  END IF

  TRY Xml.Read()

  DO WHILE TRUE

    IF Xml.Node.Type = XmlReaderNodeType.EndElement THEN BREAK
    IF Not Tools.Find(Xml, "param") THEN BREAK
    hP = Tools.GetParam(Xml)
    IF hP = NULL THEN
      miniSrv.SetReply(tools.FaultReply(5, "malformed parameters"))
      CurrIndex = - 1
      RETURN
    END IF

    hPar.Add(hP.Data)
    IF Methods[CurrIndex].Count < hPar.Count THEN
      miniSrv.SetReply(tools.FaultReply(6, "too many parameters"))
      CurrIndex = - 1
      RETURN
    END IF
    IF hP.Type <> Methods[CurrIndex][Counter] THEN
      miniSrv.SetReply(tools.FaultReply(7, "wrong parameter type"))
      CurrIndex = - 1
      RETURN
    END IF

    Counter = Counter + 1

  LOOP

  miniSrv.SetReply(tools.FaultReply(9, "Unknown error"))

  IF methods[CurrIndex].MethodName = "system.listMethods" THEN
    System_ListMethods()
  ELSE IF methods[CurrIndex].MethodName = "system.methodHelp" THEN
    System_methodHelp(hPar[0])
  ELSE IF methods[CurrIndex].MethodName = "system.methodSignature" THEN
    System_methodSignature(hPar[0])
  ELSE
    RAISE RemoteCall(Methods[CurrIndex].MethodName, hPar)
  END IF

  CurrIndex = - 1
END


PUBLIC FUNCTION miniSrv_GotData(Data AS String) AS Boolean

  DIM Xml AS NEW XmlReader
  DIM Bucle AS Integer

  Xml = NEW XmlReader
  Xml.FromString(Data)

  IF Not tools.Find(Xml, "methodCall") THEN RETURN TRUE
  TRY Xml.Read()
  IF Not tools.Find(Xml, "methodName") THEN RETURN TRUE
  DO WHILE TRUE
    TRY Xml.Read()
    IF Xml.Node.Type = XmlReaderNodetype.Element THEN RETURN TRUE
    IF Xml.Node.Type = XmlReaderNodeType.EndElement THEN RETURN TRUE
    IF Xml.Node.Type = XmlReaderNodeType.Text THEN

      FOR Bucle = 0 TO Methods.Count - 1
        IF Methods[Bucle].methodName = Xml.Node.Value THEN
          CurrIndex = bucle
          RETURN FALSE
        END IF
      NEXT

      RETURN TRUE

    END IF
  LOOP

END

PUBLIC SUB _New()

  DIM Rpc AS RpcFunction

  CurrIndex = - 1
  Methods = NEW Object[]

  Rpc = NEW RpcFunction("system.listMethods", NULL, XmlRpc.xArray)
  Methods.Add(Rpc)
  Rpc = NEW RpcFunction("system.methodHelp", [XmlRpc.xString], XmlRpc.xString)
  Methods.Add(Rpc)
  Rpc = NEW RpcFunction("system.methodSignature", [XmlRpc.xString], XmlRpc.xArray)
  Methods.Add(Rpc)


END

PRIVATE SUB System_ListMethods()

  DIM Arr AS NEW RpcArray
  DIM Bucle AS Integer

  FOR Bucle = 0 TO Methods.Count - 1
    Arr.Add(Methods[Bucle].MethodName, XmlRpc.xString)
  NEXT

  SetReply(Arr)

END

PRIVATE SUB System_methodHelp(Data AS String)

    DIM Bucle AS Integer

    Data = Trim(Data)

    FOR Bucle = 0 TO Methods.Count - 1
      IF Methods[Bucle].MethodName = Data THEN
        SetReply(Methods[Bucle].Help)
        RETURN
      END IF
    NEXT

    miniSrv.SetReply(tools.FaultReply("2", "Unknown method"))

END

PRIVATE SUB System_methodSignature(Data AS String)

    DIM Bucle AS Integer
    DIM B2 AS Integer
    DIM xArr AS NEW RpcArray

    Data = Trim(Data)

    FOR Bucle = 0 TO Methods.Count - 1
      IF Methods[Bucle].MethodName = Data THEN
        xArr.Add(XmlRpc.ToString(Methods[Bucle].ReturnType), XmlRpc.xString)
        FOR B2 = 0 TO Methods[Bucle].Count - 1
          xArr.Add(XmlRpc.ToString(Methods[Bucle][B2]), XmlRpc.xString)
        NEXT
        SetReply(xArr)
        RETURN
      END IF
    NEXT

    miniSrv.SetReply(tools.FaultReply("2", "Unknown method"))

END


