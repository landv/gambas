' Gambas class file

Export

Private $hConn As DBusConnection
Private $sName As String
Private $cCache As New Collection
Private $sKey As String
Private $iIndex As Integer
Private $iRequest As Integer
'Private $hObject As DBusProxy

Property Read Connection As DBusConnection
Property Read Name As String
Property Read Index As Integer

Public Sub _new(Connection As DBusConnection, ApplicationName As String)
  
  $hConn = Connection
  $sName = ApplicationName
  If $hConn = _DBus.System Then
    $sKey = "system://" & $sName
  Else
    $sKey = "session://" & $sName
  Endif
  
  DBus._ApplicationCache[$sKey] = Me
  $iIndex = DBus._ApplicationCache.Count
  DBus._ApplicationCache[$iIndex] = Me
  
End

Public Sub _get(ObjectPath As String, Optional Interface As String) As DBusProxy

  Dim hObject As DBusProxy
  Dim sKey As String
  
  sKey = ObjectPath
  If Interface Then sKey &= "#" & Interface
  
  hObject = $cCache[sKey]
  If Not hObject Then
    hObject = New DBusProxy(Me, ObjectPath, Interface)
    $cCache[sKey] = hObject
  Endif
  Return hObject
  
End

Private Function Connection_Read() As DBusConnection

  Return $hConn

End

Public Sub _Introspect(sObjectPath As String) As String
  
  Try Return $hConn._Introspect($sName, sObjectPath)
  
End

Private Function Name_Read() As String

  Return $sName

End

Private Function Index_Read() As Integer

  Return $iIndex

End

' Public Sub _unknown(...) As Variant
'   
'   Dim aArg As Variant[]
'   'Dim iInd As Integer
'   Dim hObject As DBusProxy = $hObject
'   
'   If Param.Count Then
'     ' aArg = New Variant[Param.Count]
'     ' For iInd = 0 To Param.Max
'     '   aArg[iInd] = Param[iInd]
'     ' Next
'     aArg = Param.All
'   Endif
'   
'   $hObject = Null
'   Return hObject._Invoke(Param.Name, aArg)
'   
' End
' 
' Public Sub _property() As Boolean
'   
'   $hObject = _get(Replace($sName, "/", "."))
'   Return $hObject._property()
'   
' End


Private Sub Request()
  
  Inc $iRequest
  If $iRequest = 1 Then DBus.Session._RequestName($sName, True)
  
End

Private Sub Release()
  
  Dec $iRequest
  If $iRequest > 0 Then Return
  DBus.Session._ReleaseName($sName)
  
End

Public Sub Register((Object) As DBusObject, Path As String, Optional Interfaces As String[])
  
  Request()
  Object._Register($hConn, $sName &/ Path, Interfaces)
  
End

Public Sub Unregister((Object) As DBusObject)
  
  Object._Unregister($hConn)
  Release()
  
End

Public Sub Raise((Object) As DBusObject, Signal As String, Optional Arguments As Variant[])
  
  ' Apparently you can't define the sender of the signal!
  Object._Raise($hConn, Signal, Arguments)
  
End
