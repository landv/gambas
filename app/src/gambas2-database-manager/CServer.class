' Gambas class file

STATIC PUBLIC All AS NEW Collection
STATIC PRIVATE $iKey AS Integer

PUBLIC Name AS String
PUBLIC Key AS String
PUBLIC Handle AS Connection
PUBLIC WasOpened AS Boolean
PUBLIC Single AS Boolean

PUBLIC Databases AS String[]
PUBLIC Users AS String[]

PRIVATE $cAdmin AS Collection

PUBLIC SUB _new(sType AS String, OPTIONAL sHost AS String, OPTIONAL sUser AS String, OPTIONAL sPassword AS String, OPTIONAL sDatabase AS String)

  Handle = NEW Connection

  WITH Handle
    .Host = sHost
    .Type = sType
    .Login = sUser
    .Password = sPassword
    .Name = sDatabase
  END WITH

  IF sHost THEN
    Name = sHost
  ELSE
    Name = "localhost"
  ENDIF

  IF sUser THEN
    Name = sUser & "@" & Name
  ENDIF
  
  IF sDatabase THEN 
    Name &= ":" & sDatabase
    Single = TRUE
  ENDIF

  Name &= " (" & sType & ")" 

  'INC $iKey
  Key = Replace(Name, "/", Chr$(9)) 'CStr($iKey)

  IF NOT All.Exist(Key) THEN All[Key] = ME

END


STATIC PUBLIC SUB Remove(hServer AS CServer)

  hServer.Close

  All.Remove(hServer.Key)

END

STATIC PUBLIC SUB RemoveAll()

  DIM hServer AS CServer

  FOR EACH hServer IN All
    Remove(hServer)
  NEXT

END


PUBLIC FUNCTION Close() AS Boolean

  RETURN CConnection.RemoveAll(ME)

END



PRIVATE SUB RefreshDatabase()

  DIM hDatabase AS Database

  Databases = NEW String[]

  IF Single THEN 
    Databases.Add(Handle.Name)
  ELSE
    FOR EACH hDatabase IN Handle.Databases
      Databases.Add(hDatabase.Name)
    NEXT
    Databases.Sort
  ENDIF

END


PRIVATE SUB RefreshUser()

  DIM hUser AS DatabaseUser
  DIM bAdmin AS Boolean

  Users = NEW String[]
  $cAdmin = NEW Collection

  IF Single THEN
  
    Users.Add(Handle.User)
    'TRY bAdmin = Handle.Users[Handle.User].Administrator
    $cAdmin[Handle.User] = FALSE
  
  ELSE

    FOR EACH hUser IN Handle.Users
      Users.Add(hUser.Name)
      IF hUser.Administrator THEN
        $cAdmin[hUser.Name] = TRUE
      ENDIF
    NEXT
  
    Users.Sort
    
  ENDIF
  
END



PUBLIC FUNCTION Exec() AS String

  IF NOT Single THEN Handle.Open

  RefreshDatabase
  RefreshUser

  IF NOT Single THEN Handle.Close

  WasOpened = TRUE

CATCH

  Handle.Close
  RETURN Conv$(Error.Text, System.Charset, Desktop.Charset)

END


PUBLIC FUNCTION CreateUser(sUser AS String, bAdmin AS Boolean, sPassword AS String) AS Boolean

  IF Single THEN RETURN

  Handle.Open
  Handle.Users.Add(sUser, sPassword, bAdmin)
  RefreshUser

FINALLY

  Handle.Close

CATCH

  Message.Error(("Cannot create user.") & "\n\n" & Error.Text)
  RETURN TRUE

END


PUBLIC FUNCTION DeleteUser(sUser AS String) AS Boolean

  IF Single THEN RETURN

  Handle.Open
  Handle.Users.Remove(sUser)
  RefreshUser

FINALLY

  Handle.Close

CATCH

  Message.Error(("Cannot delete user.") & "\n\n" & Error.Text)
  RETURN TRUE

END


PUBLIC FUNCTION IsAdmin(sUser AS String) AS Boolean

  RETURN $cAdmin.Exist(sUser)

END


PUBLIC FUNCTION EditUser(sUser AS String, sNewPassword AS String) AS Boolean

  IF Single THEN RETURN

  Handle.Open
  Handle.Users[sUser].Password = sNewPassword

FINALLY

  Handle.Close

  IF Handle.Login = sUser OR ((NOT Handle.Login) AND sUser = User.Name) THEN
    Handle.Password = sNewPassword
  ENDIF

CATCH

  Message.Error(("Cannot edit user.") & "\n\n" & Error.Text)
  RETURN TRUE

END


PUBLIC FUNCTION CreateDatabase(sName AS String) AS String

  Handle.Open
  Handle.Databases.Add(sName)
  RefreshDatabase

FINALLY

  Handle.Close

CATCH

  Message.Error(("Cannot create database.") & "\n\n" & Error.Text)
  RETURN TRUE

END


PUBLIC FUNCTION DeleteDatabase(sName AS String) AS Boolean

  CConnection.Remove(CConnection.All[Key &/ sName])

  Handle.Open
  Handle.Databases.Remove(sName)
  RefreshDatabase

FINALLY

  Handle.Close

CATCH

  Message.Error(("Cannot delete database.") & "\n\n" & Error.Text)
  RETURN TRUE

END
