' Gambas class file

Static Private $cTypeName As New Collection

Public Name As String
Public Type As String
Public Kind As String
Public Signature As String
Public Value As String
Public (Class) As String
Public (Component) As String
Public NotPublic As Boolean
Public LineNumber As Integer
Public Help As String

Static Public Sub _init()

  $cTypeName["b"] = "Boolean"
  $cTypeName["c"] = "Byte"
  $cTypeName["h"] = "Short"
  $cTypeName["i"] = "Integer"
  $cTypeName["l"] = "Long"
  $cTypeName["d"] = "Date"
  $cTypeName["g"] = "Single"
  $cTypeName["f"] = "Float"
  $cTypeName["v"] = "Variant"
  $cTypeName["s"] = "String"
  $cTypeName["o"] = "Object"
  $cTypeName["p"] = "Pointer"

End

Static Public Function GetNativeType(sType As String) As String

  Return $cTypeName[sType]

End



Public Function IsHidden() As Boolean

  If Left(Name) = "_" Then Return True
  Return InStr(Name, "_") > 0 And Kind <> "C"

End


Public Function IsStatic() As Boolean

  Return UCase(Kind) = Kind And Kind <> ":"

End


Public Function GetIcon() As String

  Dim bStatic As Boolean
  Dim sIcon As String

  bStatic = UCase(Kind) = Kind

  Select Case LCase(Kind)

    Case "r"
      sIcon = "img/16" &/ If(bStatic, "s-property-ro.png", "property-ro.png")
    Case "p"
      sIcon = "img/16" &/ If(bStatic, "s-property.png", "property.png")
    Case "v"
      sIcon = "img/16" &/ If(bStatic, "s-variable.png", "variable.png")
    Case "c"
      sIcon = "img/16/constant.png"
    Case ":"
      sIcon = "img/16/event.png"
    Case "t"
      sIcon = "img/16/control.png"
    Case "m"
      sIcon = "img/16" &/ If(bStatic, "s-method.png", "method.png")

  End Select

  Return sIcon

End


Private Function GetType(sType As String, bBalise As Boolean) As String

  If Len(sType) = 1 Then
    sType = $cTypeName[sType]
  Else If Left$(sType) = "." Then
    sType = "Object"
  Endif

  If bBalise Then
    Return "<B>" & sType & "</B>"
  Else
    Return sType
  Endif

End

Public Function GetSignature(Optional bBalise As Boolean) As String

  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String
  Dim iPos As Integer
  Dim bName As Boolean
  Dim bFirst As Boolean
  Dim sSign As String

  Dim sBold As String
  Dim sNoBold As String
  Dim sName As String

  sSign = Signature
  If Left$(sSign) = "#" Then
    Return Mid$(sSign, 2)
  Endif

  If bBalise Then
    sBold = "<B>"
    sNoBold = "</B>"
  Endif

  bFirst = True

  Do

    iInd = iInd + 1

    If iInd > Len(sSign) Then Break

    sCar = Mid$(sSign, iInd, 1)

    If sCar = "'" Or sCar = "(" Then

      If sCar = "'" Then
        iPos = InStr(sSign, "'", iInd + 1)
      Else
        iPos = InStr(sSign, ")", iInd + 1)
      Endif

      If iPos = 0 Then Break

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & sBold & "," & sNoBold & " "
      Endif

      sName = Mid$(sSign, iInd + 1, iPos - iInd - 1)
      If sName Begins "&" Then
        sRes &= "BYREF " & Mid$(sName, 2)
      Else
        sRes &= sName
      Endif

      sRes &= " " & sBold & "AS" & sNoBold & " "

      iInd = iPos
      bName = True

      Continue

    Endif

    If sCar = "<" Then

      iPos = InStr(sSign, ">", iInd + 1)
      If iPos = 0 Then Break
      iInd = iPos
      Continue

    Endif

    If sCar = "[" Then

      sRes = sRes & " " & sBold & "[" & sNoBold
      Continue

    Endif

    If sCar = "]" Then

      sRes = sRes & " " & sBold & "] " & sNoBold
      Continue

    Endif

    If Not bName Then

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & sBold & "," & sNoBold & " "
      Endif

      sRes = sRes & sBold & "? AS " & sNoBold
      bName = False

    Endif
    If iInd = Len(sSign) Then
      If sCar = "." Then
        sRes = sRes & ", ..."
        Continue
      Endif
    Endif

    If (sCar >= "A" And sCar <= "Z") Or sCar = "." Then

      iPos = InStr(sSign, ";", iInd)
      If iPos = 0 Then iPos = Len(sSign) + 1

      sRes = sRes & Mid$(sSign, iInd, iPos - iInd)

      iInd = iPos
      Continue

    Endif

    sRes = sRes & GetType(sCar, bBalise)

  Loop

  If Name = "_get" Or Name = "_put" Then
    sRes = "[ " & sRes & " ]"
  Else
    sRes = "( " & sRes & " )"
  Endif
  If Type Then sRes = sRes & " AS " & GetType(Type, bBalise)

  Return sRes

End

Private Sub GetVirtualClass(sClass As String) As String
  
  Dim iPos As Integer
  Dim sVirtual As String
  
  If InStr("._", Left(sClass)) > 0 Then
    sClass = Mid$(sClass, 2)
    iPos = RInStr(Replace(sClass, "_", "."), ".")
    If iPos Then
      sVirtual = Left(sClass, iPos - 1)
    Endif
  Endif
  
  Return sVirtual
  
End

Private Function GetClassVariableName(sClass As String) As String

  Dim sRes As String

  If Len(sClass) = 1 Then
    sClass = CSymbolInfo.GetNativeType(sClass)
    If InStr("aeiou", LCase(Left$(sClass))) Then
      sRes = "an" & sClass
    Else
      sRes = "a" & sClass
    Endif
  Else
    sClass = Replace(sClass, "[]", "Array")
    If Left$(sClass) = "." Then 
      sClass = Mid$(sClass, 2)
    Else If Left(sClass) = "_" Then
      sClass = Replace(Mid$(sClass, 2), "_", ".")
    Endif
    sRes = "h" & sClass
  Endif

  Return sRes

End

Private Function Keyword(sWord As String, Optional iColor As Integer) As String

  If iColor Then
    Return "<font color=\"#" & Hex$(iColor, 6) & "\">" & sWord & "</font>"
  Else
    Return "<font color=\"blue\">" & sWord & "</font>"
  Endif

End

Private Function GetSymbolName(sName As String) As String

  'sName = Replace(sName, "_", "")
  sName = Replace(sName, ":", "")
  'sName = Replace(sName, "$", "")
  Return sName

End

Private Function GetSyntaxType(sType As String) As String

  If Len(sType) = 1 Then
    sType = CSymbolInfo.GetNativeType(sType)
  Else
    If Right$(sType) = ";" Then sType = Left$(sType, -1)
    sType = Main.GetClassLinkFromName(sType)
    'sType = "<a href=\"" & Application.Root &/ "comp" & "\">" & sType & "</a>"
  Endif

  Return Keyword(sType, &H0080FF&)

End

Private Function GetSyntaxSignature() As String

  Dim sSign As String = Signature
  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String
  Dim iPos As Integer
  Dim bName As Boolean
  Dim bFirst As Boolean
  Dim iLen As Integer
  Dim hClass As CClassInfo
  Dim hSym As CSymbolInfo
  Dim sName As String

  If Name = "_new" Then
    hClass = CComponent.Get(Component)[Class]
    Do
      If Not hClass.Parent Then Break
      hClass = CComponent.Get(hClass.ParentComponent)[hClass.Parent]
      hSym = hClass.Symbols["_new"]
      If hSym Then 
        'sRes &= "<tt>MergeSignature: \"" & sSign & "\" \"" & hClass.Symbols["_new"].Signature & "\"</tt><br>"
        sSign = MergeSignature(sSign, hClass.Symbols["_new"].Signature)
      Endif
    Loop
    
    'sRes &= "<tt>\"" & sSign & "\"</tt><br>"
    
  Endif
  
  bFirst = True

  Do

    iInd = iInd + 1

    If iInd > Len(sSign) Then Break

    sCar = Mid$(sSign, iInd, 1)

    If sCar = "'" Or sCar = "(" Then

      If sCar = "'" Then
        iPos = InStr(sSign, "'", iInd + 1)
      Else
        iPos = InStr(sSign, ")", iInd + 1)
      Endif

      If iPos = 0 Then Break

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & Keyword(",") & " "
      Endif

      sName = Mid$(sSign, iInd + 1, iPos - iInd - 1)
      If sName Begins "&" Then
        sRes &= Keyword("ByRef") & " "
        sName = Mid$(sName, 2)
      Endif
      sRes = sRes & "<u>" & sName & "</u> " & Keyword("As") & " "

      iInd = iPos
      bName = True

      Continue

    Endif

    If sCar = "<" Then

      iPos = InStr(sSign, ">", iInd + 1)
      If iPos = 0 Then Break
      iInd = iPos
      Continue

    Endif

    If sCar = "[" Then

      sRes = RTrim(sRes) & " <b>\\[</b> "
      Continue

    Endif

    If sCar = "]" Then

      sRes = RTrim(sRes) & " <b>]</b>"
      Continue

    Endif

    If Not bName Then

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & ", "
      Endif

      sRes = sRes & "? " & Keyword("As") & " "
      bName = False

    Endif

    If sCar = "." Then
      sRes = sRes & ", ..."
      Continue
    Endif

    If sCar >= "A" And sCar <= "Z" Then

      iPos = InStr(sSign, ";", iInd)
      If iPos = 0 Then iPos = Len(sSign) + 1

      sRes = sRes & GetSyntaxType(Mid$(sSign, iInd, iPos - iInd))

      iInd = iPos
      Continue

    Endif

    sRes = sRes & GetSyntaxType(sCar)

  Loop

  'sRes = "( " & sRes & " )"

  sRes = " " & sRes & " "

  Do
    iLen = Len(sRes)
    sRes = Replace(sRes, "  ", " ")
    If Len(sRes) = iLen Then Break
  Loop

  Return sRes

End


Public Sub GetSyntax() As String[]

  Dim sSyntax As String
  Dim sName As String
  Dim sVar As String
  Dim sVirtual As String
  Dim sValue As String
  Dim iPos As Integer
  Dim sSign As String
  Dim sType As String
  Dim aResult As String[]
  Dim iValue As Integer
  Dim sKeyword As String

  sName = Class
  sVirtual = GetVirtualClass(sName)

  Select Case LCase(Name)

    Case "_get"

      If IsStatic() Then
        sName = Class
        If sVirtual Then sName = Mid$(sName, 2)
      Else
        sName = GetClassVariableName(Class)
        If sVirtual Then
          sVar = GetClassVariableName(sVirtual)
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetSyntaxType(sVirtual) & "\n"
        Else
          sVar = sName
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetSyntaxType(Class) & "\n"
        Endif
      Endif

      sValue = Replace(GetClassVariableName(Type), ".", "")
      If sValue = sVar Then sValue &= "2"

      sSyntax &= Keyword("Dim") & " " & sValue & " " & Keyword("As") & " " & GetSyntaxType(Type) & "\n"
      sSyntax &= sValue & " " & Keyword("=") & " "
      sSyntax &= sName & " " & Keyword("\\[") & GetSyntaxSignature() & Keyword("]")

    Case "_put"

      sType = CComponent.All[Component][Class].Symbols["_get"].Type

      If IsStatic() Then
        sName = Class
        If sVirtual Then sName = Mid$(sName, 2)
      Else
        sName = GetClassVariableName(Class)
        If sVirtual Then
          sVar = GetClassVariableName(sVirtual)
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetSyntaxType(sVirtual) & "\n"
        Else
          sVar = sName
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetSyntaxType(Class) & "\n"
        Endif
      Endif

      sValue = Replace(GetClassVariableName(sType), ".", "")
      If sValue = sVar Then sValue &= "2"

      sSyntax = sSyntax & Keyword("Dim") & " " & sValue & " " & Keyword("As") & " " & GetSyntaxType(sType) & "\n"
      sSign = GetSyntaxSignature()
      sKeyword = Keyword(",")
      iPos = InStr(sSign, sKeyword)
      If iPos Then sSign = Mid$(sSign, iPos + Len(sKeyword))
      sSyntax = sSyntax & sName & " " & Keyword("\\[") & sSign & Keyword("]")
      sSyntax = sSyntax & " " & Keyword("=") & " " & sValue

    Case "_next"

      If IsStatic() Then
        sName = Class
        If sVirtual Then sName = Mid$(sName, 2)
      Else
        sName = GetClassVariableName(Class)
        If sVirtual Then
          sVar = GetClassVariableName(sVirtual)
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetSyntaxType(sVirtual) & "\n"
        Else
          sVar = sName
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetSyntaxType(Class) & "\n"
        Endif
      Endif

      If Type Then
        sValue = Replace(GetClassVariableName(Type), ".", "")
        If sValue = sVar Then sValue &= "2"
        sSyntax = sSyntax & Keyword("Dim") & " " & sValue & " " & Keyword("As") & " " & GetSyntaxType(Type) & "\n"
        sSyntax = sSyntax & Keyword("For Each") & " " & sValue & " " & Keyword("In") & " " & sName
      Else
        sSyntax = sSyntax & Keyword("For Each") & " " & sName
      Endif

      sSyntax &= "<br />&nbsp;&nbsp;...<br/>" & Keyword("Next")

    Case "_new"

      sName = GetClassVariableName(Class)

      sSyntax &= Keyword("Dim") & " " & sName & " " & Keyword("As") & " " & GetSyntaxType(Class) & "\n"
      sSyntax &= sName & " " & Keyword("=") & " " & Keyword("New") & " " & GetSyntaxType(Class)
      sSyntax &= " " & Keyword("(") & GetSyntaxSignature() & Keyword(")")
      If CComponent.Get(Component)[Class].HasEvents() Then
        sSyntax &= " <b>[</b> " & Keyword("As") & " \"<i>event name</i>\" <b>]</b>"
      Endif

    Case Else

      If IsStatic() And Kind <> "C" Then
        sSyntax = Keyword("Static") & " "
      Endif

      Select Case LCase(Kind)

        Case "p", "v"
          sSyntax = sSyntax & Keyword("Property") & " "
        Case "r"
          sSyntax = sSyntax & Keyword("Property Read") & " "
        Case "c"
          sSyntax = sSyntax & Keyword("Const") & " "
        Case ":"
          sSyntax = sSyntax & Keyword("Event") & " "
        Case "m"
          If Type Then
            sSyntax = sSyntax & Keyword("Function") & " "
          Else
            sSyntax = sSyntax & Keyword("Sub") & " "
          Endif

      End Select

      If Name = "_call" Then
        If sVirtual Then
          sSyntax &= "<b>" & Replace(Mid$(Class, 2), "_", ".") & "</b>"
        Else
          sSyntax &= "<b>" & GetSymbolName(Class) & "</b>"
        Endif
      Else
        sSyntax &= "<b>" & GetSymbolName(Name) & "</b>"
      Endif

      If InStr(":me", LCase(Kind)) Then
        sSyntax = sSyntax & " " & Keyword("(") & GetSyntaxSignature() & Keyword(")")
      Endif

      If Type Then sSyntax = sSyntax & " " & Keyword("As") & " " & GetSyntaxType(Type)

      If Kind = "C" Then
        sSyntax = sSyntax & " " & Keyword("=") & " "
        Select Case Type
          Case "s"
            sSyntax = sSyntax & Keyword(Chr$(34)) & Value & Keyword(Chr$(34))
          Case "b"
            If Left(Value) = "T" Then
              sSyntax &= Keyword("True")
            Else
              sSyntax &= Keyword("False")
            Endif
          Case "i"
            sSyntax = sSyntax & Keyword(Value, &HFF0000&)
            iValue = CInt(Value)
            If iValue > 10 Then 
              If iValue >= &H8000& And If iValue <= &HFFFF& Then
                sSyntax &= " " & Keyword("\\' &H" & Hex$(CInt(Value)) & "&", &H808080&)
              Else
                sSyntax &= " " & Keyword("\\' &H" & Hex$(CInt(Value)), &H808080&)
              Endif
            Endif
          Case Else
            sSyntax = sSyntax & Value
        End Select
      Endif

  End Select

  aResult = ["[[ syntax"]
  aResult.Insert(Split(Replace(sSyntax, "\n", "\\\n"), "\n"))
  aResult.Add("]]")
  Return aResult  

End


Public Sub GetDescription() As String
  
  Dim sPath As String
  Dim aData As String[]
  Dim iPos As Integer
  Dim sData As String
  Dim sDesc As String
  
  sPath = Main.GetPagePathFrom(Main.SolvePath("/comp" &/ LCase(Component &/ Class &/ Replace(Name, ":", "."))))
  If Not Exist(sPath) Then Return
  
  aData = Split(File.Load(sPath), "\n")
  While iPos < aData.Count
    sData = aData[iPos]
    If sData Then
      If IsLetter(Left(sData)) Then
        sData = Replace(sData, "[../", "[./")
        sData = Replace(sData, "[./../", "[../")
        sDesc &= sData & "\n"
      Endif
    Else If sDesc Then
      Break
    Endif
    Inc iPos
  Wend
  
  Return sDesc
  
End

Private Sub SplitSignature(sSign As String) As String[]
  
  Dim iPos As Integer
  Dim aSign As New String[2]
  
  iPos = InStr(sSign, "[")
  If iPos Then
    aSign[0] = Left(sSign, iPos - 1)
    aSign[1] = Mid$(sSign, iPos + 1, -1)
  Else
    aSign[0] = sSign
  Endif
  Return aSign
  
End

Private Sub MergeSignature(sSign As String, sParentSign As String) As String
  
  Dim aParentSign As String[]
  Dim aSign As String[]

  aSign = SplitSignature(sSign)
  aParentSign = SplitSignature(sParentSign)
  sSign = aParentSign[0] & aSign[0] & "[" & aParentSign[1] & aSign[1] & "]"
  If sSign Ends "[]" Then sSign = Left(sSign, -2)
  Return sSign
  
End
