' Gambas class file

STATIC PRIVATE $cTypeName AS NEW Collection

PUBLIC Name AS String
PUBLIC Type AS String
PUBLIC Kind AS String
PUBLIC Signature AS String
PUBLIC Value AS String
PUBLIC Class AS String
PUBLIC Component AS String
PUBLIC NotPublic AS Boolean
PUBLIC LineNumber AS Integer

PRIVATE $sArgBefore AS String
PRIVATE $sArgAfter AS String
PRIVATE $iArg AS Integer
PRIVATE $iShowArg AS Integer

STATIC PUBLIC SUB _init()

  $cTypeName["b"] = "Boolean"
  $cTypeName["c"] = "Byte"
  $cTypeName["h"] = "Short"
  $cTypeName["i"] = "Integer"
  $cTypeName["l"] = "Long"
  $cTypeName["d"] = "Date"
  $cTypeName["g"] = "Single"
  $cTypeName["f"] = "Float"
  $cTypeName["v"] = "Variant"
  $cTypeName["s"] = "String"
  $cTypeName["o"] = "Object"
  $cTypeName["p"] = "Pointer"

END


PUBLIC FUNCTION IsHidden() AS Boolean

  IF Left(Name) = "_" THEN RETURN TRUE
  RETURN InStr(Name, "_") > 0 AND Kind <> "C"

END


PUBLIC FUNCTION IsStatic() AS Boolean

  RETURN UCase(Kind) = Kind

END


PUBLIC FUNCTION GetIcon() AS String

  DIM bStatic AS Boolean
  DIM sIcon AS String

  bStatic = UCase(Kind) = Kind

  SELECT CASE LCase(Kind)

    CASE "r"
      sIcon = "img/16" &/ If(bStatic, "s-property-ro.png", "property-ro.png")
    CASE "p"
      sIcon = "img/16" &/ If(bStatic, "s-property.png", "property.png")
    CASE "v"
      sIcon = "img/16" &/ If(bStatic, "s-variable.png", "variable.png")
    CASE "c"
      sIcon = "img/16/constant.png"
    CASE ":"
      sIcon = "img/16/event.png"
    CASE "t"
      sIcon = "img/16/control.png"
    CASE "m"
      sIcon = "img/16" &/ If(bStatic, "s-method.png", "method.png")

  END SELECT

  RETURN sIcon

END

PRIVATE SUB NextArg()
  
  INC $iArg  
  
  IF $iArg = $iShowArg THEN 
    $sArgBefore = "<u>"
    $sArgAfter = "</u>"
  ELSE 
    $sArgBefore = ""
    $sArgAfter = ""
  ENDIF

END


PRIVATE SUB MakeArgBold(sCode AS String, iShowArg AS Integer) AS String
  
  DIM sCar AS String
  DIM iInd AS Integer
  DIM aWait AS NEW String[]
  DIM bString AS Boolean
  DIM sSign AS String
  DIM bOptional AS Boolean
  
  IF iShowArg < 0 THEN RETURN sCode
  
  $iArg = -1
  $iShowArg = iShowArg
  NextArg
  sSign = $sArgBefore

  DO
    
    INC iInd
    IF iInd > Len(sCode) THEN BREAK
    
    sCar = Mid$(sCode, iInd, 1)

    IF bString THEN
      sSign &= sCar
      IF sCar = "\\" THEN
        INC iInd
        IF iInd > Len(sCode) THEN BREAK
        sSign &= Mid$(sCode, iInd, 1)
      ENDIF
      CONTINUE
    ENDIF
    
    IF sCar = Chr$(34) THEN
      sSign &= sCar
      bString = NOT bString
      CONTINUE
    ENDIF
    
    IF sCar = "(" THEN
      sSign &= sCar
      aWait.Push(")")
    ELSE IF sCar = "[" THEN
      sSign &= sCar
      aWait.Push("]")
    ELSE IF aWait.Count THEN
      sSign &= sCar
      IF sCar = aWait[aWait.Max] THEN
        aWait.Pop
      ENDIF
    ELSE IF Mid$(sCode, iInd, 9) = "OPTIONAL " THEN
      iInd += 7
      IF NOT bOptional THEN 
        sSign &= " ["
      ENDIF
      bOptional = TRUE
    ELSE IF sCar = "," THEN
      sSign &= $sArgAfter 
      IF Mid$(sCode, iInd, 11) = ", OPTIONAL " THEN
        IF NOT bOptional THEN 
          sSign &= " ["
          bOptional = TRUE
        ENDIF 
        iInd += 9
      ENDIF
      sSign &= sCar
      NextArg
      sSign &= $sArgBefore
    ELSE
      sSign &= sCar
    ENDIF
    
  LOOP
  
  IF bOptional THEN
    sSign &= $sArgAfter & " ]"
  ENDIF
  
  RETURN sSign  
  
END


PUBLIC FUNCTION GetSignature(OPTIONAL iShowArg AS Integer = -1) AS String

  DIM iInd AS Integer
  DIM sRes AS String
  DIM sCar AS String
  DIM iPos AS Integer
  DIM bName AS Boolean
  DIM bFirst AS Boolean
  DIM sSign AS String

  sSign = Signature
  
  IF Left$(sSign) = "#" THEN
  
    sRes = MakeArgBold(Mid$(sSign, 2), iShowArg)
  
  ELSE

    bFirst = TRUE
    
    $iArg = -1
    $iShowArg = iShowArg
    NextArg
  
    DO
  
      INC iInd
  
      IF iInd > Len(sSign) THEN BREAK
  
      sCar = Mid$(sSign, iInd, 1)
  
      IF sCar = "'" OR sCar = "(" THEN
  
        IF sCar = "'" THEN
          iPos = InStr(sSign, "'", iInd + 1)
        ELSE
          iPos = InStr(sSign, ")", iInd + 1)
        ENDIF
  
        IF iPos = 0 THEN BREAK
  
        IF bFirst THEN
          bFirst = FALSE
        ELSE
          sRes &= $sArgAfter & ", "
          NextArg
        ENDIF
  
        sRes &= $sArgBefore & Mid$(sSign, iInd + 1, iPos - iInd - 1) & " AS "
  
        iInd = iPos
        bName = TRUE
  
        CONTINUE
  
      ENDIF
  
      IF sCar = "<" THEN
  
        iPos = InStr(sSign, ">", iInd + 1)
        IF iPos = 0 THEN BREAK
        iInd = iPos
        CONTINUE
  
      ENDIF
  
      IF sCar = "[" THEN
  
        sRes &= $sArgAfter & " ["
        $sArgAfter = ""
        CONTINUE
  
      ENDIF
  
      IF sCar = "]" THEN
  
        sRes &= $sArgAfter & " ] "
        $sArgAfter = ""
        CONTINUE
  
      ENDIF
  
      IF NOT bName THEN
  
        IF bFirst THEN
          bFirst = FALSE
        ELSE
          sRes &= $sArgAfter & ", "
          NextArg
        ENDIF
  
        sRes &= $sArgBefore & "? AS " 
        bName = FALSE
  
      ENDIF
      
      'IF iInd = Len(sSign) THEN
      IF sCar = "." THEN
        sRes &= $sArgAfter & ", " 
        NextArg
        IF $iArg >= $iShowArg THEN sRes &= "<b>"
        sRes &= "..."
        IF $iArg >= $iShowArg THEN sRes &= "</b>"
        CONTINUE
      ENDIF
      'ENDIF
  
      IF (sCar >= "A" AND sCar <= "Z") OR sCar = "." THEN
  
        iPos = InStr(sSign, ";", iInd)
        IF iPos = 0 THEN iPos = Len(sSign) + 1
  
        sRes &= Mid$(sSign, iInd, iPos - iInd)
  
        iInd = iPos
        CONTINUE
  
      ENDIF
  
      sRes &= GetType(sCar)
  
    LOOP
    
    sRes &= $sArgAfter
    
  ENDIF

  IF Name = "_get" OR Name = "_put" THEN
    sRes = "[ " & sRes & " ]"
  ELSE
    sRes = "( " & sRes & " )"
  ENDIF
  
  IF Type THEN sRes &= " AS " & GetType(Type)

  RETURN sRes

END

PUBLIC FUNCTION GetDescription(OPTIONAL bBalise AS Boolean) AS String

  DIM bStatic AS Boolean
  DIM sDesc AS String

  bStatic = UCase(Kind) = Kind

  SELECT LCase(Kind)
  
    CASE "r"
      sDesc = If(bStatic, "STATIC ", "") & "PROPERTY READ"
    CASE "p"
      sDesc = If(bStatic, "STATIC ", "") & "PROPERTY"
    'CASE "v"
    '  sIcon = "img/16" &/ If(bStatic, "s-variable.png", "variable.png")
    CASE "c"
      sDesc = "CONST"
    CASE ":"
      sDesc = "EVENT"
    'CASE "t"
    '  sIcon = "img/16/control.png"
    CASE "m"
      sDesc = If(bStatic, "STATIC ", "") & If(Type, "FUNCTION", "SUB")

  END SELECT  
  
  IF Kind = ":" THEN
    sDesc &= " " & Mid$(Name, 2) & " "
  ELSE
    sDesc &= " " & Name & " "
  ENDIF
  
  IF InStr(":m", LCase(Kind)) THEN 
    sDesc &= " " & GetSignature()
  ELSE
    IF Type THEN sDesc &= " AS " & GetType(Type, FALSE)
  ENDIF
  
  RETURN sDesc
  
END


STATIC PRIVATE FUNCTION GetType(sType AS String, OPTIONAL bBalise AS Boolean) AS String

  IF Len(sType) = 1 THEN
    sType = $cTypeName[sType]
  ELSE IF Left$(sType) = "." THEN
    'IF bBalise THEN
    '  sType = "<I>" & Mid$(sType, 2) & "</I>"
    'ELSE
    sType = "Object"
    'ENDIF
  ENDIF

  IF bBalise THEN
    RETURN "<B>" & sType & "</B>"
  ELSE
    RETURN sType
  ENDIF

END

STATIC PUBLIC FUNCTION TransformSignature(sSign AS String, bBalise AS Boolean) AS String

  DIM iInd AS Integer
  DIM sRes AS String
  DIM sCar AS String
  DIM iPos AS Integer
  DIM bName AS Boolean
  DIM bFirst AS Boolean

  DIM sBold AS String
  DIM sNoBold AS String

  IF bBalise THEN
    sBold = "<B>"
    sNoBold = "</B>"
  ENDIF

  bFirst = TRUE

  DO

    iInd = iInd + 1

    IF iInd > Len(sSign) THEN BREAK

    sCar = Mid$(sSign, iInd, 1)

    IF sCar = "'" OR sCar = "(" THEN

      IF sCar = "'" THEN
        iPos = InStr(sSign, "'", iInd + 1)
      ELSE
        iPos = InStr(sSign, ")", iInd + 1)
      ENDIF

      IF iPos = 0 THEN BREAK

      IF bFirst THEN
        bFirst = FALSE
      ELSE
        sRes = sRes & sBold & "," & sNoBold & " "
      ENDIF

      sRes = sRes & Mid$(sSign, iInd + 1, iPos - iInd - 1) & " " & sBold & "AS" & sNoBold & " "

      iInd = iPos
      bName = TRUE

      CONTINUE

    ENDIF

    IF sCar = "<" THEN

      iPos = InStr(sSign, ">", iInd + 1)
      IF iPos = 0 THEN BREAK
      iInd = iPos
      CONTINUE

    ENDIF

    IF sCar = "[" THEN

      sRes = sRes & " " & sBold & "[" & sNoBold
      CONTINUE

    ENDIF

    IF sCar = "]" THEN

      sRes = sRes & " " & sBold & "] " & sNoBold
      CONTINUE

    ENDIF

    IF NOT bName THEN

      IF bFirst THEN
        bFirst = FALSE
      ELSE
        sRes = sRes & sBold & "," & sNoBold & " "
      ENDIF

      sRes = sRes & sBold & "? AS " & sNoBold
      bName = FALSE

    ENDIF

    IF sCar >= "A" AND sCar <= "Z" THEN

      iPos = InStr(sSign, ";", iInd)
      IF iPos = 0 THEN iPos = Len(sSign) + 1

      sRes = sRes & Mid$(sSign, iInd, iPos - iInd)

      iInd = iPos
      CONTINUE

    ENDIF

    sRes = sRes & GetType(sCar, bBalise)

  LOOP

  RETURN sRes

END
