' Gambas class file

PUBLIC Name AS String
PUBLIC Path AS String
PUBLIC Editor AS Editor

PROPERTY READ ReadOnly AS Boolean

STATIC PRIVATE $aExt AS String[] = ["htm", "html", "xml", "svg", "css"]

PRIVATE CONST STYLE_HTML AS Integer = 1
PRIVATE CONST STYLE_CSS AS Integer = 2

PRIVATE $bModify AS Boolean
PRIVATE $iStyle AS Integer

PRIVATE $iViewMode AS Integer
PRIVATE VIEWMODE_NORMAL AS Integer = 0 
PRIVATE VIEWMODE_HORIZONTAL AS Integer = 1
PRIVATE VIEWMODE_VERTICAL AS Integer = 2

PRIVATE $hEditor1 AS Editor
PRIVATE $hEditor2 AS Editor

PUBLIC SUB _new(sPath AS String)

  Path = sPath
  Name = File.Name(Path)
  Editor = edtEditor

END

PUBLIC SUB Form_Open()
  
  DIM sExt AS String = LCase(File.Ext(Name))
  
  IF $aExt.Find(sExt) >= 0 THEN
    WITH edtEditor
      .Clear
      .Highlight = Highlight.Custom
      .Flags[Editor.HighlightCurrent] = TRUE
    END WITH     

    SELECT CASE sExt
      CASE "css"
        $iStyle = STYLE_CSS
      CASE ELSE 
        $iStyle = STYLE_HTML
    END SELECT 
  ENDIF

  ReadConfig

  Project.InitMove(ME)

  SetReadOnly
  Reload

  $bModify = FALSE
  edtEditor.SetFocus

  DrawTitle
  
END

PUBLIC SUB Form_Resize()
  DIM iToolbarOffset AS Integer
  
  'If we add the ability to hide the toolbar then uncomment this code 
  'IF $bToolbar THEN
  '  panToolBar.Move(0, 0, ME.CLientW)
  '  iToolbarOffset = panToolBar.H
  'ELSE
    iToolbarOffset = 0
  'ENDIF
  
  SELECT CASE $iViewMode
  CASE 0
    edtEditor.Move(0, iToolbarOffset, ME.ClientW, ME.ClientH - iToolbarOffset)
  CASE 1
    splHorizontal.Move(0, iToolbarOffset, ME.ClientW, ME.ClientH - iToolbarOffset)
  CASE 2
    splVertical.Move(0, iToolbarOffset, ME.ClientW, ME.ClientH - iToolbarOffset)
  END SELECT 

END

PUBLIC SUB ReadConfig()

  ReadConfigEditor(edtEditor)
  IF $hEditor1 THEN ReadConfigEditor($hEditor1)
  IF $hEditor2 THEN ReadConfigEditor($hEditor2)

END

PRIVATE SUB ReadConfigEditor(hEditor AS Editor)

  hEditor.Font = Font[Settings["/Editor/Font", Project.DEFAULT_FONT]]

  MColor.InitEditor(hEditor)

  hEditor.Flags[hEditor.ShowProcedureLimits] = Settings["/Editor/ProcedureLimit", 2] > 0
  hEditor.Flags[hEditor.BlendedProcedureLimits] = Settings["/Editor/ProcedureLimit", 2] = 2
  hEditor.Flags[hEditor.ShowModifiedLines] = Settings["/Editor/ShowChange", TRUE]
  hEditor.Flags[hEditor.ShowLineNumbers] = Settings["/Editor/ShowLineNumbers", FALSE]
  hEditor.Flags[hEditor.ShowCurrentLine] = Settings["/Editor/ShowCurrent", TRUE]
  
END

PUBLIC FUNCTION Save() AS Boolean

  'Project.Config.WriteString("/Window" &/ Name &/ "Pos",
  '  CStr(ME.X) & "," & CStr(ME.Y) & "," & CStr(ME.Width) & "," & CStr(ME.Height))

  IF NOT $bModify THEN RETURN

  Save.Begin(Path)

  File.Save(Path, Editor.Text)
  Editor.Reset
  $bModify = FALSE
  DrawTitle

  Save.End()

CATCH

  RETURN Save.Error()

END

PRIVATE SUB DrawTitle()

  Project.DrawTitle(ME)

END

PUBLIC SUB Modify(OPTIONAL bReset AS Boolean)

  IF Project.ReadOnly THEN RETURN
  IF $bModify <> bReset THEN RETURN

  $bModify = NOT bReset
  DrawTitle
  IF $bModify THEN INC Project.TimeStamp

END


PUBLIC FUNCTION IsModified() AS Boolean

  RETURN $bModify

END


PUBLIC SUB Editors_Change()

  Modify

END


PUBLIC SUB Editors_Cursor()

  'PRINT edtEditor.Line; edtEditor.Column
  'lblCursor.Text = CStr(edtEditor.Line + 1) & " : " & CStr(edtEditor.Column + 1)
  DrawInfo

END

PUBLIC SUB Editors_KeyPress()
  
  IF Key.Code = Key.Escape THEN 
    Action["find"].Value = FALSE
  ENDIF
  
  IF Key.Code = Key.Insert THEN

    IF Key.Shift THEN
      IF NOT Editor.ReadOnly THEN
        Editor.Paste
      ENDIF 
    ELSE IF Key.Control THEN
      Editor.Copy
    ENDIF 
    
  ELSE IF Key.Code = Key.Delete THEN

    IF Key.Shift THEN
      IF NOT Editor.ReadOnly THEN
        Editor.Cut
      ENDIF 
    ENDIF 
  ENDIF 

END



'PUBLIC SUB Form_KeyPress(Ascii AS String, Code AS Integer, State AS Integer)
'
'  IF Code = Asc("S") AND State = Mouse.Control THEN
'    ME.Save
'  ENDIF
'
'END



PUBLIC SUB Form_GotFocus()
  
  Editor.SetFocus
  
END

PUBLIC SUB Goto(iLine AS Integer, OPTIONAL iColumn AS Integer = -1)

  'DEC iLine
  IF iColumn < 0 THEN iColumn = Editor.Column
  Editor.Goto(iLine, iColumn, TRUE)

END


PUBLIC SUB GotoCenter(iLine AS Integer, OPTIONAL iColumn AS Integer = -1)

  Goto(iLine, iColumn)

END


PUBLIC SUB Editors_Menu()

  mnuEditor.Popup

END

PUBLIC SUB Editors_GotFocus()
  Editor = LAST 
END

PUBLIC SUB mnuSave_Click()

  Save

END


' PUBLIC SUB mnuFind_Click()
'
'   DIM sSel AS String
'   DIM iPos AS Integer
'
'   sSel = Left$(Trim(edtEditor.Selection.Text), 64)
'   iPos = Instr(sSel, gb.NewLine)
'   IF iPos THEN sSel = Left$(sSel, iPos - 1)
'
'   Project.FindForm.Find(sSel)
'
' END
'
'
' PUBLIC SUB mnuFindNext_Click()
'
'   Project.FindForm.FindNext
'
' END
'
'
' PUBLIC SUB mnuFindPrevious_Click()
'
'   Project.FindForm.FindPrevious
'
' END


PUBLIC SUB Rename(sNewName AS String, sNewPath AS String)

  Name = sNewName
  Path = sNewPath 'File.Dir(Path) &/ sNewName & "." & File.Ext(Path)
  DrawTitle

END


PUBLIC SUB mnuCut_Click()

  Editor.Cut

END

PUBLIC SUB mnuCopy_Click()

  Editor.Copy

END

PUBLIC SUB mnuPaste_Click()

  Editor.Paste

END

PUBLIC SUB mnuUndo_Click()

  Editor.Undo

END

PUBLIC SUB mnuRedo_Click()

  Editor.Redo

END


PUBLIC SUB mnuGotoLine_Click()

  DIM iLine AS Integer

  iLine = FGotoLine.Run(Editor.Line + 1)
  IF iLine <= 0 THEN RETURN
  GotoCenter(iLine - 1)

END


' PUBLIC SUB mnuWordWrap_Click()
'
'   edtEditor.Wrap = NOT edtEditor.Wrap
'   mnuWordWrap.Checked = edtEditor.Wrap
'
' END


PUBLIC SUB mnuSelectAll_Click()

  Editor.SelectAll()

END


PRIVATE SUB SetReadOnly()

  edtEditor.ReadOnly = Project.ReadOnly OR Project.Running OR Stat(Path).Type = gb.Link

  IF $hEditor1 THEN $hEditor1.ReadOnly = edtEditor.ReadOnly
  IF $hEditor2 THEN $hEditor2.ReadOnly = edtEditor.ReadOnly

END

PUBLIC SUB OnProjectDebug()

  SetReadOnly

END


PUBLIC SUB mnuFind_Click()

  FFind.Find

END

PUBLIC SUB mnuReplace_Click()

  FFind.Find(TRUE)

END


PUBLIC SUB Editors_Highlight()

  DIM iState AS Integer
  DIM iNextState AS Integer
  DIM iInd AS Integer
  DIM J AS Integer
  DIM sText AS String
  DIM sCar AS String
  DIM iPos AS Integer
  DIM bMarkup AS Boolean
  DIM bQuote AS Boolean
  DIM bLimit AS Boolean
  DIM iTag AS Integer

  iState = Highlight.State
  iTag = Highlight.Tag
  sText = Highlight.Text

  'PRINT "Highlight:";; iState;; iTag;; sText

  SELECT CASE $iStyle
  
    CASE STYLE_HTML

      bMarkup = iState = Highlight.Keyword
    
      FOR iInd = 1 TO String.Len(sText)
    
        iNextState = iState
        sCar = String.Mid$(sText, iInd, 1)
    
        IF bMarkup THEN
    
          IF bQuote THEN
            IF sCar = Chr$(34) THEN 
              bQuote = FALSE
              iNextState = Highlight.Operator
            ENDIF
          ELSE IF sCar = ">" THEN
            bMarkup = FALSE
            iState = Highlight.Keyword
            iNextState = Highlight.Normal
          ELSE IF sCar = " " THEN
            iNextState = Highlight.Operator
          ELSE IF sCar = "=" THEN
            iNextState = Highlight.String
          ELSE IF sCar = Chr$(34) THEN 
            bQuote = TRUE
          ENDIF
    
        ELSE
    
          SELECT CASE iState
            CASE Highlight.Normal
              IF sCar = "<" THEN
                IF Mid$(sText, iInd, 4) = "<!--" THEN
                  iState = Highlight.Comment
                  iNextState = Highlight.Comment
                ELSE IF Mid$(sText, iInd, 9) = "<![CDATA[" THEN
                  iState = Highlight.Symbol
                  iNextState = Highlight.Symbol
                ELSE
                  iState = Highlight.Keyword
                  iNextState = Highlight.Keyword
                  bMarkup = TRUE
                  IF Mid$(sText, iInd, 5) = "<body" OR IF Mid$(sText, iInd, 5) = "<head" THEN bLimit = TRUE
                ENDIF
              ELSE IF sCar = "&" THEN
                iPos = String.InStr(sText, ";", iInd)
                IF iPos = 0 OR iPos = iInd + 1 THEN
                  iState = Highlight.Error
                ELSE
                  FOR J = iInd + 1 TO iPos - 1
                    sCar = String.Mid$(sText, J, 1)
                    IF IsLetter(sCar) THEN CONTINUE
                    IF IsDigit(sCar) THEN CONTINUE
                    IF InStr("_#", sCar) THEN CONTINUE
                    BREAK
                  NEXT
                  IF J = iPos THEN
                    Highlight.Add(Highlight.Number, iPos - iInd + 1)
                    iInd = iPos
                    CONTINUE
                  ELSE
                    iState = Highlight.Error
                  ENDIF
                ENDIF
              ENDIF
            CASE Highlight.Comment
              IF sCar = ">" AND IF iInd > 2 AND IF String.Mid$(sText, iInd - 2, 2) = "--" THEN
                iNextState = Highlight.Normal
              ENDIF
            CASE Highlight.Symbol
              IF sCar = ">" AND IF iInd > 2 AND IF String.Mid$(sText, iInd - 2, 2) = "]]" THEN
                iNextState = Highlight.Normal
              ENDIF
          END SELECT
    
        ENDIF
    
        Highlight.Add(iState)
        iState = iNextState
    
      NEXT
    
      IF iNextState <> Highlight.Comment AND IF iNextState <> Highlight.Symbol THEN
        IF bMarkup THEN 
          iNextState = Highlight.Keyword
        ELSE 
          iNextState = Highlight.Normal
        ENDIF
      ENDIF
      
    CASE STYLE_CSS
    
      FOR iInd = 1 TO String.Len(sText)
    
        iNextState = iState
        sCar = String.Mid$(sText, iInd, 1)

        SELECT CASE iState
        
          CASE Highlight.Normal, Highlight.String
            IF sCar = "." OR IF sCar = "#" THEN 
              iState = Highlight.String
              iNextState = iState
            ELSE IF sCar = " " THEN 
              iState = Highlight.Normal
              iNextState = iState
            ELSE IF sCar = "{" THEN 
              iState = Highlight.Keyword
              iNextState = iState
              iTag = Highlight.Keyword
              bLimit = TRUE
            ELSE IF sCar = "/" THEN 
              IF Mid$(sText, iInd, 2) = "/*" THEN 
                iState = Highlight.Comment
                iNextState = iState
              ENDIF
            ENDIF
            
          CASE Highlight.Keyword, Highlight.Number
            IF sCar = ":" THEN 
              iNextState = Highlight.Number
            ELSE IF sCar = ";" THEN 
              iState = Highlight.Keyword
              iNextState = iState
            ELSE IF sCar = "}" THEN 
              iNextState = Highlight.Normal
              iTag = 0
            ELSE IF sCar = "/" THEN 
              IF Mid$(sText, iInd, 2) = "/*" THEN 
                iState = Highlight.Comment
                iNextState = iState
              ENDIF
            ENDIF
                        
          CASE Highlight.Comment
            IF sCar = "/" AND IF iInd > 1 AND IF String.Mid$(sText, iInd - 1, 1) = "*" THEN
              iNextState = IIf(iTag, iTag, Highlight.Normal)
            ENDIF
            
        END SELECT
        
        Highlight.Add(iState)
        iState = iNextState
    
      NEXT
    
  END SELECT 

  Highlight.State = iNextState
  Highlight.Tag = iTag
  Highlight.ShowLimit = bLimit

END

PUBLIC SUB Form_Activate()

  mnuEditor.Enabled = TRUE

END

PUBLIC SUB Form_Deactivate()

  mnuEditor.Enabled = FALSE

END

PRIVATE FUNCTION ReadOnly_Read() AS Boolean

  RETURN edtEditor.ReadOnly  

END

PRIVATE SUB DrawInfo()
  
  lblEditor.Text = CStr(Editor.Line + 1) & ":" & CStr(Editor.Column + 1)
  
END

PUBLIC SUB Reload()

  edtEditor.Text = File.Load(Path)
  Editor.SetFocus
  Modify(TRUE)

END

PUBLIC SUB mnuReload_Click()

  IF IsModified() THEN
    IF Message.Warning(("The file has been modified.\n\nAll your changes will be lost."), ("Reload"), ("Cancel")) <> 1 THEN RETURN
  ENDIF

  Reload

END

PUBLIC SUB GetState() AS String
  
  RETURN CStr(Editor.Line) & "." & CStr(Editor.Column)
  
END

PUBLIC SUB SetState(sState AS String)
  
  DIM aState AS String[] = Split(sState, ".")
  
  Editor.Goto(CInt(aState[0]), CInt(aState[1]))
  
END

PRIVATE SUB InitEditor(hEditor AS Editor)
  
  WITH hEditor
    .View = edtEditor
    .Highlight = edtEditor.Highlight
    .Flags[Editor.HighlightCurrent] = TRUE
    .ReadOnly = edtEditor.ReadOnly
    .TabSize = edtEditor.TabSize
  END WITH 
  ReadConfigEditor(hEditor)
  
END

PRIVATE SUB SetViewMode(iViewMode AS Integer)
  
  IF $iViewMode = iViewMode THEN RETURN 
  $iViewMode = iViewMode

  IF $iViewMode <> VIEWMODE_NORMAL AND IF NOT $hEditor1 THEN 
    $hEditor1 = NEW Editor(ME) AS "Editors"
    InitEditor($hEditor1)
    $hEditor2 = NEW Editor(ME) AS "Editors"
    InitEditor($hEditor2)
  ENDIF

  SELECT CASE $iViewMode
  
    CASE VIEWMODE_NORMAL
      edtEditor.Show
      splHorizontal.Hide
      splVertical.Hide
      Editor = edtEditor  
      
    CASE VIEWMODE_HORIZONTAL
      $hEditor1.Reparent(splHorizontal)
      $hEditor2.Reparent(splHorizontal)
      edtEditor.Hide
      splHorizontal.Show
      splVertical.Hide
      Editor = $hEditor1
  
    CASE VIEWMODE_VERTICAL
      $hEditor1.Reparent(splVertical)
      $hEditor2.Reparent(splVertical)
      edtEditor.Hide
      splHorizontal.Hide
      splVertical.Show
      Editor = $hEditor1
  
  END SELECT   
  
  Editor.SetFocus
  Form_Resize
  
END

PUBLIC SUB mnuNoSplit_Click()
  
  SetViewMode(VIEWMODE_NORMAL)

END

PUBLIC SUB mnuHorizontalSplit_Click()

  SetViewMode(VIEWMODE_HORIZONTAL)

END

PUBLIC SUB mnuVerticalSplit_Click()

  SetViewMode(VIEWMODE_VERTICAL)

END

