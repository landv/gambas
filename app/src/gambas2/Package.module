' Gambas module file

PUBLIC Path AS String
PUBLIC ChangeLog AS String

PRIVATE RPMBUILD_PROG AS String
PRIVATE DKPG_PROG AS String
PRIVATE TAR_1_13_PROG AS String
PRIVATE AUTOCONF_PROG AS String
PRIVATE AUTOMAKE_PROG AS String

PRIVATE $sOutput AS String
PRIVATE $bEnd AS Boolean
PRIVATE $bChecked AS Boolean

PRIVATE $sName AS String            ' Project name
PRIVATE $sPrefix AS String          ' Prefix
PRIVATE $sPackageName AS String     ' Package name, i.e project name with prefix
PRIVATE $sCategories AS String      ' Categories list
PRIVATE $sHome AS String            ' Home user directory
PRIVATE $sVersion AS String
PRIVATE $sDescription AS String
PRIVATE $sSavePath AS String

PRIVATE CONST MIN_VERSION AS String = "1.9.48"
PRIVATE CONST MAX_VERSION AS String = "2.90"

PUBLIC SUB CheckProgram()
  
  'IF $bChecked THEN RETURN

  '$bChecked = TRUE
  
  IF NOT Project.CheckProgram("dh_install") THEN DKPG_PROG = "dh_install"
  IF NOT Project.CheckProgram("rpmbuild") THEN RPMBUILD_PROG = "rpmbuild"
  IF NOT Project.CheckProgram("tar-1.13") THEN TAR_1_13_PROG = "tar-1.13"
  IF NOT Project.CheckProgram("autoconf") THEN AUTOCONF_PROG = "autoconf"
  IF NOT Project.CheckProgram("automake") THEN AUTOMAKE_PROG = "automake"
  
END

PUBLIC SUB CheckSystem(sSys AS String) AS String
  
  DIM sProg AS String
  
  'CheckProgram
  
  SELECT CASE sSys
  
    CASE "mandriva", "fedora", "suse"
      IF NOT RPMBUILD_PROG THEN RETURN Subst(("'&1' is not installed on your system."), "rpmbuild")
      
    CASE "debian", "ubuntu"
      IF NOT DKPG_PROG THEN RETURN Subst(("'&1' is not installed on your system."), "debhelper")

    CASE "slackware"
      IF NOT TAR_1_13_PROG THEN RETURN Subst(("'&1' is not installed on your system."), "tar-1.13")

    CASE "autotools"
      IF NOT AUTOCONF_PROG AND IF NOT AUTOMAKE_PROG THEN RETURN Subst(("'&1' and '&2' are not installed on your system."), "autoconf", "automake")
      IF NOT AUTOCONF_PROG THEN RETURN Subst(("'&1' is not installed on your system."), "autoconf")
      IF NOT AUTOMAKE_PROG THEN RETURN Subst(("'&1' is not installed on your system."), "automake")
      
    CASE ELSE
      RETURN
      
  END SELECT
  
END

PRIVATE SUB AddLog(sText AS String)

  FMakeInstall.AddLog(sText)

END

PRIVATE SUB RemoveEmptyLines(sText AS String) AS String
  
  RETURN Split(sText, "\n", "", TRUE).Join("\n")
  
END


PRIVATE SUB InitMake(sSys AS String)
  
  IF Project.Prefix THEN 
    IF Project.Vendor THEN 
      $sPrefix = String.LCase(Project.Vendor) & "-"
    ELSE 
      $sPrefix = "gambas-"
    ENDIF
  ELSE 
    $sPrefix = "" 
  ENDIF
  
  IF Project.CreateEachDirectory THEN
    Path = $sSavePath &/ sSys
    TRY MKDIR $sSavePath
    TRY MKDIR Path
  ELSE 
    Path = $sSavePath
    TRY MKDIR Path
  ENDIF

  $sName = Project.Name

  $sPackageName = $sPrefix & String.LCase($sName)
  $sPackageName = Replace$($sPackageName, "_", "-")
  $sPackageName = Replace$($sPackageName, ".", "-")

  $sHome = System.User.Home
  
  $sCategories = Project.Categories[sSys]
  IF $sCategories THEN $sCategories &= ";"

  $sVersion = Project.MajorVersion & "." & Project.MinorVersion
  IF Project.UseRelease THEN $sVersion &= "." & Project.ReleaseVersion
  
  $sDescription = RemoveEmptyLines(Project.Description)

END

PUBLIC FUNCTION Make() AS Boolean

  DIM sSys AS String
  DIM sMacro AS String
  DIM bAdd AS Boolean
  DIM sPath AS String

  IF Project.Systems.Exist("slackware") THEN 
    IF Project.MakeExecutable(TRUE, TRUE) THEN RETURN TRUE
  ENDIF  
  
  ' Save old rpm macro file
  sMacro = User.Home &/ ".rpmmacros"
  TRY MOVE sMacro TO sMacro & ".save"
  TRY KILL sMacro

  $sSavePath = Path
  FOR EACH sSys IN Project.Systems
    IF MakePackage(sSys) THEN RETURN TRUE
  NEXT

  ' Restore old rpm macro file
  TRY KILL sMacro
  TRY MOVE sMacro & ".save" TO sMacro

  AddLog(("Saving CHANGELOG file."))
  sPath = Project.Dir &/ "CHANGELOG"
  bAdd = NOT Exist(sPath)
  File.Save(sPath, ChangeLog)
  Project.RefreshKey(sPath)
  IF bAdd THEN VersionControl.AddFile(sPath)
  
  AddLog(("The packages have been successfully created.") & "\n")

END

PUBLIC FUNCTION GetChangeDate() AS String

  DIM sLang AS String
  DIM sDate AS String

  sLang = System.Language
  System.Language = "C"
  sDate = Format$(Now, "ddd mmm dd yyyy") & " " & Project.Maintainer & " "
  IF Project.Address THEN sDate = sDate & "<" & Project.Address & "> "
  'sDate = sDate & Subst("&1.&2-&3", Project.MajorVersion, Project.MinorVersion, Project.ReleaseVersion)
  sDate &= $sVersion
  System.Language = sLang
  RETURN sDate

END


PRIVATE FUNCTION IsConsoleProject() AS Boolean

  DIM sLib AS String

  FOR EACH sLib IN Project.Libraries
    IF CComponent.All[sLib].Type = "Form" THEN RETURN FALSE
  NEXT

  RETURN TRUE

END

PRIVATE FUNCTION GetDependencies() AS String[]
  
  DIM aDep AS NEW String[]
  DIM sComp AS String
  
  FOR EACH sComp IN Project.Libraries
    IF sComp = "gb.debug" OR IF sComp = "gb.eval" THEN CONTINUE 
    aDep.Add("gambas" & System.Version & "-" & Replace(sComp, ".", "-"))
  NEXT
  
  RETURN aDep
  
END


PRIVATE SUB PrintOnlyShowIn(hFile AS File, sCategories AS String)
  
  DIM aCat AS String[] = Split(sCategories, ";", "", TRUE)
  DIM sCat AS String
  DIM aOnly AS NEW String[]
  
  IF aCat.Exist("Screensaver") OR IF aCat.Exist("TrayIcon") OR IF aCat.Exist("Applet") OR IF aCat.Exist("Shell") THEN
  
    FOR EACH sCat IN aCat
      IF sCat = "KDE" OR IF sCat = "GNOME" OR IF sCat = "ROX" OR IF sCat = "XFCE" THEN
        aOnly.Add(sCat)
      ENDIF
    NEXT
    
    IF aOnly.Count THEN PRINT #hFile, "ShowOnlyIn="; aOnly.Join(";"); ";"
    
  ENDIF
  
END

PRIVATE SUB RunCommand(sCmd AS String, OPTIONAL sDir AS String)
  
  AddLog(sCmd)
  $sOutput = ""
  $bEnd = FALSE
  IF sDir THEN
    SHELL "(cd " & SConv(Quote.Shell(sDir)) & ";" & sCmd & ") 2>&1" FOR READ 'TO sOutput
  ELSE
    SHELL sCmd & " 2>&1" FOR READ 
  ENDIF
  REPEAT
    SLEEP 0.01 
    WAIT
  UNTIL $bEnd
  
END

PRIVATE FUNCTION MakePackage(sSys AS String) AS Boolean

  AddLog(Subst(("Creating package for &1."), FMakeInstall.GetSystemName(sSys)))

  InitMake(sSys)
  
  SELECT CASE sSys
  
    CASE "mandriva", "fedora", "suse"
      MakeRpmPackage(sSys)
  
    CASE "debian", "ubuntu"
      MakeDebPackage(sSys)
      
    CASE "slackware"
      MakeTgzPackage(sSys)
   
    CASE "autotools"
      MakeAutotoolsPackage(sSys)
       
    DEFAULT
      RETURN TRUE
    
  END SELECT
  
CATCH

  AddLog(("The package build has failed.") & "\n" & Error.Where & ": " & Error.Text)
  FGambas.Error(("The package build has failed."))
  Application.Busy = 0
  RETURN TRUE

END

PRIVATE FUNCTION MakeDebPackage(sSys AS String)

  DIM sBuildDir AS String
  DIM hFile AS File
  DIM sPrefix AS String
  DIM sCmd AS String
  DIM sIcon AS String
  DIM sData AS String
  DIM sLib AS String
  DIM sPackage AS String
  DIM sArch AS String
  DIM sPackagePath AS String
  DIM aLine AS String[]
  DIM n AS Integer
      
  INC Application.Busy
  
  $sName = Replace$($sName, "_", "-")
  sIcon = $sPackageName & ".png"

  ' Step 1. Create the build directory

  AddLog(("Making build directory.")) 
  sPackagePath = Path &/ Subst("&1-&2", $sPackageName, $sVersion)
  TRY SHELL "mkdir -p " & sPackagePath &/ "src" WAIT
  
  sArch = sPackagePath &/ "src/raw.tar.gz"
  Project.StretchIcon(Project.Dir &/ Project.Icon, 48).Save(Project.Dir &/ sIcon)
  
  Project.MakeSourcePackageTo(sArch)
  
  sCmd = "cd " & Quote.Shell(sPackagePath &/ "src") & "; tar xzf raw.tar.gz >/dev/null" 
  SHELL sCmd WAIT 
  
  ' Rename the source archive project directory to the package name
  'TRY MOVE Path &/ (sPrefix & Subst("&1", Project.Name)) TO sPackagePath
  TRY KILL sArch
  TRY SHELL "cp -Rf " & sPackagePath & " " & sPackagePath & ".orig"
  

  TRY MKDIR sPackagePath &/ "debian"

  ' Step 2. Make the desktop file
  IF NOT Project.CreateComponent THEN
      AddLog(("Creating desktop file..."))
      hFile = OPEN sPackagePath &/ "debian/" & $sPackageName & ".desktop" FOR CREATE

      PRINT #hFile, "[Desktop Entry]"
      PRINT #hFile, "Version=1.0"
      PRINT #hFile, "Encoding=UTF-8"
      PRINT #hFile, "Name=";    
      IF Project.Title THEN
       PRINT #hFile, Project.Title
      ELSE
        PRINT #hFile, Project.Name
      ENDIF
      PRINT #hFile, "Comment=";    
      IF $sDescription THEN
        PRINT #hFile, Replace($sDescription, "\n", " ")
      ELSE
        PRINT #hFile, Project.Name
      ENDIF
      PRINT #hFile, "Exec=/usr/bin/"; $sName & ".gambas"
      PRINT #hFile, "Icon=/usr/share/pixmaps/" & sIcon
      PRINT #hFile, "Terminal="; IIf(IsConsoleProject(), "true", "false")
      PRINT #hFile, "Type=Application"
      PRINT #hFile, "StartupNotify=true"
      PRINT #hFile, "Categories="; $sCategories
      PrintOnlyShowIn(hFile, $sCategories)
      CLOSE #hFile
  ENDIF 
  'Step 3. Create debianization needed files: control, rules
  'debian/copyright

  AddLog(("Sources are being debianizated."))
  hFile = OPEN sPackagePath &/ "debian/copyright" FOR CREATE 
  PRINT #hFile, "This package was debianized by " & Project.Maintainer & " <" & Project.Address & "> on"
  PRINT #hFile, Format$(Date, "ddd, dd mmm yyyy hh:nn:ss") & "+0000"
  PRINT #hFile
  PRINT #hFile, "Copyright Holder: " & Project.Maintainer & " <" & Project.Address & ">"
  PRINT #hFile
  PRINT #hFile, "License:"
  PRINT #hFile
  PRINT #hFile, If(Project.License, Project.License, "GNU General Public License") 
  CLOSE #hFile
  
  'debian/changelog
  hFile = OPEN sPackagePath &/ "debian/changelog" FOR CREATE 
  PRINT #hFile, ChangelogToDebChangelog()
  CLOSE #hFile

  'debian/compat
  hFile = OPEN sPackagePath &/ "debian/compat" FOR CREATE 
  PRINT #hFile, "5"
  CLOSE #hFile
    
  'debian/menu
  IF NOT Project.CreateComponent THEN
      hFile = OPEN sPackagePath &/ "debian/menu" FOR CREATE 
      PRINT #hFile, "?package(controlaula):needs=\""; IIf(IsConsoleProject(), "text", "X11"); "\" section \"Apps/" & Project.Groups[sSys]; "\"\\"
      PRINT #hFile, "title=\""; IIf(Project.Title <> "", Project.Title, Project.Name); "\"\\" 
      PRINT #hFile, "command=\"/usr/bin/"; $sPackageName; ".gambas\"\\"
      PRINT #hFile, "icon=\"/usr/share/pixmaps/"; sIcon; "\""
      CLOSE #hFile
  ENDIF 
  
  'debian/dirs
  hFile = OPEN sPackagePath &/ "debian/dirs" FOR CREATE
  IF Project.CreateComponent THEN
      PRINT #hFile, "usr/share/gambas"; System.Version; "/info\nusr/lib/gambas"; System.Version 
      IF Exist(Project.Dir &/ "control") THEN PRINT #hFile, "usr/share/gambas"; System.Version; "/control/"; Quote.Shell($sName)
  ELSE 
      PRINT #hFile, "usr/bin\nusr/share/applications\nusr/share/pixmaps"  
  ENDIF 
  CLOSE #hFile
  
  'debian/install
  hFile = OPEN sPackagePath &/ "debian/install" FOR CREATE
  IF Project.CreateComponent THEN 
      PRINT #hFile, "src/"; $sName; "/"; $sName; ".gambas usr/lib/gambas" & System.Version
      IF Exist(Project.Dir &/ "control") THEN PRINT #hFile, "src/"; $sName; "/control/*.png usr/share/gambas" & System.Version &/ "control" &/ Quote.Shell($sName)    
  ELSE 
      PRINT #hFile, "src/"; $sName; "/"; $sName; ".gambas usr/bin"
      PRINT #hFile, "src/"; $sName; "/"; sIcon; " usr/share/pixmaps"
      PRINT #hFile, "debian/"; $sPackageName; ".desktop usr/share/applications"
  ENDIF
  CLOSE #hFile  
 
  'debian/control
  hFile = OPEN sPackagePath &/ "debian/control" FOR CREATE
  PRINT #hFile, "Source: "; $sPackageName
  PRINT #hFIle, "Section: "; Split(Project.Groups[sSys], "/")[0]
  PRINT #hFile, "Priority: optional"
  PRINT #hFile, "Maintainer: "; Project.Maintainer; " <"; Project.Address; ">"
  PRINT #hFile, "Build-Depends: debhelper (>= 5.0.0), gambas2-dev (>= "; MIN_VERSION; "), gambas2-dev (<< "; MAX_VERSION; ")";
  FOR EACH sLib IN GetDependencies()
    PRINT #hFile, ", "; sLib; " (>= "; MIN_VERSION; "), "; sLib; " (<< "; MAX_VERSION; ")";
  NEXT 
  PRINT #hFile
  PRINT #hFile, "Standards-Version: 3.7.2"
  PRINT #hFile
  PRINT #hFile, "Package: "; $sPackageName
  PRINT #hFile, "Architecture: all"
  PRINT #hFile, "Depends: gambas2-runtime (>= "; MIN_VERSION; "), gambas2-runtime (<< "; MAX_VERSION; ")";
  IF NOT Project.CreateComponent THEN
      FOR EACH sLib IN GetDependencies()
        PRINT #hFile, ", "; sLib; " (>= "; MIN_VERSION; "), "; sLib; " (<< "; MAX_VERSION; ")";
      NEXT 
  ENDIF 
  PRINT #hFile
  aLine = Split($sDescription, "\n")
  IF aline.Count = 0 THEN 
    PRINT #hFile, "Description: This is ";
    IF Project.Title THEN 
      PRINT #hFile, Project.Title
    ELSE 
      PRINT #hFile, Project.Name
    ENDIF 
  ELSE 
    PRINT #hFile, "Description:"; IIf(Len(aLine[0]) > 60, Left$(aLine[0], 60), aLine[0])
    FOR n = 1 TO aLine.Count - 1  
      PRINT #hFile, " "; Trim(aLine[n])
    NEXT 
  ENDIF
  IF Project.CreateComponent THEN
    PRINT #hFile, " This is a Gambas2 component written in Gambas"
  ELSE 
      PRINT #hFile, " This program is written in Gambas"
  ENDIF 
  CLOSE #hFile
  
  'debian/rules
  hFile = OPEN sPackagePath &/ "debian/rules" FOR CREATE
  PRINT #hFile, "#!/usr/bin/make -f"
  PRINT #hFile, "build: build-stamp\nbuild-stamp:"
  PRINT #hFile, "\tdh_testdir\n\ttouch build-stamp"
  PRINT #hFile, "\t"; Project.GetCompileCommand(TRUE, NOT Project.KeepDebugInfo, FALSE) & " src" &/ $sName
  PRINT #hFile, "\tgba"; System.Version & " src" &/ $sName
  PRINT #hFile
  PRINT #hFile, "clean:"
  PRINT #hFile, "\tdh_testdir\n\tdh_testroot\n\trm -Rf `find . -name \".gambas\"`"  
  PRINT #hFile, "\trm -Rf `find . -name \"*.gambas\"`\n"
  PRINT #hFile, "\trm -f build-stamp install-stamp\n\tdh_clean"
  PRINT #hFile 
  PRINT #hFile, "install: build\n\tdh_testdir\n\tdh_testroot\n\tdh_clean -k\n"
  PRINT #hFile, "\tdh_installdirs\n" 
  IF Project.CreateComponent THEN 
      PRINT #hFile, "\tcp src" &/ $sName & "/.component  $(CURDIR)/debian/" & $sPackageName & "/usr/lib/gambas" & System.Version & "/" & Quote.Shell($sName) & ".component"
      PRINT #hFile, "\tcp src" &/ $sName & "/.info  $(CURDIR)/debian/" & $sPackageName & "/usr/share/gambas" & System.Version & "/info/" & Quote.Shell($sName) & ".info " ""
      PRINT #hFile, "\tcp src" &/ $sName & "/.list  $(CURDIR)/debian/" & $sPackageName & "/usr/share/gambas" & System.Version & "/info/" & Quote.Shell($sName) & ".list"
  ENDIF 
  PRINT #hFile, "\ttouch install-stamp"
  PRINT #hFile
  PRINT #hFile, "binary-arch: build install\n\tdh_testdir"
  PRINT #hFile
  PRINT #hFile, "binary-indep: build install"
  PRINT #hFile, "\tdh_testdir -i\n\tdh_testroot -i\n\tdh_installdocs -i"
  PRINT #hFile, "\tdh_installchangelogs -i\n\tdh_install -i\n\tdh_installmenu"
  PRINT #hFile, "\tdh_compress -i\n\tdh_fixperms -i"
  PRINT #hFile, "\tdh_installdeb -i\n\tdh_gencontrol -i"
  PRINT #hFile, "\tdh_md5sums -i\n\tdh_builddeb -i"
  PRINT #hFile
  PRINT #hFile, "binary: binary-indep binary-arch"
  PRINT #hFile, ".PHONY: build clean binary-indep binary-arch binary install"
  CLOSE #hFile
  TRY SHELL "chmod +x " & sPackagePath &/ "debian/rules" WAIT

  ' Step 4. Build package

  AddLog(("Creating package..."))
  sCmd = "cd " & Quote.Shell(sPackagePath) & "; fakeroot dpkg-buildpackage -d"
  SHELL sCmd WAIT FOR READ
  IF Process.LastValue > 2 THEN Error.Raise(("'dpkg-buildpackage' has failed."))


  TRY SHELL "rm -Rf " & Quote.Shell(sPackagePath) WAIT
  TRY SHELL "rm -f " & Quote.Shell(Path) &/ "*.dsc.asc" WAIT 

  DEC Application.Busy

END

PRIVATE SUB ChangelogToDebChangelog() AS String
 
  DIM aLine AS String[]
  DIM sLine AS String
  DIM debChangelog AS String
  DIM sDate AS String
  DIM sVersion AS String
  DIM sBits AS String[]
  DIM previousLine AS String
  
  aLine = Split(ChangeLog, "\n")  
  FOR EACH sLine IN aLine
    IF Left$(sLine, 1) = "*" THEN 
      IF sDate <> "" THEN
        'Debian packages don't accept an empty changelog line for the release:
        IF previousLine = $sPackageName & " (" & sVersion & ") unstable; urgency=low" & "\n\n" THEN 
          debChangelog = debChangelog & "  * New release version\n"
        ENDIF   
        debChangelog = debChangelog & "\n -- " & Project.Maintainer & " <" & Project.Address & ">  " & sDate & "\n\n"
      ENDIF
      sbits = Split(Trim$(sLine), " ")
      sDate = sbits[1] & ", " & sbits[3] & " " & sbits[2] & " " & sbits[4] & " 12:00:00 +0000"
      'sVersion = GetDebVersion()
      sVersion = $sVersion & "-1"
      previousLine = $sPackageName & " (" & sVersion & ") unstable; urgency=low" & "\n\n"
      debChangelog = debChangelog & previousLine
    ELSE 
      IF Trim$(sLine) <> "" THEN
        previousLine = "  * " & Right$(sLine, Len(sLine) - 2) & "\n" 
        debChangelog = debChangelog & previousLine    
      ENDIF
    ENDIF   
  NEXT 
  
  debChangelog = debChangelog & "\n -- " & Project.Maintainer & " <" & Project.Address & ">  " & sDate & "\n"
   
  RETURN debChangelog 

END


PRIVATE FUNCTION MakeRpmPackage(sSys AS String) 

  DIM sSrc AS String
  DIM sDir AS String
  DIM sCmd AS String
  DIM hFile AS File
  DIM sArch AS String
  DIM sOutput AS String
  DIM sLang AS String
  DIM sPackage AS String
  DIM sVersionSuffix AS String
  DIM sIcon AS String
  DIM sDistribution AS String
  DIM sVendor AS String
  DIM sRelease AS String
  DIM sLib AS String
  DIM sMacro AS String

  INC Application.Busy

  SELECT CASE sSys

    CASE "mandriva"
      sDistribution = "Mandriva"
      sVendor = "MandrivaSoft"
      sVersionSuffix = "mdv"

    CASE "fedora"
      sDistribution = "Fedora"
      sVendor = "Fedora"
      sVersionSuffix = ""

    CASE "suse"
      sDistribution = "SuSE Linux"
      sVendor = "SuSE Linux AG"
      sVersionSuffix = "suse"

  END SELECT
  
    ' step 1, set up RPM dirs and macros if they're not there already

  AddLog(("Initializing ~/RPM directory."))

  FOR EACH sCmd IN ["RPM/", "RPM/BUILD/", "RPM/RPMS/", "RPM/SOURCES/", "RPM/SPECS/", "RPM/SRPMS/", "RPM/tmp/"]
    TRY MKDIR $sHome &/ sCmd
  NEXT

  hFile = OPEN $sHome &/ ".rpmmacros" FOR CREATE
  PRINT #hFile, "%_topdir " & $sHome &/ "RPM"
  PRINT #hFile, "%_tmppath " & $sHome &/ "RPM/tmp"
    'PRINT #hFile, "%_signature gpg"
    'PRINT #hFile, "%_gpg_name Mandrivalinux"
    'PRINT #hFile, "%_gpg_path ~/.gnupg"
  PRINT #hFile, "%packager "; Project.Maintainer & "<" & SConv(Project.Address) & ">"
  PRINT #hFile, "%buildhost "; System.Host
  PRINT #hFile, "%distribution "; sDistribution
  PRINT #hFile, "%vendor "; If(Project.Vendor, Project.Vendor, sVendor)
  CLOSE #hFile

    ' step 2, write source tarball (with bzip) to SOURCES dir

  AddLog(("Creating source package."))

  sSrc = $sHome &/ "RPM/SOURCES"

  sDir = Project.Dir &/ ".icon"
  SHELL "rm -rf " & Quote.Shell(sDir) WAIT
  TRY MKDIR sDir

    ' IF Project.Icon THEN
    '   hIcon = Image.Load(Project.Dir &/ Project.Icon)
    ' ELSE
    '   hIcon = Image.Load("img/32/gambas.png")
    ' ENDIF

  Project.StretchIcon(Project.Dir &/ Project.Icon, 16).Save(sDir &/ "16.png")
  Project.StretchIcon(Project.Dir &/ Project.Icon, 32).Save(sDir &/ "32.png")
  Project.StretchIcon(Project.Dir &/ Project.Icon, 48).Save(sDir &/ "48.png")
  Project.StretchIcon(Project.Dir &/ Project.Icon, 64).Save(sDir &/ "64.png")

  sArch = sSrc &/ Subst("&1-&2.tar.bz2", $sPackageName, $sVersion)
  Project.MakeSourcePackageTo(sArch)

  SHELL "rm -rf " & Quote.Shell(sDir) WAIT

  AddLog(("Creating .spec file."))

  hFile = OPEN $sHome &/ "RPM/SPECS" &/ $sPackageName & ".spec" FOR CREATE

  PRINT #hFile, "%define name " & $sPackageName
  PRINT #hFile, "%define version " & $sVersion
  sRelease = "1" & sVersionSuffix
  PRINT #hFile, "%define release "; sRelease
  
  PRINT #hFile
  PRINT #hFile, "Summary: " & IIf(Project.Title, Project.Title, "Gambas project " & Project.Name)
  PRINT #hFile, "Name: %{name}"
  PRINT #hFile, "Version: %{version}"
  PRINT #hFile, "Release: %{release}"
  PRINT #hFile, "Source0: %{name}-%{version}.tar.bz2"
  PRINT #hFile, "License: "; If(Project.License, Project.License, "GPL")
  PRINT #hFile, "Group: " & Project.Groups[sSys]
  PRINT #hFile, "BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot"
  PRINT #hFile, "Prefix: %{_prefix}"
    'PRINT #hFile, "BuildRequires: gambas2-ide"
  PRINT #hFile, "BuildArch: noarch"

  PRINT #hFile, "Requires: gambas2-runtime >= "; MIN_VERSION; ",gambas2-runtime < "; MAX_VERSION;

  IF NOT Project.CreateComponent THEN 
  
    FOR EACH sLib IN GetDependencies()
      PRINT #hFile, ","; sLib; " >= "; MIN_VERSION;
      PRINT #hFile, ","; sLib; " < "; MAX_VERSION;
    NEXT
  
  ENDIF

  PRINT #hFile

  PRINT #hFile, "AutoReqProv: no"

  PRINT #hFile, "\n%description\n" & $sDescription & "\nThis program is written in Gambas, so you will need Gambas to be installed."

  PRINT #hFile, "\n%prep"
  PRINT #hFile, "rm -rf %{buildroot}"

  PRINT #hFile, "\n%setup -q -n " & Quote.Shell($sName)

  IF Project.CreateComponent THEN

    ' Components must be installed in Gambas prefix, which is not known at package creation time.
    ' How can we do that? Hardcode installation path according to the distribution?

    PRINT #hFile, "\n%build"
    PRINT #hFile, Project.GetCompileCommand(TRUE, NOT Project.KeepDebugInfo, FALSE) & "\ngba"; System.Version
     
    PRINT #hFile, "\n%install"
     
    PRINT #hFile, "install -d %{buildroot}/%{_libdir}/gambas"; System.Version
    PRINT #hFile, "install -p "; Quote.Shell($sName); ".gambas %{buildroot}/%{_libdir}/gambas" & System.Version; "/"; Quote.Shell($sName); ".gambas"
    PRINT #hFile, "install -p .component %{buildroot}/%{_libdir}/gambas"; System.Version; "/"; Quote.Shell($sName); ".component"

    PRINT #hFile, "install -d %{buildroot}/%{_datadir}/gambas"; System.Version; "/info"
    PRINT #hFile, "install -p .info %{buildroot}/%{_datadir}/gambas"; System.Version; "/info/"; Quote.Shell($sName); ".info"
    PRINT #hFile, "install -p .list %{buildroot}/%{_datadir}/gambas"; System.Version; "/info/"; Quote.Shell($sName); ".list"

    IF Exist(Project.Dir &/ "control") THEN 
      PRINT #hFile, "install -d %{buildroot}/%{_datadir}/gambas"; System.Version; "/control/"; Quote.Shell($sName)
      PRINT #hFile, "install -p "; "control/*.png %{buildroot}/%{_datadir}/gambas" & System.Version &/ "control" &/ Quote.Shell($sName)
    ENDIF

  ELSE 
  
    PRINT #hFile, "\n%build"
    PRINT #hFile, Project.GetCompileCommand(TRUE, NOT Project.KeepDebugInfo, FALSE) & "\ngba"; System.Version
  
    PRINT #hFile, "\n%install"
  
    PRINT #hFile, "install -d %{buildroot}/%{_bindir}"
    PRINT #hFile, "install -p "; Quote.Shell($sName); ".gambas %{buildroot}/%{_bindir}" &/ Quote.Shell($sName)

    sIcon = Quote.Shell($sName) & ".png"
  
    ' NOTE: There are explicit references to /usr/share.
    '       I must find a way to use the rpm macros instead.
  
    SELECT CASE sSys
  
      CASE "mandriva"
  
        PRINT #hFile, "install -d %{buildroot}/%{_miconsdir}"
        PRINT #hFile, "install -d %{buildroot}/%{_iconsdir}"
        PRINT #hFile, "install -d %{buildroot}/%{_liconsdir}"
        PRINT #hFile, "install -p .icon/16.png %{buildroot}/%{_miconsdir}" &/ sIcon
        PRINT #hFile, "install -p .icon/32.png %{buildroot}/%{_iconsdir}" &/ sIcon
        PRINT #hFile, "install -p .icon/48.png %{buildroot}/%{_liconsdir}" &/ sIcon
  
        PRINT #hFile, "install -d %{buildroot}/%{_datadir}/applications"
        PRINT #hFile, "cat << EOF > %{buildroot}/%{_datadir}/applications/%{name}.desktop"
        PRINT #hFile, "[Desktop Entry]"
        PRINT #hFile, "Version=1.0"
        PRINT #hFile, "Encoding=UTF-8"
        PRINT #hFile, "Name=";    
        IF Project.Title THEN
          PRINT #hFile, Project.Title
        ELSE
          PRINT #hFile, Project.Name
        ENDIF
        PRINT #hFile, "Comment=";    
        IF $sDescription THEN
          PRINT #hFile, Replace($sDescription, "\n", " ")
        ELSE
          PRINT #hFile, Project.Name
        ENDIF
        PRINT #hFile, "Exec=%{_bindir}/"; Quote.Shell($sName)
        PRINT #hFile, "Icon="; sIcon
        PRINT #hFile, "Terminal="; IIf(IsConsoleProject(), "true", "false")
        PRINT #hFile, "Type=Application"
        PRINT #hFile, "StartupNotify=true"
        PRINT #hFile, "Categories=X-MandrivaLinux-"; Replace(Replace(Project.Menus[sSys], " ", ""), "/", "-"); ";"; $sCategories
        PrintOnlyShowIn(hFile, $sCategories)
        PRINT #hFile, "EOF"
  
        PRINT #hFile, "\n%post"
        PRINT #hFile, "%{update_menus}"
  
        PRINT #hFile, "\n%postun"
        PRINT #hFile, "%{clean_menus}"
  
      CASE "fedora"
  
        PRINT #hFile, "install -d %{buildroot}/%{_datadir}/pixmaps"
        PRINT #hFile, "install -d %{buildroot}/%{_datadir}/applications"
        PRINT #hFile, "install -p .icon/48.png %{buildroot}/%{_datadir}/pixmaps" &/ sIcon
  
        PRINT #hFile, "cat << EOF > %{buildroot}%{_datadir}/applications/%{name}.desktop"
        PRINT #hFile, "[Desktop Entry]"
        PRINT #hFile, "Version=1.0"
        PRINT #hFile, "Encoding=UTF-8"
        PRINT #hFile, "Name=";    
        IF Project.Title THEN
          PRINT #hFile, Project.Title
        ELSE
          PRINT #hFile, Project.Name
        ENDIF
        PRINT #hFile, "Comment=";    
        IF $sDescription THEN
          PRINT #hFile, Replace($sDescription, "\n", " ")
        ELSE
          PRINT #hFile, Project.Name
        ENDIF
        PRINT #hFile, "Exec=%{_bindir}/"; Quote.Shell($sName)
        PRINT #hFile, "Icon="; sIcon
        PRINT #hFile, "Terminal="; IIf(IsConsoleProject(), "true", "false")
        PRINT #hFile, "Type=Application"
        PRINT #hFile, "StartupNotify=true"
        PRINT #hFile, "Categories=X-RedHat-Extra;"; $sCategories
        PrintOnlyShowIn(hFile, $sCategories)
        PRINT #hFile, "EOF"
  
      CASE "suse"
  
        PRINT #hFile, "install -d %{buildroot}/%{_datadir}/pixmaps"
        PRINT #hFile, "install -d %{buildroot}/%{_datadir}/applications"
        PRINT #hFile, "install -p .icon/48.png %{buildroot}/%{_datadir}/pixmaps" &/ sIcon
  
        PRINT #hFile, "cat << EOF > %{buildroot}%{_datadir}/applications/%{name}.desktop"
        PRINT #hFile, "[Desktop Entry]"
        PRINT #hFile, "Version=1.0"
        PRINT #hFile, "Encoding=UTF-8"
        PRINT #hFile, "Name=";    
        IF Project.Title THEN
          PRINT #hFile, Project.Title
        ELSE
          PRINT #hFile, Project.Name
        ENDIF
        PRINT #hFile, "Comment=";    
        IF $sDescription THEN
          PRINT #hFile, Replace($sDescription, "\n", " ")
        ELSE
          PRINT #hFile, Project.Name
        ENDIF
        PRINT #hFile, "Exec=%{_bindir}/"; Quote.Shell($sName)
        PRINT #hFile, "Icon="; sIcon
        PRINT #hFile, "Terminal="; IIf(IsConsoleProject(), "true", "false")
        PRINT #hFile, "Type=Application"
        PRINT #hFile, "StartupNotify=true"
        PRINT #hFile, "Categories="; $sCategories
        PrintOnlyShowIn(hFile, $sCategories)
        PRINT #hFile, "EOF"
  
    END SELECT
    
  ENDIF

  PRINT #hFile, "\n%clean"
  PRINT #hFile, "rm -rf %{buildroot}"

  PRINT #hFile, "\n%files"
  PRINT #hFile, "%defattr(-,root,root)"
  
  IF Project.CreateComponent THEN
  
    PRINT #hFile, "%{_libdir}/gambas"; System.Version; "/"; Quote.Shell($sName); ".gambas"
    PRINT #hfile, "%{_libdir}/gambas"; System.Version; "/"; Quote.Shell($sName); ".component"  
    
    PRINT #hFile, "%{_datadir}/gambas"; System.Version; "/info/"; Quote.Shell($sName); ".info"
    PRINT #hFile, "%{_datadir}/gambas"; System.Version; "/info/"; Quote.Shell($sName); ".list"

    IF Exist(Project.Dir &/ "control") THEN 
      PRINT #hFile, "%{_datadir}/gambas"; System.Version; "/control/"; Quote.Shell($sName); "/*.png"
    ENDIF

  ELSE
  
    PRINT #hFile, "%{_bindir}" &/ Quote.Shell($sName)
  
    SELECT CASE sSys
  
      CASE "mandriva"
  
        PRINT #hFile, "/%{_miconsdir}" &/ sIcon
        PRINT #hFile, "/%{_iconsdir}" &/ sIcon
        PRINT #hFile, "/%{_liconsdir}" &/ sIcon
              'PRINT #hFile, "/%{_menudir}" &/ sName
        PRINT #hFile, "/%{_datadir}/applications/%{name}.desktop"
      
      CASE "fedora"
  
        PRINT #hFile, "%{_datadir}/pixmaps" &/ sIcon
        PRINT #hFile, "%{_datadir}/applications/%{name}.desktop"
  
      CASE "suse"
  
        PRINT #hFile, "%{_datadir}/pixmaps" &/ sIcon
        PRINT #hFile, "%{_datadir}/applications/%{name}.desktop"
  
    END SELECT
    
  ENDIF

  PRINT #hFile, "\n%changelog\n"
  PRINT #hFile, ChangeLog

  CLOSE #hFile

    ' and step 4.... build that sucker.

  AddLog(("Creating package...") & "\n")

  sLang = System.Language
  System.Language = "C"

  sCmd = RPMBUILD_PROG & " -ba " & Quote.Shell($sHome &/ "RPM/SPECS" &/ $sPackageName & ".spec")
  AddLog(sCmd)

    'sTemp = Temp$
  $sOutput = ""
  $bEnd = FALSE
  SHELL sCmd & " 2>&1" WAIT FOR READ 'TO sOutput
    ' REPEAT
    '   SLEEP 0.01
    '   WAIT
    ' UNTIL $bEnd
  
  AddLog("")
  
  sOutput = Replace($sOutput, "\r", "")
  TRY sOutput = DConv(sOutput)

  TRY KILL $sHome &/ ".rpmmacros"

  System.Language = sLang

  DEC Application.Busy

  IF Process.LastValue THEN Error.Raise(("'rpmbuild' has returned the following error code:") & " " & Process.LastValue)

  FOR EACH sCmd IN Split(sOutput, "\n")
    IF Left(sCmd, 6) = "Wrote:" AND Right$(sCmd, 10) = "noarch.rpm" THEN

      sPackage = Subst("&1-&2-&3.noarch.rpm", $sPackageName, $sVersion, sRelease)
            ' IF sSys = "debian" THEN
            '   SHELL "cd " & Quote.Shell(sHome &/ "RPM/RPMS/noarch") & "; fakeroot " & ALIEN_PROG & " --to-deb -k " & Quote.Shell(sPackage) WAIT
            '   sPackage = sPrefix & Subst("&1_&2.&3-&4_all.deb", LCase(Project.Name), Project.MajorVersion, Project.MinorVersion, sRelease)
            '   IF NOT Exist(sHome &/ "RPM/RPMS/noarch" &/ sPackage) THEN Error.Raise("alien command has failed")
            ' ENDIF
      MoveFile($sHome &/ "RPM/RPMS/noarch" &/ sPackage, Path &/ sPackage)
      AddLog(sPackage)

      sPackage = Subst("&1-&2-&3.src.rpm", $sPackageName, $sVersion, sRelease)
            ' IF sSys = "debian" THEN
            '   SHELL "cd " & Quote.Shell(sHome &/ "RPM/SRPMS") & "; fakeroot alien --to-deb -k " & Quote.Shell(sPackage) WAIT
            '   sPackage = sPrefix & Subst("&1_&2.&3-&4_all.deb", LCase(Project.Name), Project.MajorVersion, Project.MinorVersion, sRelease)
            '   IF NOT Exist(sHome &/ "RPM/SRPMS" &/ sPackage) THEN Error.Raise("alien command has failed")
            '   MoveFile(sHome &/ "RPM/SRPMS" &/ sPackage, Path &/ File.BaseName(sPackage) & ".src.deb")
            ' ELSE
      MoveFile($sHome &/ "RPM/SRPMS" &/ sPackage, Path &/ sPackage)
      AddLog(sPackage)
            ' ENDIF

    END IF
  NEXT

END

PRIVATE SUB PrintSlackDescRuler(hFile AS File)
  
  DIM sLine AS String
  
  sLine = Space(Len($sPackageName)) & "|-----handy-ruler" & String$(76, "-")
  sLine = Left(sLine, 75) & "|"
  PRINT #hFile, sLine
  
END

PRIVATE SUB PrintSlackDesc(hFile AS File, sLine AS String)
  
  sLine = $sPackageName & ": " & sLine
  sLine = Left(sLine, 76)
  PRINT #hFile, sLine
  
END


PRIVATE SUB PrintSlackDescContents(hFile AS File, sData AS String, nLine AS Integer)

  DIM sLine AS String
  DIM iPos AS Integer
    
  WHILE nLine
    IF sData THEN
      sLine = Left(sData, 76 - Len($sPackageName) - 2)
      iPos = RInStr(sLine, " ")
      IF iPos THEN sLine = RTrim(Left(sLine, iPos - 1))
      sData = LTrim(Mid$(sData, Len(sLine) + 1))
    ELSE
      sLine = ""
    ENDIF
    PrintSlackDesc(hFile, sLine)
    DEC nLine
  WEND
  
END

PRIVATE SUB MakeTgzPackage(sSys AS String)

  DIM sDistribution AS String
  DIM sVendor AS String
  DIM sBuildDir AS String
  DIM hFile AS File
  DIM sPrefix AS String
  DIM sCmd AS String
  DIM sIcon AS String
  DIM sData AS String
  DIM sLib AS String
  DIM sPackage AS String
  DIM sFile AS String 
      
  INC Application.Busy

  sDistribution = "Slackware"
  sVendor = "Slackware"
  
  ' 1. Create the temporary build directory

  AddLog(("Making build directory."))

  sBuildDir = File.SetExt(Temp$("slackware"), "")
  SHELL "rm -rf " & sBuildDir WAIT
  MKDIR sBuildDir

  IF Project.CreateComponent THEN 
  
    FOR EACH sCmd IN ["/usr", "/usr/lib", "/usr/lib/gambas" & System.Version, "/usr/share", "/usr/share/gambas" & System.Version, "/usr/share/gambas" & System.Version & "/info", "/install"]
      TRY MKDIR sBuildDir &/ sCmd
    NEXT

  ELSE

    FOR EACH sCmd IN ["/usr", "/usr/bin", "/usr/share", "/usr/share/applications", "/usr/share/pixmaps", "/install"]
      TRY MKDIR sBuildDir &/ sCmd
    NEXT
  
  ENDIF

  IF Project.CreateComponent THEN 
  
    ' 2. Copy the library, the information files and the controls
  
    COPY Project.ExecPath TO sBuildDir &/ "/usr/lib/gambas" & System.Version &/ $sName & ".gambas"
    COPY Project.Dir &/ ".component" TO sBuildDir &/ "/usr/lib/gambas" & System.Version &/ $sName & ".component"
    COPY Project.Dir &/ ".info" TO sBuildDir &/ "/usr/share/gambas" & System.Version &/ "info/" & $sName & ".info"
    COPY Project.Dir &/ ".list" TO sBuildDir &/ "/usr/share/gambas" & System.Version &/ "info/" & $sName & ".list"
  
    IF Exist(Project.Dir &/ "control") THEN 
      TRY MKDIR sBuildDir &/ "/usr/share/gambas" & System.Version & "/control"
      TRY MKDIR sBuildDir &/ "/usr/share/gambas" & System.Version & "/control/" & $sName
      FOR EACH sFile IN Dir(Project.Dir &/ "control", "*.png") 
        COPY Project.Dir &/ "control" &/ sFile TO sBuildDir &/ "/usr/share/gambas" & System.Version & "/control/" & $sName &/ sFile
      NEXT
    ENDIF
  
  ELSE

    ' 2. Copy the executable
  
      'COPY Project.Dir &/ Project.Name & ".gambas" TO sBuildDir &/ "/usr/bin" &/ Project.Name
      COPY Project.ExecPath TO sBuildDir &/ "/usr/bin" &/ $sName
      SHELL "chmod a+x " & Quote.Shell(sBuildDir &/ "/usr/bin" &/ $sName) WAIT
      
    ' 3. Copy the icon
  
    ' IF Project.Icon THEN
    '   hIcon = Image.Load(Project.Dir &/ Project.Icon)
    ' ELSE
    '   hIcon = Image.Load("img/gambas.png")
    ' ENDIF
  
    Project.StretchIcon(Project.Dir &/ Project.Icon, 48).Save(sBuildDir &/ "/usr/share/pixmaps" &/ Project.Name & ".png")
  
    ' 4. Make the desktop file
    
    sIcon = Quote.Shell($sName) & ".png"
  
    hFile = OPEN sBuildDir &/ "/usr/share/applications/" & $sPackageName & ".desktop" FOR CREATE
  
    PRINT #hFile, "[Desktop Entry]"
    PRINT #hFile, "Version=1.0"
    PRINT #hFile, "Encoding=UTF-8"
    PRINT #hFile, "Name=";    
    IF Project.Title THEN
      PRINT #hFile, Project.Title
    ELSE
      PRINT #hFile, Project.Name
    ENDIF
    PRINT #hFile, "Comment=";    
    IF $sDescription THEN
      PRINT #hFile, Replace($sDescription, "\n", " ")
    ELSE
      PRINT #hFile, Project.Name
    ENDIF
    PRINT #hFile, "Exec=/usr/bin/"; $sName
    PRINT #hFile, "Icon=/usr/share/pixmaps/"; $sName & ".png"
    PRINT #hFile, "Terminal="; IIf(IsConsoleProject(), "true", "false")
    PRINT #hFile, "Type=Application"
    PRINT #hFile, "StartupNotify=true"
    PRINT #hFile, "Categories="; $sCategories
    PrintOnlyShowIn(hFile, $sCategories)
  
    CLOSE #hFile
  
  ENDIF
  
  ' 5. Description file

  hFile = OPEN sBuildDir &/ "/install/slack-desc" FOR CREATE
  
  PRINT #hFile, File.Load("install/slack-desc-header");    
  PrintSlackDescRuler(hFile)
  PrintSlackDesc(hFile, Subst("&1 &2 &3", $sPackageName, $sVersion, Project.Title))
  PrintSlackDesc(hFile, "")
  sData = Replace($sDescription, "\n", " ")
  PrintSlackDescContents(hFile, sData, 7)
  PrintSlackDesc(hFile, "Package created by: " & Project.Maintainer)
  PrintSlackDesc(hFile, "EMail address: " & Project.Address)

  CLOSE #hFile
  
  ' 6. Dependencies
  
  hFile = OPEN sBuildDir &/ "/install/slack-required" FOR CREATE
  
  PRINT #hFile, "gambas2-runtime >= "; MIN_VERSION
  PRINT #hFile, "gambas2-runtime < "; MAX_VERSION

  IF NOT Project.CreateComponent THEN

    FOR EACH sLib IN GetDependencies()
      PRINT #hFile, sLib; " >= "; MIN_VERSION
      PRINT #hFile, sLib; " < "; MAX_VERSION
    NEXT
    
  ENDIF
  
  CLOSE #hFile
  
  ' 7. Create package
  
  AddLog(("Creating package...") & "\n")

  sCmd = TAR_1_13_PROG & " --exclude=slackware.tgz --owner=root --group=root -c -z -f slackware.tgz ."
  RunCommand(sCmd, sBuildDir)
  ' AddLog(sCmd)
  ' $sOutput = ""
  ' $bEnd = FALSE
  ' SHELL "(cd " & SConv(Quote.Shell(sBuildDir)) & ";" & sCmd & ") 2>&1" FOR READ 'TO sOutput
  ' REPEAT
  '   SLEEP 0.01 
  '   WAIT
  ' UNTIL $bEnd
  
  DEC Application.Busy

  IF Process.LastValue THEN Error.Raise(("'tar' has returned the following error code:") & " " & Process.LastValue)

  AddLog("")
  sPackage = sPrefix & Subst("&1-&2-noarch-1.tgz", $sPackageName, $sVersion)
  MoveFile(sBuildDir &/ "slackware.tgz", Path &/ sPackage)
  AddLog(sPackage)

END

PRIVATE SUB MakeAutotoolsPackage(sSys AS String)

  DIM sBuildDir AS String
  DIM sFile AS String
  DIM hFile AS File
  DIM sCmd AS String
  DIM sPackage AS String
  
  ' 1. Create the temporary build directory

  AddLog(("Making build directory."))
  INC Application.Busy

  sBuildDir = File.SetExt(Temp$("autotools"), "")
  SHELL "rm -rf " & sBuildDir WAIT
  MKDIR sBuildDir
  
  ' 2. Copy needed files 

  TRY sCmd = Scan(Project.GetCompileCommand(TRUE, NOT Project.KeepDebugInfo, FALSE), "*/bin/gbc" & System.Version & " *")[1]

  SHELL "cp -r " & Project.Dir & " " & sBuildDir &/ Project.Name WAIT 
  sFile = Replace(File.Load("install/acinclude.m4"), "$(VERSION)", CStr(System.Version))
  sFile = Replace(sFile, "$(PACKAGE_VERSION)", $sVersion)
  File.Save(sBuildDir &/ "acinclude.m4", sFile)
  sFile = Replace(File.Load("install/Makefile.am"), "$(VERSION)", CStr(System.Version))  
  sFile = Replace(sFile, "$(COMPILE_FLAGS)", sCmd)
  File.Save(sBuildDir &/ "Makefile.am", sFile)
  
  ' 3. Create needed files (AUTHORS, README, COPYING, NEWS, ChangeLog, configure.ac)
  
  IF Exist(sBuildDir &/ Project.Name &/ "CHANGELOG") THEN 
    MOVE sBuildDir &/ Project.Name &/ "CHANGELOG" TO sBuildDir &/ "ChangeLog"
  ENDIF  

  File.Save(sBuildDir &/ "ChangeLog", ChangeLog)
  File.Save(sBuildDir &/ "AUTHORS", Project.Maintainer & " <" & Project.Address & ">")
  File.Save(sBuildDir &/ "README", Project.Description)
  File.Save(sBuilddir &/ "COPYING", "This program is under : " & Project.License)
  File.Save(sBuilddir &/ "NEWS", "")
  
  hFile = OPEN sBuildDir &/ "configure.ac" FOR CREATE
    PRINT #hFile, "dnl -- package generated with gambas2 ide --"
    PRINT #hFile, ""
    PRINT #hFile, "AC_INIT(configure.ac)"
    PRINT #hFile, "GB_INIT_PROJECT(" & Project.Name & ")"
    PRINT #hFile, ""
    PRINT #hFile, "dnl -- create makefile --"
    PRINT #hFile, ""
    PRINT #hFile, "AC_OUTPUT(Makefile)"
  CLOSE #hFile

  ' 4. create the package
  
  AddLog(("Creating package...") & "\n")

  FOR EACH sCmd IN ["aclocal", AUTOCONF_PROG, AUTOMAKE_PROG & " -a", "./configure", "make dist"]
    ' AddLog(sCmd)
    ' $bEnd = FALSE
    ' SHELL "(cd " & SConv(Quote.Shell(sBuildDir)) & ";" & sCmd & ") 2>&1" FOR READ
    ' REPEAT
    '   SLEEP 0.01 
    '   WAIT
    ' UNTIL $bEnd
    RunCommand(sCmd, sBuildDir)
  NEXT 
  
  DEC Application.Busy
  AddLog("")

  sPackage = Dir(sBuildDir, Project.Name & "*" & $sVersion & "*")[0]
  MoveFile(sBuildDir &/ sPackage, Path &/ sPackage)
  AddLog(sPackage)
  
  ' Remove build dir
  SHELL "rm -rf " & sBuildDir WAIT
  
END

PRIVATE SUB MoveFile(sSrc AS String, sDst AS String)

  TRY KILL sDst
  TRY MOVE sSrc TO sDst
  IF ERROR THEN
    COPY sSrc TO sDst
    TRY KILL sSrc
  ENDIF
  
END

PUBLIC SUB Process_Kill()
  
  $bEnd = TRUE
  
END

PUBLIC SUB Process_Read()
  
  DIM sData AS String
  
  READ #LAST, sData, -256
  $sOutput &= sData
  FMakeInstall.AddLog(sData, TRUE)
  
END

PUBLIC SUB Process_Error(sData AS String)

  FMakeInstall.AddLog(sData, TRUE)

END

