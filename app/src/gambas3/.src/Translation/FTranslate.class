' Gambas class file

' This must be put in an external help to define.
'
'F1 = this Help
'F3 = Find NEXT
'F4 = Find NEXT untranslated String
'Shift + F4 = Find previous untranslated String
'F5 = COPY untranslated String
'F6 = This String must NOT be translated
'F7 = Verify the translation
'F8 = Clear this translation
'Ctrl+F = goes TO Find - field
'Alt+Up / Alt+Down = moves on String up / down

Private Const MODE_NONE As Integer = 0
Private Const MODE_MSGID As Integer = 1
Private Const MODE_MSGSTR As Integer = 2

Private Enum EXPORT_ALL, EXPORT_UNTRANSLATED, EXPORT_TRANSLATED

Private Const TABLE_HEIGHT_MAX As Integer = 256

Private $sLang As String
Private $sPath As String
Private $sHeader As String
Private $bModify As Boolean
Private $bIgnore As Boolean
Private $nTrans As Integer
Private $sErrMerge As String
Private cvwTranslateOrg As ColumnView
Private $bDeleteIfVoid As Boolean
Private $cCacheImport As Collection
Private $bStatValid As Boolean

Static Private $sTranslateShell As String
Static Private $sTranslateEngine As String

Static Public Sub Run()

  If Project.GetClasses().Count = 0 Then
    Message(("The project is void. There is nothing to translate."))
    Return
  Endif

  If Settings["/AutomaticTranslation/Enabled"] Then
    $sTranslateShell = System.Find("trans")
    $sTranslateEngine = Settings["/AutomaticTranslation/Engine", "google"]
  Else
    $sTranslateShell = ""
    $sTranslateEngine = ""
  Endif
  
  FTranslate.ShowModal

End

Public Sub _new()

  With cvwTranslate
    .Columns.Count = 4
    '.Columns[0].Text = ("Untranslated")
    '.Columns[2].Text = ("Comments")
  End With
  cvwTranslateOrg = New ColumnView(Me)
  With cvwTranslateOrg
    .AutoResize = False
    .Visible = False
    .Columns.Count = 4
    '.Columns[0].Text = ("Untranslated")
    '.Columns[2].Text = ("Comments")
  End With

  cvwLang.Columns[0].Text = ("Language")
  With cvwLang
    .AddColumn(("Progress"),, Align.Right)
    .AddColumn(("Not translated"),, Align.Right)
    .AddColumn(("File"))
    .AddColumn(("Size"),, Align.Right)
  End With
  
  mnuAutoTrans.Enabled = $sTranslateShell
  btnAutoTrans.Enabled = mnuAutoTrans.Enabled
  
  Project.SetSmallFont(panTransToolbar)
  Project.SetSmallFont(panToolbar)
  
End

' Private Sub GetTransCount(sLang As String) As Integer
' 
'   Dim hFile As File
'   Dim iVal As Integer
' 
'   If Not Exist(Language.GetPath(sLang, "mo")) Then Return
' 
'   hFile = Open Language.GetPath(sLang, "mo")
' 
'   iVal = Read #hFile As Integer
'   If (iVal = &H950412DE) Xor (System.ByteOrder = gb.BigEndian) Then
'     hFile.ByteOrder = gb.LittleEndian
'   Else
'     hFile.ByteOrder = gb.BigEndian
'   Endif
'   iVal = Read #hFile As Integer
'   iVal = Read #hFile As Integer
' 
'   Close #hFile
' 
'   Return iVal - 1
' 
' End

Private Sub ComputeTransStat(sLang As String, Optional nTrans As Integer)

  Dim nStr As Integer
  Dim hTrans As CTranslation

  If nTrans = 0 Then nTrans = cvwTranslateOrg.Count

  hTrans = New CTranslation(sLang)
  nStr = hTrans.Translations.Count

  With cvwLang[sLang]
    .[1] = Min(100, (nStr * 100) \ nTrans) & "% "
    .[2] = CStr(nTrans - nStr) & " "
    .[3] = sLang & ".po"
    Try .[4] = Project.GetFileSize(Stat(Language.GetPath(sLang, "po")).Size)
  End With

End

Public Sub Form_Open()

  Dim sLang As String
  Dim sPath As String

  Inc Application.Busy

  $sLang = ""

  Settings.Read(Me)

  $bStatValid = False

  cvwLang.Clear
  cmbLang.Clear
  cmbLangSource.Clear
  cmbLangSource.Add(("(Default)"))
  For Each sLang In Language.GetAll()
    If Project.HasTranslation(sLang) Then
      cvwLang.Add(sLang, Language.ToName(sLang))
      cmbLang.Add(Language.ToName(sLang))
      cmbLangSource.Add(Language.ToName(sLang))
    Endif
  Next

  sPath = Settings["/FTranslate/ImportPath"]
  If Not sPath Then sPath = System.User.Home
  dchImport.SelectedPath = sPath
  ' If IsDir(sPath) Then
  '   dchImport.SelectedPath = sPath
  ' Else
  '   dchImport.SelectedPath = sPath
  '   fvwImport.Current = File.Name(sPath)
  ' Endif
  dchImport.FileView.Filter = ["*.po", ("Translation files")]
  
  Project.SetEditorFont(txtOrig)
  Project.SetEditorFont(txtTranslate)

  Dec Application.Busy

  If SetLang() Then
    Me.Close
  Endif

  tabTranslate_Click

End

Private Sub ErrorMessage(sText As String, sDetail As String)
  
  Dim iPos As Integer
  
  sText = "<p>" & Html(Trim(sText) & "\n\n")
  sDetail = Trim(sDetail)
  If sDetail Then
    If String.Len(sDetail) > 1024 Then
      sDetail = String.Left(sDetail, 1024)
      iPos = RInStr(sDetail, "\n")
      If iPos Then sDetail = Left(sDetail, iPos - 1)
      sDetail &= "\n[...]"
    Endif
    sText &= "<font size=\"-1\"><tt>" & Html(sDetail) & "</tt></font>"
  Endif
  
  Message.Error(sText)
  
End


Private Sub SetLang(Optional sLang As String) As Boolean

  Dim sDir As String
  Dim sPath As String
  Dim sMsgId As String
  Dim iIndex As Integer
  Dim sMsg As String
  Dim sCurrent As String
  Dim sName As String
  Dim hTrans, hTransSrc As CTranslation
  Dim sLangSrc As String

  Inc Application.Busy

  sCurrent = cvwTranslate.Key

  SaveTranslate

  If Not sLang Then sLang = Language.Find(System.Language)

  sDir = Project.Dir &/ ".lang"
  sPath = Language.GetPath(sLang, "po")

  'lblFile.Text = File.Name(sPath)
  cmbLang.ToolTip = File.Name(sPath)

  $bDeleteIfVoid = False

  If Not Exist(sPath) Then
    Copy sDir &/ ".pot" To sPath
    VersionControl.AddFile(sPath)
    $bDeleteIfVoid = True
    'SHELL "cp " & Project.Quote(sDir &/ ".pot") & " " & Project.Quote(sPath) WAIT
  Else If Stat(sPath).Size = 0 Then
    $bDeleteIfVoid = True
  Else
    Try MergeMessage(sPath, Shell$(sPath) & " " & Shell$(sDir &/ ".pot"))
    If Error Then
      Try Copy sDir &/ ".pot" To sPath
      ErrorMessage(Subst$(("The '&1' command has failed."), "msgmerge"), $sErrMerge)
      'ResizeTable
      'cmbLang.Text = Language
      'Dec Application.Busy
      'Return True
    Endif
    '     SHELL "msgmerge -o " & Project.Quote(sPath & ".new") & " " & Project.Quote(sPath) & " " & Project.Quote(sDir &/ ".pot") & " > " & Project.Quote(sTemp) & " 2>&1" WAIT
    '     IF Exist(sPath & ".new") THEN
    '       KILL sPath
    '       RENAME sPath & ".new" AS sPath
    '     ELSE
    '       PRINT "msgmerge -o " & Project.Quote(sPath & ".new") & " " & Project.Quote(sPath) & " " & Project.Quote(sDir &/ ".pot") & " > " & Project.Quote(sTemp) & " 2>&1"
    '       PRINT File.Load(sTemp)
    '       Error.Raise(("The 'msgmerge' command has failed"))
    '     ENDIF
    '     TRY KILL sTemp
  Endif

  cvwTranslate.Clear
  'cvwTranslate.Columns[2].AutoResize = FALSE

  hTrans = New CTranslation(sLang)
  If cmbLangSource.Index > 0 Then
    sLangSrc = Language.FromName(cmbLangSource.Text)
    hTransSrc = New CTranslation(sLangSrc)
  Endif

  $sHeader = hTrans.Header

  For Each sMsgId In hTrans.Keys
    Inc iIndex
    If hTransSrc Then
      cvwTranslate.Add(iIndex, hTransSrc.Translations[sMsgId])
    Else
      cvwTranslate.Add(iIndex, sMsgId)
    Endif
    cvwTranslate[iIndex][1] = hTrans.Translations[sMsgId]
    cvwTranslate[iIndex][2] = hTrans.Comments[sMsgId]
    cvwTranslate[iIndex][3] = sMsgId
  Next

  $nTrans = hTrans.Translations.Count

  MakeFileChoice
  UpdateOrg(True)

  'cvwTranslate.Columns[1].Text = Language.ToName(sLang)

  txtOrig.Text = ""
  Object.Lock(txtTranslate)
  txtTranslate.Clear
  Object.Unlock(txtTranslate)

  $bIgnore = False

  If cvwTranslate.MoveTo(sCurrent) Then
    Wait ' let the columnview be sorted
    cvwTranslate.MoveFirst
  Endif
  Try cvwTranslate.Item.Selected = True
  Try cvwTranslate.Item.EnsureVisible

  $sLang = sLang
  $sPath = sPath
  $bModify = False

  sName = Language.ToName($sLang)
  Try cvwLang.Add($sLang, sName)
  If Not Error Then cmbLang.Add(sName)
  'If Not Error And If chkStat.Value Then cvwLang[$sLang][1] = "0%"

  'Try cvwLang[$sLang].Selected = True
  Try cmbLang.Index = cmbLang.Find(sName)

  DisplayTrans
  
Finally

  ResizeTable
  Dec Application.Busy

Catch

  sMsg = Error.Text & "\n\n" & Error.Backtrace.Join(" ") & "\n\n" & Trim($sErrMerge)
  ErrorMessage(Subst(("Cannot read translation file for language '&1'"), Language.ToName(sLang)), sMsg)
  $bIgnore = False
  Return True

End

Public Sub btnOK_Click()

  Me.Close

End

Private Sub FormatComment(sComment As String)

  Dim sFile As String
  Dim sPath As String
  Dim iPos As Integer
  Dim sSuffix As String
  Dim hLabel As Label
  Dim hSep As Separator

  panComment.Children.Clear

  For Each sFile In Split(sComment, " ", "", True)
    
    iPos = RInStr(sFile, ":")
    If iPos Then
      sSuffix = Mid$(sFile, iPos + 1)
      sFile = Left$(sFile, iPos - 1)
    Else
      sSuffix = ""
    Endif
    If sFile Not Begins "." Then
      sPath = Project.FindPath(sFile)
      sFile = Mid$(sPath, Len(Project.SourceDir) + 2)
    Endif
    
    If sSuffix Then sFile &= " (" & sSuffix & ")"
    
    If panComment.Children.Count Then
      hSep = New Separator(panComment)
      hSep.Resize(1, 1)
    Endif
    
    hLabel = New Label(panComment)
    hLabel.Text = " " & sFile & " "
    hLabel.Padding = Desktop.Scale \ 2
    hLabel.AutoResize = True
    
  Next
  
End

Public Sub cvwTranslate_Select()

  With cvwTranslate

    txtOrig.Text = .Current[0]
    $bIgnore = True
    txtTranslate.Text = .Current[1]
    $bIgnore = False
    FormatComment(.Current[2])
    
  End With

  txtTranslate.SetFocus

End

Public Sub txtTranslate_Change()

  Dim nTransOld As Integer

  If $bIgnore Then Return

  nTransOld = $nTrans
  If cvwTranslate.Current[1] Then Dec $nTrans
  cvwTranslate.Current[1] = txtTranslate.Text
  If cvwTranslate.Current[1] Then Inc $nTrans

  If $nTrans <> nTransOld Then DisplayTrans

  $bModify = True

End

Private Sub WriteTranslation(sPath As String, Optional iMode As Integer = EXPORT_ALL) As Boolean

  Dim hFile As File
  Dim sStr As String
  Dim bTrans As Boolean

  If Not sPath Then
    
    hFile = Open String For Write
    
  Else
  
    hFile = Open sPath For Create
    Print #hFile, $sHeader
    
  Endif

  With cvwTranslateOrg

    .MoveFirst()

    While .Available

      sStr = .Item[1]
      If iMode = EXPORT_TRANSLATED Then
        If Not sStr Then Goto NEXT_TRANS
      Else If iMode = EXPORT_UNTRANSLATED Then
        If sStr Then Goto NEXT_TRANS
      Endif

      If Not sPath Then
        
        Print #hFile, Mid$(Quote(.Item[3]), 2, -1)
        
      Else

        If sStr Then
          If Right$(.Item[3], 2) = "\\n" Then
            If Right$(sStr, 2) <> "\\n" Then
              sStr = sStr & "\\n"
            Endif
          Else
            While Right(sStr, 2) = "\\n" 
              sStr = Left(sStr, -2)
            Wend
          Endif
        Endif
  
        Print #hFile, "#: "; .Item[2]
        Print #hFile, "msgid "; Chr$(34); .Item[3]; Chr$(34)
        Print #hFile, "msgstr "; Quote(UnQuote(sStr))
        Print #hFile
        
      Endif

      If sStr Then bTrans = True

    NEXT_TRANS:
      .MoveNext()
    Wend

  End With

  If Not sPath Then
    sStr = Close #hFile
    Clipboard.Copy(sStr)
  Else
    Close #hFile
  Endif


  Return Not bTrans

End

Private Sub SaveTranslate(Optional bForce As Boolean)

  Dim bNoTrans As Boolean
  Dim bExistMO As Boolean
  Dim sPathMO As String

  If Not $sLang Then Return

  If Not $bDeleteIfVoid Then
    If Not ($bModify Or bForce) Then Return
  Endif

  UpdateOrg()

  Project.CreateLangDirectory()

  sPathMO = File.SetExt($sPath, "mo")
  bExistMO = Exist(sPathMO)

  If $nTrans = 0 Then
    VersionControl.RemoveFile($sPath, True)
    Try Kill $sPath
    If bExistMO Then
      VersionControl.RemoveFile(sPathMO, True)
      Try Kill sPathMO
    Endif
    Return
  Endif

  Inc Application.Busy

  'PRINT "Saving "; $sPath

  bNoTrans = WriteTranslation($sPath & ".new")
  Try Kill $sPath

  If Not bNoTrans Then

    Move $sPath & ".new" To $sPath

    'Project.CompileTranslation(True, $sLang)
    Project.Compile()

    'Shell "msgfmt -o " & Shell$(sPathMO) & " " & Shell$($sPath) Wait

    'If Not bExistMO Then VersionControl.AddFile(sPathMO)

  Else

    'PRINT "Void translation"

    Try Kill $sPath & ".new"
    If bExistMO Then
      VersionControl.RemoveFile(sPathMO, True)
      Try Kill sPathMO
    Endif

  Endif

  ComputeTransStat($sLang)

  $bModify = False
  $bStatValid = False

Finally

  Dec Application.Busy

Catch

  Message.Error(("Cannot save translation.") & "\n\n" & Error.Text)

End

' Private Function QuoteTranslation(sStr As String) As String
' 
'   ' sStr = Replace(sStr, "\n", "")
'   ' sStr = Replace(sStr, "\\" & Chr$(34), "\n")
'   ' sStr = Replace(sStr, Chr$(34), "\\" & Chr$(34))
'   ' sStr = Replace(sStr, "\n", "\\" & Chr$(34))
'   ' sStr = Replace(sStr, "\\", "\\\\")
'   ' 
'   ' Return Chr$(34) & sStr & Chr$(34)
' 
'   Return Quote(sStr)
' 
' End

' Private Function QuoteTranslation(sStr As String) As String
'
'   sStr = Replace(sStr, "\n", "")
'   sStr = Replace(sStr, "\\n", "\n")
'   Return Quote(sStr)
'
' End

' Private Function UnQuoteTranslation(sStr As String) As String
'
'   sStr = Unquote(sStr)
'   sStr = Replace(sStr, "\n", "\\n")
'   Return sStr
'
' End

Public Sub btnSave_Click()

  SaveTranslate(True)

End

Public Sub btnCopy_Click()

  txtTranslate.Text = cvwTranslate.Current[0]

End

Public Sub txtFind_Click()

  Dim sStr As String
  Dim sFind As String
  Dim sKey As String

  sFind = String.LCase(txtFind.Text)
  If Not sFind Then Return
  If cvwTranslate.Count = 0 Then Return

  With cvwTranslate

    sKey = .Key

    Do

      .MoveNext()
      If Not .Available Then
        .MoveFirst()
      Endif

      sStr = String.LCase(.Item[0] & "\n" & .Item[1])
      If InStr(sStr, sFind) Then
        .Item.EnsureVisible
        .Item.Selected = True
        Return
      Endif

      If .Item.Key = sKey Then
        Balloon.Info(("Search string cannot be found."), txtFind)
        Return
      Endif

    Loop

  End With

End

Public Sub txtFind_Activate()

  txtFind_Click

End

' Public Sub cvwLang_Select()
'
'   Dim sLang As String = cvwLang.Item.Key
'
'   If sLang = $sLang Then Return
'
'   SetLang(sLang)
'
' End

Public Sub cmbLang_Click()

  Dim sLang As String = Language.FromName(cmbLang.Text)

  If sLang = $sLang Then Return

  SetLang(sLang)

End

Public Sub mnuDelete_Click()

  If Message.Delete(("Do you really want to delete this translation ?"), ("Delete"), ("Cancel")) = 2 Then Return

  With cvwTranslate

    .MoveFirst()
    While .Available
      .Item[1] = ""
      .MoveNext()
    Wend

    .MoveFirst()
    .Item.Selected = True
    .Item.EnsureVisible()

    $nTrans = 0

  End With

  SaveTranslate(True)
  cvwLang.Remove($sLang)
  cmbLang.Remove(cmbLang.Index)
  SetLang()

End

Public Sub mnuNew_Click()

  Dim sLang As String

  sLang = FNewTranslation.Run()
  If Not sLang Then Return

  SetLang(sLang)

  '   IF sLang = $sLang THEN
  '     Message(("This is the same translation !"))
  '     RETURN
  '   ENDIF
  '
  '   IF Message.Question(("Do you really want to replace this translation ?"), ("Replace"), ("Cancel")) = 2 THEN RETURN
  '
  '   'TRY KILL Project.Dir &/ $sLang & ".po"
  '   SHELL "cp -f " & Project.Quote(Project.Dir &/ ".lang" &/ sLang & ".po") & " " & Project.Quote(Project.Dir &/ ".lang" &/ $sLang & ".po") WAIT
  '
  '   SetLang($sLang)

End

Public Sub txtTranslate_KeyPress()

  If Key.Alt Then
    With cvwTranslate
      If Key.Code = Key["Up"] Then
        If Key.Shift Then
          If btnPreviousTranslated.Enabled Then btnPreviousTranslated_Click
        Else If Key.Control Then
          If btnPreviousUntranslated.Enabled Then btnPreviousUntranslated_Click
        Else
          .MoveTo(.Key)
          .MoveAbove()
          If .Available Then
            .Item.Selected = True
            .Item.EnsureVisible()
          Endif
        Endif
      Else If Key.Code = Key["Down"] Then
        If Key.Shift Then
          If btnNextTranslated.Enabled Then btnNextTranslated_Click
        Else If Key.Control Then
          If btnNextUntranslated.Enabled Then btnNextUntranslated_Click
        Else
          .MoveTo(.Key)
          .MoveBelow()
          If .Available Then
            .Item.Selected = True
            .Item.EnsureVisible()
          Endif
        Endif
      Endif
    End With
  Else If Key.Shift Then
    If Key.Code = Key.F4 Then
      btnPreviousUntranslated_Click()
    Endif
  Else If Key.Control Then
    If Key.Code = Key["F"] Then
      txtFind.SetFocus
    Endif
  Else If Key.Normal Then
    Select Case Key.Code
      Case Key.F3
        txtFind_Click
      Case Key.F4
        btnNextUntranslated_Click
      Case Key.F5
        btnCopy_Click
      Case Key.F6
        btnDoNotTranslate_Click
      Case Key.F7
        btnVerify_Click
      Case Key.F8
        btnClear_Click
    End Select
  Endif

End

Public Sub mnuReload_Click()

  If Message.Question(("Do you really want to reload this translation ?"), ("Reload"), ("Cancel")) = 2 Then Return

  SetLang($sLang)

End

Public Sub btnClear_Click()

  txtTranslate.Clear

End

Private Sub ExportTranslation(iMode As Integer)

  Dialog.Title = ("Export a translation")
  Dialog.Path = Settings["/FTranslate/ExportPath", System.User.Home] &/ Project.Name & "-" & $sLang & "-" & Project.FormatVersion() & ".po"
  Dialog.Filter = ["*.po", ("Translation files")]
  Dialog.AutoExt = True
  If Dialog.SaveFile() Then Return

  Settings["/FTranslate/ExportPath"] = File.Dir(Dialog.Path)

  UpdateOrg
  Try Kill Dialog.Path
  WriteTranslation(Dialog.Path, iMode)

End

Private Sub CopyTranslation(iMode As Integer)
  
  UpdateOrg
  WriteTranslation("", iMode)
  
End


Public Sub mnuExportAll_Click()

  ExportTranslation(EXPORT_ALL)

End

Public Sub mnuExportTranslated_Click()

  ExportTranslation(EXPORT_TRANSLATED)

End

Public Sub mnuExportUntranslated_Click()

  ExportTranslation(EXPORT_UNTRANSLATED)

End

Public Sub mnuCopytAll_Click()

  CopyTranslation(EXPORT_ALL)

End

Public Sub mnuCopyTranslated_Click()

  CopyTranslation(EXPORT_TRANSLATED)

End

Public Sub mnuCopyUntranslated_Click()

  CopyTranslation(EXPORT_UNTRANSLATED)

End

Private Sub InitIndex()

  $cCacheImport = New Collection

  cvwTranslate.MoveFirst
  While cvwTranslate.Available
    'Debug cvwTranslate.Item[0]; "|"; cvwTranslate.Item[1]; "|"; cvwTranslate.Item[2]; "|"; cvwTranslate.Item[3]
    $cCacheImport[cvwTranslate.Item[3]] = CInt(cvwTranslate.Item.Key)
    cvwTranslate.MoveNext
  Wend

End

Private Sub FindIndex(sMsgId As String) As Integer

  If Not sMsgId Then Return
  If $cCacheImport.Exist(sMsgId) Then Return $cCacheImport[sMsgId]
  
End

Private Sub ImportMessage(sPath As String, bReplace As Boolean) As Integer

  Dim hFic As File
  Dim sLine As String
  Dim sMsgComment As String
  Dim bFuzzy As Boolean
  Dim sMsgId As String
  Dim iMode As Integer
  Dim sMsgStr As String
  Dim iIndex As Integer
  Dim nTrans As Integer
  Dim sCharset As String

  ' sTemp = Temp$()
  ' sOutput = Temp$()
  ' Shell "msgconv -t UTF-8 -o " & Quote.Shell(sTemp) & " " & Quote.Shell(sPath) & " > " & Quote.Shell(sOutput) & " 2>&1" Wait
  ' If Process.LastValue Then
  '   $sErrMerge = "\n\n" & DConv(File.Load(sOutput))
  '   Error.Raise(("Unable to convert translation file to UTF-8."))
  ' Endif

  InitIndex

  hFic = Open sPath

  Do

    If Not Eof(hFic) Then

      Line Input #hFic, sLine

      If Left$(sLine) = "#" Then

        If Left$(sLine, 2) = "#:" Then
          sMsgComment = Trim(Mid$(sLine, 3))
          Continue
        Endif

        If Left$(sLine, 2) = "#," Then
          If InStr(sLine, "fuzzy") Then
            bFuzzy = True
            Continue
          Endif
        Endif

        Continue

      Endif

      If Left$(sLine, 6) = "msgid " Then
        sMsgId = Mid$(sLine, 8, -1)
        iMode = MODE_MSGID
        Continue
      Endif

      If Left$(sLine, 7) = "msgstr " Then
        sMsgStr = Mid$(sLine, 9, -1)
        iMode = MODE_MSGSTR
        Continue
      Endif

      If Left$(sLine) = Chr$(34) Then
        If iMode = MODE_MSGID Then
          sMsgId = sMsgId & Mid$(sLine, 2, -1)
        Else If iMode = MODE_MSGSTR Then
          If Not sMsgId Then
            If sLine Like "\"Content-type:*; charset=*" Then
              sLine = Replace(Mid$(sLine, 2, -1), "\\n", "")
              Try sCharset = UCase(Trim(Scan(sLine, "*; charset=*")[1]))
              If sCharset = "UTF-8" Then sCharset = ""
            Endif
          Else
            sMsgStr = sMsgStr & Mid$(sLine, 2, -1)
          Endif
        Endif
        Continue
      Endif

    Endif

    If Trim(sMsgId) Then

      If sCharset Then sMsgStr = Conv(sMsgStr, sCharset, "UTF-8")
      
      iIndex = FindIndex(sMsgId)
      If iIndex <= 0 Then
        sMsgId = CControl.RemoveShortcut(sMsgId)
        sMsgStr = CControl.RemoveShortcut(sMsgStr)
        iIndex = FindIndex(sMsgId)
      Endif

      If iIndex > 0 Then
        If bReplace Or If cvwTranslate[iIndex][1] = "" Then

          If sMsgStr = "-\\n" Then sMsgStr = "-"
  
          If bFuzzy Then
            bFuzzy = False
          Else
            cvwTranslate[iIndex][1] = sMsgStr
            If sMsgStr Then
              Inc $nTrans
              Inc nTrans
            Endif
          Endif
          
        Endif

      Endif

    Endif

    sMsgId = ""
    sMsgComment = ""
    sMsgStr = ""
    bFuzzy = False

    If Eof(hFic) Then Break

  Loop

  Close hFic

  Return nTrans

End

Public Sub btnImport_Click()

  Dim sPath As String
  Dim sTransDir, sTrans As String
  Dim nTrans As Integer

  sTransDir = dchImport.SelectedPath
  If Not chkBrowse.Value Then
    sTrans = dchImport.FileView.Current
    If Not sTrans Then
      Message.Warning(("Please select the translation file to import."))
      Return
    Endif
  Endif

  Settings["/FTranslate/ImportPath"] = sTransDir

  'If IsDir(Dialog.Path) Then
  '  If Message.Warning("You have selected a directory. Do you want to browse it recursively and import all found translation files?", ("Cancel"), ("Browse")) = 1 Then Return
  'Endif

  ' If Not (File.BaseName(Dialog.Path) Like (Project.Name & "-" & $sLang & "-*")) Then
  '   If Message.Warning(("Warning ! The translation file does not match the current language."), ("Continue"), ("Cancel")) <> 1 Then
  '     Return
  '   Endif
  ' Endif

  Inc Application.Busy

  sPath = Language.GetPath($sLang, "po")

  'SHELL "msgmerge -o " & Project.Quote(sPath & ".new") & " " & Project.Quote(Dialog.Path) & " " & Project.Quote(sPath) & " 2>/dev/null" WAIT
  'MergeMessage(sPath, "-o " & Quote.Shell(sPath & ".new") & " " & Quote.Shell(Dialog.Path) & " " & Quote.Shell(sPath))
  If chkBrowse.Value Then
    For Each sTrans In RDir(sTransDir, "*.po")
      nTrans += ImportMessage(sTransDir &/ sTrans, chkReplace.Value)
    Next
  Else
    nTrans = ImportMessage(sTransDir &/ sTrans, chkReplace.Value)
  Endif

  DisplayTrans
  $bModify = True
  SaveTranslate

  Dec Application.Busy

  If nTrans = 0 Then
    Message.Info(("No translation were picked up."))
  Else If nTrans = 1 Then
    Message.Info(("One translation was picked up."))
  Else If nTrans > 0
    Message.Info(Subst(("&1 translations were picked up."), nTrans))
  Endif

  'SaveTranslate(TRUE)

Catch

  Application.Busy = 0
  Message.Error(("Cannot import translation file.") & "\n\n" & Error.Text & $sErrMerge)

End

Private Function GetSymbols(sStr As String) As String

  Dim sSym As String
  Dim iInd As Integer
  Dim sCar As String
  Dim bGetNext As Boolean

  For iInd = 1 To Len(sStr)

    sCar = Mid$(sStr, iInd, 1)
    If bGetNext Then
      sSym = sSym & sCar
      bGetNext = False
    Else If Asc(sCar) < 128 Then
      If InStr("abcdefghijklmnopqrstuvwxyz- ',;:", LCase(sCar)) = 0 Then
        sSym = sSym & sCar
        If sCar = "\\" Then bGetNext = True
      Endif
    Endif

  Next

  Return sSym

End

Public Sub btnVerify_Click()

  Dim sKey As String

  If Not cvwTranslate.Key Then Return

  With cvwTranslate

    sKey = .Key
    .MoveCurrent

    Do

      .MoveNext()
      If Not .Available Then
        .MoveFirst()
      Endif

      If .Item.Key = sKey Then
        Balloon.Info(("Everything seems to be correct."), btnVerify)
        Return
      Endif

      If .Item[1] Then
        If .Item[1] <> "-" Then

          If GetSymbols(.Item[0]) <> GetSymbols(.Item[1]) Then
            .Item.EnsureVisible
            .Item.Selected = True
            Balloon.Warning(("Translated string symbols do not match untranslated string ones."), txtTranslate)
            Return
          Endif

        Endif
      Endif

    Loop

  End With

End

Public Sub btnDoNotTranslate_Click()

  txtTranslate.Text = "-"

End

Private Sub DisplayTrans()

  Dim nNotTrans As Integer

  nNotTrans = cvwTranslate.Count - $nTrans

  If nNotTrans = 0 Then
    lblInfo.Text = Subst(("&1 strings. Everything is translated!"), cvwTranslate.Count, nNotTrans)
  Else If nNotTrans = 1 Then
    lblInfo.Text = Subst(("&1 strings. One is not translated. &3% done."), cvwTranslate.Count, nNotTrans, ($nTrans * 100) \ cvwTranslateOrg.Count)
  Else
    lblInfo.Text = Subst(("&1 strings. &2 are not translated. &3% done."), cvwTranslate.Count, nNotTrans, ($nTrans * 100) \ cvwTranslateOrg.Count)
  Endif
  
  btnNextUntranslated.Enabled = cvwTranslate.Count - $nTrans
  btnPreviousUntranslated.Enabled = btnNextUntranslated.Enabled
  btnNextTranslated.Enabled = $nTrans > 0
  btnPreviousTranslated.Enabled = btnNextTranslated.Enabled

End

' PUBLIC SUB Form_Resize()
'
'   DIM H AS Integer
'   DIM D AS Integer
'
'   D = ME.ClientH - cvwTranslate.Y - 120
'
'   H = (D - TABLE_HEIGHT_MAX) \ 2
'   IF H < 48 THEN
'     cvwTranslate.H = D - 48 * 2
'     H = (D - cvwTranslate.H) \ 2
'   ELSE
'     cvwTranslate.H = TABLE_HEIGHT_MAX
'   ENDIF
'
'   cvwTranslate.W = ME.ClientW - 16
'   ResizeTable
'
'   lblOrig.Move(8, cvwTranslate.Y + cvwTranslate.H + 8)
'   lblComment.Move(lblOrig.X + lblOrig.W, lblOrig.Y)
'   lblComment.W = ME.ClientW - lblComment.X - 8
'   txtOrig.Move(8, lblOrig.Y + lblOrig.H, cvwTranslate.W, H)
'
'   panTranslate.Move(ME.ClientW - panTranslate.W, txtOrig.Y + txtOrig.H + 8)
'   lblTranslation.Y = panTranslate.Y + 8
'   txtTranslate.Move(8, lblTranslation.Y + lblTranslation.H, cvwTranslate.W, H)
'   lblInfo.Y = ME.ClientH - lblInfo.H - 8
'   btnOK.Move(ME.CLientW - btnOK.W - 8, ME.CLientH - btnOK.H - 8)
'
'
' END

Private Sub ResizeTable()

  Dim I As Integer
  
  With cvwTranslate
    .Columns[0].Width = .ClientW \ 2
    .Columns[1].Width = .ClientW - .Columns[0].Width '- 16
    For I = 2 To .Columns.Max
      .Columns[I].Width = 0
    Next
  End With

End

Public Sub btnNextUntranslated_Click()

  Dim sKey As String

  With cvwTranslate

    sKey = .Key
    .MoveCurrent()

    Do

      .MoveBelow()
      If Not .Available Then
        .MoveFirst()
      Endif

      If Not .Item[1] Then
        .Item.EnsureVisible
        .Item.Selected = True
        Return
      Endif

      If .Item.Key = sKey Then Return

    Loop

  End With

End

Public Sub btnPreviousUntranslated_Click()

  Dim sKey As String

  With cvwTranslate

    sKey = .Key
    .MoveCurrent()

    Do

      .MoveAbove()
      If Not .Available Then
        .MoveLast()
      Endif

      If Not .Item[1] Then
        .Item.EnsureVisible
        .Item.Selected = True
        Return
      Endif

      If .Item.Key = sKey Then Return

    Loop

  End With

End

Private Sub MergeMessage(sPath As String, sOption As String)

  Dim sTemp As String

  sTemp = Temp$

  Shell "msgmerge --no-wrap -F -o " & Shell$(sPath & ".new") & " " & sOption & " > " & Shell$(sTemp) & " 2>&1" Wait
  If Exist(sPath & ".new") Then
    Kill sPath
    Move sPath & ".new" To sPath
    $sErrMerge = ""
    Try Kill sTemp
  Else
    'PRINT "msgmerge -o " & sOption
    $sErrMerge = DConv(File.Load(sTemp))
    Try Kill sTemp
    Error.Raise(Subst$(("The '&1' command has failed."), "msgmerge"))
  Endif

End

Public Sub Form_Close()

  Inc Application.Busy
  If cmbFileChoice.Index <> 0 Then ShiftToSort
  SaveTranslate
  Settings.Write(Me)
  Dec Application.Busy

End

Public Sub cmbFileChoice_Click()

  If cmbFileChoice.Index = 0 Then
    ShiftToSort()
  Else
    ShiftToSort(cmbFileChoice.Text)
  Endif

End

' PRIVATE SUB MakeFileChoice()
'
'   DIM sTempIn AS String
'   DIM sTemp AS String
'   DIM sControl AS String
'   DIM myPattern AS String = " "
'   DIM iPos AS Integer
'   DIM aChoice AS NEW String[]
'
'   cbxFileChoice.Clear
'   cbxFileChoice.Add("(" & ("All files") & ")")
'
'   WITH cvwTranslate
'     .MoveFirst
'     DO WHILE .Available
'       sTempIn = .Item[2] & myPattern
'       DO
'         iPos = InStr(sTempIn, myPattern, iPos)
'         IF iPos = 0 THEN
'           BREAK
'         ELSE
'           sTemp = Left(sTempIn, iPos)
'           sTempIn = Mid(sTempIn, iPos)
'           sTemp = "." & Trim(Left(sTemp, InStr(sTemp, ".")))
'           IF InStr(sControl, sTemp) = 0 THEN
'             sControl = sControl & sTemp
'             aChoice.Add(Replace(sTemp, ".", ""))
'           ENDIF
'         ENDIF
'       LOOP
'       .MoveNext
'     LOOP
'   END WITH
'
'   cbxFileChoice.Sorted = TRUE
'
' END
'
Private Sub MakeFileChoice()

  Dim sFile As String
  Dim aChoice As New String[]
  Dim iPos As Integer

  cmbFileChoice.Clear
  'cbxFileChoice.Add("(" & ("All files") & ")")

  With cvwTranslate
    .MoveFirst
    Do While .Available
      For Each sFile In Split(.Item[2], " ", "", True)
        iPos = InStr(sFile, ":")
        If iPos Then sFile = Left(sFile, iPos - 1)
        If Left(sFile) <> "." Then sFile = File.BaseName(sFile)
        If aChoice.Find(sFile) < 0 Then aChoice.Add(sFile)
      Next
      .MoveNext
    Loop
  End With

  aChoice.Add("(" & ("All files") & ")", 0)

  cmbFileChoice.List = aChoice.Sort()
  Object.Lock(cmbFileChoice)
  cmbFileChoice.Index = 0
  Object.Unlock(cmbFileChoice)

End

Private Sub ShiftToSort(Optional sSortText As String)

  Dim iPos As Integer
  Dim sKey As String
  Dim sLastKey As String
  Dim nI As Integer

  UpdateOrg()

  'sSearchText = " " & sSortText
  $nTrans = 0
  sLastKey = cvwTranslate.Key
  cvwTranslate.Clear
  With cvwTranslateOrg
    .MoveFirst
    Do While .Available
      If sSortText Then
        iPos = InStr(" " & .Item[2], " " & sSortText)
      Else
        iPos = -1
      Endif

      If iPos <> 0 Then
        sKey = .Item.Key
        cvwTranslate.Add(sKey, .Item[0])
        If .Item[1] Then Inc $nTrans
        For ni = 1 To .Columns.Count - 1
          cvwTranslate.Item[nI] = .Item[nI]
        Next
      Endif

      .MoveNext
    Loop

  End With

  If cvwTranslate.Count Then
    Try cvwTranslate.MoveTo(sLastKey)
    If Not cvwTranslate.Available Then
      cvwTranslate.MoveFirst
    Endif
    cvwTranslate.Item.Selected = True
    cvwTranslate.Item.EnsureVisible()
  Endif
  
  DisplayTrans
  ResizeTable

End

Private Sub UpdateOrg(Optional bNew As Boolean)

  Dim nI As Integer
  Dim sKey As String

  If bNew Then cvwTranslateOrg.Clear
  With cvwTranslate
    .MoveFirst
    Do While .Available
      sKey = .Item.Key
      If bNew Then
        cvwTranslateOrg.Add(sKey, .Item[0])
        For ni = 1 To .Columns.Count - 1
          cvwTranslateOrg.Item[nI] = .Item[nI]
        Next
      Else
        cvwTranslateOrg.MoveTo(sKey)
        cvwTranslateOrg.Item[1] = .Item[1]
      Endif
      .MoveNext
    Loop
  End With

End

Private Sub UpdateStat()

  Dim sLang As String

  If $bStatValid Then Return

  Inc Application.Busy

  cvwLang.Header = True
  
  'Shell "grep -c \"^msgid\" " & Shell$(Project.Dir &/ ".lang/.pot") To sRes
  'nTrans = Val(sRes) - 1 ' Remove the < msgid "" > line

  For Each sLang In Language.GetAll()
    If Project.HasTranslation(sLang) Then
      ComputeTransStat(sLang)
    Endif
  Next

  ' 'cvwLang.Resizable = True
  ' For iCol = 0 To 3
  '   cvwLang.Columns[iCol].Width = -1
  ' Next
  ' 'cvwLang.Resizable = False
  ' 
  ' For iCol = 0 To 3
  '   iWidth += cvwLang.Columns[iCol].Width
  ' Next

  $bStatValid = True

  Dec Application.Busy

End

Public Sub panLang_Resize()

  ResizeTable

End

Public Sub Form_Activate()

  ResizeTable

End

Public Sub cvwLang_Compare((Key) As String, OtherKey As String)

  Dim iVal, iOtherVal As Integer
  Dim iComp As Integer

  iComp = String.Comp(cvwLang[Key][0], cvwLang[OtherKey][0])

  Select Case cvwLang.Columns.Sort

    Case 1
      iVal = CInt(Trim$(Replace(cvwLang[Key][1], "%", "")))
      iOtherVal = CInt(Trim(Replace(cvwLang[OtherKey][1], "%", "")))
      If iVal > iOtherVal Then
        iComp = 1
      Else If iVal < iOtherVal Then
        iComp = -1
      Endif
      
    Case 2
      iComp = Sgn(CInt(Trim(cvwLang[Key][2])) - CInt(Trim(cvwLang[OtherKey][2])))

    Case 3
      iComp = String.Comp(cvwLang[Key][3], cvwLang[OtherKey][3])

    Case 4
      iVal = Stat(Language.GetPath(Key, "po")).Size
      iOtherVal = Stat(Language.GetPath(OtherKey, "po")).Size
      If iVal < iOtherVal Then
        iComp = -1
      Else If iVal > iOtherVal Then
        iComp = 1
      Endif

  End Select

Finally

  cvwLang.Compare = iComp

End

Public Sub panTranslate_Arrange()

  ResizeTable

End

Public Sub tabTranslate_Click()

  If tabTranslate.Index = 1 Then UpdateStat

End

Public Sub chkBrowse_Click()

  dchImport.FileView.Enabled = chkBrowse.Value = 0

End

Public Sub cmbLangSource_Click()

  SetLang($sLang)

End

Public Sub Form_Arrange()

  ResizeTable

End

Public Sub btnNextTranslated_Click()

  Dim sKey As String

  With cvwTranslate

    sKey = .Key
    .MoveCurrent()

    Do

      .MoveBelow()
      If Not .Available Then
        .MoveFirst()
      Endif

      If .Item[1] Then
        .Item.EnsureVisible
        .Item.Selected = True
        Return
      Endif

      If .Item.Key = sKey Then Return

    Loop

  End With

End

Public Sub btnPreviousTranslated_Click()

  Dim sKey As String

  With cvwTranslate

    sKey = .Key
    .MoveCurrent()

    Do

      .MoveAbove()
      If Not .Available Then
        .MoveLast()
      Endif

      If .Item[1] Then
        .Item.EnsureVisible
        .Item.Selected = True
        Return
      Endif

      If .Item.Key = sKey Then Return

    Loop

  End With

End


Private Sub StripLang(sLang As String) As String

  Return Replace(sLang, "_", "-")
  
End


Private Sub GetAutomaticTranslation(sText As String) As String

  Dim sLangSrc As String
  Dim sLangDest As String
  Dim sResult As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim sDigit As String
  
  Inc Application.Busy
  
  If cmbLangSource.Index > 0 Then
    sLangSrc = Language.FromName(cmbLangSource.Text)
  Else
    sLangSrc = Project.DefaultLanguage
  Endif
  sLangSrc = StripLang(sLangSrc)
  
  sLangDest = StripLang(Language.FromName(cmbLang.Text))

  Do
    iPos = InStr(sText, "&", iPos + 1)
    If iPos = 0 Then Break
    If IsDigit(Mid$(sText, iPos + 1, 1)) Then
      sText = Left(sText, iPos - 1) & "[-" & Mid$(sText, iPos + 1, 1) & "-]" & Mid$(sText, iPos + 2)
    Else If Mid$(sText, iPos + 1, 1) = "{" Then
      iPos2 = InStr(sText, "}", iPos + 1)
      If iPos2 Then
        If IsDigit(Mid$(sText, iPos + 2, iPos2 - iPos - 1)) Then
          sText = Left$(sText, iPos - 1) & "[-" & Mid$(sText, iPos + 2, iPos2 - iPos - 1) & "-]" & Mid$(sText, iPos2 + 1)
        Endif
      Endif
    Endif
  Loop

  Exec [$sTranslateShell, "-e", $sTranslateEngine, "-b", sText, sLangSrc & ":" & sLangDest] To sResult
  
  iPos = 0
  Do
    iPos = InStr(sResult, "[-", iPos + 1)
    If iPos = 0 Then Break
    iPos2 = InStr(sResult, "-]", iPos + 1)
    If iPos2 Then
      sDigit = Trim(Mid$(sResult, iPos + 2, iPos2 - iPos - 2))
      If Len(sDigit) = 1 Then
        sResult = Left(sResult, iPos - 1) & "&" & sDigit & Mid$(sResult, iPos2 + 2)
      Else If Len(sDigit) > 1 Then
        sResult = Left(sResult, iPos - 1) & "&{" & sDigit & "}" & Mid$(sResult, iPos2 + 2)
      Endif
    Endif
  Loop
  
  Dec Application.Busy
  
  sResult = Trim(sResult)
  
  If sResult Then
    If String.Left(sText) = String.UCase(String.Left(sText)) Then
      sResult = String.UCaseFirst(sResult)
    Else If String.Left(sText) = String.LCase(String.Left(sText)) Then
      sResult = String.LCase(String.Left(sResult)) & String.Mid$(sResult, 2)
    Endif
  Endif
  
  Return sResult

End

Public Sub btnAutoTrans_Click()

  Dim sText As String

  sText = GetAutomaticTranslation(txtOrig.Text)
  If Not sText Then
    Message.Warning(("Automatic translation has failed."))  
    Return
  Endif
  
  txtTranslate.Text = sText

End

Public Sub mnuAutoTrans_Click()
  
  If Message.Question(("Do you want to fill the translation automatically?"), ("Fill"), ("Cancel")) = 2 Then Return
  
  Inc Application.Busy
  
  cvwTranslate.MoveFirst
  While cvwTranslate.Available
    If Not cvwTranslate.Item[1] Then 
      cvwTranslate.Item.Selected = True
      cvwTranslate.Item.EnsureVisible
      txtTranslate.Text = GetAutomaticTranslation(txtOrig.Text)
      Wait
    Endif
    cvwTranslate.MoveNext
  Wend
  
  DisplayTrans
  $bModify = True
  SaveTranslate
  
  Dec Application.Busy
  
End
