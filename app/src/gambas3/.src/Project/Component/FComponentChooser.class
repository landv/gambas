' Gambas class file

Public Struct ComponentChooserItem
  Key As String
  Checked As Boolean
  Dependencies As String[]
End Struct

Static Private Const DEFAULT_ZOOM As Float = 1

Static Private $aPict As Picture[]
Static Private $hPictLocked As Picture

Private $aComp As String[]
Private $cComp As Collection

Private $bShowDeprecated As Boolean
Private $aHidden As String[]
Private $iTooltipLastRow As Integer
Private $bShowCheckedOnly As Boolean
Private $aLibraries As New String[]
'Private $iRow As Integer = -1

' Private Sub GetParent() As ComponentChooser
' 
'   Return Me.Parent
' 
' End

Public Sub _new()

  Dim hBorder As Border
  
  hBorder = Border("style:none;bottom-style:solid;padding:2 0 0 8;")
  hBorder.Color = Color.Gradient(Color.LightForeground, Color.TextBackground)
  gvwComponent.Rows.Border = hBorder
  'gvwComponent.Padding = 4
  
  gvwComponent.Columns.Count = 5
  gvwComponent.Columns[0].Width = 16
  'gvwComponent.Columns[0].Expand = False
  'gvwComponent.Columns[1].Expand = False
  gvwComponent.Columns[2].Expand = True
  gvwComponent.Columns[3].Width = 24
  gvwComponent.Columns[4].Width = 24
  'gvwComponent.Columns[3].Expand = False

  SetCheckable(False)

  RefreshList
  
  btnZoomNormal_Click

End

Private Sub RefreshList()
  
  Dim aComp As New String[]
  Dim hComp As CComponent
  Dim sComp As String
  Dim sFilter As String
  Dim I As Integer
  
  sFilter = txtFilter.Text
  
  For Each hComp In Project.Documentation.Components
    
    sComp = hComp.Key
    If hComp.Hidden Then Continue
    If hComp.Library Then Continue
    If hComp.Key = CComponent.PROJECT_NAME Then Continue
    If hComp.Key = Project.Name Then Continue 
    If $aHidden And If $aHidden.Exist(sComp) Then Continue
    If sFilter And If Not hComp.Match(sFilter) Then Continue
    
    If $cComp Then
      If Not IsChecked(sComp) Then
        If $bShowCheckedOnly Then Continue
        If hComp.State = CComponent.DEPRECATED And If Not $bShowDeprecated Then Continue
      Endif
      aComp.Add(If(IsChecked(sComp), "0", "1") & sComp)
    Else
      If hComp.State = CComponent.DEPRECATED And If Not $bShowDeprecated Then Continue
      aComp.Add(sComp)
    Endif
    
  Next
  
  If $cComp Then
    For Each $cComp
      
      sComp = $cComp.Key
      hComp = Project.Documentation.Components[sComp]
      If hComp Then Continue
      
      If $cComp Then
        If Not IsChecked(sComp) Then
          If $bShowCheckedOnly Then Continue
        Endif
        aComp.Add(If(IsChecked(sComp), "0", "1") & sComp)
      Else
        aComp.Add(sComp)
      Endif
  
    Next
  Endif
  
  aComp.Sort(gb.Natural)
  
  If $cComp Then
    For I = 0 To aComp.Max
      aComp[I] = Mid$(aComp[I], 2)
    Next
  Endif
  
  SetComponents(aComp)
  
End


Public Sub txtFilter_Filter()

  RefreshList

End

Public Sub btnForward_Click()

  webAboutComponent.Forward

End

Public Sub webAboutComponent_Click((Frame) As WebFrame)

  btnForward.Enabled = webAboutComponent.History.Index < webAboutComponent.History.Max

End

Public Sub btnStop_Click()
  
  webAboutComponent.Stop
  
End

Public Sub btnReload_Click()
  
  webAboutComponent.Reload
  
End

Public Sub btnZoomIn_Click()
  
  webAboutComponent.TextZoom = Round(webAboutComponent.TextZoom * 1.125, -3)
  
End

Public Sub btnZoomOut_Click()
  
  webAboutComponent.TextZoom = Round(webAboutComponent.TextZoom / 1.125, -3)
  
End

Public Sub btnZoomNormal_Click()
  
  webAboutComponent.TextZoom = DEFAULT_ZOOM
  
End


Public Sub btnBack_Click()

  If webAboutComponent.History.Index Then
    webAboutComponent.Back
  Else
    webAboutComponent.Stop
    wizComponent.MovePrevious
  Endif
  
End


Private Sub SetComponents(Value As String[])

  If Not Value Then Value = New String[]
  $aComp = Value
  
  gvwComponent.UnSelectAll
  gvwComponent.Rows.Count = $aComp.Count
  'gvwComponent.Columns[1].W = -1
  gvwComponent_Arrange

End

Public Sub gvwComponent_Data(Row As Integer, Column As Integer)
  
  Dim sComp As String = $aComp[Row]
  Dim hComp As CComponent = Project.Documentation[sComp]
  
  If Not hComp Then hComp = CComponent.GetUnknown(sComp)
  
  With gvwComponent.Data
  
    If hComp.State = CComponent.UNSTABLE Then 
      .Foreground = Color.LightForeground
    Else If hComp.State = CComponent.DEPRECATED Then
      .Foreground = Color.LightForeground
      .Font.Strikeout = True
    Else If hComp.State = CComponent.Unknown Then
      .Foreground = Color.LightForeground
      .Font.Italic = True
    Endif
    
    Select Case Column
      
      Case 0
        ' If $cComp Then
        '   If sComp = "gb" Then
        '     .Picture = $hPictLocked
        '   Else
        '     .Picture = $aPict[GetState(sComp)]
        '   Endif
        ' Endif
      
      Case 1
        .Text = hComp.Key & "  "
        .Font.Bold = True
        
      Case 2
        .WordWrap = True
        .RichText = hComp.Name
        
      Case 3
        Select Case hComp.State
          Case CComponent.STABLE_NOT_FINISHED
            .Picture = Picture["img/component/unfinished.png"]
          Case CComponent.UNSTABLE
            .Picture = Picture["img/component/experimental.png"]
          Case CComponent.STABLE
            .Picture = Picture["img/component/finished.png"]
          Case CComponent.DEPRECATED
            .Picture = Picture["img/component/deprecated.png"]
          'Case CComponent.UNKNOWN
          '  .Picture = Picture["img/component/unknown.png"]
        End Select
        
      Case 4
        If hComp.State <> CComponent.UNKNOWN Then .Picture = Picture["icon:/16/next"]
      
    End Select
    
    .Alignment = Align.TopNormal
    '.Background = If(Even(Row), Color.Gradient(Color.LightForeground, Color.TextBackground, 0.9), Color.TextBackground)
    .Background = Color.Gradient(Color.LightForeground, Color.TextBackground, 0.96)
    
  End With
  
End

Public Function GetCurrent() As String

  Try Return $aComp[gvwComponent.Row]

End

Public Sub SetCurrent(Value As String)

  gvwComponent.Row = $aComp.Find(Value)

End

Public Sub gvwComponent_Arrange()

  Dim I As Integer
  
  gvwComponent.Columns[1].Width = -1

  For I = 0 To $aComp.Max
    gvwComponent.Rows[I].H = -1
    'Debug I;; gvwComponent.Rows[I].H
  Next

End

Public Sub HasBorder() As Boolean
  
  Return wizComponent.Border
  
End

Public Sub SetBorder(Value As Boolean)
  
  wizComponent.Border = Value
  
End


Public Sub GetShowDeprecated() As Boolean
  
  Return $bShowDeprecated
  
End

Public Sub SetShowDeprecated(Value As Boolean)
  
  $bShowDeprecated = Value
  RefreshList
  
End

Public Sub GetHiddenComponents() As String[]
  
  Return $aHidden
  
End

Public Sub SetHiddenComponents(Value As String[])
  
  $aHidden = Value
  RefreshList
  
End

' Private Sub SetCurrentRow(iRow As Integer)
' 
'   If iRow = $iRow Then Return
'   
'   If $iRow >= 0 Then gvwComponent.Rows[$iRow].Refresh
'   $iRow = iRow
'   If $iRow >= 0 Then gvwComponent.Rows[$iRow].Refresh
' 
' End

Public Sub gvwComponent_MouseMove()

  Dim hComp As CComponent
  Dim sText As String
  Dim iCol As Integer
  Dim iRow As Integer
  
  iRow = gvwComponent.RowAt(Mouse.ScreenY - gvwComponent.ScreenY - gvwComponent.ClientY)
  iCol = gvwComponent.ColumnAt(Mouse.ScreenX - gvwComponent.ScreenX - gvwComponent.ClientX)
  If iCol < 0 Then iRow = -1
  
  If iCol >= 3 Then Try hComp = Project.Documentation[$aComp[iRow]]
  
  If iCol = 3 Then
    
    If hComp Then
      Select Case hComp.State
        Case CComponent.STABLE_NOT_FINISHED
          sText = ("Not finished but stable")
        Case CComponent.UNSTABLE
          sText = ("Experimental")
        Case CComponent.STABLE
          sText = ("Stable")
        Case CComponent.DEPRECATED
          sText = ("Deprecated")
      End Select
    Else
      sText = ""
    Endif
    
    If $iTooltipLastRow <> iRow Then
      gvwComponent.Tooltip = sText
      $iTooltipLastRow = iRow
    Endif
    
  Else
    
    gvwComponent.Tooltip = ""
    $iTooltipLastRow = -1
    
  Endif
  
  If iCol = 4 And If hComp Then
    gvwComponent.Mouse = Mouse.Pointing
  Else
    gvwComponent.Mouse = Mouse.Default
  Endif
  
  'SetCurrentRow(iRow)
  
End

Public Sub IsCheckable() As Boolean
  
  Return $cComp
  
End

Public Sub SetCheckable(Value As Boolean)
  
  gvwComponent.Columns[0].W = If(Value, 32, 8)

  If Value Then
    
    If Not $aPict Then
      $aPict = New Picture[3]
      $aPict[ComponentChooser.Unchecked] = Picture["img/16/unchecked.png"]
      $aPict[ComponentChooser.Checked] = Picture["img/16/checked.png"]
      $aPict[ComponentChooser.GrayChecked] = Picture["img/16/checked-gray.png"]
      $hPictLocked = Picture["img/16/checked-lock.png"]
    Endif
    
    $cComp = New Collection
    
  Else
    
    $cComp = Null
    
  Endif
  
End


Private Sub GetState(sComp As String) As Integer
  
  Dim hComp As ComponentChooserItem 
  
  If sComp = "gb" Then Return ComponentChooser.Checked
  
  hComp = $cComp[sComp]
  
  If hComp Then 
    If hComp.Checked Then Return ComponentChooser.Checked
    If hComp.Dependencies.Count Then Return ComponentChooser.GrayChecked
  Endif
  
End

Public Sub IsChecked(sComp As String) As Boolean
  
  Return GetState(sComp)
  
End


Public Sub gvwComponent_Leave()

  gvwComponent.Tooltip = ""
  'SetCurrentRow(-1)

End

Public Sub gvwComponent_Enter()

  $iTooltipLastRow = -1
  gvwComponent_MouseMove

End

Public Sub SetFocus()
  
  txtFilter.SetFocus
  
End

Public Sub gvwComponent_Click()
  
  Dim sComp As String = GetCurrent()
  
  If gvwComponent.Column = 0 And IsCheckable() Then 
  
    sComp = $aComp[gvwComponent.Row]
    If sComp = "gb" Then Return
    If Not Project.Documentation.Exist(sComp) Then Return
    
    Select Case GetState(sComp)
      Case ComponentChooser.Checked
        UncheckComponent(sComp)
      Case Else
        CheckComponent(sComp)
    End Select
    
  Else If gvwComponent.Column = 4 And If Project.Documentation.Exist(sComp) Then
    
    MHelp.InitWebViewWith(webAboutComponent, MHelp.TYPE_COMPONENT, GetCurrent(),, "v&nh")
    webAboutComponent.Zoom = Settings["/Help/Zoom", 80] / 100
    wizComponent.MoveNext
  
  Endif
  
  ' For Each sDep In GetRequire(hCompItem.Key)
  '   If hCompItem.Value Then
  '     $cComp[sDep].Check(hCompItem.Key)
  '   Else
  '     $cComp[sDep].Uncheck(hCompItem.Key)
  '   Endif
  ' Next
  
End

Private Sub GetRequire(sComp As String) As String[]
  
  Dim hComp As CComponent = Project.Documentation[sComp]
  
  If hComp Then
    Return hComp.Require
  Else
    Return New String[]
  Endif
  
End

Public Sub CheckComponent(sComp As String, Optional sParent As String)
  
  Dim hComp As ComponentChooserItem
  Dim sDep As String
  
  If sComp = "gb" Then Return
  
  hComp = $cComp[sComp]
  If Not hComp Then
    hComp = New ComponentChooserItem
    hComp.Key = sComp
    hComp.Dependencies = New String[]
    $cComp[sComp] = hComp    
  Endif
  
  If sParent Then
    hComp.Dependencies.Add(sParent)
  Else
    hComp.Checked = True
  Endif
  
  For Each sDep In GetRequire(sComp)
    CheckComponent(sDep, sComp)
  Next
  
  gvwComponent.Refresh

End

Private Sub GetDependencies(hComp As ComponentChooserItem, Optional bLib As Boolean) As String[]
  
  Dim aDep As New String[]
  Dim sComp As String
  
  For Each sComp In hComp.Dependencies
    
    If Not sComp Then Continue
    If Left(sComp) = "/" Then
      aDep.Add(File.Name(sComp))
    Else If Not bLib Then
      aDep.Add(sComp)
    Endif
    
  Next
  
  Return aDep
  
End

Public Sub UncheckComponent(sComp As String, Optional sParent As String) As Boolean
  
  Dim hComp As ComponentChooserItem
  Dim sMsg As String
  Dim aDep As String[]
  Dim sDep As String
  
  If sComp = "gb" Then Return
  
  hComp = $cComp[sComp]
  If Not hComp Then Return
  
  If sParent Then
    If hComp.Dependencies.Exist(sParent) Then
      hComp.Dependencies.Remove(hComp.Dependencies.Find(sParent))
      Return
    Endif
  Endif
  
  aDep = GetDependencies(hComp, True)
  
  If aDep.Count Then
    If aDep.Count = 1 Then
      sMsg = Subst(("This component is required by the following library:<p>&1"), "<b>" & aDep[0] & "</b>")
    Else
      sMsg = Subst(("This component is required by the following libraries:<p>&1"), "<b>" & aDep.Join("</b>, <b>") & "</b>")
    Endif
    Message.Warning(sMsg)
    Return True
  Endif
  
  aDep = GetDependencies(hComp)
  If aDep.Count Then
  
    sMsg = Subst(("This component is required by:<p>&1"), "<b>" & aDep.Join("</b>, <b>") & "</b>")
    If Message.Warning(sMsg, ("Keep"), ("Remove all")) = 2 Then
      
      For Each sDep In aDep 
        UncheckComponent(sDep)
      Next
      
    Endif
    
    aDep = GetDependencies(hComp)
    
  Endif
  
  If aDep.Count = 0 Then
    $cComp.Remove(sComp)
  Else
    hComp.Checked = False
  Endif
  
  For Each sDep In GetRequire(sComp)
    hComp = $cComp[sDep]
    hComp.Dependencies.Remove(hComp.Dependencies.Find(sComp))
    If hComp.Dependencies.Count = 0 And If Not hComp.Checked Then UncheckComponent(sDep)
  Next
  
  gvwComponent.Refresh

End



Public Sub SetCheckedComponents(aComp As String[])
  
  Dim sComp As String
  
  $cComp.Clear
  $aLibraries.Clear

  CheckComponent("gb")  
  For Each sComp In aComp
    CheckComponent(sComp)
  Next
  RefreshList
  
End

Public Sub GetCheckedComponents() As String[]

  Dim hComp As ComponentChooserItem
  Dim aComp As New String[]
  
  For Each hComp In $cComp
    If hComp.Key <> "gb" Then aComp.Add(hComp.Key)
  Next
  
  Return aComp.Sort()
  
End

Public Sub CheckSelection() As Boolean
  
  Dim aComp As New String[]
  Dim hComp As CComponent
  Dim sComp As String
  Dim aExclude As String[]
  Dim aNeed As String[]
  Dim sImpl As String
  Dim sExcl As String
  Dim sNeed As String
  Dim bFound As Boolean

  aComp = GetCheckedComponents()
  
  For Each sComp In aComp
  
    aNeed = New String[]
    aExclude = New String[]

    For Each sImpl In Project.Documentation[sComp].Implement
    
      For Each hComp In Project.Documentation.Components
      
        If hComp.Key = sComp Then Continue
        If hComp.Implement.Find(sImpl) >= 0 Then
          If Not aComp.Exist(hComp.Key) Then Continue
          If aExclude.Find(hComp.Key) < 0 Then aExclude.Add(hComp.Key)
        Endif
      
      Next
    
    Next

    For Each sExcl In Project.Documentation[sComp].Exclude
      If Not aComp.Exist(sExcl) Then Continue
      If Not aExclude.Exist(sExcl) Then aExclude.Add(sExcl)
    Next
    
    ' IF aExclude.Count = 1 THEN
    '   Message.Warning(Subst(("The &2 component is incompatible with the &1 component."), "<b>" & sComp & "</b>", "<b>" & aExclude[0] & "</b>"))
    '   RETURN TRUE
    ' ELSE IF aExclude.Count > 1 THEN
    '   Message.Warning(Subst(("These components are incompatible with the &1 component:\n&2"), "<b>" & sComp & "</b>", "<b>" & aExclude.Join("</b>, <b>") & "</b>"))
    '   RETURN TRUE
    ' ENDIF

    If aExclude.Count Then
      Message.Warning(Subst(("These components are incompatible:<br>&1."), "<b>" & sComp & "</b>, <b>" & aExclude.Join("</b>, <b>") & "</b>"))
      Return True
    Endif

    For Each sNeed In Project.Documentation[sComp].Need
      bFound = False
      For Each hComp In Project.Documentation.Components
        If hComp.Implement.Exist(sNeed) Then
          If Not aNeed.Exist(hComp.Key) Then aNeed.Add(hComp.Key)
          If aComp.Exist(hComp.Key) Then bFound = True
        Endif
      Next
      If Not bFound Then
        Message.Warning(Subst(("The &1 component needs one of the following components:<br>&2."), "<b>" & sComp & "</b>", "<b>" & aNeed.Join("</b>, <b>") & "</b>"))
        Return True
      Endif 
    Next
      
    For Each sNeed In Project.Documentation[sComp].Require
      If Not aComp.Exist(sNeed) Then 
        Message.Warning(Subst(("The &1 component needs the &2 component."), "<b>" & sComp & "</b>", "<b>" & sNeed & "</b>"))
        Return True
      Endif
    Next
  
  Next  
  
End

Public Sub GetCheckedOnly() As Boolean
  
  Return $bShowCheckedOnly
  
End

Public Sub SetCheckedOnly(Value As Boolean)
  
  $bShowCheckedOnly = Value  
  RefreshList
  
End

Public Sub HideBrowser()
  
  wizComponent.Index = 0
  
End

Public Sub SetLibraries(Value As String[])

  Dim sLib As String
  Dim hLibInfo As CLibraryInfo
  Dim sDep As String
  
  If Not Value Then Value = New String[]
  If Value.Join("\n") = $aLibraries.Join("\n") Then Return
  
  For Each sLib In $aLibraries
    hLibInfo = CLibraryInfo[sLib]
    For Each sDep In hLibInfo.Require
      UncheckComponent(sDep, sLib)
    Next
  Next

  $aLibraries = Value.Copy()
  
  For Each sLib In $aLibraries
    hLibInfo = CLibraryInfo[sLib]
    For Each sDep In hLibInfo.Require
      CheckComponent(sDep, sLib)
    Next
  Next

End

Public Sub GetLibraries() As String[]
  
  Return $aLibraries
  
End


Public Sub gvwComponent_Scroll()

  gvwComponent_MouseMove

End

Public Sub gvwComponent_Draw(X As Integer, Y As Integer, Width As Integer, Height As Integer, Row As Integer, Column As Integer)

  Dim sComp As String = $aComp[Row]
  Dim DX As Integer
  
  'Dim hComp As CComponent = CComponent.All[sComp]

  If Not IsCheckable() Then Return
  
  Select Case Column
    
    Case 0
      
      DX = (Width - 16) \ 2
      X += DX
      Y += DX
      'Y += (gvwComponent.Rows.Height - gvwComponent.Padding * 2 - 16) \ 2
      Width = 16
      Height = 16
      
      Style.PaintBox(X - 2, Y - 2, Width + 4, Height + 4)
      
      If sComp = "gb" Or If Not Project.Documentation.Exist(sComp) Then
        Paint.DrawPicture(Picture["img/16/checked-lock.png"], X, Y)
      Else
        Select Case GetState(sComp)
          Case ComponentChooser.Checked
            Paint.DrawPicture(Picture["img/16/checked.png"], X, Y)
          Case ComponentChooser.GrayChecked
            Paint.DrawPicture(Picture["img/16/checked-gray.png"], X, Y)
          Case ComponentChooser.Unchecked
        End Select
      Endif
  
  End Select

End

Public Sub btnDeprecated_Click()

  SetShowDeprecated(btnDeprecated.Value)

End
