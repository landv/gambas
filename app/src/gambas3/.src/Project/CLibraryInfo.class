' Gambas class file

Public Name As String
Public Path As String
Public NotFound As Boolean
Public Version As String
Public Classes As String[]
Public Libraries As String[]
Public Info As String
Public Require As String[]
Public CompatibleUntil As String

Private $sDesc As String

Static Private $cAll As New Collection
Static Private $sInfo As String

Static Public Sub _get(sPath As String) As CLibraryInfo
  
  Dim hLib As CLibraryInfo = $cAll[sPath]
  If Not hLib Then 
    hLib = New CLibraryInfo(sPath)
    $cAll[sPath] = hLib
  Endif
  Return hLib
  
End

Static Public Sub Clear()
  
  $cAll.Clear
  
End

Static Public Sub Exit()
  
  Clear()
  
End


Public Sub _new(sPath As String)
  
  Dim sLine As String
  Dim iPos As Integer
  Dim sData As String
  Dim aData As String[]
  
  ' Support for third-party components
  If Left(sPath) <> "/" Then 
    sPath = Component.Path &/ sPath
  Endif
  
  Path = sPath
  Name = File.Name(sPath)
  Classes = New String[]
  Libraries = New String[]
  Require = New String[]
    
  If Not sPath Or If Not Exist(sPath) Then 
    NotFound = True
    Return
  Endif
  
  Exec [System.Path &/ "bin/gba" & System.Version, "-x", sPath, ".startup"] To sData
  aData = Split(sData, "\n")
  Try Version = aData[4]
  
  For iPos = 5 To aData.Max
    If aData[iPos] Then Break
  Next
  
  While iPos <= aData.Max
    If Left(aData[iPos]) = "/" Then Libraries.Add(aData[iPos])
    Inc iPos
  Wend
    
  Exec [System.Path &/ "bin/gba" & System.Version, "-x", sPath, ".list"] To sData
  Classes = Split(sData, "\n", "", True)
  
  Exec [System.Path &/ "bin/gba" & System.Version, "-x", sPath, ".component"] To sData
  For Each sLine In Split(sData, "\n", "", True)
    sLine = Trim(sLine)
    If sLine Begins "Requires=" Then 
      Require.Insert(Split(Trim(Mid$(sLine, InStr(sLine, "=") + 1))))
    Else If sLine Begins "CompatibleUntil=" Then
      CompatibleUntil = Trim(Mid$(sLine, InStr(sLine, "=") + 1))
    Endif
  Next
    
End

Public Sub GetInfo() 
  
  Exec [System.Path &/ "bin/gba" & System.Version, "-x", Path, ".info"] To Info
  
End

Public Sub GetHelp() As String
  
  Dim sData As String
  Dim aData As String[]
  Dim iPos As Integer
  
  If Not $sDesc Then
  
    Exec [System.Path &/ "bin/gba" & System.Version, "-x", Path, ".project"] To sData
    
    aData = Split(sData, "\n")
    iPos = aData.Find("Description=*", gb.Like)
    If iPos >= 0 Then
      $sDesc = UnQuote(Scan(aData[iPos], "Description=*")[0])
    Else
      $sDesc = " "
    Endif
    
  Endif
  
  Return Trim($sDesc)
  
End

Public Sub GetDependencyName() As String
  
  Dim sProject As String
  Dim sLine As String
  Dim iPos As Integer
  
  Exec [System.Path &/ "bin/gba" & System.Version, "-x", Path, ".project"] To sProject
  
  For Each sLine In Split(sProject, "\n")
    If sLine Begins "PackageName=" Then
      sLine = Mid$(sLine, InStr(sLine, "=") + 1)
      iPos = RInStr(sLine, "-")
      If iPos Then sLine = Left(sLine, iPos - 1)
      Return sLine
    Endif
  Next
  
End

Private Sub AddInfo(sTitle As String, sValue As String)
  
  If $sInfo Then $sInfo &= "<br>"
  $sInfo &= Subst(("<b>&1:</b> &2"), sTitle, sValue)
  
End


Public Sub GetDescription() As String
  
  $sInfo = ""
  AddInfo(("Location"), Path)
  If NotFound Then
    $sInfo &= "<br><b><font color=\"red\">" & ("WARNING! Library not found.") & "</font></b>"
  Else
    AddInfo(("Provides"), Classes.Join(", "))
    If Require.Count Then AddInfo(("Requires"), Require.Join(", "))
  Endif
  
  Return "<font size=\"+1\"><b>" & Name & "</b> " & Version & "</font><br><font size=\"-1\" color=\"#" & Hex$(Color.Merge(Color.Foreground, Color.LightForeground), 6) & "\">" & $sInfo & "</font>"
  
End
