' Gambas class file

Static Private $bShowUsed As Boolean
Static Private $bShowLibraries As Boolean


Private $sIcon As String

Private $bCanInitComponents As Boolean

Private $aArg As String[]
Private $aEnv As String[]

Private $aComponents As String[]
Private $aLibraries As String[]

Private $iDoNotRefreshComponent As Integer

Private Const COMPONENT_PROPERTIES_TAB As Integer = 1
Private Const LIBRARY_TAB As Integer = 3

Private $bInitInfo As Boolean
Private $aNeed As String[]
Private $aRequire As String[]
Private $aExclude As String[]
Private $aImplement As String[]
Private $hComp As FileCompletion

Static Public Function Run() As Boolean

  Return Not FProjectProperty.ShowModal()

End

Static Public Function ShowLibraries() As Boolean

  $bShowLibraries = True
  Return Not FProjectProperty.ShowModal()

End

Public Sub Form_Open()

  Dim sLang As String
  Dim hBorder As Border

  Me.Title = ("Project properties") & " - " & Project.Name

  txtName.Text = "<font size=\"+2\"><b>" & Project.Name & "</b></font><br>" & File.Dir(Project.Dir)

  cmbDefaultLanguage.Clear
  For Each sLang In Language.GetAll()
    cmbDefaultLanguage.Add(Language.ToName(sLang))
  Next
  
  With Project

    txtTitle.Text = .Title
    txtDesc.Text = .Description
    txtAuthor.Text = .Authors
    cmbControlPublic.Index = If(.ControlPublic, 0, 1)
    cmbModulePublic.Index = If(.ModulePublic, 0, 1)
    cmbWarning.Index = If(.Warnings, 0, 1)
    txtMajor.Value = .MajorVersion
    txtMinor.Value = .MinorVersion
    txtRelease.Value = .ReleaseVersion
    cmbTranslate.Index = If(.Localize, 0, 1)
    cmbType.Index = .Type
    cmbDefaultLanguage.Text = Language.ToName(System.Language)
    Try cmbDefaultLanguage.Text = Language.ToName(Project.Language)
    ' Select Case .Type
    '   Case .TYPE_NORMAL
    '     radTypeNormal.Value = True
    '   Case .TYPE_LIBRARY
    '     radTypeLibrary.Value = True
    '   Case .TYPE_COMPONENT
    '     radTypeComponent.Value = True
    ' End Select
    $sIcon = .Icon
    UpdateIcon
    txtTabSize.Value = .TabSize
    'cmbStackSize.Index = 0
    'If .Stack Then cmbStackSize.Text = .Stack & " K"
    'cmbStackTrace.Index = If(.StackTrace, 0, 1)
    chkGetVersionFromFile.Value = .VersionFile
    'chkVersion.Value = NOT IsNull(.VersionProgram)
    cmbTerminal.Index = If(.UseTerminal, 0, 1)
    cmbRedirect.Index = If(.RedirectStderr, 0, 1)
    cmbProfile.Index = If(.Profiling, 0, 1)
    cmbHttpServer.Index = If(.UseHttpServer, 0, 1)
    $aLibraries = .Libraries.Copy()
    $aComponents = .Components.Copy()

  End With
  
  hBorder = Border("radius:5;width:2.5;margin:8;padding:6")
  hBorder.Color = Color.Gradient(Color.LightForeground, Color.TextBackground)
  gvwLibrary.Rows.Border = hBorder
  
  choComponent.Checkable = True
  choComponent.CheckedComponents = Project.Components
  choComponent.Libraries = $aLibraries
  
  chkShowUsed.Value = $bShowUsed
  $bCanInitComponents = True

  ipnProject.Index = 0

  InitEnvironment

  btnOK.Enabled = Not Project.ReadOnly And Not Project.Running

  $bInitInfo = False

  If $bShowLibraries Then 
    $bShowLibraries = False
    ipnProject.Index = LIBRARY_TAB
  Endif
  
End

Private Sub InitEnvironment()
  
  $aArg = Project.Arguments.Copy()
  $aEnv = Project.Environment.Copy()

  tvwArg.Rows.Count = $aArg.Count
  tvwArg.Rows.Resizable = False
  tvwArg.Columns.Count = 1
  tvwArg.Columns.Resizable = True
  'tvwArg.Columns[0].Text = ("Argument")
    
  tvwEnv.Rows.Count = $aEnv.Count
  tvwEnv.Rows.Resizable = False
  tvwEnv.Columns.Count = 2
  tvwEnv.Columns[0].Text = ("Variable")
  tvwEnv.Columns[0].Width = -1
  tvwEnv.Columns[0].Width = Max(tvwEnv.Columns[0].Width, Desktop.Scale * 20)
  tvwEnv.Columns[1].Text = ("Value")
  
End

Private Sub SaveEnvironment()
  
  Dim iInd As Integer
  
  tvwArg.Save
  tvwEnv.Save
  
  While iInd < $aEnv.Count
    If Not Trim(Scan($aEnv[iInd], "*=*")[0]) Then 
      $aEnv.Remove(iInd)
    Else 
      Inc iInd
    Endif
  Wend

  Project.Arguments = $aArg
  Project.Environment = $aEnv
  
End

Public Sub btnCancel_Click()

  Me.Close

End


Private Function DoApply() As Boolean

  Dim bRefreshForm As Boolean
  Dim bRefreshEditor As Boolean

  If choComponent.CheckSelection() Then Return True

  With Project

    .Title = Trim(txtTitle.Text)
    .Description = Trim(txtDesc.Text)
    .Authors = Trim(txtAuthor.Text)
    .Icon = $sIcon
    .Profiling = cmbProfile.Index = 0
    .UseTerminal = cmbTerminal.Index = 0
    .RedirectStderr = cmbRedirect.Index = 0
    .UseHttpServer = cmbHttpServer.Index = 0
    
    If .ControlPublic <> (cmbControlPublic.Index = 0) Or If .ModulePublic <> (cmbModulePublic.Index = 0) Then
      Project.ResetScan
      Project.DeleteCompiledFiles
    Endif

    .ControlPublic = cmbControlPublic.Index = 0
    .ModulePublic = cmbModulePublic.Index = 0
    .Warnings = cmbWarning.Index = 0
    .MajorVersion = txtMajor.Value
    .MinorVersion = txtMinor.Value
    .ReleaseVersion = txtRelease.Value
    .VersionFile = chkGetVersionFromFile.Value
    '.SnapToGrid = chkSnap.Value

    'IF chkShowGrid.Value <> .ShowGrid OR .Snap <> txtGrid.Value THEN
    '  bRefreshForm = TRUE
    'ENDIF

    '.ShowGrid = chkShowGrid.Value
    '.Snap = txtGrid.Value
    If cmbTranslate.Index = 0 And Not .Localize Then
      Project.DeleteCompiledFiles()
    Endif
    .Localize = cmbTranslate.Index = 0
    .Language = Language.FromName(cmbDefaultLanguage.Text)
    
    .Type = cmbType.Index

    If .TabSize <> txtTabSize.Value Then
      bRefreshEditor = True
    Endif

    .TabSize = txtTabSize.Value
    
    .Libraries = $aLibraries

  End With

  SaveComponents
  SaveEnvironment
  WriteComponent

  Project.WriteProject
  Project.MakeDirectoryIcon
  Project.Compile

  Project.RefreshRoot
  If bRefreshForm Then Project.RefreshForm
  If bRefreshEditor Then Project.RefreshEditor
  
  Project.SetMessage(("OK"))

  Return

BAD_GRID:

  Message.Error(("Snapping value is incorrect."))
  Return True

End


Public Sub btnOK_Click()

  If DoApply() Then Return
  
  Me.Close(True)

End


Private Sub SaveComponents()

  Project.Components = choComponent.CheckedComponents
  Project.RefreshComponents

End


' Public Sub gvwComponent_Data(Row As Integer, Column As Integer)
'   
'   Dim hCompItem As ComponentItem = $cComp[$aComp[Row]]
'   Dim hComp As CComponent = CComponent.All[$aComp[Row]]
'   
'   With gvwComponent.Data
'   
'     Select Case Column
'       
'       Case 0
'         .Picture = hCompItem.Picture
'         
'       Case 1
'         .Text = hCompItem.Key
'         .Font.Bold = True
'         If hComp.State = CComponent.UNSTABLE Then 
'           .Font.Italic = True
'         Else If hComp.State = CComponent.DEPRECATED Then
'           .Foreground = Color.LightForeground
'           '.Font.Strikeout = True
'         Endif
'         
'       Case 2
'         .WordWrap = True
'         .RichText = hCompItem.GetDescription()
'         If hComp.State = CComponent.UNSTABLE Then 
'           .Font.Italic = True
'         Else If hComp.State = CComponent.DEPRECATED Then
'           .Foreground = Color.LightForeground
'           '.Font.Strikeout = True
'         Endif
'         
'       Case 3
'         Select Case hComp.State
'           Case CComponent.STABLE_NOT_FINISHED
'             .Picture = Picture["img/16/unfinished.png"]
'           Case CComponent.UNSTABLE
'             .Picture = Picture["img/16/experimental.png"]
'           Case CComponent.STABLE
'             .Picture = Picture["img/16/finished.png"]
'           Case CComponent.DEPRECATED
'             .Picture = Picture["img/16/deprecated.png"]
'         End Select
'       
'     End Select
'     
'     .Alignment = Align.TopNormal
'     '.Background = If(Even(Row), Color.Gradient(Color.LightForeground, Color.TextBackground, 0.9), Color.TextBackground)
'     .Background = Color.Gradient(Color.LightForeground, Color.TextBackground, 0.95)
'     
'   End With
'   
' End





' Private Function CheckComponent(sKey As String, bCheck As Boolean) As Boolean
' 
'   Dim bBefore As Boolean
'   Dim sDep As String
' 
'   bBefore = IsChecked(sKey)
'   If bBefore = bCheck Then Return 
' 
'   If bCheck Then
'     $cComp[sKey].Check("")
'     For Each sDep In GetRequire(sKey)
'       $cComp[sDep].Check(sKey)
'     Next
'   Else
'     $cComp[sKey].Uncheck("")
'   Endif
'   
' End

' PRIVATE FUNCTION CheckComponent(sKey AS String, bCheck AS Boolean) AS Boolean
' 
'   DIM hComp AS CComponent
'   DIM sComp AS String
'   DIM aExclude AS NEW String[]
'   DIM aNeed AS NEW String[]
'   DIM sImpl AS String
'   DIM sNeed AS String
'   DIM bFound AS Boolean
' 
'   WITH cvwComponent
' 
'     IF NOT .Available THEN RETURN
' 
'     IF bCheck THEN
' 
'       FOR EACH sImpl IN CComponent.All[sKey].Implement
'       
'         FOR EACH hComp IN CComponent.All
'         
'           IF hComp.Key = sKey THEN CONTINUE
'           IF hComp.Implement.Find(sImpl) >= 0 THEN
'             IF NOT IsChecked(hComp.Key) THEN CONTINUE
'             IF aExclude.Find(hComp.Key) < 0 THEN aExclude.Add(hComp.Key)
'           ENDIF
'         
'         NEXT
'       
'       NEXT
' 
'       FOR EACH sComp IN CComponent.All[sKey].Exclude
'         IF NOT IsChecked(sComp) THEN CONTINUE
'         IF aExclude.Find(sComp) < 0 THEN aExclude.Add(sComp)
'       NEXT
'       
'       IF aExclude.Count = 1 THEN
'         IF Message.Warning(Subst(("The &2 component is incompatible with &1 component.\nIt will be disabled."), sKey, aExclude[0]), ("Continue"), ("Cancel")) = 2 THEN RETURN TRUE
'       ELSE IF aExclude.Count > 1 THEN
'         IF Message.Warning(Subst(("These components are incompatible with &1 component:\n&2\n\nThey will be disabled."), sKey, aExclude.Join(", ")), ("Continue"), ("Cancel")) = 2 THEN RETURN TRUE
'       ENDIF
' 
'       FOR EACH sNeed IN CComponent.All[sKey].Need
'         bFound = FALSE
'         FOR EACH hComp IN CComponent.All
'           IF hComp.Implement.Find(sNeed) >= 0 THEN
'             aNeed.Add(hComp.Key)
'             IF IsChecked(hComp.Key) THEN bFound = TRUE
'           ENDIF
'         NEXT
'         IF NOT bFound THEN
'           Message.Warning(Subst(("The &1 component needs one of the following components:\n&2."), sKey, aNeed.Join(", ")))
'           RETURN TRUE
'         ENDIF 
'       NEXT
'       
'       FOR EACH sComp IN aExclude
'         IF CheckComponent(sComp, FALSE) THEN RETURN TRUE
'       NEXT
' 
'       FOR EACH sComp IN CComponent.All[sKey].Require
'         IF CheckComponent(sComp, TRUE) THEN RETURN TRUE
'       NEXT
' 
'       .MoveTo(sKey)
'       .Item.Picture = $hCheck
' 
'     ELSE
' 
'       .MoveTo(sKey)
'       .Item.Picture = $hUncheck
' 
'       FOR EACH hComp IN CComponent.All
'         IF hComp.Require.Find(sKey) < 0 THEN CONTINUE
'         CheckComponent(hComp.Key, FALSE)
'       NEXT
' 
'     ENDIF
' 
'   END WITH
' 
' END


Public Sub chkShowUsed_Click()

  choComponent.ShowCheckedOnly = chkShowUsed.Value

End


' PRIVATE SUB FillLibrary(sLib AS String)
' 
'   DIM sText AS String
' 
'   WITH CComponent.All[sLib]
' 
'     sText = "<h2>" & sLib & "</h2>" & .Name & "<p>"
' 
'     IF .Alpha THEN
'       sText = sText & "<table bgcolor=#43C7FF cellspacing=0 cellpadding=2><tr><td><img src=\"img/32/warning.png\"></td><td>" & ("WARNING! This component is in BETA version.") & " " &
'         ("It is under development and may change without notice.") & "</td></tr></table><br>"
'     ELSE
'       'sText = sText & "<p>"
'     ENDIF
' 
'     sText = sText & "<b>" & ("Authors:") & "</b> " & .Authors.Join(", ")
' 
'     IF .Controls THEN
'       IF .Controls.Count THEN
'         sText = sText & "<p><b>" & ("Controls:") & "</b> " & .Controls.Join(", ")
'       ENDIF
'     ENDIF
' 
'     txtComponent.Text = sText
' 
'   END WITH
' 
' END

' PUBLIC SUB clvLibrary_Select()
' 
'   FillLibrary(clvLibrary.Key)
'   'lblLibrary.Visible = TRUE
'   'clvLibrary.Height = 200
'   'clvLibrary.Current.EnsureVisible
' 
' END


Public Sub btnIcon_Click()

  Dim sIcon As String

  sIcon = FSelectIcon.Run($sIcon, True)
  If Not sIcon Then Return

  $sIcon = sIcon
  UpdateIcon
  
End

' Public Sub chkShowBeta_Click()
' 
'   $bShowBeta = chkShowBeta.Value
'   RefreshComponents
' 
' End



' Public Sub cmbComponent_Click()
' 
'   Dim bComp As Boolean = cmbComponent.Index = 0
' 
'   If bComp Then InitRequires
' 
'   tabProject[REQUIRES_TAB].Visible = bComp
'   'tabProject[COMPONENT_TAB + 1].Visible = bComp
'   cmbComponentState.Enabled = bComp
' 
' End

' Private Sub GetParent(sPath As String) As String
'   
'   Dim hFile As File
'   Dim sLine As String
'   Dim sParent As String
'   
'   hFile = Open sPath
'   While Not Eof(hFile)
'     Line Input #hFile, sLine
'     sLine = Trim(sLine)
'     If Not sLine Then Continue
'     If Left(sLine) = "'" Then Continue
'     If sLine Like "INHERITS *" Then 
'       Try sParent = Trim(Scan(sLine, "INHERITS *")[0])
'       Return sParent
'     Endif
'     If sLine Like "EXPORT" Then Continue
'     If sLine Like "CREATE" Then Continue
'     If sLine Like "EXPORT *" Then Continue
'     If sLine Like "CREATE *" Then Continue
'     Break
'   Wend 
'   
' End





' PUBLIC SUB cmbRequire_Click()
' 
'   btnAdd_Click
' 
' END


' PUBLIC SUB chkVersion_Click()
' 
'   txtVersionProg.Enabled = chkVersion.Value
'   TRY txtVersionProg.SetFocus  
' 
' END
' 

' Public Sub btnCommit_Click()
' 
'   If FCommit.Run($sVerCtrlStatus, $sVerCtrlDiff) Then Return
'   tabProject_Click
'   
' End


' PUBLIC SUB btnSwap_Click()
' 
'   IF IsChecked("gb.qt") THEN 
'     cvwComponent["gb.qt"].Picture = $hUncheck
'     cvwComponent["gb.gtk"].Picture = $hCheck
'   ELSE IF IsChecked("gb.gtk") THEN 
'     cvwComponent["gb.gtk"].Picture = $hUncheck
'     cvwComponent["gb.qt"].Picture = $hCheck
'   ENDIF
' 
' END

Public Sub btnUndo_Click()

  choComponent.CheckedComponents = Project.Components
  choComponent.Libraries = $aLibraries

End

Public Sub tvwArg_Data(Row As Integer, (Column) As Integer)

  tvwArg.Data.Text = $aArg[Row]  

End

Public Sub btnInsertArg_Click()

  If $aArg.Count >= 255 Then Return
  $aArg.Add("")
  Inc tvwArg.Rows.Count
  tvwArg.MoveTo($aArg.Max, 0)
  EditArg

End

Public Sub btnRemoveArg_Click()
  
  If $aArg.Count = 0 Then Return
  If tvwArg.Row < 0 Then Return
  tvwArg.Save
  $aArg.Remove(tvwArg.Row)
  Dec tvwArg.Rows.Count
  tvwArg.Refresh
  
End


Public Sub tvwArg_Save(Row As Integer, (Column) As Integer, Value As String)

  $aArg[Row] = Value  

End

Public Sub tvwArg_Insert()
  
  btnInsertArg_Click
  
End

Private Sub EditArg()

  tvwArg.Edit
  If $hComp And If $hComp.Editor <> tvwArg.Editor Then $hComp = Null
  If Not $hComp Then $hComp = New FileCompletion(tvwArg.Editor)

End

Public Sub tvwArg_Click()

  EditArg

End

Public Sub btnMoveUpArg_Click()

  If tvwArg.Row <= 0 Then Return 
  tvwArg.Save
  Swap $aArg[tvwArg.Row], $aArg[tvwArg.Row - 1]
  tvwArg.Refresh
  Dec tvwArg.Row
  EditArg  

End

Public Sub btnMoveDownArg_Click()

  If tvwArg.Row >= (tvwArg.Rows.Count - 1) Then Return 
  tvwArg.Save
  Swap $aArg[tvwArg.Row], $aArg[tvwArg.Row + 1]
  tvwArg.Refresh
  Inc tvwArg.Row
  EditArg

End

Public Sub tvwEnv_Click()

  tvwEnv.Edit

End

Public Sub tvwEnv_Data(Row As Integer, Column As Integer)

  Dim aEnv As String[] = Scan($aEnv[Row], "*=*")
  
  Try tvwEnv.Data.Text = aEnv[Column]
  
Catch

End

Public Sub tvwEnv_Save(Row As Integer, Column As Integer, Value As String)

  Dim aEnv As String[] = Scan($aEnv[Row], "*=*")
  
  If Column = 0 Then 
    $aEnv[Row] = Trim(Value) & "=" & aEnv[1]
    tvwEnv.Columns[0].Width = -1
  Else 
    $aEnv[Row] = aEnv[0] & "=" & Value
  Endif
  
End

Public Sub tvwEnv_Insert()
  
  If Key.Normal Then
    btnOK.Value = True
  Else If Key.Control Then 
    btnInsertEnv_Click
  Endif
  
End

Public Sub btnInsertEnv_Click()

  If $aEnv.Count >= 255 Then Return
  $aEnv.Add("=")
  Inc tvwEnv.Rows.Count
  tvwEnv.MoveTo($aEnv.Max, 0)
  tvwEnv.Edit      

End

Public Sub mnuInsertEnv_Click()
  
  Dim sNewEnv As String = Last.Tag
  Dim iInd As Integer
  Dim aNewEnv As String[]
  Dim aEnv As String[]
  
  If Not sNewEnv Then Return
  
  For Each sNewEnv In Split(sNewEnv)
  
    aNewEnv = Scan(sNewEnv, "*=*")
    For iInd = 0 To $aEnv.Max
      aEnv = Scan($aEnv[iInd], "*=*")
      If aEnv[0] = aNewEnv[0] Then
        aEnv[1] = aNewEnv[1]
        $aEnv[iInd] = aEnv[0] & "=" & aEnv[1]
        tvwEnv.Refresh
        sNewEnv = ""
        Break
      Endif
    Next
  
    If sNewEnv Then
      $aEnv.Add(sNewEnv)
      Inc tvwEnv.Rows.Count
    Endif
    
  Next
  
End


Public Sub btnRemoveEnv_Click()
  
  If $aEnv.Count = 0 Then Return
  If tvwEnv.Row < 0 Then Return
  tvwEnv.Save
  $aEnv.Remove(tvwEnv.Row)
  Dec tvwEnv.Rows.Count
  tvwEnv.Refresh
  
End


' Public Sub cmbTranslate_Click()
' 
'   If cmbTranslate.Index = 0 Then 
'     cmbDefaultLanguage.Enabled = True
'     cmbDefaultLanguage.Text = Language.ToName(System.Language)
'     Try cmbDefaultLanguage.Text = Language.ToName(Project.Language)
'   Else 
'     cmbDefaultLanguage.Index = 0
'     cmbDefaultLanguage.Enabled = False
'   Endif
' 
' End

Private Sub UpdateIcon()
  
  btnIcon.Picture = Project.StretchIcon(Project.Dir &/ $sIcon, btnIcon.Width - 16).Picture
  btnIcon.ToolTip = $sIcon
  
End

Public Sub btnInsertLib_Click()

  Dim hLib As CLibraryInfo
  Dim sPath As String
  Dim I As Integer

  Dialog.Title = ("Select a Gambas application")
  Dialog.Filter = ["*.gambas", ("Gambas applications")]
  Dialog.Path = Settings["/FProjectProperty/Library"]

  If Dialog.OpenFile() Then Return
  
  sPath = Dialog.Path

  Settings["/FProjectProperty/Library"] = File.Dir(sPath)

  hLib = CLibraryInfo[sPath]
  If hLib.Classes.Count = 0 Then
    Message.Warning(Subst(("<b>&1</b> does not export any class."), File.Name(sPath)))
    Return
  Endif

  For I = 0 To $aLibraries.Max
    If File.Name($aLibraries[I]) = File.Name(sPath) Then
      hLib = CLibraryInfo[$aLibraries[I]]
      If Not hLib.NotFound Then
        Message.Warning(Subst(("<b>&1</b> is already used as a library."), File.Name(sPath)))
        Return
      Endif
      Break
    Endif
  Next

  If I <= $aLibraries.Max Then
    $aLibraries[I] = sPath
  Else
    $aLibraries.Add(sPath)
  Endif
  
  Project.UpdateLibraries($aLibraries)
  RefreshLibraries

End

Private Sub RefreshLibraries()
  
  Dim Y As Integer
  
  If $iDoNotRefreshComponent Then Return
  
  gvwLibrary.Columns.Count = 1
  gvwLibrary.Rows.Count = $aLibraries.Count
  
  For Y = 0 To $aLibraries.Max
    
    With gvwLibrary[Y, 0]
      
      '.Picture = Picture["icon:/large/exec"]
      .Alignment = Align.TopNormal
      .RichText = CLibraryInfo[$aLibraries[Y]].GetDescription()
      .WordWrap = True
      .Background = Color.Gradient(Color.LightForeground, Color.TextBackground, 0.96)
      
    End With
    
    gvwLibrary.Rows[Y].Height = -1
    
  Next
  
  choComponent.Libraries = $aLibraries
  
End

Private Sub RemoveLibrary(sPath As String)
  
  Dim iPos As Integer
  
  iPos = $aLibraries.Find(sPath)
  If iPos >= 0 Then
    $aLibraries.Remove(iPos)
    Project.UpdateLibraries($aLibraries)
    RefreshLibraries
  Endif
  
End


Public Sub btnRemoveLib_Click()

  If gvwLibrary.Row < 0 Then Return
  RemoveLibrary($aLibraries[gvwLibrary.Row])
  
End

Public Sub btnMoveUpLib_Click()

  Dim iPos As Integer = gvwLibrary.Row

  If iPos < 1 Then Return
  
  Swap $aLibraries[iPos], $aLibraries[iPos - 1]
  RefreshLibraries
  Dec gvwLibrary.Row
  
End

Public Sub btnMoveDownLib_Click()

  Dim iPos As Integer = gvwLibrary.Row

  If iPos < 0 Or If iPos >= $aLibraries.Max Then Return
  
  Swap $aLibraries[iPos], $aLibraries[iPos + 1]
  RefreshLibraries
  Inc gvwLibrary.Row

End

Public Sub btnUndoLib_Click()

  $aLibraries = Project.Libraries.Copy()
  RefreshLibraries

End

Public Sub chkGetVersionFromFile_Click()

  txtMajor.Enabled = Not chkGetVersionFromFile.Value
  txtMinor.Enabled = txtMajor.Enabled
  txtRelease.Enabled = txtMajor.Enabled

End

' Public Sub UncheckComponents(aComp As String[])
'   
'   Dim sComp As String
'   
'   For Each sComp In aComp
'     If Left(sComp) <> "/" Then $cComp[sComp].Uncheck("")
'   Next
'   
' End

Public Sub ipnProject_Click()

  Select Case ipnProject.Text
    Case ("Components") 
      choComponent.SetFocus
      choComponent.HideBrowser
    Case ("Libraries") 
      RefreshLibraries
    Case ("Options") 
      panHttpServer.Enabled = choComponent.IsChecked("gb.web") 'Project.Components.Exist("gb.web")
    Case ("Statistics") 
      UpdateStat
    Case ("Information") 
      UpdateInfo
  End Select

End

Private Sub AddStat(sName As String, sValue As String)

  Dim N As Integer
  
  N = gvwStat.Rows.Count
  Inc gvwStat.Rows.Count
  gvwStat[N, 0].Text = sName
  gvwStat[N, 0].Foreground = Color.LightForeground
  gvwStat[N, 1].Text = sValue
  
End


Private Sub UpdateStat()

  Dim hModule As CModule
  Dim iSize As Long
  
  gvwStat.Columns.Count = 2
  gvwStat.Rows.Count = 0
  
  AddStat(("Modules"), CStr(Project.GetCount("module")))
  AddStat(("Classes"), CStr(Project.GetCount("class")))

  For Each hModule In CModule.All
    If Not hModule.Used Then Continue
    AddStat(hModule.NamePlural, CStr(Project.GetCount(hModule.Key)))
  Next

  AddStat(("Lines of code"), Format(Project.GetLinesOfCode(), ",0"))
  
  Try iSize = Stat(Project.GetExecPath()).Size
  If iSize Then AddStat(("Executable size"), Format(iSize, ",0") & " " & ("bytes"))

  gvwStat.Columns[0].Width = -1
  gvwStat.Columns[0].Width += 16
  
End

Public Sub cmbType_Click()

  Select cmbType.Index
    
    Case Project.TYPE_NORMAL
      ipnProject[COMPONENT_PROPERTIES_TAB].Visible = False
        
    Case Project.TYPE_COMPONENT
      ipnProject[COMPONENT_PROPERTIES_TAB].Visible = True
      'ipnProject[COMPONENT_PROPERTIES_TAB].Text = ("Component properties")
      lblInfo.Text = ("Information about component")
      panCompatible.Hide
      
    Case Project.TYPE_LIBRARY
      ipnProject[COMPONENT_PROPERTIES_TAB].Visible = True
      'ipnProject[COMPONENT_PROPERTIES_TAB].Text = ("Library properties")
      lblInfo.Text = ("Information about library")
      panCompatible.Show
    
  End Select

End

'--------------------------------------------------------------------------

Private Sub ReadComponentFile()

  Dim cComp As Collection
  Dim aVer As String[]
  
  $aNeed = New String[]
  $aRequire = New String[]
  $aExclude = New String[]
  $aImplement = New String[]
  
  cComp = Project.ReadComponentFile()
  If Not cComp Then Return
  
  If cComp.Exist("Need") Then $aNeed = cComp["Need"]
  If cComp.Exist("Require") Then $aRequire = cComp["Require"]
  If cComp.Exist("Exclude") Then $aExclude = cComp["Exclude"]
  If cComp.Exist("Implement") Then $aImplement = cComp["Implement"]
  cmbComponentState.Index = cComp["State"]
  cmbHidden.Index = If(cComp["Hidden"], 0, 1)
  If cComp.Exist("Include") Then txtIncludeInfo.Text = cComp["Include"].Join(",")

  Try aVer = Split(cComp["CompatibleUntil"], ".")
  If aVer And If aVer.Count = 3 Then
    chkCompat.Value = True
    Try txtCompMajor.Value = CInt(aVer[0])
    Try txtCompMinor.Value = CInt(aVer[1])
    Try txtCompRelease.Value = CInt(aVer[2])
  Else
    chkCompat.Value = False
  Endif
  
End

Private Sub WriteFeatures(hCont As Container, aFeature As String[])
  
  Dim hCtrl As CheckBox
  
  For Each hCtrl In hCont.Children
    If hCtrl.Value Then aFeature.Add(hCtrl.Tag)
  Next
  
End

Private Sub WriteComponent()

  Dim cComp As New Collection

  If Project.Type <> Project.TYPE_NORMAL Then
    
    ' If the component information has not been initialized, do nothing, don't erase the component file!
    If Not $bInitInfo Then Return

    cComp["State"] = cmbComponentState.Index
  
    $aNeed.Clear
    WriteFeatures(panNeed, $aNeed)
    WriteFeatures(panNeed2, $aNeed)
  
    cComp["Hidden"] = cmbHidden.Index = 0
    cComp["Implement"] = $aImplement
    cComp["Need"] = $aNeed
    cComp["Require"] = $aRequire
    cComp["Exclude"] = $aExclude
    If chkCompat.Value Then cComp["CompatibleUntil"] = CStr(txtCompMajor.Value) & "." & CStr(txtCompMinor.Value) & "." & CStr(txtCompRelease.Value)
    cComp["Include"] = Split(Trim(txtIncludeInfo.Text))
    
  Endif
  
  Project.WriteComponentFile(cComp)

End

Private Sub ReadComponent()

  'Dim hComp As CComponent
  
  Dim sComp As String
  
  ReadComponentFile
  
  ' aComp = New String[]
  ' For Each hComp In CComponent.All
  '   If hComp.Hidden Then Continue
  '   If hComp.Key = CComponent.PROJECT_NAME Then Continue
  '   If hComp.Key = Project.Name Then Continue 
  '   If hComp.Key = "gb" Then Continue
  '   If $aRequire.Exist(hComp.Key) Then Continue
  '   aComp.Add(hComp.Key)
  ' Next
  ' aComp.Sort
  
  ReadFeatures(panNeed, $aNeed)
  ReadFeatures(panNeed2, $aNeed)
  
  lvwRequire.Clear
  For Each sComp In $aRequire
    lvwRequire.Add(sComp, sComp, Picture["icon:/small/ok"])
  Next
  For Each sComp In $aExclude
    lvwRequire.Add(sComp, sComp, Picture["icon:/small/close"])
  Next
  
End

Private Sub ReadFeatures(hCont As Container, aFeature As String[])
  
  Dim hCtrl As CheckBox
  
  For Each hCtrl In hCont.Children
    hCtrl.Value = aFeature.Find(hCtrl.Tag, gb.IgnoreCase) >= 0
  Next
  
End

Private Sub AddRequireExclude(sComp As String, aComp As String[])

  Dim sIcon As String
  
  If sComp = Project.Name Then Return  
  If lvwRequire.Exist(sComp) Then Return
  
  If aComp = $aRequire Then
    sIcon = "ok"
  Else
    sIcon = "close"
  Endif

  aComp.Add(sComp)
  lvwRequire.Add(sComp, sComp, Picture["icon:/small/" & sIcon])
  
End


Public Sub btnRemove_Click()

  Dim sKey As String
  Dim iFind As Integer

  sKey = lvwRequire.Key
  If Not sKey Then Return
  lvwRequire.Remove(sKey)
  
  iFind = $aRequire.Find(sKey)
  If iFind >= 0 Then $aRequire.Remove(iFind)
  
  iFind = $aExclude.Find(sKey)
  If iFind >= 0 Then $aExclude.Remove(iFind)
  
End

Public Sub btnRemoveAll_Click()

  lvwRequire.Clear
  $aRequire.Clear
  $aExclude.Clear

End

Public Sub chkCompat_Click()

  txtCompMajor.Enabled = chkCompat.Value
  txtCompMinor.Enabled = chkCompat.Value
  txtCompRelease.Enabled = chkCompat.Value

End

Private Sub UpdateInfo()

  If $bInitInfo Then Return

  ReadComponent

  'Me.Title = 
  'lblTitle.Text = Project.Name
  
  ' Try aClass = Split(File.Load(Project.Dir &/ ".list"), "\n", "", True)
  ' If Not Error Then
  '   For iInd = 0 To aClass.Max
  '     If Left(aClass[iInd]) = "?" Then aClass[iInd] = Mid$(aClass[iInd], 2)
  '   Next
  ' Endif
  ' lstExport.List = aClass
  
  $bInitInfo = True

End

Public Sub Form_Arrange()

  btnUndo.Move(btnUndo.Parent.W - btnUndo.W - Desktop.Scale, Desktop.Scale)

End


Public Sub btnAddRequire_Click()

  Dim sComp As String

  sComp = FSelectComponent.Run($aRequire.Copy().Insert($aExclude)) 
  If Not sComp Then Return
  AddRequireExclude(sComp, $aRequire)

End

Public Sub btnAddExclude_Click()

  Dim sComp As String

  sComp = FSelectComponent.Run($aExclude.Copy().Insert($aRequire)) 
  If Not sComp Then Return
  AddRequireExclude(sComp, $aExclude)

End


Public Sub panGeneral_Arrange()

  txtAuthor.H = panGeneral.H - txtAuthor.Y - Desktop.Scale

End
