' Gambas class file

Private $sPath As String
Private $sDir As String
Private $sType As String
Private $bDoNotSetName As Boolean
Private $bInitFileChooser As Boolean
Private $bInitFilter As Boolean

Public Sub Run(sPath As String, sDir As String, sType As String)
  
  $sPath = sPath
  $sDir = sDir
  $sType = sType
  If Not Me.ShowModal() Then Return
  
End

Public Sub btnCancel_Click()

  Me.Close  

End

Public Sub lvwType_Select()

  Dim sPrefix As String
  Dim hChild As Control
  Dim bOpt As Boolean
 
  sPrefix = lvwType.Key
  For Each hChild In panOption.Children
    If Not hChild.Tag Then Continue
    hChild.Visible = Split(hChild.Tag, ",").Exist(sPrefix)
    bOpt = bOpt Or hChild.Visible
  Next
  
  lblOption.Visible = bOpt
  
  If Not $bDoNotSetName Then   
    sPrefix = UCase(Left(sPrefix)) & Mid(sPrefix, 2)
    Object.Lock(txtName)
    Select Case LCase(sPrefix)
      Case "text", "image", "html", "css", "js"
        txtName.Text = Project.GetNewName(sPrefix, $sDir)
      Case Else
        txtName.Text = Project.GetNewName(sPrefix)
    End Select
    'txtName.SelectAll
    Object.Unlock(txtName)
  Endif 
  
  'iFilter = $aFilterType.Find(LCase(sPrefix))
  '$iFilter = iFilter
  '$bUpdateExistingTab = True
  
  txtName.SelectAll
  txtName.SetFocus
  $bInitFilter = False
  
  'UpdateExistingTab
  
End

Public Sub InitFilter()
  
  Dim aFilter As String[]
  Dim hModule As CModule
  Dim sType As String
  
  If $bInitFilter Then Return
  
  If Not $bInitFileChooser Then
    Settings.Read(fchExisting)
    $bInitFileChooser = True
  Endif
  
  sType = lvwType.Key
  
  If Project.IsSourceDir($sDir) Then
    
    Select Case sType
      
      Case "module"
        aFilter = ["*.module", ("Gambas modules")]
      Case "class"
        aFilter = ["*.class", ("Gambas classes")]
      Case Else
        hModule = CModule[sType]
        aFilter = ["*." & hModule.Key, hModule.NameFilter]
      
    End Select

  Else
  
    Select Case sType
      Case "image"
        aFilter = ["*.png;*.jpg;*.jpeg;*.xpm;*.gif", ("Picture files")]
      Case "html"
        aFilter = ["*.htm;*.html", ("HTML files")]
      Case "css"
        aFilter = ["*.css", ("Cascading style sheets")]
      Case "js"
        aFilter = ["*.js", ("Javascript files")]
        
    End Select
    
  Endif
  
  fchExisting.Filter = aFilter
  
  UpdateExistingTab
  
  $bInitFilter = True
  
End


Public Sub Form_Open()

  Dim hModule As CModule

  $bDoNotSetName = False
  
  Settings.Read(Me)
  
  lvwType.Clear

  If Project.IsSourceDir($sDir) Then

    lvwType.Add("module", ("Module"), Project.MakeModuleIcon("module", 32).Picture)
    lvwType.Add("class", ("Class"), Project.MakeModuleIcon("class", 32).Picture)
    
    For Each hModule In CModule.All
      If hModule.Used Then
        lvwType.Add(hModule.Key, hModule.Name, Project.MakeModuleIcon(hModule.Key, 32).Picture)
      Endif
    Next
    
  Else
  
    lvwType.Add("image", ("Image"), Picture["icon:/32/image"])
    lvwType.Add("text", ("Text file"), Picture["icon:/32/text"])
    lvwType.Add("html", ("HTML file"), Picture["icon:/32/html"])
    lvwType.Add("css", ("Style sheet"), Picture["icon:/32/html"])
    lvwType.Add("js", ("Javascript file"), Picture["icon:/32/script"])

  Endif
  
  ' For Each hPanel In lstType.Children
  '   If Not hPanel.Tag Then Continue
  '   hPanel.Visible = aFilterType.Exist(hPanel.Tag)
  '   If Not hPanel.Visible Then Continue
  '   hPictureBox = hPanel.Children[0]
  '   'hPictureBox.W = hPictureBox.H
  '   hModule = CModule[hPanel.Tag]
  '   If Not hModule Then Continue
  '   hPanel.Visible = hModule.Used
  '   If hPanel.Visible Then
  '     If Not hPictureBox.Picture Then hPictureBox.Picture = Project.MakeModuleIcon(hPanel.Tag, 32).Picture
  '   Endif
  ' Next
  
  cmbParent.List = Project.GetClassesOnly()
  cmbParent.Add(("(No parent)"), 0)
  If Project.IsSourcePath($sPath) Then
    cmbParent.Text = Project.GetParentClass($sPath)
  Endif
  If cmbParent.Index < 0 Then cmbParent.Index = 0
  
  If Not $sType Then $sType = "module"
  lvwType[$sType].Selected = True
  
  tabFile.Index = 0
  
  lvwType_Select

End

Public Sub txtWidth_Change()

  If btnLinked.Value Then txtHeight.Value = txtWidth.Value  

End

Public Sub txtHeight_Change()

  If btnLinked.Value Then txtWidth.Value = txtHeight.Value    

End

Public Sub txtName_Change()

  $bDoNotSetName = txtName.Text  

End

Private Sub CreateFile() As Boolean
  
  Dim sType As String = lvwType.Key
  Dim sName As String = Trim(txtName.Text)
  Dim sMsg As String
  Dim sTemp As String
  Dim hImage As Image

  Select Case sType
  
    Case "text", "image", "html", "css", "js"
    
      If sName And If chkExt.Value Then
        If sType = "image" Then 
          sName = File.SetExt(sName, LCase(cmbImageType.Text))
        Else If sType = "html" Or If sType = "css" Or If sType = "js" Then
          sName = File.SetExt(sName, sType)
        Endif
      Endif
    
      sMsg = Project.CheckFileName(sName, $sDir)
      If sMsg Then 
        txtName.SetFocus
        Balloon.Warning(sMsg, txtName)
        Return True
      Endif
  
    Case Else

      sMsg = Project.CheckClassName(sName, True)
      If sMsg Then 
        txtName.SetFocus
        Balloon.Warning(sMsg, txtName)
        Return True
      Endif
  
  End Select 
  
  Select Case sType
  
    Case "module"
    
      sTemp = "' Gambas module file\n\n"
      
      Project.InsertSource(sName, sType, $sDir, sTemp)
  
    Case "class"
    
      sTemp = "' Gambas class file\n\n"
      If chkExported.Value Then sTemp &= "EXPORT\n"
      If cmbParent.Index > 0 Then sTemp &= "INHERITS " & cmbParent.Text & "\n"
      sTemp = RTrim(sTemp) & "\n"
      
      Project.InsertSource(sName, sType, $sDir, sTemp)
  
    Case "form", "report", "webform"
    
      sTemp = "' Gambas class file\n\n"
      
      If chkDialog.Value Then 
        sTemp &= "Public Sub Run() As Boolean\n\n"
                 "\tReturn Not Me.ShowModal()\n\n"
                 "End\n\n"
                 "Public Sub btnOK_Click()\n\n"
                 "\tMe.Close(TRUE)\n\n"
                 "End\n\n"
                 "Public Sub btnCancel_Click()\n\n"
                 "\tMe.Close\n\n"
                 "End\n\n" 
        sTemp = Replace(sTemp, "\t", Space$(Project.TabSize))
      Endif
      
      Project.InsertSource(sName, "class", $sDir, sTemp, True, True)
      
      sTemp = Project.FORM_MAGIC & "\n\n" &   
              "{ " & sName & " " & UCase(Left(sType)) & Mid$(sType, 2) & "\n"
      
      If sType = "form" Then
      
        sTemp &= "  MoveScaled(0,0,64,64)\n"
        
        If chkDialog.Value Then
          sTemp &= "  Resizable = False\n"
                   "  Arrangement = Arrange.Vertical\n"
                   "  Spacing = True\n"
                   "  Margin = True\n"
          sTemp &= "{ HBox1 HBox\n"
                   "  MoveScaled(1,59,62,4)\n"
                   "  Spacing = True\n"
                   "  { Panel1 Panel\n"
                   "    MoveScaled(4,0,4,4)\n"
                   "    Expand = True\n"
                   "  }\n"
                   "  { btnOK Button\n"
                   "    MoveScaled(29,0,16,4)\n"
                   "    Text = (\"OK\")\n"
                   "    Default = True\n"
                   "  }\n"
                   "  { btnCancel Button\n"
                   "    MoveScaled(46,0,16,4)\n"
                   "    Text = (\"Cancel\")\n"
                   "    Cancel = True\n"
                   "  }\n"
                   "}\n"
        Endif
        
      Else
        
        sTemp &= "  #MoveScaled(0,0,64,91)\n"
        
      Endif
      
      sTemp &= "}\n"
      
      Project.InsertSource(sName, sType, $sDir, sTemp)
      
    Case "webpage"

      Project.InsertSource(sName, "class", $sDir, "' Gambas class file\n\n", True, True)
      Project.InsertSource(sName, "webpage", $sDir, "<html>\n<body>\n<%\nPrint \"<h1>Gambas</h1>\";\n%>\n</body>\n</html>\n")
      
    Case "text"
    
      File.Save($sDir &/ sName, "")
      Inc FMain.NoMessage
      Project.InsertFile(sName, $sDir)
      Dec FMain.NoMessage
  
    Case "html"
    
      File.Save($sDir &/ sName, "<html>\n\n<head>\n</head>\n\n<body>\n</body>\n\n</html>\n")
      Project.InsertFile(sName, $sDir)
  
    Case "css"
    
      File.Save($sDir &/ sName, "BODY\n{\n}\n")
      Project.InsertFile(sName, $sDir)
  
    Case "js"
    
      File.Save($sDir &/ sName, "// " & sName & "\n\nfunction foo()\n{\n}\n")
      Project.InsertFile(sName, $sDir)
  
    Case "image"
    
      hImage = New Image(txtWidth.Value, txtHeight.Value)
      If cmbImageType.Text = "JPEG" Then
        hImage.Fill(Color.White)
      Else
        hImage.Fill(Color.Transparent)
      Endif
      hImage.Save($sDir &/ sName)

      Project.InsertFile(sName, $sDir)
  
  End Select  
  
End

Private Sub ImportDependencies(sName As String, sExt As String, sOrig As String, bLink As Boolean)
  
  Dim hIn As File
  Dim hOut As File
  Dim sLine As String
  Dim iPos As Integer
  Dim sImg As String
  Dim sImportDir As String
  Dim sDestImg As String
  Dim sForm As String
  Dim bSave As Boolean

  Inc Application.Busy
  
  sForm = Project.Dir &/ File.SetExt(sName, sExt)
  sOrig = File.Dir(sOrig)
  
  hIn = Open sForm
  hOut = Open Temp$(sExt) For Create 
  
  ' TODO: Import Image.Load(*) and SvgImage.Load(*)
  
  While Not Eof(hIn)
  
    Line Input #hIn, sLine
    
    iPos = InStr(sLine, "Picture[")
    If iPos = 0 Then Goto NEXT_LINE
    
    sImg = Scan(sLine, "*Picture\\[\"*\"]")[1]
    If sImg Begins "icon:/" Then Goto NEXT_LINE
    
    sImportDir = Project.Dir &/ "import"
    If Not Exist(sImportDir) Then Project.InsertDirectory(sImportDir)
    sImportDir &/= sName
    If Not Exist(sImportDir) Then Project.InsertDirectory(sImportDir)
    
    sDestImg = sImportDir &/ File.Name(sImg)
    
    If Exist(sOrig &/ sImg) Then
      If Not Exist(sDestImg) Then
        Project.InsertFile(File.Name(sDestImg), File.Dir(sDestImg), sOrig &/ sImg, True, bLink)
      Endif
      sLine = Left(sLine, iPos + 7) & Chr$(34) & "import" &/ sName &/ File.Name(sDestImg) & Chr$(34) & "]"    
      bSave = True
    Else 
      Continue 
    Endif 

NEXT_LINE:  
    Print #hOut, sLine
    
  Wend
  
  Close #hOut
  Close #hIn
  
  If bSave Then
    Kill sForm
    Copy Temp$(sExt) To sForm
    Project.RefreshKey(sForm)
  Endif
  
Finally 
  
  Dec Application.Busy  
  
End

Private Sub ImportFile() As Boolean
  
  Dim sDir As String
  Dim sName As String
  Dim sTemp As String
  Dim sExt As String
  
  For Each sTemp In fchExisting.SelectedPaths
  
    sDir = File.Dir(sTemp)
    sName = File.Name(sTemp)
    sExt = File.Ext(sTemp)
    
    Select Case sExt
    
      Case "module"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "module", $sDir, sTemp,,, chkLink.Value)
    
      Case "class"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "class", $sDir, sTemp,,, chkLink.Value)
    
      Case "form", "report", "webform"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "class", $sDir, File.SetExt(sTemp, "class"), True, True, chkLink.Value)
        Project.InsertSource(sName, sExt, $sDir, sTemp, False, True, chkLink.Value)
        ImportDependencies(sName, sExt, sTemp, chkLink.Value)
        Project.OpenForm(sName)
            
      Case "webpage"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "class", $sDir, File.SetExt(sTemp, "class"), True, True, chkLink.Value)
        Project.InsertSource(sName, "webpage", $sDir, sTemp, False, False, chkLink.Value)
    
      Case Else
        
        Inc FMain.NoMessage
        sName = Project.GetUniqueName($sDir, sName)
        Project.InsertFile(sName, $sDir, sTemp,, chkLink.Value)
        Dec FMain.NoMessage
    
    End Select
    
  Next
  
End



Public Sub btnOK_Click()

  If tabFile.Index = 0 Then   
    If CreateFile() Then Return
  Else 
    If ImportFile() Then Return
  Endif

  Me.Close(True)

Catch 

  FMain.NoMessage = 0
  FMain.ShowError(("Cannot add file.") & "\n\n" & Error.Text & "\n" & Error.Where)
  
End

Public Sub Form_Close()

  Settings.Write(Me)  
  Settings.Write(fchExisting)
  $bInitFileChooser = False
  
End

Private Sub UpdateExistingTab()
  
  If CModule.Ext.Exist(lvwType.Key) Then 
    fchExisting.ShowHidden = True
  Endif
  
End


Public Sub tabFile_Click()

  If tabFile.Index = 1 Then 
    InitFilter
  Endif

  fchExisting_Change

End

Public Sub fchExisting_Change()

  If tabFile.Index = 1 Then 
    btnOK.Enabled = fchExisting.Value
  Else 
    btnOK.Enabled = True
  Endif  

End

Public Sub fchExisting_Activate()

  btnOK.Value = True  

End

Public Sub fchExisting_Icon(Path As String)

  If Exist(Path &/ ".project") Then 
    fchExisting.Icon = Project.GetIcon(Path)    
  Endif

End

Public Sub panType_Arrange()

  Dim hPictureBox As PictureBox = Last.Children[0]
  hPictureBox.W = hPictureBox.H

End
