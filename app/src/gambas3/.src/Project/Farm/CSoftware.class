' Gambas class file

Event Change
Event Screenshot

Static Public InstallAge As Integer = 1

Public Enum STATE_WAIT = 0, STATE_INFO = 1, STATE_ICON = 2, STATE_READY = 3, STATE_ERROR = 4

Static Property Read IconSize As Integer

Property Read Farm As String

Public State As Integer
Public Id As Integer
Public Name As String
Public Version As String
Public Vendor As String
Public UploadDate As Date
Public Description As String
Public URL As String
Public RequiredGambasVersion As String
Public Checksum As String
Public Owner As String
Public DownloadCount As Integer
'Public FullDownloadCount As Integer
Public VoteCount As Integer
Public YourVote As Integer
Public Icon As Image
Public Background As Image
Public Tags As String[]
Public Screenshot As Image
Public Size As Long

Public Observed As Boolean
Public ErrorText As String

Static Private $cCache As New Collection

Private $sFarm As String
Private $hRequest As FarmRequest
Private $hRequestIcon As FarmRequest
Private $hRequestScreenshot As FarmRequest
Private $bGotScreenshot As Boolean

Private $sInstallVersion As String
Private $iInstallVersionAge As Integer

Static Public Sub ClearCache(Optional sFarm As String)
  
  If Not sFarm Then
    $cCache.Clear
  Else
    $cCache[sFarm] = Null
  Endif
  
End

Static Public Sub Exit()
  
  ClearCache
  FarmIdentity.Exit
  
End


Static Public Sub Get(sFarm As String, iId As Integer) As CSoftware
  
  Dim hSoft As CSoftware
  
  If Not $cCache.Exist(sFarm) Then $cCache[sFarm] = New Collection
  
  hSoft = $cCache[sFarm][iId]
  If Not hSoft Then
    hSoft = New CSoftware(iId, sFarm)
    $cCache[sFarm][iId] = hSoft
  Endif
  Return hSoft
  
End


Public Sub _new(iId As Integer, sFarm As String) ', sLogin As String, sPassword As String)
  
  Id = iId
  $sFarm = sFarm
  
End

Public Sub Start()
  
  Try $hRequest.Abort
  $hRequest = New FarmRequest($sFarm) As "Request"
  $hRequest.GetSoftware(Id)
  
  Try $hRequestIcon.Abort
  $hRequestIcon = New FarmRequest($sFarm) As "IconRequest"
  $hRequestIcon.GetSoftwareIcon(Id)
  
  State = STATE_WAIT
  
End


Public Sub Request_Finished()
  
  Dim hReq As FarmRequest = Last
  Dim cResult As Collection
  
  If hReq.HasFailed() Then
    ErrorText = hReq.ErrorText
    State = STATE_ERROR
    $hRequestIcon.Abort
    Raise Change
    Return
  Endif
  
  cResult = hReq.Result
  
  Name = UnQuote(cResult["Name"])
  Version = cResult["Version"] & "." & cResult["Release"]
  Vendor = UnQuote$(cResult["Vendor"])
  
  UploadDate = FarmRequest.GetDate(cResult["UploadDate"])
  Description = UnQuote(cResult["Description"])
  URL = Trim(UnQuote$(cResult["URL"]))
  RequiredGambasVersion = cResult["RequiredGambasVersion"]
  Checksum = UnQuote(cResult["Checksum"])
  Try DownloadCount = CInt(cResult["DownloadCount"])
  'Try FullDownloadCount = CInt(cResult["FullDownloadCount"])
  Try VoteCount = CInt(cResult["VoteCount"])
  Owner = UnQuote(cResult["Owner"])
  If cResult.Exist("YourVote") Then
    YourVote = cResult["YourVote"]
  Else
    YourVote = -1
  Endif
  Tags = Split(cResult["Tags"]).Sort()
  Try Size = CLong(cResult["Size"])

  State = State Or STATE_INFO
  Raise Change

End

Public Sub IconRequest_Finished()

  Dim hReq As FarmRequest = Last
  
  If hReq.HasFailed() Then
    ErrorText = hReq.ErrorText
    State = STATE_ERROR
    $hRequest.Abort
    Raise Change
    Return
  Endif
  
  Try Icon = Image.Load(hReq.ResultFile).Stretch(-1, CSoftware.IconSize)
  State = State Or STATE_ICON
  Raise Change

End

Public Sub IsFinished() As Boolean
  
  Return State = STATE_READY Or State = STATE_ERROR
  
End

Public Sub GetInstalledDir() As String
  
  Return Desktop.DataDir &/ "gambas3/src" &/ LCase(Vendor) &/ Name
  
End


Public Sub GetInstallVersion() As String

  Dim sPath As String
  Dim sLine As String

  If Not IsFinished() Then Return
  If $iInstallVersionAge >= InstallAge Then Return $sInstallVersion

  $sInstallVersion = ""
  sPath = GetInstalledDir() &/ ".project"
  If Exist(sPath) Then 
    For Each sLine In Split(File.Load(sPath), "\n")
      If sLine Begins "Version=" Then
        $sInstallVersion = Trim(Mid$(sLine, 9))
        Break
      Endif
    Next
  Endif
  
  $iInstallVersionAge = InstallAge
  Return $sInstallVersion

End

' 
' Private Sub MakeBackground()
' 
'   Dim X, Y As Integer
'   Dim iCol As Integer
'   Dim I As Integer
'   
'   Background = New Image(128, 128, Color.White)
'   
'   Randomize Val("&H" & Right(Checksum, 8))
'   
'   Paint.Begin(Background)
'   
'   For I = 1 To 64
'     
'     X = Rand(0, Background.W - 1)
'     Y = Rand(0, Background.H - 1)
'     
'     iCol = Icon[Rand(Icon.W - 1), Rand(Icon.H - 1)]
'     If Color[iCol].Alpha >= 128 Then iCol = Color.White
'     iCol = Color.SetAlpha(iCol, 192)
' 
'     Paint.Ellipse(X, Y, 64, 64)
'     Paint.Ellipse(X - Background.W, Y, 64, 64)
'     Paint.Ellipse(X, Y - Background.H, 64, 64)
'     Paint.Ellipse(X - Background.W, Y - Background.H, 64, 64)
'     Paint.Background = iCol
'     Paint.Fill
'     
'   Next
'   
'   Paint.End
'   
'   Background = Background.Opacity(0.3)
' 
' End

Public Sub GetTitle() As String

  Return Name & " " & Version

End

Public Sub IsInstalled() As Boolean
  
  Return GetInstallVersion()
  
End

Public Sub CanUpgrade() As Boolean

  Dim sVersion As String
  
  sVersion = GetInstallVersion()
  If Not sVersion Then Return
  Return Comp(Version, sVersion, gb.Natural) > 0
  
End

Public Sub Install(Optional bJustDownload As Boolean) As String

  Dim hReq As FarmRequest
  Dim sDir As String
  Dim sPath As String
  Dim sExec As String
  Dim sOption As String
  Dim sName As String
  Dim aMissing As String[]
  Dim sResult As String
  Dim sSrcDir As String
  Dim sExecDir As String
  Dim sErr As String
  Dim hDesktopFile As DesktopFile
  Dim hProjectInfo As CProjectInfo
  Dim sComp As String
  Dim sTag As String
  Dim aCat As String[]
  Dim aExistCat As String[]
  
  ' Create directories
  
  sDir = Desktop.DataDir &/ "gambas3"

  sSrcDir = sDir &/ "src" &/ LCase(Vendor)
  Project.MakeDir(sSrcDir)
  sExecDir = Desktop.DataDir &/ "gambas3/bin" &/ LCase(Vendor)
  Project.MakeDir(sExecDir)
  
  ' Download source archive
  
  hReq = New FarmRequest($sFarm)
  
  hReq.DownloadSoftware(Id)
  If hReq.WaitFor() Then 
    If Not hReq.ErrorText Then
      Return ("Download cancelled")
    Else
      Return hReq.ErrorText
    Endif
  Endif
  
  ' Check the checksum
  
  If FarmRequest.GetCheckSum(hReq.ResultFile) <> Checksum Then
    Error.Raise(("The checksum of the downloaded package is invalid."))
  Endif
  
  sPath = hReq.ResultFile
  
  ' Uncompress the archive
  
  If sPath Ends ".tar.gz" Then
    sOption = "z"
  Else If sPath Ends ".tar.bz2" Then
    sOption = "j"
  Else
    Error.Raise("Unknown archive format")
  Endif
  
  Shell "cd " & Shell(File.Dir(sPath)) & " && tar x" & sOption & "f " & Shell(sPath) Wait
  If Process.LastValue Then Error.Raise(("Unable to uncompress source archive."))
  
  ' Analyze the project file
  
  aMissing = New String[]
  
  sName = Name
  sDir = File.SetName(sPath, sName)  
  hProjectInfo = New CProjectInfo(sDir)
  
  ' Check the components
  
  For Each sComp In hProjectInfo.Components
    If Not Exist(Component.Path &/ sComp & ".component") Then
      aMissing.Add(sComp)
    Endif
  Next
  
  If aMissing.Count Then
    Error.Raise(("The following components are required:") & "\n\n" & aMissing.Join(", "))
  Endif
  
  ' TODO: Check the libraries
    
  If bJustDownload Then
    
    GoSub INSTALL_SOURCE
    
  Else
  
    ' Compile the project
    ' TODO: Use translatable error messages?
    
    sExec = System.Path &/ "bin/gbc" & System.Version & " -a -g -x "
    If hProjectInfo.Translate Then sExec &= "-t "
    If hProjectInfo.ControlPublic Then sExec &= "-p "
    If hProjectInfo.ModulePublic Then sExec &= "-m "
    sExec &= Shell$(sDir)
    sExec &= " 2>&1"
    
    Shell sExec To sResult
    
    If Process.LastValue Then
      Error.Raise(("Unable to compile the project.") & "\n\n" & sResult)
    Endif
  
    ' Make executable
    
    sExec = System.Path &/ "bin/gba" & System.Version & " -o " & Shell$(sDir &/ sName & ".gambas") & " " & Shell$(sDir) & " 2>&1"
    Shell sExec To sResult
    If Process.LastValue Then Error.Raise(("Unable to make executable.") & "\n\n" & Trim(sResult))
    
    ' Install executable
    
    Try Kill sExecDir &/ sName & ".gambas"
    Copy sDir &/ sName & ".gambas" To sExecDir &/ sName & ".gambas"
    Chmod sExecDir &/ sName & ".gambas" To "..x..x..x"
    Try Kill sDir &/ sName & ".gambas"
    
    GoSub INSTALL_SOURCE
    
    ' Make a desktop file unless the project is a library or a component
    
    If hProjectInfo.Type = Project.TYPE_NORMAL Then
    
      aExistCat = Split(File.Load("install/categories"), "\n", "", True)
      aCat = New String[]
      For Each sTag In Tags
        If aExistCat.Exist(sTag, gb.IgnoreCase) Then
          aCat.Add(sTag)
        Endif
      Next
    
      Try Kill Desktop.DataDir &/ "applications" &/ "gambas-" & LCase(Vendor) & "-" & sName & ".desktop"
      If hProjectInfo.CreateMenu Then
        hDesktopFile = New DesktopFile(Desktop.DataDir &/ "applications" &/ "gambas-" & LCase(Vendor) & "-" & sName & ".desktop")
        With hDesktopFile
          .Name = hProjectInfo.GetTitle()
          .Exec = sExecDir &/ sName & ".gambas"
          If hProjectInfo.Icon Then .Icon = sSrcDir &/ sName &/ hProjectInfo.Icon
          .Categories = aCat
        End With
        hDesktopFile.Save
      Endif
      
    Endif
    
  Endif

  If LCase(Vendor) <> "example" And If Tags.Exist("example", gb.IgnoreCase) Then
    Try Mkdir File.SetName(sSrcDir, "example")
    Link ".." &/ File.Name(sSrcDir) &/ sName To File.SetName(sSrcDir, "example") &/ sName
  Endif

  Inc InstallAge
  Start
  Return
  
INSTALL_SOURCE:

  ' Make a backup of the possible old version

  Exec ["rm", "-rf", sSrcDir &/ sName & "~"] Wait
  Try Move sSrcDir &/ sName To sSrcDir &/ sName & "~"

  ' Move the source directory to its final location
  
  Exec ["mv", sDir, sSrcDir &/ sName] Wait
  If Not IsDir(sSrcDir &/ sName) Then Error.Raise(("Unable to install source directory"))
  
  ' Remove the possible old version
  
  Exec ["rm", "-rf", sSrcDir &/ sName & "~"] Wait
  
  Return
  
Catch
  
  sErr = Error.Text
  ' Try to remove the partial installation
  Try Move sSrcDir &/ sName & "~" To sSrcDir &/ sName
  Try Kill sExecDir &/ sName & ".gambas"
  Return sErr
  
End

Public Sub Uninstall() As String

  Dim sDir As String
  
  If Not Me.IsInstalled() Then Return
  
  Inc Application.Busy
  
  sDir = GetInstalledDir()
  Exec ["rm", "-rf", sDir] Wait
  
  Try Kill Desktop.DataDir &/ "gambas3/bin" &/ LCase(Vendor) &/ Name & ".gambas"
  
  Try Kill Desktop.DataDir &/ "applications" &/ "gambas-" & LCase(Vendor) & "-" & Name & ".desktop"
  
  If LCase(Vendor) <> "example" Then
    Try Kill File.SetName(File.Dir(sDir), "example") &/ Name
  Endif

  Dec Application.Busy
  
  Inc InstallAge
  Start
  
Catch
  
  Dec Application.Busy 
  Return Error.Text

End

Public Sub DownloadScreenshot() As Boolean
  
  If $bGotScreenshot Then Return True
  
  $hRequestScreenshot = New FarmRequest($sFarm) As "ScreenshotRequest"
  $hRequestScreenshot.DownloadScreenshot(Id)
  
End

Public Sub ScreenshotRequest_Finished()
  
  Dim hReq As FarmRequest = Last
  
  If Not hReq.HasFailed() Then
    $bGotScreenshot = True  
    Try Screenshot = Image.Load(hReq.ResultFile)
  Endif
  
  Raise Screenshot
  
End


Public Sub MustReload()

  $cCache[$sFarm][Id] = Null
  $hRequest.Abort
  $hRequestIcon.Abort
  $hRequestScreenshot.Abort

End


Public Sub ToggleVote() As String
  
  Dim hReq As FarmRequest
 
  hReq = New FarmRequest($sFarm)
  hReq.VoteForSoftware(Id, If(YourVote = 1, 0, 1))
  If hReq.WaitFor(,, True) Then
    Return hReq.ErrorText
  Endif
  
  Start
  
Catch
  
  Return Error.Text
  
End

Private Function Farm_Read() As String

  Return $sFarm

End

Public Sub Delete() As String
  
  Dim hReq As FarmRequest
 
  hReq = New FarmRequest($sFarm)
  hReq.DeleteSoftware(Id)
  If hReq.WaitFor(,, True) Then
    Return hReq.ErrorText
  Endif
  MustReload
  
Catch
  
  Return Error.Text
  
End

Public Sub PaintName(X As Float, Y As Float) As Integer

  Dim iCol As Integer
  Dim sText As String
  Dim XO As Float
  Dim W As Integer
  Dim H As Integer
  
  Paint.Save
  
  iCol = Color.TextForeground
    
  Paint.Background = iCol
  XO = X
  
  sText = Name
  W = Paint.Font.TextWidth(sText)
  H = Paint.Font.Height
  Paint.DrawTextShadow(sText, X, Y, W, H, Align.TopLeft)
  Paint.DrawText(sText, X, Y, W, H, Align.TopLeft)
  
  X += W + Desktop.Scale
  Paint.DrawText(Version, X, Y, W, H, Align.TopLeft)
  
  X = XO
  Y += H + Desktop.Scale \ 2
  
  Paint.Font.Italic = True
  Paint.Font.Grade -= 2
  Paint.Background = Color.Merge(iCol, Color.TextBackground)
  Paint.DrawText(Vendor, X, Y, Paint.W, Paint.H, Align.TopLeft)
  Y += Paint.Font.H
  
  Paint.Restore
  
  Return Y
  
End

Static Private Function IconSize_Read() As Integer

  Return Desktop.Scale * 6

End
