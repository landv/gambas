' Gambas class file

Private $sPath As String
Private $sDir As String
Private $sType As String

Public Sub Run(sPath As String, sDir As String, sType As String)
  
  $sPath = sPath
  $sDir = sDir
  $sType = sType
  If Not Me.ShowModal() Then Return
  
End

Private Sub InitFilter()
  
  Dim aFilter As String[]
  Dim hModule As CModule
  
  If Project.IsSourceDir($sDir) Then
    
    aFilter = ["*.module", ("Gambas modules"), "*.class", ("Gambas classes")]
    For Each hModule In CModule.All
      If Not hModule.Used Then Continue
      aFilter.Add("*." & hModule.Key)
      aFilter.Add(hModule.NameFilter)
    Next

  Else
  
    aFilter = ["*.png;*.jpg;*.jpeg;*.xpm;*.gif", ("Picture files"), "*.htm;*.html", ("HTML files"), "*.css", ("Cascading style sheets"), "*.js", ("Javascript files")]
        
  Endif
  
  fchExisting.Filter = aFilter
  
End


Public Sub Form_Open()

  InitFilter
  Settings.Read(Me)
  Settings.Read(fchExisting)
  fchExisting.ShowHidden = True

End

Private Sub ImportDependencies(sName As String, sExt As String, sOrig As String, bLink As Boolean)
  
  Dim hIn As File
  Dim hOut As File
  Dim sLine As String
  Dim iPos As Integer
  Dim sImg As String
  Dim sImportDir As String
  Dim sDestImg As String
  Dim sForm As String
  Dim bSave As Boolean

  Inc Application.Busy
  
  sForm = Project.Dir &/ File.SetExt(sName, sExt)
  sOrig = File.Dir(sOrig)
  
  hIn = Open sForm
  hOut = Open Temp$(sExt) For Create 
  
  ' TODO: Import Image.Load(*) and SvgImage.Load(*)
  
  While Not Eof(hIn)
  
    Line Input #hIn, sLine
    
    iPos = InStr(sLine, "Picture[")
    If iPos = 0 Then Goto NEXT_LINE
    
    sImg = Scan(sLine, "*Picture\\[\"*\"]")[1]
    If sImg Begins "icon:/" Then Goto NEXT_LINE
    
    sImportDir = Project.Dir &/ "import"
    If Not Exist(sImportDir) Then Project.InsertDirectory(sImportDir)
    sImportDir &/= sName
    If Not Exist(sImportDir) Then Project.InsertDirectory(sImportDir)
    
    sDestImg = sImportDir &/ File.Name(sImg)
    
    If Exist(sOrig &/ sImg) Then
      If Not Exist(sDestImg) Then
        Project.InsertFile(File.Name(sDestImg), File.Dir(sDestImg), sOrig &/ sImg, True, bLink)
      Endif
      sLine = Left(sLine, iPos + 7) & Chr$(34) & "import" &/ sName &/ File.Name(sDestImg) & Chr$(34) & "]"    
      bSave = True
    Else 
      Continue 
    Endif 

NEXT_LINE:  
    Print #hOut, sLine
    
  Wend
  
  Close #hOut
  Close #hIn
  
  If bSave Then
    Kill sForm
    Copy Temp$(sExt) To sForm
    Project.RefreshKey(sForm)
  Endif
  
Finally 
  
  Dec Application.Busy  
  
End

Private Sub ImportFile() As Boolean
  
  Dim sDir As String
  Dim sName As String
  Dim sTemp As String
  Dim sExt As String
  
  For Each sTemp In fchExisting.SelectedPaths
  
    sDir = File.Dir(sTemp)
    sName = File.Name(sTemp)
    sExt = File.Ext(sTemp)
    
    Select Case sExt
    
      Case "module"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "module", $sDir, sTemp,,, chkLink.Value)
    
      Case "class"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "class", $sDir, sTemp,,, chkLink.Value)
    
      Case "form", "report", "webform", "termform"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "class", $sDir, File.SetExt(sTemp, "class"), True, True, chkLink.Value)
        Project.InsertSource(sName, sExt, $sDir, sTemp, False, True, chkLink.Value)
        ImportDependencies(sName, sExt, sTemp, chkLink.Value)
        Project.OpenForm(sName)
            
      Case "webpage"
        sName = File.BaseName(Project.GetUniqueSourceName(sName))
        Project.InsertSource(sName, "class", $sDir, File.SetExt(sTemp, "class"), True, True, chkLink.Value)
        Project.InsertSource(sName, "webpage", $sDir, sTemp, False, False, chkLink.Value)
    
      Case Else
        
        Inc FMain.NoMessage
        sName = Project.GetUniqueName($sDir, sName)
        Project.InsertFile(sName, $sDir, sTemp,, chkLink.Value)
        Dec FMain.NoMessage
    
    End Select
    
  Next
  
End

Public Sub Form_Close()

  Settings.Write(Me)  
  Settings.Write(fchExisting)
  
End

Public Sub fchExisting_Activate()

  If fchExisting.SelectedPaths.Count = 0 Then Return
  If ImportFile() Then Return
  Me.Close(True)

Catch 

  FMain.NoMessage = 0
  FMain.ShowError(("Cannot import file.") & "\n\n" & Error.Text & "\n" & Error.Where)

End

Public Sub fchExisting_Icon(Path As String)

  If Exist(Path &/ ".project") Then 
    fchExisting.Icon = Project.GetIcon(Path)    
  Endif

End

Public Sub fchExisting_Cancel()

  Me.Close

End
