' Gambas class file

Public Const KEY_SOURCE As String = "$S"
Public Const KEY_MISC As String = "$O"
Public Const KEY_PROJECT As String = "$P"
Public Const KEY_PUBLIC As String = "$B"
Public Const KEY_CONNECTION As String = "$D"
Public Const KEY_EXTERN As String = "$X"

Public Sources As Collection

Private $hTree As TreeView
Private $sDir As String
Private $bCurrentProject As Boolean
Private $sSourceDir As String
Private $aInheritance As New String[]
Private $hInfo As CProjectInfo
Private $hObserver As Observer
Private $cFilter As Collection
Private $bHasJustCollapsed As Boolean
Private $bExpandOnMouseUp As Boolean
Private $cExtern As New Collection
Private $sStartup As String

Public Sub _new(sDir As String)
  
  $sDir = sDir
  $bCurrentProject = $sDir = Project.Dir
  
  If $bCurrentProject Then Project.Tree = Me
  
  $sSourceDir = sDir &/ ".src"
  If Not Exist($sSourceDir) Then $sSourceDir = $sDir
  
  $hInfo = New CProjectInfo(sDir)
  $sStartup = $hInfo.Startup
  
End

Public Sub RefreshInfo()
  
  $hInfo = New CProjectInfo($sDir)
  
End


Public Sub SetView(hTreeView As TreeView)
  
  If $hTree And If $hTree <> hTreeView Then Error.Raise("TreeView already set")
  
  $hTree = hTreeView
  If $bCurrentProject Then Project.ProjectTree = hTreeView
  $hObserver = New Observer(hTreeView) As "TreeView"
  FillTree
  
End

Private Sub AddFile(sDir As String, sFile As String, Optional bAfter As Boolean, Optional bIgnoreInheritance As Boolean) As Boolean
  
  Dim bIgnore As Boolean
  Dim sPath As String
  Dim sKey As String
  Dim bShow As Boolean
  Dim sExt As String
  Dim sParent As String
  Dim hPict As Picture
  Dim bChecked As Boolean
  Dim bDir As Boolean
  Dim sAfter As String
  Dim hModule As CModule
  Dim bSource As Boolean
  Dim bExtern As Boolean
  Dim sTitle As String
  Dim hStat As Stat
  Dim bParentLink As Boolean
  Dim bStartup As Boolean

  sPath = sDir &/ sFile
  
  If $cFilter And If Not $cFilter.Exist(sPath) Then Return
  
  sKey = sPath
  sParent = sDir

  If sDir = $sDir Then
    sParent = KEY_MISC
  Else If sDir = $sDir &/ ".hidden" Then 
    sParent = KEY_PROJECT
  Else If sDir = $sDir &/ ".public" Then 
    sParent = KEY_PUBLIC
  Else If sDir = $sSourceDir Then 
    sParent = KEY_SOURCE
  Else If sDir = $sDir &/ ".connection" Then
    sParent = KEY_CONNECTION
  Else If $cExtern.Exist(sPath) Then
    sParent = KEY_EXTERN
    If Not $hTree.Exist(sParent) Then $hTree.Add(sParent, ("Files"), Picture["icon:/small/system"], $sDir)
    bExtern = True
    Try sTitle = Project.Files[sPath].GetTitle()
    If sTitle Then sFile = sTitle
  Endif

  Try hStat = Stat(sPath)
  If Error Then Return
  
  With hStat

    If .Hidden Then Return

    bShow = False
    If Not bExtern Then bSource = IsSourcePath(sDir &/ sFile)

    If IsDir(sPath) Then

      If sFile = "CVS" Or If sFile = "CVSROOT" Then Return

      bDir = True

    Else

      'IF InStr(.Perm.User & .Perm.Group & .Perm.Other, "x") THEN CONTINUE

      sExt = Lower(File.Ext(sFile))
      bChecked = False

      If bSource Then

        If CModule.Ext.Exist(sExt) Then

          'sIcon = IMAGE_DIR &/ sExt & ".png"
          bShow = sDir = $sSourceDir
          bChecked = True
          
          sParent = ""
          
          If sExt = "class" Then
            For Each hModule In CModule.All
              If Exist(sDir &/ File.BaseName(sFile) & "." & hModule.Key) Then
                bIgnore = True
                Break
              Endif          
            Next

            If Not bIgnore Then
              'IF sFile = "ReportContainer.class" THEN STOP
              sParent = FindKey(Project.GetParentClass(sPath))
              If sParent Then
                If File.Ext(sParent) <> "class" Then 
                  sParent = ""
                Else If Not $hTree.Exist(sParent) Then 
                  If Not bIgnoreInheritance Then
                    $aInheritance.Add(sPath)
                    bIgnore = True
                  Else 
                    sParent = ""
                  Endif
                Else If File.Dir(sParent) <> sDir Then
                  bParentLink = True
                Endif
              Endif
            Endif
          ' Else If sExt = "module" Then
          ' Else
          '   'hModule = CModule[sExt]
          '   'sParent = hModule.TreeKey
          '   'If Not hModule.Used Then bIgnore = True
          '   sParent = sDir
          Else If sExt <> "module" Then
            'If Not HasModule(sExt) Then
            '  bIgnore = True
            'Endif
          Endif

          If Not sParent Then sParent = sDir
          If sParent = $sSourceDir Then sParent = KEY_SOURCE
          
          If Sources[sFile] <> sPath Then
            bIgnore = True
          Endif
            
          sFile = File.BaseName(sFile)
          bStartup = sFile = $sStartup
          
        Endif

      Else If IsConnectionPath(sDir &/ sFile) Then

        If $hInfo.Components.Exist("gb.db") And If sExt = "connection" Then
          sFile = File.BaseName(sFile)
        Else
          bIgnore = True
        Endif

      Endif
      
      If Not bChecked Then
      
        If Right$(sFile) = "~" Then
          bIgnore = True
        Else If sDir = $sDir And If sExt = "gambas" Then
          bIgnore = True
        Endif
      
      Endif
  
    Endif
    
    If sExt = "mine" Or If Left(sExt) = "r" And IsDigit(Mid$(sExt, 2)) Then 
      If Exist(sDir &/ File.BaseName(sPath)) Then 
        bIgnore = True
      Endif
    Endif

    If Not bIgnore Then

      hPict = GetFileIcon(sPath,, hStat,, bParentLink)

      If bAfter Then 
        With $hTree
          .MoveTo(sParent)
          .MoveChild
          If Not bDir Then
            While .Available
              If Not IsDir(.Item.Key) Then Break
              sAfter = .Item.Key
              .MoveNext
            Wend
          Endif
          While .Available
            If String.Comp(.Item.Text, sFile, gb.IgnoreCase + gb.Natural) > 0 Then Break
            If bDir And If Not IsDir(.Item.Key) Then Break
            sAfter = .Item.Key
            .MoveNext
          Wend
        End With
      Endif

      If $hTree.Exist(sKey) Then
        With $hTree[sKey]
          .Text = sFile
          .Picture = hPict
          .Reparent(sParent)
        End With
      Else
        $hTree.Add(sKey, sFile, hPict, sParent)
        If bDir And If Not bSource Then
          $hTree.Add(sKey & "/", "",, sKey)
          bDir = False
        Endif
      Endif
      
      With $hTree[sKey]
        
        If bStartup Then 
          .Font = $hTree.Font
          .Font.Underline = True
          .Font.Bold = True
        Else
          .Font = Null
        Endif
        
        If $bCurrentProject Then .Editable = Not Project.IsLocked(sKey)
        If bAfter Then .MoveAfter(sAfter)
        If bShow Then
          $hTree.MoveTo(sKey)
          $hTree.MoveParent
          $hTree.Item.Expanded = True
        Endif
        
      End With
      
      If $bCurrentProject Then Project.RefreshIcon(sKey)
      
      'hForm = Files[sKey]
      'If hForm Then hForm.Icon = GetFileIcon(sKey, 16)
      
    Endif

  End With  

  Return bDir
  
End

Private Procedure AddDir(Optional sDir As String)

  Dim cDir As New String[]
  Dim sFile As String
  Dim aFile As New String[]

  If sDir Then 
    cDir.Add(sDir)
  Else 
    cDir.Add($sDir)
    If $sDir <> $sSourceDir Then cDir.Add($sSourceDir)
  Endif

  Repeat

    sDir = cDir[0]
    cDir.Remove(0)
    
    If Not IsDir(sDir) Then Continue

    aFile.Clear
    
    '$bGetSource = FALSE

    For Each sFile In Dir(sDir, "*")
      If IsDir(sDir &/ sFile) Then aFile.Add("D" & sFile)
    Next
  
    For Each sFile In Dir(sDir, "*")
      If Not IsDir(sDir &/ sFile) Then aFile.Add("F" & sFile)
    Next
  
    aFile.Sort(gb.Natural)
  
    $aInheritance.Clear
  
    For Each sFile In aFile
  
      sFile = Mid$(sFile, 2)
      If AddFile(sDir, sFile, True) Then cDir.Add(sDir &/ sFile)
      'AddFile(sDir, sFile, True)
      
    Next
    
    DoRefreshAfter
    
  Until cDir.Count = 0

End

Private Sub FillTree(Optional bDoNotRefreshCache As Boolean)

  Dim sKey As String
  'Dim sKeyReset As String

  '$bDisplayForm = Settings["/DisplayForm"]

  For Each $cExtern
    If Not Exist($cExtern.Key) Then $cExtern.Remove($cExtern.Key)
  Next

  If Not bDoNotRefreshCache Then RefreshSources

  With $hTree

    .Clear()

    sKey = $sDir
    .Add(sKey, File.Name($sDir), Project.GetIcon($sDir, 16))

    .Add(KEY_PROJECT, ("Project"), Picture["icon:/small/directory"], sKey)
    '.Add(KEY_MODULE, ("Modules"), Picture["icon:/small/directory"], sKey)
    '.Add(KEY_CLASS, ("Classes"), Picture["icon:/small/directory"], sKey)
    .Add(KEY_SOURCE, ("Sources"), Picture["icon:/small/directory"], sKey)
    
    If $hInfo.Components.Exist("gb.db") Then .Add(KEY_CONNECTION, ("Connections"), Picture["icon:/small/directory"], sKey)
    If $hInfo.Components.Exist("gb.web") Then .Add(KEY_PUBLIC, ("Public"), Picture["icon:/small/directory"], sKey)
    .Add(KEY_MISC, ("Data"), Picture["icon:/small/directory"], sKey)

    '$bGetSource = TRUE

    AddDir()
    If Exist($sDir &/ ".hidden") Then AddDir($sDir &/ ".hidden")
    If $hInfo.Components.Exist("gb.db") And If Exist($sDir &/ ".connection") Then AddDir($sDir &/ ".connection")
    If $hInfo.Components.Exist("gb.web") And If Exist($sDir &/ ".public") Then AddDir($sDir &/ ".public")

    For Each sKey In $cExtern
      AddFile(File.Dir(sKey), File.Name(sKey))
    Next

  End With

  With $hTree
    .MoveFirst
    While .Available
      .Item.Expanded = True
      .MoveNext
    Wend
  End With

  'If sKeyReset Then sKey = sKeyReset

  'SelectKey(sKey)

  'DefineStartup(Startup, True)

  ' For Each sFamily In CFamily.List
  '   If Not HasModule(sFamily) Then 
  '     For Each hFile In Files
  '       sPath = Files.Key
  '       If Not IsSourcePath(sPath) Then Continue
  '       If Exist(File.SetExt(sPath, sFamily)) Then
  '         Files.Remove(sPath)
  '         hFile.Delete
  '       Endif
  '     Next
  '   Endif
  ' Next

End

Public Function FindPath(sClass As String) As String

  Dim sPath As String

  sPath = Sources[sClass]
  If sPath Then Return sPath

  sPath = Sources[sClass & ".class"]
  If sPath Then Return sPath

  sPath = Sources[sClass & ".module"]
  If sPath Then Return sPath

End

Public Sub FindKey(sClass As String) As String

  Dim hModule As CModule
  
  Dim sPath As String

  If Not sClass Then Return

  For Each hModule In CModule.All
    sPath = Sources[sClass & "." & hModule.Key]
    If sPath Then Return sPath
  Next
  
  Return FindPath(sClass)

End

Public Sub RefreshSources()

  Dim sPath As String
  
  Sources = New Collection(gb.IgnoreCase)
  
  For Each sPath In RDir($sSourceDir, "*", gb.File + gb.Directory, True)
    If CModule.Ext.Exist(File.Ext(sPath)) Then
      Sources[File.Name(sPath)] = $sSourceDir &/ sPath
    Endif
  Next
  
End

Private Sub IsConnectionPath(sPath As String) As Boolean
  
  Return sPath Begins $sDir &/ ".connection" &/ "/"
  
End

Private Sub DoRefreshAfter()
  
  Dim sKey As String
  Dim iInd As Integer
  Dim iCount As Integer

  If $aInheritance.Count = 0 Then Return

  Do
    iCount = $aInheritance.Count
    For iInd = 0 To iCount - 1
      sKey = $aInheritance[0]
      $aInheritance.Remove(0)
      AddFile(File.Dir(sKey), File.Name(sKey), True)
    Next
    If $aInheritance.Count >= iCount Then Break
  Loop

  If $aInheritance.Count Then 
    For iInd = 0 To $aInheritance.Max
      sKey = $aInheritance[iInd]
      AddFile(File.Dir(sKey), File.Name(sKey), True, True)
      $aInheritance[iInd] = File.BaseName(sKey)
    Next
    'FMain.ShowError(("The following classes have circular inheritance:") & "\n\n" & $aRefreshAfter.Join(", "))
    $aInheritance.Clear
  Endif

End

Public Sub Refresh(Optional bDoNotRefreshCache As Boolean, cFilter As Collection)
  
  Dim vLayout As Variant
  
  $cFilter = cFilter
  vLayout = $hTree.Layout
  FillTree(bDoNotRefreshCache)
  $hTree.Layout = vLayout
  
End

Public Sub GetFileIcon(sPath As String, Optional iSize As Integer, hStat As Stat, bNoEmblem As Boolean, bParentLink As Boolean) As Picture

  Dim hImage As Image
  Dim hPict As Picture
  Dim sKey As String
  Dim sCacheKey As String
  Dim bLink As Boolean
  Dim sIcon As String
  Dim sExt As String
  Dim bStartup As Boolean
  Dim iFileSize As Long
  Dim hFile As File
  Dim sPrefix As String
  'Dim bNoStartup As Boolean
  Dim bConflict As Boolean
  Dim sModule As String
  Dim sLocalPrefix As String
  Dim bLocked As Boolean
  Dim bAdded As Boolean
  Dim hProject As CProjectInfo
  Dim sLink As String
  Dim bExported As Boolean
  Dim fRapport As Float
  Dim bDoNotTranslate As Boolean
  Dim bModified As Boolean
  Dim iEmblemSize As Integer

  If iSize Then
    sPrefix = "icon:/" & iSize
    sLocalPrefix = "img/" & iSize
  Else
    sPrefix = "icon:/small"
    sLocalPrefix = "img/16"
  Endif

  If Not hStat Then hStat = Stat(sPath)
  With hStat

    bLink = .Type = gb.Link Or bParentLink
    bConflict = False
    If $bCurrentProject Then
      bLocked = Project.IsLocked(sPath)
      bAdded = Project.IsAdded(sPath)
      bDoNotTranslate = Not Project.ShouldTranslate(sPath)
      bModified = Project.IsModified(sPath)
      If iSize = 0 Then iEmblemSize = 16
    Endif
    '$bLastAdded = bAdded

    If IsDir(sPath) Then

      If bLink Then
        sLink = Project.GetAbsoluteLink(sPath, .Link)
        'If Left(sLink) <> "/" Then sLink = sPath &/ sLink
        sLink = File.Dir(sLink)
        hProject = New CProjectInfo(sLink)
        sIcon = hProject.GetIconPath()
        If iSize = 0 Then iSize = 16
      Else
        sIcon = sPrefix &/ "directory"
      Endif

    Else

      'bConflict = VersionControl.InConflict(sPath)
      If $bCurrentProject Then bConflict = Project.IsConflict(sPath)

      sIcon = "" 'sPrefix &/ "file"

      sExt = File.Ext(sPath)
      Select Case sExt

        Case "form", "class", "module", "webpage", "report", "webform", "termform"
          If IsSourcePath(sPath) Then
            sModule = sExt
            sIcon = sExt
            'bStartup = File.BaseName(sPath) = $sStartup 'And Not bNoStartup
            bExported = Project.IsExported(sPath)
          Endif

        Case "jpg", "jpeg", "xpm", "bmp", "png", "gif"

          If bLink Then
            Try hFile = Open sPath
            If Error Then
              iFileSize = 0
            Else
              iFileSize = Lof(hFile)
              Close hFile
            Endif
          Else
            iFileSize = .Size
          Endif

          If iFileSize > Project.MAX_ICON_SIZE Then
            sIcon = sPrefix &/ "image"
          Else
            sIcon = sPath
          Endif

        Case "svg", "svgz"
          sIcon = sPrefix &/ "vector"

        Case "htm", "html", "css"
          sIcon = sPrefix &/ "html"
          
        Case "js"
          sIcon = sPrefix &/ "script"

        Case "txt", "text"
          sIcon = sPrefix &/ "text"

        Case "pdf"
          sIcon = sPrefix &/ "pdf"

        Case "connection"
          If Exist(File.SetExt(sPath, "template")) Then bExported = True
          sIcon = sPrefix &/ "database"
          
        Case "console"
          sIcon = sPrefix &/ "terminal"
          
        Case Else
          Try hImage = DesktopMime.FromFile(sPath).GetIcon(If(iSize, iSize, 16))
          If hImage Then
            sIcon = "//"
          Else
            sIcon = sPrefix &/ "file"
          Endif
          
      End Select

    Endif

  End With

  If Left$(sIcon) = "/" Then

    If Not hImage Then Try hImage = Image.Load(sIcon)
    
    If hImage Then

      fRapport = hImage.Width / hImage.Height
      If fRapport < 1 Then fRapport = 1 / fRapport

      If fRapport < 8 Then

        If iSize Then
          hImage = hImage.Stretch(hImage.Width * iSize / hImage.Height, iSize)
        Else
          iSize = 32
          If hImage.Height > iSize Then
            hImage = hImage.Stretch(hImage.Width * iSize / hImage.Height, iSize)
          Endif
          If hImage.Width > iSize Then
            hImage = hImage.Stretch(iSize, hImage.Height * iSize / hImage.Width)
          Endif
        Endif

      Else

        hImage = Null

      Endif

    Endif

    If Not hImage Then hImage = Picture[sPrefix &/ "image"].Image
    GoSub ADD_EMBLEM
    hPict = hImage.Picture

  Else

    sKey = File.Dir(sIcon) &/ File.BaseName(sIcon) & "-"
    If iSize Then 
      sKey &= CStr(iSize) & "-"
    Else
      sKey &= "16-"
    Endif
    
    
    If bLink Then sKey &= "l"
    
    If Not bNoEmblem Then
      'If bStartup Then sKey &= "s"
      If bConflict Then sKey &= "c"
      If bLocked Then sKey &= "k"
      If bAdded Then sKey &= "a"
      If bModified Then sKey &= "m"
      If bExported Then sKey &= "x"
      If bDoNotTranslate Then sKey &= "t"
    Endif
    
    If Right(sKey) = "-" Then sKey = Left(sKey, -1)
    sKey &= ".png"

    'hPict = NULL
    'IF NOT bNoStartup THEN hPict = Picture[sKey]

    sCacheKey = Replace(sKey, "icon:/", "$/")
    Try hPict = Picture[sCacheKey]
    If Not hPict Then

      If sModule Then
        hImage = Project.MakeModuleIcon(sModule, iSize, bStartup And Not bNoEmblem)
      Else
        Try hImage = Picture[sIcon].Image
        If Error Then hImage = Picture[sPrefix &/ "file"].Image
      Endif
      'If Not hPict Then hPict = Picture[sPrefix &/ "file"]
      'If Not hPict Then hPict = Picture["img/16/unknown.png"]
      'hPict = hPict.Copy()

      If iSize Then hImage = hImage.Stretch(hImage.Width * iSize / hImage.Height, iSize)
      GoSub ADD_EMBLEM
      hPict = hImage.Picture
      Picture[sCacheKey] = hPict

    Endif

  Endif

  Return hPict

ADD_EMBLEM:

  If bLink Then hImage = Project.AddLinkEmblem(hImage)
  
  If Not bNoEmblem Then
    If bExported Then hImage = Project.AddEmblem(hImage, "img/32/exported.png", iEmblemSize)
    If bDoNotTranslate Then hImage = Project.AddEmblem(hImage, "img/32/do-not-translate.png", iEmblemSize)
    If bAdded Then hImage = Project.AddEmblem(hImage, "img/32/added.png", iEmblemSize)
    If bModified Then hImage = Project.AddEmblem(hImage, "img/32/modified.png", iEmblemSize)
    If bConflict Then hImage = Project.AddEmblem(hImage, "img/32/conflict.png", iEmblemSize)
    If bLocked Then hImage = Project.AddEmblem(hImage, "icon:/32/lock", iEmblemSize)
  Endif
  
  Return

End

Private Function IsSourcePath(sPath As String) As Boolean

  Dim sExt As String

  If $sSourceDir <> $sDir Then Return sPath & "/" Begins $sSourceDir &/ "/"

  If Left(sPath) = "/" Then
    If File.Dir(sPath) <> $sSourceDir Then Return
  Endif 
  
  sExt = File.Ext(sPath)
  If CModule.Ext.Exist(sExt) Then Return True

End

Public Sub TreeView_Expand()
  
  Dim sKey As String 
  Try sKey = $hTree.Item.Key
  If Not sKey Then Return
  If Left(sKey) = "$" Then Return
  FillDir(sKey)

End

Public Sub TreeView_Collapse()
  
  Dim sKey As String = $hTree.Item.Key
  
  $bHasJustCollapsed = True
  If Not sKey Then Return
  If File.Dir(sKey) = $sDir And If Not IsDir(sKey) Then $hTree[sKey].Expanded = True
  
End

Public Sub TreeView_Select()
  
  'RefreshMenu
  
  If $hTree.Current And If $hTree.Current.Children Then 
    ' Print Mouse.X ;; Mouse.Y ' generates crashes on random places, strange...
    'If Not tvwProject.Find(Mouse.X, Mouse.Y) Then
    $bExpandOnMouseUp = True
    'Endif
  Endif
  
End

Public Sub TreeView_MouseUp()
  
  If $bExpandOnMouseUp And If Not $bHasJustCollapsed Then
    Try $hTree.Current.Expanded = True
  Endif
  $bExpandOnMouseUp = False
  $bHasJustCollapsed = False
  
End

    
Public Sub FillDir(sDir As String)

  If Not sDir Then Return
  If Left(sDir) = "$" Then Return
  If Not IsDir(sDir) Then Return

  $hTree.MoveTo(sDir)
  If $hTree.MoveChild() Then Return
  If $hTree.Item.Key <> sDir & "/" Then Return

  Inc Application.Busy  
  $hTree[sDir & "/"].Delete
  AddDir(sDir)
  Dec Application.Busy
  
Catch

  Debug Error.Where; ": "; Error.Text
  Dec Application.Busy
  
End

Public Sub EnsureKey(sKey As String)

  Dim sPath As String
  Dim sElt As String

  If Not $hTree Then Return
  
  sPath = "/"
  For Each sElt In Split(sKey, "/")
    sPath &/= sElt
    If $hTree.Exist(sPath) Then FillDir(sPath)
  Next

End

Public Sub SelectKey(sKey As String)

  Dim hModule As CModule
  Dim sBase As String

  If Not $hTree Then Return

  EnsureKey(sKey)

  If Not $hTree.Exist(sKey) Then
    If Right$(sKey, 6) = ".class" Then
      sBase = Left$(sKey, -6)
      For Each hModule In CModule.All
        sKey = sBase & "." & hModule.Key
        If $hTree.Exist(sKey) Then Break
      Next
    Endif
  Endif

  Try $hTree[sKey].Selected = True
  Try $hTree[sKey].EnsureVisible

End

Public Sub FindForm(sClass As String) As String

  Dim sFamily As String
  Dim sPath As String

  For Each sFamily In CFamily.List
    sPath = Sources[sClass & "." & sFamily]
    If Exist(sPath) Then Return sPath
  Next

End

Public Function ExistForm(sClass As String) As Boolean

  Dim sFamily As String

  For Each sFamily In CFamily.List
    If Sources.Exist(sClass & "." & sFamily) Then Return True
  Next

End

Private Sub RefreshInheritance()

  Dim sKey As String

  $aInheritance.Clear

  For Each sKey In Sources
    If Not File.Ext(sKey) = "class" Then Continue
    Try $hTree[sKey].Delete
    $aInheritance.Add(sKey)
  Next

  DoRefreshAfter

End

Private Sub GetOpenedItems(sParent As String) As String[]

  Dim iLevel As Integer
  Dim aOpen As String[]
  
  aOpen = New String[]

  $hTree.MoveTo(sParent)
  
  Do
    If Not $hTree.Available Then
      Dec iLevel
      If iLevel <= 0 Then Break
      $hTree.MoveParent
      $hTree.MoveNext
    Else If $hTree.Item.Expanded Then
      aOpen.Add($hTree.Item.Key)
      Inc iLevel
      $hTree.MoveChild()
    Else
      $hTree.MoveNext
    Endif
  Loop
  
  Return aOpen

End

Public Sub RefreshKey(sKey As String, Optional sOld As String)

  Dim aOpen As String[]
  Dim sOpen As String
  
  If Not $hTree Then Return
  If Not sKey Then Return
  
  If Not $hTree.Exist(sKey) And If Not Exist(sKey) And If IsSourcePath(sKey) Then
    sKey = FindForm(File.BaseName(sKey))
  Endif

  If Not Exist(sKey) Then 
    Try $hTree.Remove(sKey)
    Return
  Endif

  If Not sOld Or If sOld = sKey Then 
  
    EnsureKey(sKey)
    AddFile(File.Dir(sKey), File.Name(sKey), True)
 
  Else

    aOpen = GetOpenedItems(sOld)
    
    EnsureKey(sOld)
    Try $hTree[sOld].Delete
    If Error Then Return
  
    If IsSourcePath(sKey) And If File.Ext(sKey) = "class" And If Not ExistForm(File.BaseName(sKey)) Then
      RefreshInheritance
    Else
      If AddFile(File.Dir(sKey), File.Name(sKey), True) Then AddDir(sKey)
      If Exist(sOld) Then
        If AddFile(File.Dir(sOld), File.Name(sOld), True) Then AddDir(sOld)
      Endif
    Endif
    
    For Each sOpen In aOpen
      If sOpen Begins sOld Then $hTree[sKey & Mid$(sOpen, Len(sOld) + 1)].Expanded = True
    Next
    
  Endif

End

Public Sub AddExtern(sPath As String)
  
  $cExtern[sPath] = True
  
End

Public Sub ExistClass(sClass As String) As Boolean

  If Sources.Exist(sClass & ".class") Then Return True
  If Sources.Exist(sClass & ".module") Then Return True

End

Public Sub DefineStartup(sClass As String) As String
  
  If sClass <> $sStartup Then 
    Swap $sStartup, sClass
    RefreshKey(FindKey(sClass))
    RefreshKey(FindKey($sStartup))
  Endif
  
  Return $sStartup
  
End
