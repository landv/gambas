' Gambas class file

Static Private $bGrid As Boolean
Static Private PAN_H As Integer
Static Private PAN_W As Integer

Static Public WasDefaultValue As Boolean

Static Public LastError As String

Static Public COMPLEX_STRING_PROPERTIES As String[] = ["Font[", "Picture[", "Image.Load(", "SvgImage.Load(", "Connections[", "ReportPadding[", "ReportMargin[", "ReportBoxShadow[", "ReportBorder[", "ReportBrush["]

Public Name As String
Public Parent As CControl
Public Control As Object
Public Selected As Boolean
Public Kind As String
Public Virtual As Boolean
Public Unknown As Boolean
Public Tag As Variant
Public DrawWith As String
Public {Public} As Boolean
Public VirtualCoord As Boolean

Property Read X As Integer
Property Read Y As Integer
Property Read Width As Integer
Property Read Height As Integer
Property Read W As Integer
Property Read H As Integer

Private $cValue As New Collection

Private $aPanel As New Panel[8] 'DrawingArea[1] '8

'PRIVATE CONST PAN_H AS Integer = 6
'PRIVATE CONST PAN_W AS Integer = 6

Private $bMove As Boolean
Private $X As Integer
Private $Y As Integer
Private $MX As Integer
Private $MY As Integer
Private $hFamily As CFamily
'Private $bMaster As Boolean

Static Private $bDoNotMoveHandle As Boolean


Static Public Sub _init()

  ' $cSynonymous["Left"] = "X"
  ' $cSynonymous["Top"] = "Y"
  ' $cSynonymous["W"] = "Width"
  ' $cSynonymous["H"] = "Height"
  ' $cSynonymous["Caption"] = "Text"
  ' $cSynonymous["Title"] = "Text"

  RefreshHandleSize

  $bGrid = True

End

Static Public Sub GetIcon(sClass As String, sComp As String, Optional iSize As Integer) As Picture
  
  Dim hPict As Picture
  Dim hImage As Image
  Dim sPath As String
  Dim sText As String
  Dim X, Y As Float
  Dim iInd As Integer
  Dim I As Integer
  Dim hClass As CClassInfo
   
  Do
    hClass = Project.Documentation.Classes[sComp &/ sClass]
    If Not hClass Then Break
    sComp = hClass.Component
    If sComp = CComponent.PROJECT_NAME Then
      sPath = Project.Dir &/ ".hidden/control" &/ LCase(sClass) & ".png"
    Else
      sPath = File.Dir(File.Dir(Component.Path)) &/ "share/gambas" & System.Version &/ "control" &/ sComp &/ LCase(sClass) & ".png"
    Endif
    Try hPict = Picture.Load(sPath)
    If hPict Then Break
    If hClass.Parent <> sClass Then Break
    sComp = hClass.ParentComponent
    If Not sComp Then Break
  Loop

  If Not hPict Then Try hPict = Picture["img/control" &/ LCase(sClass) & ".png"]
  
  If Not hPict Then
    
    hImage = Image.Load("img/control/unknown.png")
    
    Paint.Begin(hImage)
    
    Paint.Rectangle(3, 3, hImage.W - 6, hImage.H - 6)
    Paint.Clip
    
    Paint.Font = Font["Monospace"] 'Project.GetEditorFont()
    Paint.Font.Size = 8
    Paint.Font.Size = 8 * (hImage.H - 6) / (Paint.Font.Height - 1) / 3
    Paint.AntiAlias = False
    Paint.Brush = Paint.Color(Color.Black)
    sText = sClass
    While Len(sText) < 48
      sText &= sClass
    Wend
    X = 3
    Y = Paint.Font.Ascent + 3
    
    For I = 1 To 3
      
      Paint.DrawText(sText, X, Y)
      'Paint.Fill
      Y += Paint.Font.Height - 1
      
      For iInd = 1 To Len(sText)
        If Paint.TextExtents(Left$(sText, iInd)).Width >= (hImage.W - 6) Then Break
      Next
      sText = Mid$(sText, iInd)
    
    Next
    
    Paint.End
    
    hPict = hImage.Picture
  Endif

  If iSize Then
    If hPict.Width <> iSize Then hPict = hPict.Image.Stretch(iSize, iSize).Picture
  Endif

  Return hPict
  
End



Private Function CreateControl(sName As String, sClass As String, hParent As Object) As Object

  Dim hCtrl As Object
  Dim hPict As Picture
  Dim bExist As Boolean
  Dim bVirtual As Boolean
  Dim hWindow As Window
  Dim hClass As CClassInfo

  'PRINT "> CreateControl "; sClass

  'If sClass = "Report" Then Stop

  hClass = Project.Documentation.Classes[sClass]
  bExist = hClass <> Null
  If bExist Then
    DrawWith = hClass.DrawWith
    If DrawWith Then sClass = DrawWith
  Endif

  Select Case LCase(sClass)

    Case "toolbutton"
      hCtrl = New ToolButton(hParent)
      'hCtrl.Picture = Picture["img/logo/logo-16.png"]

    Case "textbox"
      hCtrl = New TextBox(hParent)
      'hCtrl.Text = sName
      hCtrl.Mouse = Mouse.Arrow

    Case "textarea"
      hCtrl = New TextArea(hParent)
      'hCtrl.Text = sName
      hCtrl.Mouse = Mouse.Arrow

    Case "combobox"
      hCtrl = New ComboBox(hParent)
      'hCtrl.Text = sName
      'hCtrl.Add(" ")
      hCtrl.Mouse = Mouse.Arrow

    Case "picturebox"
      hCtrl = New PictureBox(hParent)
      hCtrl.Picture = Picture["img/control/picturebox.png"]

    Case "treeview"
      hCtrl = New TreeView(hParent)
      hPict = Picture["icon:/small/directory"]
      hCtrl.Add("A", sName, hPict)
      hCtrl.Add("B", "Item", hPict, "A")
      hCtrl.Add("C", "Item", hPict, "A")
      hCtrl["A"].Expanded = True

    Case "iconview"
      hCtrl = New IconView(hParent)
      hPict = Picture["icon:/32/image"]
      hCtrl.Add("A", sName, hPict)

    Case "listview"
      hCtrl = New ListView(hParent)
      hPict = Picture["icon:/small/file"]
      hCtrl.Add("A", sName, hPict)

    Case "columnview"
      hCtrl = New ColumnView(hParent)
      hCtrl.Columns.Count = 2
      hPict = Picture["icon:/small/file"]
      hCtrl.Add("A", sName, hPict)
      'hCtrl.Columns[0].AutoResize = TRUE
      'hCtrl.Columns[1].Width = hCtrl.Columns[0].Width

    Case "listbox"
      hCtrl = New ListBox(hParent)
      hCtrl.Add(sName)

    Case "gridview", "tableview"
      hCtrl = New GridView(hParent)
      hCtrl.Rows.Count = 4
      hCtrl.Columns.Count = 4
      'hCtrl.Columns[0].W = Desktop.Scale * 16
      hCtrl.Grid = True
      hCtrl[0, 0].Text = sName
      hCtrl[0, 0].ColumnSpan = hCtrl.Columns.Count
      'hCtrl.Rows.H = -1

    Case "menu"
      hCtrl = New Menu(hParent)

    Case "progressbar"
      hCtrl = New ProgressBar(hParent)
      hCtrl.Value = 0.5

    Case "splitter"
      If sName Then
        hCtrl = New Panel(hParent)
      Else
        hCtrl = New Splitter(hParent)
      Endif

    Case "-", "drawingarea", "panel", "vbox", "hbox", "vpanel", "hpanel", "vsplit", "hsplit", "embedder", "datasource"
      hCtrl = New DrawingArea(hParent)
      hCtrl.NoBackground = True
      
      'hCtrl.Merge = True

    Case "workspace"
      hCtrl = New Workspace(hParent)
      hWindow = New Window
      hWindow.Title = sName
      hWindow.Background = Color.Gradient(Color.Foreground, Color.Background)
      hCtrl.Add(hWindow)
      
    Case "webview"
      hCtrl = New TextLabel(hParent)
      hCtrl.Padding = 4
      hCtrl.Background = Color.TextBackground
      hCtrl.Text = "<html><body><h2>" & sName & "</h2></body></html>"
      
    ' Case "listcontainer"
    '   hCtrl = New ListContainer(hParent)
    '   hLabel = New Label(hCtrl)
    '   hLabel.H = Desktop.Scale * 4
    '   hLabel.Text = sName
      
    Case Else

      If bExist Then
        bVirtual = hClass.VirtualControl
      Endif

      If bVirtual Then

        If Len(sName) Then
          hCtrl = New Button(hParent)
          hPict = GetIcon(sClass, hClass.Component, 32) 'Picture["img/control" &/ LCase(sClass) & ".png"]
          hCtrl.Picture = hPict
          hCtrl.Design = True
        Else
          hCtrl = New (sClass) ' Timer(hParent)
        Endif

      Else

        If bExist Then
          Try hCtrl = New (sClass, hParent)
          'If Error And If hClass.Family = "Form" Then Debug sClass; ": "; Error.Text
          'ENDIF
          'hCtrl = NEW (sClass, hParent)
        Endif

        If Not hCtrl Then
          'PRINT "DrawingArea: sClass"
          hCtrl = New DrawingArea(hParent)
          'hCtrl.Merge = True
          'hCtrl.Text = sClass & " ?"
          hCtrl.Design = True
          'hCtrl.Painted = $hFamily.IsPainted(Me)
          'hCtrl.Transparent = $hFamily.IsTransparent(Me)
        Else
          hCtrl.Design = Not IsContainer()
          ' If Not IsMultiContainer() Then
          '   Try hCtrl.Text = sName
          ' Endif
        Endif

      Endif

  End Select

  'PRINT "< CreateControl "; sClass

  'IF hCtrl IS UserControl OR NOT hCtrl IS Container THEN
  'Try hCtrl.Tracking = True
  hCtrl.Raise
  Try hCtrl.Design = True
  
  Return hCtrl

End


Private Sub InitControl()

  Dim hProp As CPropertyInfo

  $cValue["#X"] = 0
  $cValue["#Y"] = 0
  $cValue["#Width"] = 0
  $cValue["#Height"] = 0

  If DrawWith Then
    For Each hProp In Project.Documentation.Classes[Kind].Properties
      If Not hProp.Coord Then SetProperty(hProp.Name, hProp.DefaultValue)
    Next
  Endif

End


Public Sub _new(sName As String, sClass As String, hParent As CControl, hForm As FForm, hFamily As CFamily)

  Dim hCtrl As Object
  Dim iDim As Integer
  Dim hClass As CClassInfo

  Name = sName
  Kind = sClass
  Parent = hParent
  $hFamily = hFamily
  
  hClass = Project.Documentation.Classes[sClass]
  
  If hClass.Form Then
  
    If hFamily.Name = "Form" Then
      hCtrl = New Form(hForm.Container)
    Else
      If hClass.MultiContainer Then
        hCtrl = New TabPanel(hForm.Container)
        hCtrl.Border = False
        hCtrl.Highlight = True
      Else
        hCtrl = New DrawingArea(hForm.Container)
      Endif
    Endif
    hCtrl.Drop = True
    'hCtrl.Background = CFamily.Get(hForm.Family).Background
    'hCtrl.Tracking = True
    
  Else If Kind = "Menu" Then
  
    If Parent.Kind <> "Menu" Then
      hCtrl = New Menu(hForm.Control[hForm.Name].Control)
    Else
      hCtrl = New Menu(Parent.Control)
    Endif
    
  Else
      
    Try Virtual = hClass.VirtualControl

    If Virtual Then

      'PRINT sName; " is virtual"
      hCtrl = CreateControl(sName, sClass, Parent.Control)
      'hCtrl.Resize(5 * Desktop.Scale, 5 * Desktop.Scale)
      iDim = 2 + (32 + Desktop.Scale - 1) \ Desktop.Scale '(40 + Desktop.Scale - 1) Div Desktop.Scale
      hCtrl.MoveScaled(0, 0, iDim, iDim)
      
    Else

      'If Not Parent Then Stop

      hCtrl = CreateControl(sName, sClass, Parent.Control)
      Unknown = Object.Type(hCtrl) <> sClass

    Endif

    hCtrl.Drop = True
    'hCtrl.Tracking = True

  Endif

  Control = hCtrl
  Control.Tag = sName

  If Kind = "Menu" Then
    Object.Attach(hCtrl, hForm, "MenuControl")
  Else
    Try Object.Attach(hCtrl, hForm, "Control")
  Endif
  
  VirtualCoord = hClass.Family <> "Form" And Not Virtual

  InitControl()

  If IsMultiContainer() Then
    Tag = New Collection
  Endif

  UpdateName

End


' PUBLIC SUB _free()
'
'   TRY UnRefLibrary(CComponent.Classes[Kind].Component)
'
' END


Public Sub HasProperty(sProp As String) As Boolean
  
  Try Return Project.Documentation.Classes[Kind].Properties.Exist(sProp)
  
End


Private Function GetRealValue(sProp As String, vVal As Variant) As Variant
  
  Dim vRealVal As Variant
  Dim hProp As CPropertyInfo
  Dim vConstVal As Variant
  
  Try hProp = Project.Documentation.Classes[Kind].Properties[sProp]
  If IsNull(hProp) Then Return

  If IsNull(vVal) Then
    vRealVal = hProp.DefaultValue
  Else
    vRealVal = vVal
  Endif

  If IsNull(vRealVal) Then Return

  Select hProp.Type

    Case "Font"

      'IF NOT IsNull(vRealVal) THEN
      vRealVal = Font[vRealVal]
      'ENDIF

    Case "Color"

      If TypeOf(vRealVal) = gb.String Then
        If Not IsNull(Val(vRealVal)) Then
          vRealVal = Val(vRealVal)
        Else
          vRealVal = FColorChooser.FromString(vRealVal) 'Object.GetProperty(Color, vRealVal)
        Endif
      Endif

    Case "Picture"

      If vRealVal Begins "icon:/" Then 
        vRealVal = Picture[vRealVal]
      Else
        vRealVal = Picture.Load(File.Dir(Project.Path) &/ vRealVal)
      Endif

    Case "Constant"

      'IF IsNumber(vRealVal) THEN
      vConstVal = hProp.ConstantList["#" & CStr(vRealVal)]
      If IsNull(vConstVal) Then vConstVal = vRealVal
      'ENDIF

      If Not IsNull(vConstVal) Then
        vRealVal = CInt(Project.Documentation.Classes[hProp.ConstantClass].Symbols[vConstVal].Value)
      Else 
        vRealVal = Null
      Endif
      
    ' Case "Angle"
    '   If vRealVal Ends "°" Then vRealVal = String.Left$(vRealVal, -1)
    '   VRealVal = Val(vRealVal)
    '   If hProp.Argument Not Begins "Deg" Then VRealVal = Rad(vRealVal)
      
  End Select
  
  Return vRealVal

End

Public Function GetPropertyReal(sProp As String) As Variant
  
  Return GetRealValue(sProp, $cValue[sProp])
  
End


Public Function SetProperty(sProp As String, vVal As Variant, Optional bDoNotApply As Boolean) As Boolean

  Dim hUndo As CUndo = GetUndo()
  Dim vDefault As Variant
  Dim hProp As CPropertyInfo
  Dim vRealVal As Variant

  'If $cSynonymous.Exist(sProp) Then sProp = $cSynonymous[sProp]

  Try hProp = Project.Documentation.Classes[Kind].Properties[sProp]
  'IF ERROR THEN STOP
  If IsNull(hProp) Then Return ' La propriété n'existe pas, donc on PEUT changer sa valeur !!

  hUndo.Begin
  hUndo.Add("SetControlProperty", [Me.Name, sProp, GetProperty(sProp), bDoNotApply])

  vDefault = hProp.DefaultValue

  'PRINT Name; "."; sProp; " = "; vVal

  ' valeur par défaut ?

  'IF sProp = "Background" THEN STOP

  If Not hProp.Required Then
    If Not IsNull(vDefault) Then
      If Not IsNull(vVal) Then
        If vVal = vDefault Then
          vVal = Null
          'PRINT "Default !"
        Endif
      Endif
    Endif
  Endif

  If hProp.DoNotApply Then 
    If hProp.Name = "Public" Then {Public} = vVal
    Goto _DO_NOT_APPLY
  Endif
  If bDoNotApply Then Goto _DO_NOT_APPLY
  If Unknown Then 
    If Not Project.Documentation.Classes[Object.Type(Control)].Properties.Exist(sProp) Then Goto _DO_NOT_APPLY
    ' If Not hProp.Coord Then 
    '   If sProp <> "Background" And sProp <> "Foreground" Then 
    '     Goto _DO_NOT_APPLY
    '   Endif
    ' Endif
  Endif

  If IsMultiContainer() Then
    If sProp = "Picture" Then
      If IsNull(vVal) Then
        vRealVal = vDefault
      Else
        vRealVal = vVal
      Endif
      Tag[Control.Index] = vRealVal
    Endif
  Endif

  vRealVal = GetRealValue(sProp, vVal)

  'PRINT "SetProperty: "; Object.Type(Control); "."; sProp; " = "; Str(vRealVal)

  Object.SetProperty(Control, sProp, vRealVal)
  
  ' propriété fictive

_DO_NOT_APPLY:

  'IF hProp.Control THEN
  '  IF GetForm().FindControlFromType(hProp.Type).Find(vVal) < 0 THEN
  '    vVal = NULL
  '  ENDIF
  'ENDIF
  
  If $cValue[sProp] <> vVal Then

    If hProp.Coord Then
  
      If VirtualCoord Then
        $cValue[sProp] = vVal
        Modify
      Else 
        hUndo.Disable()
        SetProperty(Mid$(sProp, 2), vVal, bDoNotApply)
        hUndo.Enable()
      Endif
      
      MoveAllHandle
    
    Else
    
        $cValue[sProp] = vVal
        FProperty.RefreshOne(Me, sProp)
        Modify
        
        If Not VirtualCoord Then
          If sProp = "X" Or If sProp = "Y" Or If sProp = "Width" Or If sProp = "Height" Then
            If Not IsNull(Parent) Or If Len(sProp) > 1 Then
              If Not IsNull(vVal) Then Object.SetProperty(Control, sProp, vVal)
            Endif
            $cValue["#" & sProp] = vVal
            MoveAllHandle
          Endif
        Endif
        
    Endif
  
  Endif
  
  If IsNull(Parent) Then
    Select Case sProp
      Case "#Width", "#W", "#Height", "#H"
        GetForm().UpdateBorder
      Case "Background"
        GetForm().UpdateSnap
      Case "Text", "Icon", "Border", "Resizable", "Type"
        GetForm().UpdateTitle
    End Select 
  Endif

  If hProp.UpdateName Then UpdateName
  
  If Control Is DrawingArea Then 
    Control.Refresh
  Else If Control Is Menu Then
    If sProp = "Text" Or If sProp = "Shortcut" Then
      Control.Text = RTrim($cValue["Text"] & "\t" & $cValue["Shortcut"])
    Endif  
  Endif


Finally
  
  hUndo.End

Catch

  LastError = Error.Text
  Error "gambas3: warning: cannot set "; Kind; "."; sProp; " property: "; Error.Where; ": "; Error.Text
  Return True

End


Public Function GetProperty(sProp As String) As Variant

  Dim hProp As CPropertyInfo
  Dim vVal As Variant

  'If $cSynonymous.Exist(sProp) Then sProp = $cSynonymous[sProp]

  Try hProp = Project.Documentation.Classes[Kind].Properties[sProp]
  'If Error Then Stop
  If hProp Then 
    If hProp.AlwaysRead Then
  
      vVal = Object.GetProperty(Control, sProp)
  
      If Not IsNull(vVal) Then
        If hProp.Type = "Font" Then vVal = vVal.ToString()
      Endif
  
      If vVal = hProp.DefaultValue Then
        $cValue[sProp] = Null
      Else
        $cValue[sProp] = vVal
      Endif
  
    Endif
  Endif

  Return $cValue[sProp]

End

Public Function GetPropertyDefault(sProp As String) As Variant

  Dim vVal As Variant

  'IF $cSynonymous.Exist(sProp) THEN sProp = $cSynonymous[sProp]

  vVal = GetProperty(sProp) '$cValue[sProp]

  If IsNull(vVal) Then
    Try vVal = Project.Documentation.Classes[Kind].Properties[sProp].DefaultValue
  Endif 
  
  Return vVal

End

Private Function ConvertToString(vVal As Variant, hProp As CPropertyInfo) As String
  
  Select Case hProp.Type

    Case "b"

      If vVal Then
        Return "True"
      Else
        Return "False"
      Endif

    Case "i", "l", "f", "s", "d", "v", "Angle"

      Return CStr(vVal)

    Case "List", "Path", "Picture", "Font", "Table", "Menu", "Image", "SvgImage", "ReportCoord", "ReportPadding", "ReportMargin", "ReportBoxShadow", "ReportBorder", "ReportBrush", "Field"

      Return CStr(vVal)
      
    Case "String[]", "Fields", "Field[]"
    
      If IsNull(vVal) Then Return Null
      Return vVal.Join("\n")

    Case "Color"

      vVal = CStr(vVal)
      If Not IsNull(Val(vVal)) Then
        Return "&H" & Hex$(vVal, 6) & "&"
      Else
        Return vVal
      Endif

    Case "Constant"

      If TypeOf(vVal) = gb.String Then
        Return vVal
      Else
        Return hProp.ConstantList["#" & CStr(vVal)]
      Endif
      
    Case Else ' Object

      Return vVal 'hProp.Type & " ?"

  End Select
  
End


Public Function GetPropertyString(sProp As String) As String

  Dim vVal As Variant
  Dim hProp As CPropertyInfo

  Try hProp = Project.Documentation.Classes[Kind].Properties[sProp]
  If IsNull(hProp) Then Return
    'PRINT Kind; "."; sProp; " ???"
  'ENDIF

  vVal = GetProperty(sProp)
  
  If IsNull(vVal) Then

    WasDefaultValue = True

    If hProp.Type <> "Color" Then
      vVal = hProp.DefaultValue
    Endif

    If IsNull(vVal) Then Return

  Else 
    
    WasDefaultValue = False

  Endif
  
  Return ConvertToString(vVal, hProp)

End


Public Function IsContainer() As Boolean

  Try Return Project.Documentation.Classes[Kind].Container

End

Public Function IsMultiContainer() As Boolean

  Try Return Project.Documentation.Classes[Kind].MultiContainer

End

Public Sub HasChildren() As Boolean
  
  Dim hCont As Container
  
  Try hCont = Control
  If Not hCont Then Return
  Return hCont.Children.Count > 0
  
End


Public Sub Delete()

  Dim aChildren As CControl[]
  Dim hChild As CControl
  Dim hForm As FForm

  hForm = GetForm()
  aChildren = hForm.GetChildren(Name)
  If aChildren Then

    For Each hChild In aChildren
      hChild.Delete
    Next

  Endif

  UnSelect(hForm)
  
  $hFamily.DeleteIcon(Me)
  Control.Delete
  Control = Null

  hForm.Control[Name] = Null

End


Public Function GetForm() As FForm

  'IF NOT Object.Parent(Control) IS FForm THEN STOP

  Return Object.Parent(Control)

End

Private Sub GetUndo() As CUndo
  
  Return GetForm().GetUndo()
  
End


Static Public Function CheckName(sName As String) As Boolean

  Dim iInd As Integer

  ' Control and group names can be void
  If Not sName Then Return

  If Not IsLetter(Left(sName)) Then Return True

  For iInd = 2 To Len(sName)
    If InStr("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_", UCase(Mid$(sName, iInd, 1))) = 0 Then
      Return True
    Endif
  Next

End

Private Sub HasText() As Boolean
  
  Return $cValue.Exist("Text")
  
End


Public Sub UpdateName()
  
  If Virtual Then Return
  
  Select Case Object.Type(Control)

    Case "ListBox"
      Control[0].Text = Name

    Case "ComboBox"
      If Control.ReadOnly Then
        Control.Clear
        Control.Add(Name)
        Control.Index = 0
      Else
        If Not HasText() Then Control.Text = Name
      Endif

    Case Like "*Box"
      If Not HasText() Then Try Control.Text = Name

    Case Like "*Button"
      If Not HasText() And If Not $cValue.Exist("Picture") Then 
        Try Control.Text = Name
      Else
        Try Control.Text = $cValue["Text"]
      Endif

    Case Like "*Label"
      If Not HasText() Then Try Control.Text = Name

    Case "TextArea", "TextEdit", "Editor", "TextEditor"
      If Not HasText() Then Control.Text = Name
      
    Case "TreeView", "ListView", "ColumnView", "IconView"
      Control["A"].Text = Name
      
    Case "GridView", "TableView"
      Control[0, 0].Text = Name

    Case "DrawingArea", "ScrollArea"
      Control.Refresh
      
    Case "Workspace"
      Control.ActiveWindow.Title = Name

    Case "WebView"
      Control.Text = "<html><body><h2>" & Name & "</h2></body></html>"
      
    ' Case "ListContainer"
    '   hLabel = Control.Children[0]
    '   hLabel.Text = Name
    
    Case Else

      If Unknown Then 
        If Not IsMultiContainer() Then
          If Not HasText() Then 
            Try Control.Text = Name
          Else
            Try Control.Text = $cValue["Text"]
          Endif
        Endif
        Control.Refresh
      Endif

  End Select
  
End


Public Function Rename(sNewName As String) As Boolean

  Dim hForm As FForm

  hForm = GetForm()

  If CheckName(sNewName) Then Return True

  If UCase(sNewName) <> UCase(Name) Then
    If hForm.Control.Exist(sNewName) Then Return True
  Endif

  GetUndo().Add("RenameControl", [sNewName, Me.Name])

  ' Don't look in the class when renaming the form!
  If Parent Then
    hForm.GetClassEditor(True).RenameControl(Name, sNewName)
  Endif
  
  If Name Then hForm.Control[Name] = Null

  Name = sNewName
  hForm.Control[Name] = Me
  Control.Tag = Name

  hForm.Modify

  UpdateName
  
  If Parent Then
    FFormStack.RefreshOne(Parent.Name)
  Else 
    FFormStack.RefreshAll
  Endif
  
End


Public Sub Select(hForm As FForm, Optional bMaster As Boolean)

  Dim hPanel As Panel

  If IsNull(Parent) Then Return
  If Kind = "Menu" Then Return

  If hForm.Selection.Count = 0 Then EnsureVisible

  If Selected Then
    UnSelect(hForm)
  Endif

  CreatePanel(0, "NW", Mouse.SizeNW, bMaster)
  CreatePanel(1, "N", Mouse.SizeN, bMaster)
  CreatePanel(2, "NE", Mouse.SizeNE, bMaster)
  CreatePanel(3, "E", Mouse.SizeE, bMaster)
  CreatePanel(4, "SE", Mouse.SizeSE, bMaster)
  CreatePanel(5, "S", Mouse.SizeS, bMaster)
  CreatePanel(6, "SW", Mouse.SizeSW, bMaster)
  CreatePanel(7, "W", Mouse.SizeW, bMaster)

  Selected = True

  hForm.Selection[Name] = Me

  If bMaster Then
    If hForm.Master Then hForm.Master.Select(hForm)
    hForm.Master = Me
    For Each hPanel In $aPanel
      hPanel.Raise
    Next
  Endif
  
End

Public Sub EnsureVisible()

  Dim hTab As Object
  Dim hCtrl As Control
  Dim I As Integer

  If Not Parent Then Return

  If Parent.IsMultiContainer() Then
    
    hTab = Parent.Control
    
    For I = 0 To hTab.Count - 1
      For Each hCtrl In hTab[I].Children
        If hCtrl = Control Then
          hTab.Index = I
          I = hTab.Count
          Break
        Endif
      Next
    Next
    
  Endif

  Parent.EnsureVisible

End

Public Sub UnSelect(hForm As FForm, Optional bDoNotRemove As Boolean)

  Dim iInd As Integer
  Dim hCtrl As CControl

  If IsNull(Parent) Then Return

  If Not Selected Then Return

  For iInd = 0 To $aPanel.Max
    $aPanel[iInd].Delete
    $aPanel[iInd] = Null
  Next

  Try Control.ToolTip = ""

  Selected = False

  If Not bDoNotRemove Then
    hForm.Selection.Remove(Name)
    If hForm.Master = Me Then 
      hForm.Master = Null
      For Each hCtrl In hForm.Selection
        hForm.Master = hCtrl
        Break
      Next
    Endif
  Endif

End


Private Sub CreatePanel(iIndex As Integer, sTag As String, iMouse As Integer, bMaster As Boolean)

  Dim hPanel As Panel
  Dim hCont As Object
  
  hCont = Control.Parent

  hPanel = New Panel(hCont) As "Panel"
  hPanel.Resize(PAN_W, PAN_H)
  hPanel.Tag = "#" & sTag
  hPanel.Mouse = iMouse
  'hPanel.Tracking = True
  'hPanel.Merge = True

  $aPanel[iIndex] = hPanel
  
  If bMaster Then
    hPanel.Background = Color.TextBackground
    'hPanel.Foreground = Color.Black
  Else
    hPanel.Background = Color.LightForeground
    'hPanel.Foreground = Color.White
  Endif
  
  MovePanel(iIndex)

  hPanel.Border = Border.Plain
  
End


Private Sub MovePanel(iPanel As Integer)

  Dim hCtrl As Control
  Dim hPanel As Panel
  Dim X, Y As Integer

  hCtrl = Control
  hPanel = $aPanel[iPanel]
  hPanel.Raise
  'If hPanel.Previous <> hCtrl Then hPanel.Next = hCtrl

  'hPanel.Move(hCtrl.X - 3, hCtrl.Y - 3, hCtrl.W + 6, hCtrl.H + 6)
  'Return

  Select Case Mid$(hPanel.Tag, 2)

    Case "NW", "N", "NE"
      Y = hCtrl.Y - PAN_H \ 2
      'hPanel.Y = hCtrl.Y

    Case "SW", "S", "SE"
      Y = hCtrl.Y + hCtrl.Height - PAN_H \ 2 - 1
      'hPanel.Y = hCtrl.Y + hCtrl.Height - PAN_H

    Default
      Y = hCtrl.Y + (hCtrl.Height - PAN_H) \ 2

  End Select

  Select Case Mid$(hPanel.Tag, 2)

    Case "NW", "W", "SW"
      X = hCtrl.X - PAN_W \ 2
      'hPanel.X = hCtrl.X

    Case "NE", "E", "SE"
      X = hCtrl.X + hCtrl.Width - PAN_W \ 2 - 1
      'hPanel.X = hCtrl.X + hCtrl.Width - PAN_W

    Default
      X = hCtrl.X + (hCtrl.Width - PAN_W) \ 2

  End Select

  hPanel.Move(X, Y)

End


Private Sub MoveAllHandle()

  Dim iInd As Integer

  If Not Selected Then Return
  If $bDoNotMoveHandle Then Return

  For iInd = 0 To $aPanel.Max
    MovePanel(iInd)
  Next
  
  If HasIcon() Then $hFamily.EnterControl(Null, Me)
  
End


Public Sub Move(X As Integer, Y As Integer, Optional bFree As Boolean)

  Dim hUndo As CUndo = GetUndo()

  If Not bFree Then
    X = Grid(X, Project.Snap)
    Y = Grid(Y, Project.Snap)
    'X = Grid(X, Desktop.Scale)
    'Y = Grid(Y, Desktop.Scale)
  Endif

  'IF Kind = "GridView" THEN
  '  PRINT "Pos ="; Control.X; Control.Y
  '  PRINT "Move("; X; ","; Y; ")"
  'ENDIF

  If X And If Y And If X = GetProperty("#X") And If Y = GetProperty("#Y") Then Return

  If Parent Then
    Control.Move(X, Y)
    'Arrange(Parent.Control, FALSE)
  Endif

  $bDoNotMoveHandle = True

  hUndo.Begin
  SetProperty("#X", X)
  SetProperty("#Y", Y)
  hUndo.End

  $bDoNotMoveHandle = False
  
  MoveAllHandle
  
End

Public Sub HasIcon() As Boolean
  
  Return $cValue["#icon"]
  
End


Public Sub Resize(W As Integer, H As Integer, Optional bFree As Boolean)

  Dim hUndo As CUndo = GetUndo()

  If Virtual Then Return

  If Not bFree Then
    W = Grid(W, Project.Snap)
    H = Grid(H, Project.Snap)
    'W = Grid(W, Desktop.Scale)
    'H = Grid(H, Desktop.Scale)
  Endif

  If W = GetProperty("#Width") And H = GetProperty("#Height") Then Return

  Control.Resize(W, H)
  'IF Parent THEN Arrange(Parent.Control, FALSE)

  $bDoNotMoveHandle = True

  hUndo.Begin
  SetProperty("#Width", W)
  SetProperty("#Height", H)
  hUndo.End

  $bDoNotMoveHandle = False

  MoveAllHandle

End


Public Sub MoveAndResize(X As Integer, Y As Integer, W As Integer, H As Integer, Optional bFree As Boolean)

  Dim hUndo As CUndo = GetUndo()

  If Virtual Then
    Move(X, Y, bFree)
    Return
  Endif

  hUndo.Begin

  If Not bFree Then
    X = Grid(X, Project.Snap)
    Y = Grid(Y, Project.Snap)
    W = Grid(W, Project.Snap)
    H = Grid(H, Project.Snap)
  Endif

  'IF Kind = "GridView" THEN
  '  PRINT "Pos ="; Control.X; Control.Y
  '  PRINT "Move("; X; ","; Y; ")"
  'ENDIF

  If Parent Then
    Control.Move(X, Y, W, H)
  Else
    Control.Resize(W, H)
  Endif

  $bDoNotMoveHandle = True

  SetProperty("#X", X)
  SetProperty("#Y", Y)
  SetProperty("#Width", W)
  SetProperty("#Height", H)

  $bDoNotMoveHandle = False

  MoveAllHandle

  hUndo.End
  
End


Public Procedure Panel_MouseDown()

  'PRINT "Panel_MouseDown"

  If Project.Running Then Return
  If GetForm().ReadOnly Then Return
  If Not Last.Tag Then Return

  GetUndo().Begin
  $bMove = True
  $MX = Mouse.ScreenX
  $MY = Mouse.ScreenY
  $X = Last.X + Mouse.X
  $Y = Last.Y + Mouse.Y

End


Public Procedure Panel_MouseMove()

  Dim iX As Integer
  Dim iY As Integer
  Dim iW As Integer
  Dim iH As Integer
  Dim iPanX As Integer
  Dim iPanY As Integer

  Dim hPanel As Panel = Last
  Dim hCtrl As Control

  Dim bSomethingDone As Boolean
  Dim hUndo As CUndo


  If Not $bMove Then Return

  hUndo = GetUndo()

  CControl.SetGrid(Not Mouse.Shift)

  hCtrl = Control

  iPanX = $X + Mouse.ScreenX - $MX
  iPanY = $Y + Mouse.ScreenY - $MY 

  ' Select Case Mid$(hPanel.Tag, 2)
  ' 
  '   Case "N", "S"
  '     iPanX = hPanel.X
  ' 
  '   Case "W", "E"
  '     iPanY = hPanel.Y
  ' 
  ' End Select

  iX = Control.X
  iY = Control.Y
  iW = Control.W
  iH = Control.H

  'Debug hCtrl.X;; hCtrl.Y; " / "; $X;; $Y; " -> "; iPanX;; iPanY

  Select Case Mid$(hPanel.Tag, 2)

    Case "N", "NW", "NE"

      iY = Grid(iPanY, Project.Snap)
      iH = Grid(hCtrl.H + hCtrl.Y - iY, Project.Snap)

    Case "S", "SW", "SE"

      iH = Grid(iPanY - hCtrl.Y, Project.Snap)

  End Select

  Select Case Mid$(hPanel.Tag, 2)

    Case "W", "NW", "SW"

      iX = Grid(iPanX, Project.Snap)
      iW = Grid(hCtrl.W + hCtrl.X - iX, Project.Snap)

    Case "E", "NE", "SE"

      iW = Grid(iPanX - hCtrl.X, Project.Snap)

  End Select

  If (iW > 0) And (iH > 0) Then

    If (iX <> hCtrl.X) Or (iY <> hCtrl.Y) Then
      If (iW <> hCtrl.W) Or (iH <> hCtrl.H) Then
        MoveAndResize(iX, iY, iW, iH)
        bSomethingDone = True
      Else
        Move(iX, iY)
        bSomethingDone = True
      Endif
    Else If (iW <> hCtrl.W) Or (iH <> hCtrl.H) Then
      Resize(iW, iH)
      bSomethingDone = True
    Endif
    
    If bSomethingDone And If Not hUndo.IsDisabled() Then
      hUndo.Disable
    Endif

  Endif

  CControl.SetGrid(True)

End


Public Procedure Panel_MouseUp()

  Dim hUndo As CUndo = GetUndo()

  $bMove = False
  If hUndo.IsDisabled() Then hUndo.Enable
  hUndo.End
  
  GetForm().CheckHovered(Control.Parent)

End


Public Sub Panel_Menu()

  GetForm().Control_Menu

End

Public Sub Panel_Enter()
  
  GetForm().CheckHovered(Control.Parent)
  
End

Public Sub Panel_Leave()
  
  GetForm().CheckHovered(Control.Parent)
  
End


' Public Sub Panel_Draw()
'   
'   Dim hPanel As DrawingArea = Last
'   
'   If $bMaster Then
'     Draw.Background = Color.White
'     Draw.Foreground = Color.SelectedBackground
'   Else
'     Draw.Background = Color.SelectedBackground
'     Draw.Foreground = Color.Black
'   Endif
'   Draw.FillRect(0, 0, hPanel.W, 3)
'   Draw.FillRect(0, hPanel.H - 3, hPanel.W, 3)
'   Draw.FillRect(0, 3, 3, hPanel.H - 6)
'   Draw.FillRect(hPanel.W - 3, 3, 3, hPanel.H - 6)
'   Draw.Rect(0, 0, hPanel.W, hPanel.H)
'   
' End



Static Public Function Grid(iVal As Integer, iGrid As Integer) As Integer

  Dim iMod As Integer

  'IF (iVal >= 0) THEN
  '  RETURN Int((iVal + iGrid / 2) / iGrid) * iGrid
  'ELSE
  '  RETURN Int((iVal + iGrid / 2) / iGrid) * iGrid
  'ENDIF

  If $bGrid Then
    iMod = iVal Mod iGrid
    If (iMod < 0) Then iMod = iMod + iGrid

    If iMod < (iGrid \ 2) Then
      iVal = iVal - iMod
    Else
      iVal = iVal + iGrid - iMod
    Endif
  Endif

  Return iVal

End


Private Function GetCoord(iCoord As Integer, Optional bDim As Boolean) As Float

  If bDim And If iCoord = 1 Then Return 0

  Return iCoord / Desktop.Scale

End

Private Sub FormatScaledCoord(eCoord As Float) As String
  
  If eCoord = Int(eCoord) Then
    Return CStr(Int(eCoord))
  Else
    Return CStr(Int(eCoord)) & "." & Mid$(Format(Frac(eCoord), ".####"), 2)
  Endif
  
End

Static Public Sub StringArrayPropertyToString(aVal As String[], bTranslate As Boolean) As String
  
  Dim sLine As String
  Dim iInd As Integer
  Dim sVal As String
  
  If Not aVal Or If aVal.Count = 0 Then
  
    sLine = "Null"
    
  Else
  
    sLine = "["
  
    For iInd = 0 To aVal.Max
      sVal = Quote(aVal[iInd])
      If bTranslate Then sVal = "(" & sVal & ")"
      If iInd Mod 32 = 0 Then
        If iInd Then 
          sLine &= "]"
          If iInd > 32 Then sLine &= ")"
          sLine &= ".Insert([" 
        Endif
      Else
        sLine &= ", "
      Endif
      sLine &= sVal
    Next
  
    sLine &= "]"
    If iInd > 32 Then sLine &= ")"
  
  Endif
  
  Return sLine
  
End


Public Function GetEachProperty(DX As Integer, DY As Integer, Optional bNoScale As Boolean) As String[]

  Dim cLine As New String[]
  Dim sProp As String
  Dim vVal As Variant
  Dim cProp As Collection
  Dim hProp As CPropertyInfo
  Dim sLine As String
  Dim X, Y, W, H As Integer
  Dim bHasSize As Boolean
  Dim bTranslate As Boolean
  Dim sVal As String
  Dim iPos As Integer
  Dim sShortcut As String
  Dim sThreeDots As String

  cProp = Project.Documentation.Classes[Kind].Properties
  'If Not CComponent.Classes[Kind].PropertyList Then Stop

  For Each sProp In Project.Documentation.Classes[Kind].PropertyList

    'PRINT Name; "."; sProp

    If Not cProp.Exist(sProp) Then Continue

    hProp = cProp[sProp]

    If hProp.Exclude Then Continue
    
    If Not VirtualCoord Then
      If Not Virtual Then
        If sProp = "X" Or If sProp = "Y" Then Continue
      Endif
      If sProp = "Width" Or If sProp = "Height" Then Continue
    Endif

    vVal = GetProperty(sProp)
    'PRINT "-> "; vVal

    'IF NOT IsNull(cDefault[sProp]) THEN
    '  IF vVal = cDefault[sProp] THEN
    '    GOTO _SUIVANT
    '  ENDIF
    'ELSE
    If Not hProp.Required Then
      If IsNull(vVal) Then Continue
    Endif
    'ENDIF

    If Right(hProp.Type, 2) <> "[]" Then
      vVal = ConvertToString(vVal, hProp)
    Endif

    sLine = sProp & " = "

    If hProp.Translate Then
      bTranslate = GetPropertyDefault("Translate")
    Else
      bTranslate = False
    Endif
          
    Select Case hProp.Type

      Case "s", "v", "List", "Path", "Table", "Menu", "ReportCoord", "Field"

        If bTranslate Then
          
          If hProp.Shortcut Then
            
            sVal = vVal
            
            If sVal Ends "..." Then
              sVal = Left(sVal, -3)
              sThreeDots = "..."
            Else If sVal Ends "…" Then
              sVal = String.Left(sVal, -1)
              sThreeDots = "…"
            Else
              sThreeDots = ""
            Endif
            
            iPos = String.InStr(sVal, "&")
            If iPos Then
              sShortcut = String.Mid$(sVal, iPos + 1, 1)
              If InStr("& ", sShortcut) Then 
                sShortcut = ""
              Else
                sVal = String.Left(sVal, iPos - 1) & String.Mid(sVal, iPos + 1)
              Endif
            Endif
            
            If sShortcut Then
              sLine &= "Shortcut((" & Quote(sVal) & "), " & Quote(sShortcut) & ")"
            Else
              sLine &= "(" & Quote(sVal) & ")"
            Endif
            
            If sThreeDots Then sLine &= " & " & Quote(sThreeDots)
            
          Else
            sLine &= "(" & Quote(vVal) & ")"
          Endif
          
        Else
          sLine &= Quote$(vVal)
        Endif
        
      Case "String[]", "Fields", "Field[]"
      
        'aVal = vVal.Copy()
        
        sLine &= StringArrayPropertyToString(vVal, bTranslate)

      Case "Font"
        sLine = sLine & "Font[" & Quote(vVal) & "]"

      Case "Color"
        If Not IsNull(Val(vVal)) Then
          sLine = sLine & vVal
        Else
          sLine = sLine & "Color." & vVal
        Endif

      Case "Picture"
        sLine &= "Picture[" & Quote$(vVal) & "]"
        
      Case "Image"
        sLine &= "Image.Load(" & Quote$(vVal) & ")"
        
      Case "SvgImage"
        sLine &= "SvgImage.Load(" & Quote$(vVal) & ")"
        
      Case "ReportPadding"
        sLine &= "ReportPadding[" & Quote$(vVal) & "]"
      
      Case "ReportMargin"
        sLine &= "ReportMargin[" & Quote$(vVal) & "]"
      
      Case "ReportBoxShadow"
        sLine &= "ReportBoxShadow[" & Quote$(vVal) & "]"
        
      Case "ReportBorder"
        sLine &= "ReportBorder[" & Quote$(vVal) & "]"
        
      Case "ReportBrush"
        sLine &= "ReportBrush[" & Quote$(vVal) & "]"
        
      Case "Connection"
        sLine = sLine & "Connections[" & Quote$(vVal) & "]"

      Case "Constant"
        sLine = sLine & hProp.ConstantClass & "." & vVal
        
      Case "d"

        sLine = sLine & "CDate(" & Quote$(CStr(vVal)) & ")"

      Case Else

        sLine = sLine & CStr(vVal)

    End Select

    If hProp.Virtual Then sLine = "#" & sLine

    cLine.Add(sLine)

  Next

  X = GetProperty("#X") - DX
  Y = GetProperty("#Y") - DY
  Try W = GetProperty("#Width")
  Try H = GetProperty("#Height")
  bHasSize = W > 0 And H > 0

  If bHasSize Or If Abs(X) + Abs(Y) Then

    If bNoScale Then 
    
      sLine = "Move(" & X & "," & Y
      If bHasSize Then sLine = sLine & "," & W & "," & H
      sLine = sLine & ")"
  
    Else
  
      sLine = "MoveScaled(" & FormatScaledCoord(GetCoord(X)) & "," & FormatScaledCoord(GetCoord(Y))
      If bHasSize Then sLine = sLine & "," & FormatScaledCoord(GetCoord(W, True)) & "," & FormatScaledCoord(GetCoord(H, True))
      sLine = sLine & ")"
  
    Endif
  
    If VirtualCoord Or If Virtual Then sLine = "#" & sLine
  
    cLine.Add(sLine, 0)
    
  Endif

  Return cLine

End


Public Sub Raise()

  GetUndo().Add("LowerControl", [Name])
  Control.Raise
  MoveAllHandle
  Modify

End


Public Sub Lower()

  GetUndo().Add("RaiseControl", [Name])
  Control.Lower
  Modify

End


Public Sub MoveDown()

  Try Control.Next = Control.Next.Next
  If Error Then Return
  MoveAllHandle
  Modify

End


Public Sub MoveUp()

  Try Control.Previous = Control.Previous.Previous
  If Error Then Return
  MoveAllHandle
  Modify

End


Private Sub Modify()

  Try GetForm().Modify

End


Static Public Sub SetGrid(bGrid As Boolean)

  $bGrid = bGrid

End

Static Public Sub RefreshHandleSize()

  Dim iSize As Integer

  iSize = Settings["/HandleSize", Desktop.Scale]
  PAN_W = iSize
  PAN_H = iSize

End

Public Sub RefreshHandle()
  
  MoveAllHandle
  
End


Public Function GetGroup() As String

  Dim sGroup As String

  sGroup = GetProperty(CPropertyInfo.EVENT_NAME)
  If Not sGroup Then sGroup = Name
  Return sGroup

End

Static Public Sub RemoveShortcut(sText As String) As String

  Dim iPos As Integer

  iPos = InStr(sText, "&")
  If iPos Then sText = Left(sText, iPos - 1) & Mid$(sText, iPos + 1)
  If sText Ends "..." Then
    sText = Left(sText, -3)
  Else If sText Ends "…" Then
    sText = String.Left(sText, -1)
  Endif
  Return sText

End

Private Sub SetAction(cAction As Collection, sProp As String, Optional bRemoveShortcut As Boolean)
  
  Dim sVal As String = GetPropertyString(sProp)
  If sVal Then 
    If bRemoveShortcut Then sVal = RemoveShortcut(sVal)
    cAction[sProp] = sVal
  Endif
  
End

Public Sub AddToolbar(cToolbarSet As Collection, cForm As Collection)
  
  Dim cToolbar As Collection
  Dim aConfig As String[]
  Dim aList As String[]
  Dim sKey As String
  Dim hChild As Control
  Dim hCtrl As CControl
  Dim sAction As String
  
  sKey = GetPropertyString("Key")
  If Not sKey Then Return
  
  If cToolbarSet.Exist(sKey) Then Return

  'Debug "Adding toolbar "; sKey

  cToolbar = New Collection
  cToolbarSet[sKey] = cToolbar
  SetAction(cToolbar, "Text")

  aConfig = New String[]
  aList = New String[]
  
  For Each hChild In Control.Children
  
    hCtrl = cForm[hChild.Tag]
    If Not hCtrl Then Continue

    sAction = hCtrl.GetPropertyString("Action")
    
    If sAction Then
      If Left(sAction) = "." Then sAction = Mid$(sAction, 2)
      aList.Add(sAction)
    Else If hCtrl.Kind = "Separator"
      sAction = "|"
    Else If hCtrl.Kind = "Panel" And If Container(hCtrl.Control).Children.Count = 0 Then
      sAction = "-"
    Else
      sAction = "$" & hCtrl.Name
    Endif

    If Not hCtrl.GetPropertyDefault("Visible") Then Continue
    aConfig.Add(sAction)
  
  Next
  
  cToolbar["Default"] = aConfig.Join(",")
  cToolbar["List"] = aList.Join(",")
  
End


Public Sub AddAction(cActionSet As Collection)
  
  Dim sAction As String
  Dim cAction As Collection
  Dim sPicture As String
  
  sAction = GetProperty("Action")
  If Not sAction Then Return
  
  'If Not ["Menu", "ToggleButton", "ToolButton"].Exist(Kind) Then Return
  
  If Left(sAction) = "." Then sAction = Mid$(sAction, 2)
  
  cAction = cActionSet[sAction]
  If Not cAction Then
    cAction = New Collection
    cActionSet[sAction] = cAction
  Endif
  
  cAction["Name"] = sAction
  SetAction(cAction, "Text", True)
  SetAction(cAction, "ToolTip")
  
  If Kind = "Form" Then
    sPicture = GetPropertyString("Icon")
  Else
    sPicture = GetPropertyString("Picture")
  Endif
  If Not sPicture And If Kind <> "Menu" Then
    sPicture = "$" & Kind
    If cAction["Picture"] Then sPicture = ""
  Endif
  
  If sPicture Then cAction["Picture"] = sPicture

  SetAction(cAction, "Shortcut")
  If Kind = "Menu" Then cAction["Menu"] = True
  
End

Public Sub _get(sProperty As String) As Variant
  
  Return GetPropertyDefault(sProperty)
  
End

Public Sub _put(vValue As Variant, sProperty As String)
  
  $cValue[sProperty] = vValue
  
End


Private Function X_Read() As Integer

  Try Return $cValue["#X"]

End

Private Function Y_Read() As Integer

  Try Return $cValue["#Y"]

End

Private Function Width_Read() As Integer

  Try Return $cValue["#Width"]

End

Private Function Height_Read() As Integer

  Try Return $cValue["#Height"]

End

Private Function W_Read() As Integer

  Try Return $cValue["#Width"]

End

Private Function H_Read() As Integer

  Try Return $cValue["#Height"]

End


Public Sub GetConnection() As String
  
  If $cValue["Connection"] Then Return $cValue["Connection"]
  If Parent Then Return Parent.GetConnection()
  
End

Public Sub GetTable(Optional sField As String) As String
  
  Dim sTable As String
  
  If sField Then Return $cValue[sField]
  
  If Not Parent Then Return
  sTable = Parent["Table"]
  If sTable Then Return sTable
  Return Parent.GetTable()
  
End
