' Gambas class file

Private $iBackground As Integer
Private $cIndex As New Collection
Private $bMany As Boolean
Private $hObject As CControl
Private $hForm As FForm

Private $iLast As Integer
Private $sLast As String
Private $sFocus As String
'Private $sFocusForm As String
Private $sClass As String
Private $sType As String
Private $sOption As String
Private $hEditor As Object
Private $sOldVal As String
'Private $bFreeze As Boolean
Private $bButton As Boolean
Private $bIgnoreHide As Boolean
Private $bIgnoreCancel As Boolean
Private $bSort As Boolean
Private $bDisableIntegratedHelp As Boolean
Private $hWebView As WebView

Private $iBgDefault As Integer
Private $iBgSet As Integer
Private $iBgModified As Integer

Static Private $aFieldUseDelete As String[] = ["Font", "Picture", "String[]", "Path", "Color", "Field", "Fields", "Field[]",
  "Image", "SvgImage", "ReportCoord", "ReportPadding", "ReportMargin", "ReportBorder", "ReportBoxShadow", "ReportBrush", "Table"]

Private Const PADDING As Integer = 6
Private $cInitialValue As Collection

Public Sub _new()

  Settings.Read(Me)

  grdProperty.Columns.Count = 2
  grdProperty.ScrollBar = Scroll.Vertical
  grdProperty.Columns.Resizable = True

  ScrollArea(grdProperty.Proxy).Shadow = True
  
  $iBgDefault = Color.TextBackground
  $iBgSet = Color.Merge(Color.TextBackground, Color.LightForeground, 0.25)
  $iBgModified = Color.Merge(Color.TextBackground, Color.LightBackground, 0.25)
  
End

Public Sub Form_Open()

  $iBackground = grdProperty.Background

  Settings.Read(spnHelp)
  ReadConfig

End

Public Sub Form_Close()

  Settings.Write(Me)
  Settings.Write(spnHelp)

End

Public Sub Form_Resize()

  Dim iWidth As Integer
  '
  ' lblMessage.Move(0, 0, ME.ClientW)
  '
  ' grdProperty.Move(0, 0, ME.ClientWidth, ME.ClientHeight)
  '
  ' IF grdProperty.Columns.Count < 2 THEN RETURN
  '
  iWidth = Min(128, grdProperty.ClientWidth \ 2)
  grdProperty.Columns[0].Width = iWidth
  grdProperty.Columns[1].Width = grdProperty.ClientWidth - iWidth - 4
  ' 'grdProperty.Columns.Width = 100 'ME.ClientWidth / 4
  '
  MoveProperty

  'CATCH $$ Non déréférencement en cas d'erreur

End

Public Sub RefreshAll()

  Dim cSelection As Collection
  Dim hCtrl As CControl
  Dim sClass As String
  Dim bDiff As Boolean
  Dim aProp As String[]
  Dim hProp As CPropertyInfo
  Dim iRow As Integer
  Dim sProp As String
  Dim sVal As String
  Dim iInd As Integer
  Dim iBg As Integer

  '   DIM aColor AS NEW Integer[]
  '   DIM sClassColor AS String
  '   DIM hClass AS CClassInfo

  Balloon.Hide(grdProperty)

  Try $hForm = Project.ActiveForm
  If Error Or If Not $hForm Then
    HideAll
    Return
  Endif
  'IF NOT $hForm THEN RETURN 'GOTO _HIDE

  Try cSelection = $hForm.Selection
  If Not cSelection Then Return

  $cIndex.Clear
  $bMany = False
  HideProperty
  $hObject = Null

  If Not cSelection Then Goto _HIDE

  If cSelection.Count = 0 Then
    cSelection = New Collection
    cSelection.Add($hForm.Control[$hForm.Name], $hForm.Name)
  Endif

  $bMany = cSelection.Count > 1

  For Each hCtrl In cSelection

    If sClass = "" Then
      $hObject = hCtrl
      sClass = hCtrl.Kind
    Else If sClass <> hCtrl.Kind Then
      bDiff = True
    Endif

  Next

  UpdateLabel

  If bDiff Then sClass = "Control"
  
  $sClass = sClass

  'If Not $bDisableIntegratedHelp Then
  MHelp.InitWebViewWith($hWebView, MHelp.TYPE_CLASS, sClass,, "noimage")
  'Endif

  'PRINT "Kind = "; sClass
  'cProp = CControl.PropertiesInOrder[sClass]
  Try aProp = Project.Documentation.Classes[sClass].PropertyList
  If Not aProp Then
    Error "gambas3: cannot get property list of "; sClass
    aProp = New String[]
  Else
    '     sClassColor = sClass
    '     WHILE sClassColor
    '       hClass = CComponent.Classes[sClassColor]
    '       aColor.Add(hClass.PropertyList.Count, 0)
    '       sClassColor = hClass.ParentComponent &/ hClass.Parent
    '     WEND
  Endif

  grdProperty.Rows.Count = aProp.Count + 2
  grdProperty.Clear
  grdProperty.Rows.Height = grdProperty.Font.Height + 6

  grdProperty.Columns.Count = 2

  grdProperty[iRow, 0].Text = "Class"
  grdProperty[iRow, 1].Text = $hObject.Kind
  grdProperty[iRow, 0].Padding = PADDING

  Inc iRow

  grdProperty[iRow, 0].Text = "Name"
  If $bMany Then
    grdProperty[iRow, 1].Text = ""
  Else
    grdProperty[iRow, 1].Text = $hObject.Name
  Endif
  grdProperty[iRow, 0].Padding = PADDING

  Inc iRow

  If $bSort Then
    aProp = aProp.Copy().Sort()
    iInd = aProp.Find(CPropertyInfo.EVENT_NAME)
    If iInd >= 0 Then
      aProp.Remove(iInd)
      aProp.Add(CPropertyInfo.EVENT_NAME, 0)
    Endif
  Endif
  
  $cInitialValue = New Collection

  For Each sProp In aProp

    hProp = Project.Documentation.Classes[sClass].GetProperties()[sProp]
    If hProp.Hidden Then Continue

    $cIndex[sProp] = iRow

    grdProperty[iRow, 0].Text = sProp
    grdProperty[iRow, 0].Padding = PADDING

    'If sProp = "Filter" Then Stop
    sVal = GetProperty(sProp)
    $cInitialValue[sProp] = sVal

    'grdProperty[iRow, 0].Font = grdProperty.Font
    grdProperty[iRow, 0].Alignment = Align.Normal
    grdProperty[iRow, 1].Alignment = Align.TopNormal
    
    If CControl.WasDefaultValue Then
      iBg = $iBgDefault
      grdProperty[iRow, 0].Font.Bold = False
    Else
      iBg = $iBgSet
      grdProperty[iRow, 0].Font.Bold = True
    Endif

    grdProperty[iRow, 0].Background = iBg
    grdProperty[iRow, 1].Background = iBg
    
    grdProperty[iRow, 1].Text = sVal
    'grdProperty[iRow, 0].Padding = 4
    '
    Inc iRow

  Next

  ' Can be lesser than predicted, as some properties may be hidden
  grdProperty.Rows.Count = iRow

  'grdProperty.Rows.Count = iRow

  '   iRow = 3
  '   WHILE aColor.Count
  '     FOR iRow = iRow TO aColor[0] + 2
  '       grdProperty[iRow, 0].
  '     NEXT
  '   WEND

  ' FOR iRow = 0 TO grdProperty.Rows.Count - 1
  '   grdProperty[iRow, 0].Font = grdProperty.Font
  '   grdProperty[iRow, 0].Font.Bold = TRUE
  '   grdProperty[iRow, 0].Alignment = Align.TopNormal
  '   grdProperty[iRow, 1].Alignment = Align.TopNormal
  ' NEXT

  Form_Resize
  panProperty.Show
  sepProperty.Show
  'lblMessage.Hide
  'lblMessage.Ignore = TRUE

  'TODO save/restore last height
  CheckIntegratedHelpSetting

  grdProperty.Show
  lblName.Show
  'VSplit1.Show

  If Not $bMany Then
    FFormStack.SelectCurrent
  Endif

  'If btnLock.Value Then
  If $sFocus Then
    iRow = FindProperty($sFocus)
    If iRow >= 0 Then
      If btnLock.Value Then grdProperty[iRow, 0].Picture = Picture["icon:/small/lock"]
      ShowProperty
    Endif
  Endif

  Return

_HIDE:

  HideAll

End

Public Sub HideAll()

  HideProperty
  grdProperty.Hide
  lblName.Hide
  spnHelp.Hide
  panProperty.Hide
  sepProperty.Hide
  'lblMessage.Show
  $hForm = Null

End

Public Sub EditProperty(sProp As String)
  
  If Not $cIndex.Exist(sProp) Then Return

  grdProperty.Row = $cIndex[sProp]
  ShowProperty
  If $bButton Then txtProperty_Click
  
End


Public Sub RefreshOne(hCtrl As CControl, sProp As String)

  Dim iRow As Integer
  Dim iBg As Integer
  Dim sVal As String

  If Not $bMany Then
    If $hObject <> hCtrl Then Return
  Endif

  If sProp = "Name" Then

    If $bMany Then Return
    grdProperty[1, 1].Text = $hObject.Name
    UpdateLabel

  Else

    If Not $cIndex.Exist(sProp) Then Return

    iRow = $cIndex[sProp]
    sVal = GetProperty(sProp)
    grdProperty[iRow, 1].Text = sVal

    If sVal = $cInitialValue[sProp] Then
      iBg = If(CControl.WasDefaultValue, $iBgDefault, $iBgSet)
      grdProperty[iRow, 0].Font.Bold = True
    Else
      iBg = $iBgModified
      grdProperty[iRow, 0].Font.Bold = True
    Endif
    
    grdProperty[iRow, 0].Background = iBg
    grdProperty[iRow, 1].Background = iBg
    
  Endif

  If sProp = $sLast Then
    CancelProperty
  Endif

End

Public Function SaveProperty() As Boolean

  Dim sVal As String
  Dim vVal As Variant
  Dim hCtrl As CControl
  Dim sMsg As String
  Dim sOldVal As String

  If Not $hForm Or If Not Object.IsValid($hForm) Then Return
  If $hForm.ReadOnly Then Return
  If IsNull($hEditor) Then Return False

  sVal = $hEditor.Text
  If sVal = $sOldVal Then Return False
  sOldVal = sVal

  Select $sType

    Case "Name"

      If Not sVal Then Goto _CANCEL

      If CControl.CheckName(sVal) Then
        sMsg = ("Forbidden characters in control name.")
        Goto _CANCEL
      Endif

      If $hObject.Rename(sVal) Then
        sMsg = ("This name is already in use.")
        Goto _CANCEL
      Endif

      RefreshOne($hObject, "Name")
      Return False

    Case "Group"

      If CControl.CheckName(sVal) Then
        sMsg = ("Forbidden characters in control group.")
        Goto _CANCEL
      Endif
      
      vVal = sVal

    Case "i", "l", "b", "Range", "Position", "Dimension"

      Try vVal = CInt(Val(sVal))
      If Error Then Goto _BAD

    Case "f"

      If Not IsNumber(sVal) Then Goto _BAD
      vVal = CFloat(Val(sVal))

    Case "d"

      If Not IsDate(sVal) Then Goto _BAD
      vVal = CDate(Val(sVal))

    Case "Color"

      If Not IsNull(Val(sVal)) Then 
        vVal = Val(sVal)
      Else
        vVal = sVal
      Endif

    Case "s", "Font", "Picture", "Constant", "List", "Path", "Image", "SvgImage", "ReportCoord", "ReportPadding", "ReportMargin", "ReportBoxShadow", "ReportBorder", "ReportBrush", "Field", "Menu", "Table"
      
      vVal = sVal

    Case "String[]", "Fields", "Field[]"

      Try vVal = Split(sVal, "\n")
      If Error Then Goto _BAD

    Case "Angle"
      
      vVal = $hEditor.Value

    Case Else ' Object

      vVal = sVal

  End Select

  $bIgnoreCancel = True
  
  CControl.LastError = ""

  If $bMany Then

    For Each hCtrl In $hForm.Selection
      If hCtrl.SetProperty($sLast, vVal) Then Goto _BAD
    Next

  Else

    If $hObject.SetProperty($sLast, vVal) Then Goto _BAD

  Endif

  $bIgnoreCancel = False

  $sOldVal = sOldVal
  'DEBUG "$sOldVal =";; $sOldVal
  Return

_BAD:

  sMsg = ("Incorrect property value.")
  If CControl.LastError Then sMsg &= "\n\n" & CControl.LastError
  $bIgnoreCancel = False

_CANCEL:

  CancelProperty
  $hEditor.SetFocus
  If sMsg Then Balloon.Warning(sMsg, grdProperty, panEditor.X - grdProperty.X + panEditor.W / 2, panEditor.Y - grdProperty.Y + panEditor.H / 2)
  Return True

End

Public Sub HideProperty() As Boolean

  Dim hCtrl As Control
  
  If $bIgnoreHide Then Return

  If $sLast Then

    If SaveProperty() Then Return True

    For Each hCtrl In panEditor.Children
      hCtrl.Hide
    Next

    panEditor.Hide

    ' If btnLock.Value Then
    '   $sFocus = $sLast
    ' Else
    '   $sFocus = ""
    ' Endif

    $sLast = ""
    $iLast = -1
    $hEditor = Null
    
  Endif

End

Private Sub MoveProperty()

  If IsNull($hEditor) Then Return

  With grdProperty[grdProperty.Row, 1]
  
    panEditor.Move(grdProperty.X + .X - grdProperty.ScrollX, grdProperty.Y + .Y - grdProperty.ScrollY, .Width, .Height)
    panEditor.Raise

  End With

End

Private Sub CancelProperty()

  If $bIgnoreCancel Then Return
  If IsNull($hEditor) Then Return

  $sOldVal = grdProperty[$iLast, 1].Text
  'DEBUG "$sOldVal =";; $sOldVal
  If $hEditor.Text <> $sOldVal Then
    If $hEditor Is SpinBox Or If $hEditor Is AngleBox Then
      Try $hEditor.Value = $sOldVal
    Else
      $hEditor.Text = $sOldVal
    Endif
  Endif

End

Public Sub FocusOn(sFocus As String)

  ShowProperty(sFocus)

End

Private Sub FindProperty(sProp As String) As Integer

  Dim iRow As Integer

  If sProp Then

    For iRow = 0 To grdProperty.Rows.Count - 1
      If sProp = grdProperty[iRow, 0].Text Then
        Return iRow
      Endif
    Next

  Endif

  Return -1

End

Private Sub InitComboWith(aList As String[], Optional sVoid As String)

  If Not IsMissing(sVoid) Then aList.Add(sVoid, 0)
  cmbProperty.List = aList

  ' Dim hMenu As Menu
  ' Dim sVal As String
  ' 
  ' mnuProperty.Children.Clear
  ' 
  ' If sVoid Then
  '   hMenu = New Menu(mnuProperty) As "mnuProperty"
  '   hMenu.Text = sVoid
  ' Endif
  ' For Each sVal In aList
  '   hMenu = New Menu(mnuProperty) As "mnuProperty"
  '   hMenu.Text = sVal
  ' Next

End

Private Sub ShowProperty(Optional sFocus As String)

  Dim hProp As CPropertyInfo
  Dim sType As String
  Dim sOption As String
  Dim bButton As Boolean
  Dim sProp As String
  Dim aArg As String[]
  Dim hEditor As Object
  Dim hSymbol As CSymbolInfo
  Dim sHelp, sHelpType, sHelpLcType As String
  Dim sHTML As String
  Dim iRow As Integer

  If Project.Running Then Return
  If Not $hForm Then Return
  If $hForm.ReadOnly Then Return
  If grdProperty.Row < 0 Then Return

  If $sLast Then HideProperty()

  If $sFocus Then sFocus = $sFocus

  If sFocus Then
    iRow = FindProperty(sFocus)
    If iRow >= 0 Then grdProperty.Row = iRow
  Endif

  $bButton = False

  If grdProperty.Row = 0 Then Return

  If grdProperty.Row = 1 Then

    If $hObject.Name = $hForm.Name Then Return
    If $bMany Then Return

    sProp = "Name"
    sType = "Name"

    sHelp = ("The name of the control.")
    sHelpType = "String"
    sHelpLcType = "string"

  Else If grdProperty.Row = 2 Then

    If $hObject.Name = $hForm.Name Then Return

    sProp = CPropertyInfo.EVENT_NAME
    sType = "Group"

    sHelp = ("The event group that the control belongs to.")
    sHelpType = "String"
    sHelpLcType = "string"

  Else

    sProp = grdProperty[grdProperty.Row, 0].Text
    hProp = Project.Documentation.Classes[$hObject.Kind].GetProperties()[sProp]
    sType = hProp.Type
    sOption = hProp.Argument

    'If Not $bDisableIntegratedHelp Then

    If hProp.Name = CPropertyInfo.SCALE_NAME Then
      sHelp = ("If the form and controls dimensions must follow the size of the default font.")
      sHelpType = "Boolean"
      sHelpLcType = "boolean"
    Else If hProp.Name = CPropertyInfo.PUBLIC_NAME Then
      sHelp = ("If the control is public.")
      sHelpType = "Boolean"
      sHelpLcType = "boolean"
    Else If hProp.Name = CPropertyInfo.TRANSLATE_NAME Then
      sHelp = ("If the Text property must be translated.")
      sHelpType = "Boolean"
      sHelpLcType = "boolean"
    Else If hProp.Virtual Then
      sHelp = "?"
    Else
      hSymbol = Project.Documentation.Classes[$hObject.Kind].Symbols[hProp.Name]
      MHelp.InitWebViewWith($hWebView, MHelp.TYPE_SYMBOL, hSymbol.Name, hSymbol.Class, If($hWebView, "notitle", ""))
    Endif

    'Endif
  Endif

  If sHelp Then
    If sHelp <> "?" Then
      sHTML = File.Load("help/property-help.html")
      sHTML = Replace(sHTML, "$(class)", "Control")
      sHTML = Replace(sHTML, "$(name)", grdProperty[grdProperty.Row, 0].Text)
      sHTML = Replace(sHTML, "$(help)", Html(sHelp))
      sHTML = Replace(sHTML, "$(type)", sHelpType)
      sHTML = Replace(sHTML, "$(lctype)", sHelpLcType)
      sHTML = Replace(sHTML, "$(warning)", ("This property is virtual: it is only implemented in the IDE, and has no existence at runtime."))
    Endif
    If Not $hWebView Then
      If FHelpBrowser.Visible Then
        sHTML = Replace(sHTML, "$(hide-title)", "")
        FHelpBrowser.webHelp.HTML = sHTML
      Endif
    Else
      sHTML = Replace(sHTML, "$(hide-title)", "style=\"display:none;\"")
      $hWebView.HTML = sHTML
    Endif
  Endif

  $sLast = sProp
  $iLast = grdProperty.Row
  $sType = sType
  $sOption = sOption

  ' We assign $hEditor latter, so that SaveProperty can be called without any effect until the editor is initialized.
  hEditor = txtProperty
  txtProperty.ReadOnly = False

  Select Case $sType

    Case "i", "l", "f", "d", "v", "Name", "Group" ', "EventName"

    Case "s"
      If hProp.ConstantList Then
        hEditor = cmbProperty
        cmbProperty.ReadOnly = False
        InitComboWith(hProp.GetConstantList())
      Else
        bButton = True
      Endif

    Case "String[]", "Fields", "Field[]", "ReportPadding", "ReportMargin", "ReportBoxShadow", "ReportBorder", "ReportBrush"

      bButton = True
      txtProperty.ReadOnly = True

    Case "Table"

      If GetConnection() Then
        txtProperty.ReadOnly = True
        bButton = True
      Endif

    Case "Field"

      If GetConnection() And If GetTable($sOption) Then 
        txtProperty.ReadOnly = True
        bButton = True
      Endif

    Case "Constant"

      If hProp.ConstantClass Then

        hEditor = cmbProperty
        cmbProperty.ReadOnly = True
        InitComboWith(hProp.GetConstantList())

      Endif

    Case "b"

      hEditor = cmbProperty
      cmbProperty.ReadOnly = True
      InitComboWith(["False", "True"])

    Case "Font", "Picture", "Path", "Color", "Image", "SvgImage", "ReportPadding", "ReportMargin", "ReportBoxShadow", "ReportBorder", "ReportBrush"

      bButton = True
      txtProperty.ReadOnly = True

    Case "Range"

      hEditor = spnProperty
      aArg = Split(sOption, ";")
      Try spnProperty.MinValue = aArg[0]
      Try spnProperty.MaxValue = aArg[1]
      spnProperty.Step = 1
      'spnProperty.Suffix = ""
      If aArg.Count > 2 Then
        Try spnProperty.Step = aArg[2]
        If aArg.Count > 3 Then
          'spnProperty.Suffix = " " & aArg[3]
        Endif
      Endif
      
    Case "Position"

      hEditor = spnProperty
      spnProperty.MinValue = -4096
      spnProperty.MaxValue = 4096
      spnProperty.Step = Desktop.Scale
      'spnProperty.Suffix = ""

    Case "Dimension"

      hEditor = spnProperty
      spnProperty.MinValue = 1
      spnProperty.MaxValue = 4096
      spnProperty.Step = Desktop.Scale
      'spnProperty.Suffix = ""

    Case "Connection"

      hEditor = cmbProperty
      InitComboWith(MConnection.GetConnections(), "")

    Case "Menu"

      hEditor = cmbProperty
      InitComboWith($hForm.GetMenus(), "")

    Case "ReportCoord"
      hEditor = crdProperty

    Case "Angle"
      hEditor = txtAngle

    Case Else 'object

      hEditor = cmbProperty
      InitComboWith($hForm.FindControlFromType($sType).Sort(gb.Natural + gb.IgnoreCase), "(" & ("None") & ")")

  End Select

  $hEditor = hEditor
  CancelProperty

  '$hEditor.Border = Border.None

  $bButton = bButton

  MoveProperty

  $hEditor.Show
  panEditor.Show
  
  txtProperty.Button = bButton
  'btnProperty.Raise

  $hEditor.SetFocus

  If $hEditor = txtProperty Then
    'IF NOT txtProperty.ReadOnly THEN
    txtProperty.Editor.SelectAll
    'ENDIF
  Else If $hEditor = spnProperty Then
    spnProperty.SelectAll
  Endif

End

' Public Sub cmbProperty_Activate()
' 
'   SaveProperty
' 
' End

Public Sub cmbProperty_Click()

  'cmbProperty2.Text = Trim(Last.Text)
  SaveProperty

End

Public Sub txtProperty_Activate()

  SaveProperty

End

Public Sub txtProperty_Clear()
  
  SaveProperty
  
End


Public Sub txtProperty_Change()

  If $sLast = "Text" Then
    '$bFreeze = True
    SaveProperty
    '$bFreeze = False
  Endif

End

Public Sub txtProperty_KeyPress()

  If txtProperty.ReadOnly Then
    If $aFieldUseDelete.Exist($sType) Then
      If Key.Code = Key.Delete Or Key.Code = Key.Backspace Then

        txtProperty.Text = ""
        SaveProperty
        Stop Event

      Endif
    Endif
  Endif

End

Private Function GetFont(sFont As String) As String

  Dim bDefault As Boolean
  Dim aFont As String[]
  Dim iInd As Integer

  bDefault = Font[sFont].Name = Application.Font.Name

  If bDefault Then
    aFont = Split(sFont, ",")
    For iInd = 0 To aFont.Max
      If aFont[iInd] = Application.Font.Name Then
        aFont[iInd] = ""
      Endif
    Next
    sFont = aFont.Join(",")
    While Left$(sFont) = ","
      sFont = Mid$(sFont, 2)
    Wend
    While Right$(sFont) = ","
      sFont = Left$(sFont, -1)
    Wend
  Endif

  Return sFont

End

Private Sub GetConnection() As String

  Dim hCtrl As CControl
  Dim sConn As String
  Dim sResult As String

  For Each hCtrl In $hForm.Selection
    sConn = hCtrl.GetConnection()
    If Not sResult Then
      sResult = sConn
    Else If sConn <> sResult Then
      Return
    Endif
  Next

  Return sResult

End

Private Sub GetTable(Optional sField As String) As String

  Dim hCtrl As CControl
  Dim sTable As String
  Dim sResult As String

  For Each hCtrl In $hForm.Selection
    sTable = hCtrl.GetTable(sField)
    If Not sResult Then
      sResult = sTable
    Else If sTable <> sResult Then
      Return
    Endif
  Next

  Return sResult

End

Public Sub txtProperty_Click()

  Dim sDest As String
  Dim sFont As String
  Dim sColor As String
  Dim sConnection As String
  Dim sTable As String

  $bIgnoreHide = True

  Select $sType

    Case "s"
      If FText.Run($sOldVal) Then Goto _EXIT
      $hEditor.Text = FText.Value

    Case "String[]"
      If FList.Run(Split($sOldVal, "\n")) Then Goto _EXIT
      $hEditor.Text = FList.Value.Join("\n")

    Case "Font"

      'IF $sOldVal THEN
      sFont = $sOldVal
      'ELSE
      '  sFont = $hForm.Font.ToString()
      'ENDIF

      sFont = FFontChooser.Run(sFont, $sOption = "Fixed")
      If Not sFont Then Goto _EXIT

      $hEditor.Text = GetFont(sFont)

    Case "Color"
      If $sOldVal Then
        sColor = $sOldVal
      Else
        sColor = ""
      Endif

      If FColorChooser.Run(sColor, True) Then Goto _EXIT
      $hEditor.Text = FColorChooser.Color

    Case "Picture", "Image", "SvgImage"

      sDest = FSelectIcon.Run($sOldVal, $sType = "Image", $sType = "SvgImage") 'GetPicture()
      If Not sDest Then Goto _EXIT
      $hEditor.Text = sDest

    Case "Path"
      
      If $sClass = "MovieBox" Then
        sDest = FSelectIcon.Run($sOldVal, True) 'GetPicture()
        If Not sDest Then Goto _EXIT
        $hEditor.Text = sDest
      Else
        Dialog.Path = $sOldVal
        Dialog.Title = ("Select a file")
        If Dialog.OpenFile() Then Goto _EXIT
        $hEditor.Text = Dialog.Path
      Endif

    Case "Table"

      sConnection = GetConnection()

      If sConnection Then
        FTableChooser.Table = $sOldVal
        If FTableChooser.Run(sConnection) Then Goto _EXIT
        $hEditor.Text = FTableChooser.Table
      Endif

    Case "Field"

      sConnection = GetConnection()
      sTable = GetTable($sOption)
      If sConnection And If sTable Then
        If FFieldChooser.Run(sConnection, sTable, False, $sOldVal) Then Goto _EXIT
        $hEditor.Text = FFieldChooser.Value
      Endif

    Case "Fields", "Field[]"

      sConnection = GetConnection()
      sTable = GetTable($sOption)
      If sConnection And If sTable Then
        If FFieldChooser.Run(sConnection, sTable, True, $sOldVal) Then Goto _EXIT
        $hEditor.Text = FFieldChooser.Value
      Else
        If FText.Run($sOldVal) Then Goto _EXIT
        $hEditor.Text = FText.Value
      Endif

    Case "ReportCoord"

      If FReportCoordChooser.Run($sOldVal) Then Goto _EXIT
      $hEditor.Text = FReportCoordChooser.Coord

    Case "ReportBrush"

      If FReportBrushChooser.Run($sOldVal) Then Goto _EXIT
      $hEditor.Text = FReportBrushChooser.Value

    Case "ReportPadding"
      
      If FReportPaddingChooser.Run($sOldVal) Then Goto _EXIT
      $hEditor.Text = FReportPaddingChooser.Value
      
    Case "ReportMargin"
      
      If FReportPaddingChooser.Run($sOldVal) Then Goto _EXIT
      $hEditor.Text = FReportPaddingChooser.Value
      
    Case "ReportBorder"

      If FReportBorderChooser.Run($sOldVal) Then Goto _EXIT
      $hEditor.Text = FReportBorderChooser.Value
      
    Case "ReportBoxShadow"
      If FReportBoxShadowChooser.Run($sOldVal) Then Goto _EXIT
      $hEditor.Text = FReportBoxShadowChooser.Value
      
  End Select

  SaveProperty

_EXIT:

  $bIgnoreHide = False

End

Private Sub NextComboProperty((bPrevious) As Boolean)

  ' Dim iInd As Integer
  ' 
  ' For iInd = 0 To mnuProperty.Children.Count - 1
  '   If Trim(mnuProperty.Children[iInd].Text) = cmbProperty2.Text Then Break
  ' Next
  ' If bPrevious Then
  '   Dec iInd
  '   If iInd < 0 Then iInd = mnuProperty.Children.Count - 1
  ' Else
  '   Inc iInd
  '   If iInd >= mnuProperty.Children.Count Then iInd = 0
  ' Endif
  ' mnuProperty.Children[iInd].Value = True

  If cmbProperty.Index = cmbProperty.Count - 1
    cmbProperty.Index = 0
  Else
    Inc cmbProperty.Index
  Endif

End

Public Sub grdProperty_DblClick()

  If cmbProperty.Visible Then
    NextComboProperty(False)
  Else If $bButton Then
    txtProperty_Click
  Endif

End

Private Function GetProperty(sProp As String) As String

  Dim sVal As String
  Dim hCtrl As CControl
  Dim bFirst As Boolean

  If Not $bMany Then Return $hObject.GetPropertyString(sProp)

  For Each hCtrl In $hForm.Selection

    If bFirst Then
      If sVal <> hCtrl.GetPropertyString(sProp) Then
        CControl.WasDefaultValue = False
        Return ""
      Endif
    Else
      sVal = hCtrl.GetPropertyString(sProp)
      bFirst = True
    Endif

  Next

  CControl.WasDefaultValue = True
  Return sVal

End

' PUBLIC SUB grdProperty_MouseDown(X AS Integer, Y AS Integer, Button AS Integer)
'
'   grdProperty.Raise
'
' END
'
'
Public Sub grdProperty_MouseUp()

  'DEBUG grdProperty[grdProperty.Row, 0].Text
  btnLock.Value = False
  ShowProperty

End

Public Sub grdProperty_Scroll()

  MoveProperty

End

Public Sub txtProperty_LostFocus()

  If SaveProperty() Then Return
  'HideProperty

End

Public Sub ReadConfig()

  $bSort = Settings["/SortProperties", True]
  Project.SetNormalFont(grdProperty)
  txtProperty.Font = grdProperty.Font
  cmbProperty.Font = grdProperty.Font
  spnProperty.Font = grdProperty.Font
  panProperty.Font = grdProperty.Font
  crdProperty.Font = grdProperty.Font
  ' MTheme.InitControl(grdProperty)
  ' MTheme.InitControl(cmbProperty)
  ' MTheme.InitControl(crdProperty)
  ' MTheme.InitControl(spnProperty)
  ' MTheme.InitControl(txtProperty)
  ' MTheme.InitControl(btnProperty)
  '$iHighlightColor = MTheme.GetColor("Selection")
  MoveProperty
  RefreshAll

End

Public Sub CheckIntegratedHelpSetting()

  $bDisableIntegratedHelp = Not Settings["/PropertyHelp", True]
  If $bDisableIntegratedHelp Then
    webHelp.Stop
    webHelp.HTML = ""
    spnHelp.Hide
    $hWebView = Null
  Else
    spnHelp.Show
    $hWebView = webHelp
    ShowProperty
  Endif

End

' PUBLIC SUB grdProperty_MouseMove()
'
'   IF grdProperty.Find(Mouse.X, Mouse.Y) THEN RETURN
'
'   DEBUG grdProperty.Item.Row;; grdProperty.Item.Column
'
' END

Public Sub spnProperty_Change()

  SaveProperty

End

Public Sub txtAngle_Change()
  
  SaveProperty
  
End


Public Sub RefreshReadOnly()

  HideProperty

End

Private Sub UpdateLabel()

  Dim hObject As CControl = $hForm.Master

  If Not hObject Then hObject = $hForm.Control[$hForm.Name]
  lblName.Text = "<b>" & hObject.Name & "</b> " & hObject.Kind

End

Public Sub spnHelp_Resize()

  HideProperty

End

Public Sub Form_KeyPress()

  If Key.Code = Key.Escape Then
    HideProperty
  Endif

End

Public Sub panProperty_Arrange()

  lblName.Move(4, (panProperty.H - lblName.H) \ 2, panProperty.ClientW - btnLock.W, panProperty.ClientH)
  btnLock.Move(panProperty.W - btnLock.W, (panProperty.H - btnLock.H) \ 2)

End

Public Sub btnLock_Click()

  Dim iRow As Integer

  If btnLock.Value Then
    $sFocus = $sLast
    iRow = FindProperty($sFocus)
    If iRow >= 0 Then
      grdProperty[iRow, 0].Picture = Picture["icon:/small/lock"]
    Else
      btnLock.Value = False
    Endif
  Else
    iRow = FindProperty($sFocus)
    If iRow >= 0 Then grdProperty[iRow, 0].Picture = Null
    $sFocus = ""
  Endif

End

' Public Sub cmbProperty_KeyPress()
' 
'   If Key.Code = Key.Delete Or Key.Code = Key.Backspace Then
' 
'     If mnuProperty.Children[0].Text = " " Then
'       mnuProperty.Children[0].Value = True
'       SaveProperty
'     Endif
' 
'   Endif
' 
' End

' Public Sub cmbProperty2_MouseWheel()
' 
'   NextComboProperty(Mouse.Delta > 0)
' 
' End

Public Sub Form_Activate()

  Project.SetCurrentPopup(Null)

End
