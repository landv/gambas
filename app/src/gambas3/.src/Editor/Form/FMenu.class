' Gambas class file

Static Private $hForm As FForm
Static Private $aMenu As New CMenu[]

Private $iLevel As Integer
Private $cName As New Collection
Private $iCurrent As Integer
Private $bFreeze As Boolean
Private $bModified As Boolean

Static Public Sub Run(hForm As FForm)

  $hForm = hForm
  FMenu.ShowModal()

End

' Public Sub _new()
'   
'   'Dim hCont As Container
'   Dim hCtrl As Control
'   Dim hLabel As Label
'   
'   ' Hack for having non-translatable labels
'   
'   'For Each hCont In panMenu.Children
'     For Each hCtrl In panMenu.Children
'       Try hLabel = hCtrl
'       If Not Error Then
'         If hLabel.Tag Then
'           hLabel.Text = hLabel.Tag
'           hLabel.Tag = Null
'         Endif
'       Endif
'     Next
'   'Next
'   
' End


Public Sub Form_Open()

  Settings.Read(Me)
  'PRINT "_new"
  Me.Title = $hForm.Name & " - " & ("Menu editor")
  
  $bFreeze = True
  gvwMenu.UnSelectAll
  $bFreeze = False

  gvwMenu.Rows.Count = 0
  gvwMenu.Columns.Count = 3
  gvwMenu.Columns[0].Width = 20
  gvwMenu.Columns[1].Expand = True
  gvwMenu.Columns[2].Width = Desktop.Scale * 20
  
  $iCurrent = -1
  LoadShortcut
  LoadAllMenu
  UpdatePaste
  
  gvwMenu.SetFocus
  
End

Public Sub Form_Close()
  
  If $bModified Then
    Select Case Message.Warning(("Menus have been modified!"), ("Save"), ("Ignore"), ("Cancel"))
      Case 1
        SaveAllMenu
      Case 2
      Case 3
        Stop Event
        Return
    End Select
  Endif
  
  Settings.Write(Me)
  
End



Public Sub btnCancel_Click()

  'WriteMenu
  Me.Close

End


Public Sub btnOK_Click()

  If WriteMenu() Then Return
  If CheckMenu() Then Return
  SaveAllMenu
  Me.Close

End


Private Sub CreateMenu(hCCtrl As CControl)

  Dim hCMenu As CMenu
  Dim hMenu As Menu
  
  hCMenu = New CMenu
  
  With hCMenu
  
    .Name = hCCtrl.Name
    .Caption = hCCtrl.GetPropertyDefault("Text")
    .Action = hCCtrl.GetPropertyDefault("Action")
    .Level = $iLevel
    .Enabled = hCCtrl.GetPropertyDefault("Enabled")
    .Visible = hCCtrl.GetPropertyDefault("Visible")
    .Checked = hCCtrl.GetPropertyDefault("Checked")
    .Toggle = hCCtrl.GetPropertyDefault("Toggle")
    .SetShortcut(hCCtrl.GetPropertyDefault("Shortcut"))
    .Picture = hCCtrl.GetPropertyDefault("Picture")
    .Tag = hCCtrl.GetPropertyDefault("Tag")
    .Group = hCCtrl.GetPropertyDefault(CPropertyInfo.EVENT_NAME)
    .Translate = hCCtrl.GetPropertyDefault(CPropertyInfo.TRANSLATE_NAME)
    
  End With

  $aMenu.Add(hCMenu)
  $cName[hCMenu.Name] = True

  $iLevel = $iLevel + 1
  
  For Each hMenu In hCCtrl.Control.Children
    CreateMenu($hForm.Control[hMenu.Tag])
  Next

  $iLevel = $iLevel - 1

End


' Private Sub DrawMenu(iInd As Integer)
' 
'   Dim sElt As String
'   
'   $bFreeze = True
' 
'   With $aMenu[iInd]
' 
'     sElt = String$(.Level, "···") & .Caption
'     If .Shortcut Then
'       sElt = sElt & " (" & .GetShortcut() & ")"
'     Endif
'     lstMenu[iInd].Text = sElt
' 
'   End With
'   
'   $bFreeze = False
' 
' End


Private Sub LoadAllMenu()

  Dim hCtrl As CControl

  $bFreeze = True

  $aMenu.Clear
  $cName.Clear

  For Each hCtrl In $hForm.AllMenus
    'IF hCtrl.Parent.Kind = "Form" THEN
    CreateMenu(hCtrl)
    'ENDIF
  Next

  ' lstMenu.Clear
  ' 
  ' For iInd = 0 To $aMenu.Count - 1
  '   lstMenu.Add("")
  '   DrawMenu(iInd)
  ' Next  
  ' 
  ' lstMenu.Add("")
  ' 
  ' lstMenu.Index = 0
  
  '$aMenu.Add(Null)
  gvwMenu.Rows.Count = $aMenu.Count
  gvwMenu.Rows.Height = Max(18, gvwMenu.Font.Height)
  
  $bFreeze = False
  $bModified = False

  SetCurrent(0)

End


Private Sub SaveAllMenu()

  Dim hCtrl As CControl
  Dim hCMenu As CMenu
  Dim hParent As CControl
  Dim iLevel As Integer

  $hForm.GetUndo().Begin

  For Each hCtrl In $hForm.AllMenus
    $hForm.RemoveControl(hCtrl.Name)
  Next
  
  $hForm.GetUndo().Add("RestoreMenus")
  $hForm.AllMenus.Clear

  hCtrl = $hForm.Control[$hForm.Name]
  iLevel = -1

  For Each hCMenu In $aMenu
  
    If Not hCMenu Then Continue
    
    With hCMenu
  
      If .Level > iLevel Then
      
        hParent = hCtrl
        iLevel = .Level
        
      Else
      
        While .Level < iLevel
          hParent = hParent.Parent
          iLevel = iLevel - 1
        Wend
      
      Endif
      
      hCtrl = $hForm.CreateControl("Menu", hParent, .Name)
      
      hCtrl.SetProperty("Text", .Caption)
      hCtrl.SetProperty("Action", .Action)
      hCtrl.SetProperty("Visible", .Visible)
      hCtrl.SetProperty("Enabled", .Enabled)
      hCtrl.SetProperty("Checked", .Checked)
      hCtrl.SetProperty("Toggle", .Toggle)
      hCtrl.SetProperty("Shortcut", .GetShortcut())
      hCtrl.SetProperty("Picture", .Picture)
      hCtrl.SetProperty("Tag", .Tag)
      hCtrl.SetProperty(CPropertyInfo.EVENT_NAME, .Group)
      hCtrl.SetProperty(CPropertyInfo.TRANSLATE_NAME, .Translate)
    
    End With
  
  Next
  
  $hForm.UpdateBorder
  
  $hForm.GetUndo().End

  $bModified = False

End



Public Sub gvwMenu_Change()

  If $bFreeze Then Return
  If gvwMenu.Row < 0 Then Return
  SetCurrent(gvwMenu.Row)

End


Private Sub WriteMenu() As Boolean

  Dim iInd As Integer
  Dim sName As String
  Dim sComp As String

  'IF NOT ME.Visible THEN
  '  PRINT "WriteMenu ??"
  '  RETURN
  'ENDIF

  If $bFreeze Then Return

  iInd = $iCurrent

  If iInd < 0 Or iInd > $aMenu.Max Then Return 

  With $aMenu[iInd]
    
    sComp = .ToString()

    sName = Trim(txtName.Text)

    If Not sName Then
      Balloon.Warning(("Please enter a menu name."), txtName)
      txtName.SetFocus
      Return True
    Endif

    If CControl.CheckName(sName) Then
      Balloon.Warning(("Bad menu name !"), txtName)
      txtName.SetFocus
      Return True
    Endif

    If CControl.CheckName(txtGroup.Text) Then
      Balloon.Warning(("Bad group name !"), txtGroup)
      txtGroup.SetFocus
      Return True
    Endif

    If sName <> .Name Then
      If Not $cName.Exist(sName) Then
        $cName[.Name] = Null
        $cName[sName] = True
        .Name = sName
      Endif
    Endif

    .Caption = Trim(txtCaption.Text)
    .Action = Trim(txtAction.Text)
    .Group = Trim(txtGroup.Text)
    .Visible = chkVisible.Value
    .Enabled = chkEnabled.Value
    .Checked = chkChecked.Value
    .Toggle = chkToggle.Value
    .Translate = chkTranslate.Value
    .Ctrl = chkCtrl.Value
    .Shift = chkShift.Value
    .Alt = chkAlt.Value
    If cmbShortcut.Index = 0 Then
      .Shortcut = ""
    Else
      .Shortcut = cmbShortcut.Text
    Endif
    .Picture = txtPicture.Text
    .Tag = txtTag.Text
    
    If .ToString() <> sComp Then SetModified
  
  End With
  
  gvwMenu.Rows[$iCurrent].Refresh
  
End


Private Sub ReadMenu()

  Dim iInd As Integer
  
  $bFreeze = True
  
  iInd = $iCurrent

  If iInd >= 0 And iInd <= $aMenu.Max Then
  
    With $aMenu[iInd]
    
      txtName.Text = .Name
      txtCaption.Text = .Caption
      txtAction.Text = .Action
      txtGroup.Text = .Group
      chkVisible.Value = .Visible
      chkEnabled.Value = .Enabled
      chkChecked.Value = .Checked
      chkToggle.Value = .Toggle
      chkTranslate.Value = .Translate
      chkCtrl.Value = .Ctrl
      chkShift.Value = .Shift
      chkAlt.Value = .Alt
      If Len(.ShortCut) Then
        cmbShortcut.Text = .Shortcut
      Else
        cmbShortCut.Index = 0
      Endif
      txtPicture.Text = .Picture
      txtTag.Text = .Tag
      SetPicture(.Picture)
    
    End With

    frmMenu.Show
    lblCreate.Hide

  Else

    frmMenu.Hide
    lblCreate.Show

  Endif

  $bFreeze = False

End


Private Sub DeleteMenu(iInd As Integer)

  $cName.Remove($aMenu[iInd].Name)
  $aMenu.Remove(iInd)
  gvwMenu.Rows.Remove(iInd)

End


Public Sub btnDelete_Click()

  Dim iInd As Integer
  Dim aDelete As New Integer[]

  'IF WriteMenu() THEN RETURN

  $bFreeze = True
  
  For iInd = 0 To $aMenu.Max
    If gvwMenu.Rows[iInd].Selected Then aDelete.Add(iInd)
  Next

  For iInd = aDelete.Max DownTo 0
    DeleteMenu(aDelete[iInd])
    If aDelete[iInd] < $iCurrent Then Dec $iCurrent
  Next

  $iCurrent = Min($iCurrent, $aMenu.Max)
  
  gvwMenu.Rows.Count = $aMenu.Count
  gvwMenu.Refresh
  gvwMenu.UnSelectAll
  
  $bFreeze = False
  
  SetCurrent($iCurrent)

End


Public Sub btnInsert_Click()

  Dim hCMenu As CMenu
  Dim iIndex As Integer

  If WriteMenu() Then Return

  $bFreeze = True

  iIndex = $iCurrent
  If iIndex < 0 Then iIndex = $aMenu.Max
  Inc iIndex

  hCMenu = New CMenu
  hCMenu.Name = GetName()
  hCMenu.Caption = hCMenu.Name
  hCMenu.Translate = True
  If iIndex > 0 Then hCMenu.Level = $aMenu[iIndex - 1].Level

  $cName[hCMenu.Name] = True
  'hCMenu.Caption = hCMenu.Name

  $aMenu.Add(hCMenu, iIndex)
  SetModified
  Inc gvwMenu.Rows.Count
  gvwMenu.Refresh

  gvwMenu.UnSelectAll
  $bFreeze = False

  SetCurrent(iIndex)

  txtName.SelectAll
  txtName.SetFocus

End


Private Function GetName() As String

  Dim iCpt As Integer
  Dim sName As String

  Do

    Inc iCpt
    sName = "Menu" & CStr(iCpt)
    If Not $cName.Exist(sName) Then Return sName

  Loop

End


Public Sub btnRight_Click()

  Dim iInd As Integer

  If WriteMenu() Then Return

  For iInd = 0 To $aMenu.Count - 1

    If gvwMenu.Rows[iInd].Selected Then
      With $aMenu[iInd]
        .Level = .Level + 1
        gvwMenu.Rows[iInd].Refresh
        SetModified
      End With
    Endif

  Next

  ReadMenu

End


Public Sub btnLeft_Click()

  Dim iInd As Integer

  If WriteMenu() Then Return

  For iInd = 0 To $aMenu.Count - 1

    If gvwMenu.Rows[iInd].Selected Then
      With $aMenu[iInd]
        .Level = Max(.Level - 1, 0)
        gvwMenu.Rows[iInd].Refresh
        SetModified
      End With
    Endif
  
  Next
  
  ReadMenu

End


Private Sub LoadShortcut()

  Dim iInd As Integer
  Dim aShortcut As String[]
  Dim sCar As String

  If cmbShortcut.Count Then Return

  aShortcut = ["(None)"]

  For iInd = Asc("A") To Asc("Z")
    aShortcut.Add(Chr$(iInd))
  Next

  For iInd = Asc("0") To Asc("9")
    aShortcut.Add(Chr$(iInd))
  Next

  For iInd = 33 To 126
    sCar = Chr$(iInd)
    If IsDigit(sCar) Or If IsLetter(sCar) Then Continue
    aShortcut.Add(sCar)
  Next

  'aShortcut.Insert(["+", "-", "*", "/", "(", ")", "[", "]", "{", "}", "@", "=", ".", "!", "\\", "%", "#", "$", "~"].Sort())

  aShortcut.Insert(["Backspace", "Del", "Down", "End", "Enter", "Esc", "Home", "Ins", "Left", "Pause", "PgDown", "PgUp", "Return", "Space", "Right", "Up"])

  For iInd = 1 To 12
    aShortcut.Add("F" & CStr(iInd))
  Next
  
  cmbShortcut.List = aShortcut
  
End



Private Function CheckMenu() As Boolean

  Dim iInd As Integer
  Dim iLastLevel As Integer

  iLastLevel = -1

  For iInd = 0 To $aMenu.Max - 1

    If $aMenu[iInd].Level - iLastLevel > 1 Then
      gvwMenu.Rows.UnselectAll
      gvwMenu.Row = iInd
      Message.Warning(("This menu is too deep !"))
      Return True
    Endif
    
    iLastLevel = $aMenu[iInd].Level
  
  Next

End


Public Sub cmbShortcut_Click()
  WriteMenu
End

Public Sub chkCtrl_Click()
  WriteMenu
End

Public Sub chkAlt_Click()
  WriteMenu
End

Public Sub chkShift_Click()
  WriteMenu
End

Public Sub txtCaption_Change()
  WriteMenu
End


Public Sub btnNext_Click()

  If $iCurrent < $aMenu.Count Then
    Inc gvwMenu.Row
  Endif

End

Private Sub SetSelected(aSel As Integer[])

  Dim iSel As Integer
  
  gvwMenu.Rows.UnselectAll
  For Each iSel In aSel
    gvwMenu.Rows[iSel].Selected = True
  Next

End


Public Sub btnUp_Click()

  Dim iInd As Integer
  Dim iCount As Integer
  Dim aSel As New Integer[]

  iCount = $aMenu.Count
  If iCount <= 1 Then Return

  'If $iCurrent = $aMenu.Max Then Return
  If gvwMenu.Rows[0].Selected Then Return
  
  For iInd = 1 To $aMenu.Count - 1

    If gvwMenu.Rows[iInd].Selected Then
      aSel.Add(iInd - 1)
      Swap $aMenu[iInd], $aMenu[iInd - 1]
      SetModified
    End If

  Next

  Dec $iCurrent
  SetCurrent($iCurrent)
  SetSelected(aSel)
  gvwMenu.Refresh

  'ReadMenu

End


Public Sub btnDown_Click()

  Dim iInd As Integer
  Dim iCount As Integer
  Dim aSel As New Integer[]

  iCount = $aMenu.Count
  If iCount <= 1 Then Return

  If $iCurrent = $aMenu.Max Then Return

  If gvwMenu.Rows[iCount - 1].Selected Then Return

  For iInd = iCount - 1 DownTo 0

    If gvwMenu.Rows[iInd].Selected Then

      aSel.Add(iInd + 1)
      Swap $aMenu[iInd], $aMenu[iInd + 1]
      SetModified

    End If

  Next

  Inc $iCurrent
  SetCurrent($iCurrent)
  SetSelected(aSel)
  gvwMenu.Refresh

  'ReadMenu

End


Private Sub SetCurrent(iCurrent As Integer)

  If iCurrent <> $iCurrent Then WriteMenu
  
  If iCurrent < 0 Or iCurrent >= $aMenu.Count Then 
    gvwMenu.Rows.UnselectAll
    $iCurrent = -1
  Else
    Object.Lock(gvwMenu)
    gvwMenu.Rows[$iCurrent].Selected = False
    $iCurrent = iCurrent
    If gvwMenu.Row <> $iCurrent Then gvwMenu.Row = $iCurrent
    gvwMenu.Rows[$iCurrent].Selected = True
    gvwMenu[$iCurrent, 0].EnsureVisible
    Object.Unlock(gvwMenu)
  Endif
  
  ReadMenu

End

Public Sub btnPicture_Click()

  Dim sPict As String

  sPict = FSelectIcon.Run(txtPicture.Text)
  If sPict Then SetPicture(sPict)
  
End


Private Sub SetPicture(sPict As String)
  
  Dim hPict As Picture

  txtPicture.Text = sPict
  hPict = Project.GetPicture(sPict)
  If hPict Then hPict = hPict.Image.Stretch(48, 48).Picture
  'btnIcon.Picture = hPict
  WriteMenu
  
Catch

  Message.Error(Error.Text)
  
End

Public Sub btnKillPicture_Click()

  SetPicture("")

End


Public Sub btnSave_Click()

  WriteMenu

End

' Public Sub lstMenu_MouseDown()
' 
'   Dim iInd As Integer
'   
'   If Not (Mouse.Control Or Mouse.Shift) Then
'     For iInd = 0 To $aMenu.Max
'       gvwMenu[iInd].Selected = False
'     Next
'   Endif
' 
' End

Public Sub btnShortcut_Click()

  chkCtrl.Value = False
  chkShift.Value = False
  chkAlt.Value = False
  cmbShortcut.Index = 0

End

' Public Sub panIcon_Arrange()
' 
'   btnIcon.H = btnIcon.W
' 
' End

Private Sub GetMenu(hMenu As CMenu) As String
  
  With hMenu
    
    Return .Name & "," & .Level & "," & Quote(.Caption) & "," & .Action & "," & .Group & "," & .Visible & "," & .Enabled & "," & .Checked & "," & .Toggle & "," & .Translate & "," &
      .Ctrl & "," & .Shift & "," & .Alt & "," & Quote(.Shortcut) & "," & Quote(.Picture) & "," & Quote(.Tag)
    
  End With

End


Public Sub btnCopy_Click()

  Dim iInd As Integer
  Dim sData As String
  
  For iInd = 0 To $aMenu.Count - 1
    If gvwMenu.Rows[iInd].Selected Then
      sData &= GetMenu($aMenu[iInd]) & "\n"
    Endif
  Next
  
  If Not sData Then Return
  
  Clipboard.Copy(sData, MMime.MENU)
  UpdatePaste

End

Public Sub btnCut_Click()

  btnCopy_Click
  btnDelete_Click

End

Private Sub UpdatePaste()
  
  btnPaste.Enabled = Clipboard.Formats.Exist(MMime.MENU)
  
End


Public Sub btnPaste_Click()

  Dim sData As String
  Dim aMenu As String[]
  
  sData = Trim(Clipboard.Paste(MMime.MENU))
  If Not sData Then Return
  
  gvwMenu.Rows.UnselectAll
  
  For Each sData In Split(sData, "\n")
    aMenu = Split(sData, ",", Chr$(34))
    btnInsert_Click
    txtName.Text = aMenu[0]
    $aMenu[$iCurrent].Level = CInt(aMenu[1])
    txtCaption.Text = aMenu[2]
    txtAction.Text = aMenu[3]
    txtGroup.Text = aMenu[4]
    chkVisible.Value = CBool(aMenu[5])
    chkEnabled.Value = CBool(aMenu[6])
    chkChecked.Value = CBool(aMenu[7])
    chkToggle.Value = CBool(aMenu[8])
    chkTranslate.Value = CBool(aMenu[9])
    chkCtrl.Value = CBool(aMenu[10])
    chkShift.Value = CBool(aMenu[11])
    chkAlt.Value = CBool(aMenu[12])
    cmbShortcut.Text = aMenu[13]
    SetPicture(aMenu[14])
    txtTag.Text = aMenu[15]
    WriteMenu
    gvwMenu.Rows[$iCurrent].Selected = True
    Inc $iCurrent
    ReadMenu
  Next
  
  ReadMenu

End

Public Sub txtSearch_Click()

  Dim iIndex, iStart As Integer
  Dim sFind As String = txtSearch.Text
  
  If Not sFind Then Return
  
  iStart = gvwMenu.Row 
  If iStart < 0 Then iStart = 0
  
  sFind = String.LCase(sFind)
  
  iIndex = iStart
  Do
    Inc iIndex
    If iIndex >= $aMenu.Max Then iIndex = 0
    If iIndex = iStart Then Break
    With $aMenu[iIndex]
      If InStr(String.LCase(.Caption), sFind) Or If InStr(LCase(.Name), sFind) Then 
        SetCurrent(iIndex)
        Break
      Endif
    End With
  Loop

End

Public Sub txtSearch_Activate()

  txtSearch_Click

End

Public Sub gvwMenu_Data(Row As Integer, Column As Integer)

  Dim hPict As Picture
  Dim sElt As String
  
  'If Row >= $aMenu.Max Then Return
  
  With $aMenu[Row]
  
    Select Case Column
      
      Case 0
        If .Picture Then
          hPict = Project.GetPicture(.Picture)
          If hPict Then hPict = hPict.Image.Stretch(16, 16).Picture
          gvwMenu.Data.Picture = hPict
          gvwMenu.Data.Alignment = Align.Center
        Endif
        
      Case 1
        
        If .Caption Then
          sElt = .Caption
        Else
          If .Level = 0 Then
            sElt = .Name
          Else
            sElt = String$(2, "―") & " " & .Name & " " & String$(6, "―")
          Endif
          gvwMenu.Data.Font.Italic = True
          gvwMenu.Data.Foreground = Color.Lighter(Color.TextForeground)
        Endif
        
        If .Level Then
          sElt = String$(.Level, "    ·    ") & sElt
        Endif
        gvwMenu.Data.Text = sElt
        
      Case 2
        gvwMenu.Data.Text = .GetShortcut()
      
    End Select
    
    If .Level = 0 Then
      gvwMenu.Data.Font.Bold = True
      gvwMenu.Data.Font.Underline = True
    Endif
    
  End With

End

Private Sub SetModified()

  If Not $bModified Then
    Me.Title = Me.Title & " [" & ("modified") & "]"
    $bModified = True
  Endif

End

Public Sub chkVisible_Click()

  WriteMenu

End

Public Sub chkEnabled_Click()

  WriteMenu

End

Public Sub chkToggle_Click()

  WriteMenu

End

Public Sub chkChecked_Click()

  WriteMenu

End

' Public Sub Form_KeyPress()
' 
'   If Key.Code = Key.Up Then
'     Try Dec gvwMenu.Row
'   Else If Key.Code = Key.Down Then
'     Try Inc gvwMenu.Row
'   Else If Key.Code = Key.Home And If Key.Control Then
'     gvwMenu.Row = 0
'   Else If Key.Code = Key.End And If Key.Control Then
'     gvwMenu.Row = $aMenu.Max
'   Endif
' 
' End
