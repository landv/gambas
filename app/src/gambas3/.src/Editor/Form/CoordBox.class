' Gambas class file

Export

Inherits UserControl

Public Const _Properties As String = "*,Action,Text,Alignment{Align.Normal;Left;Center;Right}=Normal,ReadOnly,Border=True,AllowRelative,AutoConvert,AllowNegative"
Public Const _DefaultEvent As String = "Change"
Public Const _DefaultSize As String = "24,4"
'Public Const _Similar As String = "TextBox"

Event Change
Event Activate

Property Text As String
Property Value As String
Property Read Length As Integer
Property ReadOnly As Boolean
Property Border As Boolean
Property Read Editor As MaskBox
Property Alignment As Integer
Property AllowRelative As Boolean
Property AutoConvert As Boolean
Property AllowNegative As Boolean

'Private $hPanel As Panel
Private $hBackground As DrawingArea
Private $bBorder As Boolean
Private $hTextBox As TextBox
Private $hButton As MenuButton
Private $hClear As ToolButton
Private $hMenu As Menu
Private $aUnits As String[] = ["cm", "mm", "in", "ft", "px", "pt"]
Private $bAllowRelative As Boolean
Private $bAutoConvert As Boolean
Private $fCurVal As Float
Private $bAllowNegative As Boolean
Private Const DEFAULT_UNIT As String = "mm"

Public Sub _new()
  
  $hBackground = New DrawingArea(Me) As "Background"
  $hBackground.Arrangement = Arrange.Horizontal
  Border_Write(True)
  
  $hClear = New ToolButton($hBackground) As "ClearButton"
  $hClear.Picture = Picture["icon:/small/clear"]
  $hClear.AutoResize = True
  
  $hTextBox = New TextBox($hBackground) As "TextBox"
  $hTextBox.Border = False
  $hTextBox.Expand = True
  $hTextBox.Alignment = Align.Right
  Me.Proxy = $hTextBox
  
  $hButton = New MenuButton($hBackground) As "Button"
  '$hButton.W = 30
  $hButton.Border = False
  $hButton.AutoResize = True
  $hButton.Text = DEFAULT_UNIT
  $hButton.Tag = 0
  
End

Private Function Value_Read() As String
  
  If IsNumber($hTextBox.Text) Then
    If Not $bAllowNegative And If Val($hTextBox.Text) <= 0 Then Return
    Return Replace($hTextBox.Text, ",", ".") & $hButton.Text
  Endif

End

Private Sub Value_Write(Value As String)
  
  Dim I As Integer
  Dim sCar As String
  Dim Unit As String
  Dim fValue As Float
  
  Value = Trim(Value)
  
  If Not Value Then 
    $hTextBox.Text = ""
    $hButton.Text = DEFAULT_UNIT
    Return
  Endif
  
  For I = Len(Value) DownTo 1
    sCar = Mid$(Value, I, 1)
    If IsDigit(sCar) Or If sCar = "." Then Break
  Next
  Inc I
  
  Try fValue = Val(Left$(Value, I - 1))
  If Error Then Error.Raise("Bad value")
  If fValue < 0 And If Not $bAllowNegative Then Error.Raise("Bad value")
  
  $hTextBox.Text = Str(fValue)
  
  Unit = Trim(Mid$(Value, I))
  If Not Unit Then Unit = "%"
  
  If Not $aUnits.Exist(Unit) Then 
    If Not $bAllowRelative Or Unit <> "%" Then
      Error.Raise("Unknown unit")
    Endif
  Endif
  
  $hButton.Text = Unit
  
End

Public Sub Button_Click()
  
  $hTextBox.SetFocus
  If Not $hMenu Then RefreshMenu
  $hMenu.Popup($hButton.ScreenX, $hButton.ScreenY + $hButton.Height)
  
End

Private Function ReadOnly_Read() As Boolean
  
  Return $hTextBox.ReadOnly
  
End

Private Sub ReadOnly_Write(Value As Boolean)
  
  $hTextBox.ReadOnly = Value
  
End

Public Sub Background_GotFocus()
  
  $hTextBox.SetFocus
  
End

Public Sub Observer_GotFocus()
  
  $hTextBox.SetFocus
  
End

Public Sub Clear()
  
  Value_Write("")
  
End

Private Function Length_Read() As Integer
  
  Return $hTextBox.Length
  
End

Private Function Border_Read() As Boolean
  
  Return $bBorder
  
End

Private Sub Border_Write(Value As Boolean)
  
  $bBorder = Value
  $hBackground.Padding = If(Value, Style.TextBoxFrameWidth, 0)
  Me.Refresh
  
End

Public Sub Background_Draw()
  
  Dim iBg As Integer = Color.TextBackground
  
  If Me.Background <> Color.Default Then iBg = Me.Background
  
  If $bBorder Then 
    Style.PaintBox(0, 0, Me.W, Me.H, Style.StateOf($hTextBox), iBg)
  Else
    Paint.FillRect(0, 0, Me.W, Me.H, iBg)
  Endif
  
End

Private Function Editor_Read() As MaskBox
  
  Return $hTextBox
  
End

Public Sub Button_MouseWheel()
  
  $hButton.Tag = Max(0, Min($hButton.Tag - Mouse.Delta, $aUnits.Max))
  If $bAutoConvert Then 
    Try $fCurVal = $fCurVal * GetFactor($hButton.Text) / GetFactor($aUnits[$hButton.Tag])
    $hTextBox.Text = Replace(Format($fCurVal, "0.####"), ",", ".")
  Endif
  $hButton.Text = $aUnits[$hButton.Tag]
  Raise Change
  
End

Private Function Alignment_Read() As Integer
  
  Return $hTextBox.Alignment
  
End

Private Sub Alignment_Write(Value As Integer)
  
  $hTextBox.Alignment = Value
  
End

Public Sub TextBox_Activate()
  
  Raise Activate
  
End

Public Sub TextBox_Change()
  
  'Try $fCurVal = CFloat(Last.Text)
  
  Raise Change
  
End

Public Sub TextBox_KeyPress()
  
  Try $fCurVal = Val(Last.Text)
  
End

Public Sub TextBox_MouseWheel()
  
  Dim f As Float
  
  Try f = Val($hTextBox.Text)
  f += Mouse.Delta
  If Not $bAllowNegative Then 
    $fCurVal = Max(0, f)
  Else
    $fCurVal = f
  Endif
  $hTextBox.Text = $fCurVal
  'Raise Change
  
End

Private Sub RefreshMenu()
  
  Dim hMenu As Menu
  Dim s As String
  
  Try $hMenu.Delete
  $hMenu = New Menu(Me.Window)
  
  For Each s In $aUnits
    hMenu = New Menu($hMenu) As "Menu"
    hMenu.Text = s
  Next
  
End

Public Sub Menu_Click()
  
  If $bAutoConvert Then 
    Try $fCurVal = $fCurVal * GetFactor($hButton.Text) / GetFactor(Last.Text)
    $hTextBox.Text = Replace(Format($fCurVal, "0.####"), ",", ".")
  Endif
  $hButton.Text = Last.Text
  
  Raise Change
  
End

Private Function AllowRelative_Read() As Boolean
  
  Return $bAllowRelative
  
End

Private Sub AllowRelative_Write(Value As Boolean)
  
  If Not Value And $aUnits[$aUnits.Max] = "%" Then $aUnits.Remove($aUnits.Max)
  If Value And $aUnits[$aUnits.Max] <> "%" Then $aUnits.Add("%")
  RefreshMenu
  $bAllowRelative = Value
  
End

Private Function AutoConvert_Read() As Boolean
  
  Return $bAutoConvert
  
End

Private Sub AutoConvert_Write(Value As Boolean)
  
  $bAutoConvert = Value
  
End

Private Function GetFactor(Unit As String) As Float
  
  Select Case Unit
    Case "cm"
      Return 0.3937
    Case "ft"
      Return 12
    Case "in"
      Return 1
    Case "m"
      Return 39.37
    Case "mm"
      Return 0.03937
    Case "pt"
      Return 1 / 72
    Case Else
      Error.Raise("")  '* (300 / 96) ' Trick to get a 300 DPI like
  End Select
  
End

Private Function Text_Read() As String
  
  Return Value_Read()
  
End

Private Sub Text_Write(Value As String)
  
  Value_Write(Value)
  
End

Public Sub ClearButton_Click()
  
  $hTextBox.Text = ""
  $hButton.Text = DEFAULT_UNIT
  
End

Private Function AllowNegative_Read() As Boolean
  
  Return $bAllowNegative
  
End

Private Sub AllowNegative_Write(Value As Boolean)
  
  $bAllowNegative = Value
  
End
