' Gambas class file

Public Shown As Boolean

Private Enum TAB_DEBUG, TAB_CONSOLE, TAB_BREAK, TAB_COMPILATION, TAB_TASK, TAB_SEARCH, TAB_VERSION_CONTROL

Private $cRefreshBreakpoint As New Collection

Private $cRefreshTask As New Collection
Private $aTask As CTask[]

'Private $cLocal As New Collection ' key -> row
'Private $bSortLocal As Boolean

'Private $bSortObject As Boolean

Private $hForm As FEditor

Private $sLastLocal As String
Private $sLastObject As String

Private $hBreakpoint As Picture
Private $hDisabledBreakpoint As Picture

Public Sub _new()
  
  Dim DS As Integer = Desktop.Scale
  
  If Not $hDisabledBreakpoint Then
    $hBreakpoint = Picture["icon:/small/halt"]
    $hDisabledBreakpoint = $hBreakpoint.Image.Desaturate().Gamma(0.3).Picture
  Endif
  
  With cvwVariable
    .Columns.Count = 2
  End With
  
  With gvwBreakpoint
    .AddColumn("", DS * 3).Resizable = False
    .AddColumn(("Class"))
    .AddColumn(("Line"))
    .AddColumn(("Function"))
  End With
  
  ' With gvwFind
  '   .Columns.Count = 5
  '   .Columns[0].Width = DS * 16
  '   .Columns[0].Text = ("File")
  '   .Columns[1].Width = DS * 16
  '   .Columns[1].Text = ("Location")
  '   .Columns[2].Width = DS * 6
  '   .Columns[2].Text = ("Line")
  '   .Columns[3].Width = DS * 6
  '   .Columns[3].Text = ("Col.")
  '   .Columns[4].Width = 32
  '   .Columns[4].Text = ("Text")
  ' End With
  
  With gvwFind
    .AddColumn(("File"))
    .AddColumn(("Location"))
    .AddColumn(("Line"))
    .AddColumn(("Col."))
    .AddColumn(("Text"))
  End With
  
  With gvwTask
    .AddColumn(("Type"))
    .AddColumn(("Class"))
    .AddColumn(("Line"))
    .AddColumn(("Text"), -1)
  End With
  
  With gvwCompilation
    .AddColumn(("Class"))
    .AddColumn(("Line"))
    '.AddColumn(("Col."))
    .AddColumn(("Message"))
  End With
  
  HideTab(TAB_COMPILATION)
  'wizDebug[TAB_SEARCH].Closable = True
  
  ReadConfig
  'UpdateLocal
  
End

Public Sub Form_Open()
  
  FOutput.Load(panConsole)
  HideTab(TAB_SEARCH)
  UpdateView
  'GotoConsole
  
End

Public Sub Clear()
  
  lvwStack.Clear
  cvwVariable.Clear
  $cRefreshBreakpoint.Clear
  
End

Public Sub EnableStack(bOn As Boolean)
  
  lvwStack.Enabled = bOn
  
End

Public Sub FillStack(aPos As String[]) As Boolean
  
  Dim sPos As String
  Dim iInd As Integer
  Dim sKey As String
  Dim W As Integer
  
  Object.Lock(lvwStack)
  
  If lvwStack.Count And If aPos[0] = lvwStack[0].Text Then
    sKey = lvwStack.Key
  Else
    sKey = 0
  Endif
  
  lvwStack.Clear
  
  W = Desktop.Scale * 16
  For Each sPos In aPos
    If sPos = "?" Then
      lvwStack.Add(iInd, "(" & ("native code") & ")")
    Else
      lvwStack.Add(iInd, sPos)
      W = Max(W, lvwStack.Font.TextWidth(sPos))
    Endif
    Inc iInd
  Next
  
  lvwStack.W = W + Desktop.Scale * 2
  
  If lvwStack.Exist(sKey) Then
    lvwStack[sKey].Selected = True
    lvwStack[sKey].EnsureVisible
  Endif
  Object.Unlock(lvwStack)
  
  Return lvwStack.Key = "0"
  
End

Public Sub lvwStack_Click()
  
  Dim sLoc As String
  
  Design.Command("@" & lvwStack.Key)
  FDebugExpr.RefreshAll
  RefreshAllWatch
  
  sLoc = lvwStack.Current.Text
  If InStr(sLoc, "(") Then Return
  
  Project.Goto(sLoc)
  
Catch
  
End

Public Sub AddResultWatch(sCmd As String, Optional sRes As String, Optional bInstant As Boolean)
  
  Dim sVal As String
  
  'IF Left$(sRes, 1) = "=" THEN
  '  sVal = Mid$(sRes, 2)
  'ELSE
  '  sVal = "** " & sRes
  'ENDIF
  sVal = sRes
  
  If bInstant Then 
    If Right(sCmd) = ":" Then
      
      If FDebugExpr.Exist(Left(sCmd, Len(sCmd) - 1)) Then Return 
      
      'ShowAsBalloon(sVal)
      If $hForm Then 
        $hForm.ShowWatchResult(sVal) ', $iX, $iY)
        $hForm = Null
      Else
        FOutput.Insert(sVal)
      Endif
      
    Else 
      Design.Command("#X" & sCmd & "\t" & sCmd)  
    Endif 
  Else
    
    If Not cvwVariable.Exist("@") Then
      With cvwVariable.Add("@", ("Watch expressions"), Picture["icon:/16/watch"])
        .MoveFirst()
        .Font = lvwStack.Font
      End With
    Endif
    
    Try cvwVariable.Add("@" & sCmd, sCmd,, "@").EnsureVisible
    
    With cvwVariable["@" & sCmd]
      If Left(sVal) = "!" Then 
        sVal = Mid$(sVal, 2)
        .Foreground = Color.Red
      Else
        .Foreground = Color.Default
      Endif
      .[1] = sVal
    End With
    
  Endif
  
End

Public Sub RefreshAllWatch()
  
  If cvwVariable.MoveTo("@") Then Return
  If cvwVariable.MoveChild() Then Return
  
  Repeat
    Design.Command("?W" & cvwVariable.Item.Text & "\t" & cvwVariable.Item.Text)
  Until cvwVariable.MoveNext()
  
End

Public Sub AddWatch(sExpr As String)
  
  If cmbWatch.Find(sExpr) < 0 Then
    cmbWatch.Add(sExpr)
  Endif
  
  Design.Command("?W" & sExpr & "\t" & sExpr)
  
End

Public Sub InstantWatch(sExpr As String, hForm As FEditor)
  
  If Not sExpr Then Return
  
  $hForm = hForm
  Design.Command("?I" & sExpr & "\t" & sExpr)
  
End

Public Sub cmbWatch_Activate()
  
  Dim sExpr As String
  
  sExpr = Trim(cmbWatch.Text)
  If Not sExpr Then Return
  
  AddWatch(sExpr)
  cmbWatch.Text = ""
  
End

Public Sub btnAddWatch_Click()
  
  cmbWatch_Activate
  
End

Public Sub btnKillWatch_Click()
  
  Dim sKey As String
  
  sKey = cvwVariable.Key
  If sKey Begins "@" Then 
    If sKey = "@" Then
      If Message.Question(("Do you want to clear the expression list ?"), ("Clear"), ("Cancel")) = 2 Then Return
    Endif
    cvwVariable.Remove(sKey)
    If sKey <> "@" And If cvwVariable["@"].Children = 0 Then cvwVariable.Remove("@")
  Endif
  
End

Public Sub cmbWatch_Click()
  
  btnAddWatch_Click
  
End

Private Sub WatchExpression(sText As String)
  
  Design.Command("#X" & sText & "\t" & sText)  
  
End

Public Sub ReadConfig()
  
  'Dim hButton As ToolButton
  Dim hCtrl As Control
  Dim hFont As Font
  Dim H As Integer
  Dim hChild As Control
  Dim sKey As String
  Dim fSize As Float
  
  Settings.Read(panDebug)
  wizDebug.TextFont = Project.GetSmallFont()
  
  Project.SetSmallFont(gvwBreakpoint)
  hFont = gvwBreakpoint.Font
  gvwTask.Font = hFont
  gvwCompilation.Font = hFont
  
  fSize = Project.GetPercentFontSize("/DebuggerFontSize", 80)
  
  Project.SetNormalFont(lvwStack, fSize)

  Project.SetConsoleFont(cvwVariable)
  
  For Each sKey In cvwVariable.Keys
    If cvwVariable[sKey].Font Then cvwVariable[sKey].Font.Size = cvwVariable.Font.Size * fSize
  Next
  cvwVariable.Font.Size *= fSize
  
  cmbWatch.Font = cvwVariable.Font
  
  FDebugButton.ReadConfig
  
  Project.SetConsoleFont(trmVersionControl)
  MTheme.InitControl(trmVersionControl)

  For Each hCtrl In [panBreakpoint, panSearch, panVersionControl]
    Project.SetSmallFont(hCtrl)
  Next
  
  H = Max(Stock.GetSize("tiny"), cmbWatch.Font.H) * 1.4
  
  panWatch.H = H
  For Each hChild In panWatch.Children
    If hChild Is PictureBox Or If hChild Is ToolButton Then hChild.W = hChild.H
  Next
  
  'btnLocalLayout.Value = Settings["/FDebugInfo/LocalColumnView", 0]
  
End

Public Sub wizDebug_Click()
  
  If Design.IsRunning() Then 
    Select Case wizDebug.Index
      Case TAB_CONSOLE
        FOutput.SetFocus
    End Select
    Return
  Endif
  
  Select Case wizDebug.Index
    Case TAB_DEBUG
      DefineVariable($sLastLocal, $sLastObject)
    Case TAB_CONSOLE
      If FMain.IsDebugVisible() Then FOutput.SetFocus
    Case TAB_BREAK
      timBreakpoint_Timer
      RefreshBreakpointView
    Case TAB_COMPILATION
    Case TAB_TASK
      If Not $aTask Then
        UpdateTask
      Else
        timTask_Timer
      Endif
    Case TAB_SEARCH
      FSearch.RefreshBrowse
  End Select   
  
End

Public Sub tbvLocal_Activate()
  
  Dim hTable As TableView = Last
  Dim sExpr As String 
  Dim sVal As String 
  Dim iCol As Integer
  
  If hTable[hTable.Row, 0].ColumnSpan >= 2 Then Return
  
  iCol = hTable.Column And Not 1
  sExpr = hTable[hTable.Row, iCol].Text
  sVal = hTable[hTable.Row, iCol + 1].Text
  
  If Left(sVal) = "(" Then 
    Design.Command("#X" & sExpr & "\t" & sExpr)
  Else
    hTable.Column = iCol + 1 
    hTable.Edit
  Endif
  
End

Public Sub IsEditing() As Boolean
  
  Return cvwVariable.Renaming
  
End

Public Sub tbvObject_Activate()
  
  tbvLocal_Activate
  
End

Public Sub WriteWatchSettings()
  
  Dim iInd As Integer
  Dim sFlag As String
  Dim iCount As Integer
  
  sFlag = "/Watches"
  iInd = 0
  Project.Config.Clear(sFlag)
  
  Try iCount = cvwVariable["@"].Children
  
  Project.Config[sFlag &/ "Count"] = iCount
  If iCount Then
    
    cvwVariable.MoveTo("@")
    cvwVariable.MoveChild()
    While cvwVariable.Available
      Inc iInd
      Project.Config[sFlag &/ "Watch[" & CStr(iInd) & "]"] = cvwVariable.item.Text
      cvwVariable.MoveNext()
    Wend
    
  Endif
  
End

Public Sub ReadWatchSettings()
  
  Dim iCount As Integer
  Dim iInd As Integer
  Dim sFlag As String
  Dim sExpr As Variant
  
  sFlag = "/Watches"
  iInd = 0
  iCount = Project.Config[sFlag &/ "Count", "0"]
  
  Try cvwVariable.Remove("@")
  
  For iInd = 1 To iCount
    sExpr = Project.Config[sFlag &/ "Watch[" & CStr(iInd) & "]"]
    AddResultWatch(sExpr)
  Next
  
End

Public Sub UpdateView()
  
  Dim bUndock As Boolean = Settings["/FOutput/Undock"]
  Dim bVisible As Boolean
  
  If bUndock Then  
    If FOutput.Parent Then 
      FOutput.Reparent(Null)
      FOutput.Enabled = True
      'DEBUG "Read: "; Settings["/FOutput/Geometry"][0];; Settings["/FOutput/Geometry"][1]
      Settings.Read(FOutput)
      FOutput.OnProjectDebug
      FOutput.Show
      FMain.ShowDebug(False)
      'DEBUG FOutput.X;; FOutput.Y
      'Action["console"].Visible = TRUE
      'If Not Project.Running Then FMain.ShowDebug(False)
    Endif
    'FOutput.Stacking = If(Project.Running, Window.Above, Window.Normal)
  Endif
  
  ShowTab(TAB_CONSOLE, Not bUndock)
  ShowTab(TAB_DEBUG, Project.Running)
  ShowTab(TAB_BREAK)
  ShowTab(TAB_VERSION_CONTROL, VersionControl.Enabled)
  
  ' If panStack.Visible <> Project.Running Then
  '   If Project.Running Then
  '     panStack.Visible = True
  '     Settings.Read(panDebug)
  '     'Settings.Read(splDebug,, [4, 1])
  '   Else 
  '     Settings.Write(panDebug)
  '     'Settings.Write(splDebug)
  '     panStack.Visible = False
  '   Endif
  ' Endif
  
  ' panButtonCompilation.Visible = Not Project.Running
  ' panButtonTask.Visible = Not Project.Running
  ' panButtonSearch.Visible = Not Project.Running
  
  If Not bUndock Then 
    If Not FOutput.Parent Then 
      bVisible = FOutput.Visible
      'DEBUG "Write: "; FOutput.X;; FOutput.Y
      Settings.Write(FOutput)
      FOutput.Reparent(panConsole, 0, 0)
      FOutput.Show
      'Action["console"].Value = TRUE
      'Action["console"].Visible = FALSE
      'If bVisible Then FMain.ShowDebug(True)
    Endif
    
    'SelectTab(TAB_CONSOLE)
    'FOutput.SetFocus
    
  Endif 
  
  FDebugButton.UpdateView
  FMain.UpdateConsoleAction()
  
End

Public Sub btnShowMe_Click()
  
  WatchExpression("Me")
  
End

Public Sub RefreshBreakpoint(sClass As String)
  
  Dim hEditor As FEditor
  
  hEditor = Project.Files[Project.FindPath(sClass)]
  If Not hEditor Then Return
  
  If hEditor.GetEditor().Breakpoints.Count = 0 And If Not Design.HasBreakpoint(sClass) Then Return
  
  $cRefreshBreakpoint[sClass] = sClass
  timBreakpoint.Restart
  'timBreakpoint.Start
  
End

Public Sub timBreakpoint_Timer()
  
  Dim sClass As String
  Dim hEditor As FEditor
  
  For Each sClass In $cRefreshBreakpoint
    hEditor = Project.Files[Project.FindPath(sClass)]
    If Not hEditor Then Continue
    Design.RefreshBreakpointFromEditor(hEditor)
  Next
  
  ' gvwBreakpoint.Rows.Count = $aBreakpoint.Count
  ' gvwBreakpoint.Columns.Width = -1
  
  $cRefreshBreakpoint.Clear
  timBreakpoint.Stop
  
End

Public Sub tbvLocal_Scroll()
  
  Balloon.Hide(Last)
  
End

Public Sub tbvLocal_Select()
  
  Balloon.Hide(Last)
  
End

Public Sub tbvObject_Scroll()
  
  Balloon.Hide(Last)
  
End

Public Sub tbvObject_Select()
  
  Balloon.Hide(Last)
  
End

Public Sub btnShow_Click()
  
  Dim sText As String = Trim(cmbWatch.Text)
  
  If Not sText Then Return
  WatchExpression(sText)
  
End

Public Sub GetSearchList() As Control
  
  Return gvwFind
  
End

Public Sub ShowSearchList()
  
  FMain.ShowDebug(True)
  gvwFind.Show
  lblNotFound.Hide
  'lblBrowse.Hide
  ShowTab(TAB_SEARCH)
  SelectTab(TAB_SEARCH)
  
End

Public Sub HideSearchList()
  
  gvwFind.Hide
  lblNotFound.Show
  
End

Public Sub SetSearchListInfo(Optional sText As String)
  
  lblBrowse.Text = sText
  gvwFind.Visible = sText
  lblNotFound.Visible = Not sText
  'lblBrowse.Show
  
End

Public Sub btnShowSearch_Click()
  
  FSearch.WakeUp(False, True)
  
End

Public Sub btnRefreshSearch_Click()
  
  FSearch.BrowseAgain
  
End

Private Sub DisableRec(hCtrl As Control, aExcept As Control[], bOn As Boolean)
  
  Dim hCont As Container
  Dim iCount As Integer
  Dim hMulti As Object
  Dim iInd As Integer
  
  If Not aExcept.Exist(hCtrl) Then
    hCtrl.Enabled = bOn
    Return
  Endif
  
  If Not hCtrl Is Container Then Return
  
  hCont = hCtrl
  hMulti = hCtrl
  
  Try iCount = hMulti.Count
  If Not Error Then
    For iInd = 0 To iCount - 1
      If iInd <> hMulti.Index Then
        hMulti[iInd].Enabled = bOn
      Endif
    Next
  Endif
  
  For Each hCtrl In hCont.Children
    DisableRec(hCtrl, aExcept, bOn)
  Next
  
End

Private Sub DisableEverything(bOn As Boolean)
  
  Dim aCtrl As New Control[]
  Dim hCtrl As Control
  Dim hWin As Window
  
  For Each hWin In Windows
    If Not Object.IsValid(hWin) Then Continue
    If hWin = FMain.Window Or If hWin = FSearch.Window Then Continue
    hWin.Enabled = bOn
  Next
  
  hCtrl = btnCancelSearch
  While hCtrl
    aCtrl.Add(hCtrl)
    hCtrl = hCtrl.Parent
  Wend
  aCtrl.Add(lblBrowse)
  
  DisableRec(FMain.Window, aCtrl, bOn)
  
  aCtrl.Clear
  aCtrl.Add(FSearch.Window)
  
  DisableRec(FSearch.Window, aCtrl, bOn)
  
End

Public Sub EnableGUI(bOn As Boolean)
  
  'lblBrowse.Visible = Not bOn
  btnCancelSearch.Visible = Not bOn
  DisableEverything(bOn)
  
End

Public Sub btnCancelSearch_Click()
  
  FSearch.Cancel()
  
End

Public Sub IsSearchListVisible() As Boolean
  
  Return wizDebug.Index = TAB_SEARCH And FMain.IsDebugVisible()
  
End

Private Sub GotoConsole()
  
  If IsNull(FOutput.Parent) Then
    SelectTab(TAB_BREAK)
  Else
    SelectTab(TAB_CONSOLE)
  Endif
  
End

' Public Sub btnClearSearch_Click()
' 
'   FSearch.ResetBrowse
'   GotoConsole
'   tabDebug[TAB_SEARCH].Visible = False
' 
' End

Public Sub OnVisibilityChange()
  
  If IsSearchListVisible() Then FSearch.RefreshBrowse
  
End

Public Sub ShowConsole()
  
  If FOutput.Parent Then FDebugButton.SelectButton(TAB_CONSOLE)
  FOutput.SetFocus
  
End

Public Sub RefreshTabs(sPath As String, sName As String)
  
  RefreshBreakpoint(sName)
  RefreshTask(sPath)
  
End

Public Sub RefreshTask(sPath As String)
  
  $cRefreshTask[sPath] = sPath
  If wizDebug.Index = TAB_TASK Then
    timTask.Restart
  Endif
  
End

Private Sub AfterRefreshTask()
  
  $aTask.Sort
  $cRefreshTask.Clear
  gvwTask.Rows.Count = $aTask.Count
  gvwTask_Font
  gvwTask.Refresh
  
End

Public Sub gvwTask_Font()

  Dim I As Integer
  
  For I = 0 To gvwTask.Columns.Max - 1
    gvwTask.Columns[I].W = -1
  Next

End  

Public Sub UpdateTask()
  
  Dim sPath As String
  
  If wizDebug.Index <> TAB_TASK Then Return
  
  Inc Application.Busy
  
  $aTask = New CTask[]
  For Each sPath In Project.Tree.Sources
    $aTask.Insert(CTask.ScanFile(sPath))
  Next
  
  AfterRefreshTask
  
  Dec Application.Busy
  
End

Public Sub timTask_Timer()
  
  Dim sPath As String
  Dim sClass As String
  Dim I As Integer
  
  If Not $aTask Then Return
  If $cRefreshTask.Count = 0 Then Return
  
  For Each sPath In $cRefreshTask
    
    sClass = File.BaseName(sPath)
    
    I = 0
    While I < $aTask.Count
      If $aTask[I].Class = sClass Then
        $aTask.Remove(I)
      Else
        Inc I
      Endif
    Wend
    
    $aTask.Insert(CTask.ScanFile(sPath))
    
  Next
  
  AfterRefreshTask
  
  timTask.Stop
  
End

Public Sub gvwTask_Data(Row As Integer, Column As Integer)
  
  Dim hTask As CTask
  
  If Not $aTask Then Return
  hTask = $aTask[Row]
  
  With gvwTask.Data
    
    Select Case hTask.Type
      Case CTask.TYPE_NOTE
        .Foreground = Color.Default
      Case CTask.TYPE_FIXME
        .Foreground = Color.Gradient(Color.Red, Color.TextForeground)
      Case CTask.TYPE_TODO
        .Foreground = Color.Gradient(Color.Green, Color.TextForeground)
    End Select
    
    Select Case Column
        
      Case 1
        .Text = hTask.Class
        
      Case 2
        .Text = CStr(hTask.Line)
        
      Case 0
        Select Case hTask.Type
          Case CTask.TYPE_NOTE
            .Text = "NOTE"
          Case CTask.TYPE_FIXME
            .Text = "FIXME"
          Case CTask.TYPE_TODO
            .Text = "TODO"
        End Select
        
      Case 3
        .Text = hTask.Text
        
    End Select
    
  End With
  
End

Public Sub gvwTask_Activate()
  
  Dim hTask As CTask = $aTask[gvwTask.Row]
  
  Project.OpenFile(hTask.Name, hTask.Line)
  
Catch  
  
End

Public Sub OnProjectChange()
  
  $aTask = Null
  UpdateTask
  SetCompilation
  CloseSearch
  trmVersionControl.Clear
  
End

Public Sub ShowError(sMsg As String)
  
  If Me.Visible Then
    Balloon(sMsg, lvwStack, Picture["icon:/32/error"], 8, 8)
  Else
    sMsg = Replace(sMsg, "\n", "<br>")
    Message.Error(sMsg)
  Endif
  
End

Public Sub SetCompilation(Optional sOutput As String)
  
  Dim aOutput As String[]
  Dim sLine As String
  Dim aLine As String[]
  Dim I As Integer
  Dim aPos As String[]
  
  gvwCompilation.Clear
  If Not sOutput Then 
    HideTab(TAB_COMPILATION)
    'GotoConsole
    Return
  Endif
  
  aOutput = Split(Trim(sOutput), "\n")
  gvwCompilation.Rows.Count = aOutput.Count
  
  For Each sLine In aOutput
    
    aLine = Scan(sLine, "*:*: warning: *")
    If aLine.Count <> 3 Then 
      aLine = Scan(sLine, "gbc3: warning: *")
      If aLine.Count <> 1 Then Continue
      aLine.Add("", 0)
      aLine.Add("", 0)
    Endif
    
    gvwCompilation[I, 0].Text = Trim(File.BaseName(aLine[0]))
    If InStr(aLine[1], ":") Then
      aPos = Split(aLine[1], ":")
      gvwCompilation[I, 1].Text = aPos[0]
      'gvwCompilation[I, 2].Text = aPos[1]
    Else
      gvwCompilation[I, 1].Text = aLine[1]
    Endif
    gvwCompilation[I, 2].Text = String.UCaseFirst(Project.TranslateMessage(Trim(aLine[2])))
    gvwCompilation[I, 2].Font = Project.GetEditorFont()
    Inc I
    
  Next
  
  gvwCompilation.Rows.Count = I
  gvwCompilation_Font
  
  ShowTab(TAB_COMPILATION)
  'wizDebug[TAB_COMPILATION].Text = ("Warnings") & " (" & gvwCompilation.Rows.Count & ")"
  
  Action["console"].Value = True
  SelectTab(TAB_COMPILATION)
  
End

Public Sub gvwCompilation_Font()
  
  gvwCompilation.Columns[0].Width = -1
  gvwCompilation.Columns[1].Width = -1
  
End


Public Sub gvwCompilation_Select()
  
  Dim I As Integer = gvwCompilation.Row
  'Dim iCol As Integer
  
  'Try iCol = CInt(gvwCompilation[I, 2].Text)
  'If Error Then iCol = -1
  Project.OpenFile(gvwCompilation[I, 0].Text, CInt(gvwCompilation[I, 1].Text))
  
Catch  
  
End

Public Sub GotoFirstWarning()
  
  If gvwCompilation.Rows.Count = 0 Then Return
  gvwCompilation.Row = 0
  'gvwCompilation_Activate
  
End

' Public Sub btnLocalCopy_Click()
' 
'   Dim sText As String
'   Dim I As Integer
'   
'   For I = 0 To $aLocal.Max
'     sText &= $aLocal[I] & " = " & $aValLocal[I] & "\n"
'   Next
'   
'   Clipboard.Copy(sText)
' 
' End

Private Sub CloseSearch()
  
  FSearch.ResetBrowse
  If wizDebug[TAB_SEARCH].Enabled Then
    If wizDebug.Index = TAB_SEARCH Then GotoConsole
    HideTab(TAB_SEARCH) 
  Endif
  
End

Public Sub SelectTab(iTab As Integer)
  
  If wizDebug.Index = iTab Then Return
  
  wizDebug.Index = iTab
  FDebugButton.SelectButton(iTab)
  
End

Private Sub ShowTab(iTab As Integer, Optional bShow As Boolean = True)
  
  If bShow Then
    wizDebug[iTab].Enabled = True
    FDebugButton.ShowButton(iTab, True)
  Else
    HideTab(iTab)
  Endif
  
End

Private Sub HideTab(iTab As Integer) As Boolean
  
  wizDebug[iTab].Enabled = False
  FDebugButton.ShowButton(iTab, False)
  
End

Public Sub GetCurrentTab() As Integer
  
  Return wizDebug.Index
  
End

Public Sub btnCloseSearch_Click()
  
  CloseSearch
  FMain.ShowDebug(False)
  
End

Public Sub gvwBreakpoint_Data(Row As Integer, Column As Integer)
  
  Dim sBreakpoint As String
  Dim hEditor As FEditor
  Dim aBreak As String[]
  
  Try sBreakpoint = Design.GetBreakpoints()[Row]
  If Not sBreakpoint Then Return
  aBreak = Split(sBreakpoint, ".")
  
  Select Case Column
      
    Case 0
      gvwBreakpoint.Data.Picture = If(Design.IsBreakpointDisabled(sBreakpoint), $hDisabledBreakpoint, $hBreakpoint)
      
    Case 1
      gvwBreakpoint.Data.Text = aBreak[0]
      
    Case 2
      gvwBreakpoint.Data.Text = CStr(CInt(aBreak[1]) + 1)
      
    Case 3
      Try hEditor = Project.Files[Project.FindPath(aBreak[0])]
      If hEditor Then
        gvwBreakpoint.Data.Text = hEditor.GetProcAt(CInt(aBreak[1]))
      Else
        gvwBreakpoint.Data.Text = ("File not loaded")
        gvwBreakpoint.Data.Foreground = Color.LightForeground
        gvwBreakpoint.Data.Font.Italic = True
      Endif
      
  End Select
  
End

Public Sub gvwBreakpoint_Click()
  
  Dim sBreakpoint As String
  Dim aBreak As String[]
  
  If gvwBreakpoint.Row < 0 Then Return
  
  sBreakpoint = Design.GetBreakpoints()[gvwBreakpoint.Row]
  aBreak = Split(sBreakpoint, ".")
  
  If gvwBreakpoint.Column = 0 Then
    
    Design.SetBreakpoint(sBreakpoint, True, Not Design.IsBreakpointDisabled(sBreakpoint))
    gvwBreakpoint.Rows[gvwBreakpoint.Row].Refresh
    
  Endif
  
  Try Project.OpenFile(aBreak[0], CInt(aBreak[1]) + 1)
  
  gvwBreakpoint.UnSelectAll
  gvwBreakpoint.Select(gvwBreakpoint.Row)
  
End

Public Sub RefreshBreakpointView()
  
  If wizDebug.Index <> TAB_BREAK Then Return
  
  gvwBreakpoint.Rows.Count = Design.GetBreakpoints().Count
  gvwBreakpoint_Font()
  gvwBreakpoint.Refresh
  'gvwBreakpoint_Click
  
End

Public Sub gvwBreakpoint_Font()
  
  gvwBreakpoint.Columns[1].Width = -1
  gvwBreakpoint.Columns[2].Width = -1
  
End


Public Sub RemoveAllBreakpoints()
  
  Dim aBreakPoint As String[]
  
  aBreakpoint = Design.GetBreakpoints()
  While aBreakpoint.Count
    Design.SetBreakpoint(aBreakpoint[0], False)
  Wend
  
  RefreshBreakpointView
  
End


Public Sub btnRemoveBreakpoint_Click()
  
  Dim aBreakPoint As String[]
  Dim iRow As Integer
  
  aBreakpoint = Design.GetBreakpoints()
  For Each iRow In gvwBreakpoint.Rows.Selection.Reverse()
    Design.SetBreakpoint(aBreakpoint[iRow], False)
  Next
  
  RefreshBreakpointView
  
End

Private Sub ToggleBreakpoints(bDisable As Boolean)
  
  Dim aBreakPoint As String[]
  Dim iRow As Integer
  
  aBreakpoint = Design.GetBreakpoints()
  
  For Each iRow In gvwBreakpoint.Rows.Selection.Reverse()
    Design.SetBreakpoint(aBreakpoint[iRow], True, bDisable)
  Next
  
End

Public Sub btnEnableBreakpoint_Click()
  
  ToggleBreakpoints(False)
  
End

Public Sub btnDisableBreakpoint_Click()
  
  ToggleBreakpoints(True)
  
End

Public Sub btnRemoveAllBreakpoint_Click()
  
  If Project.Running Then Return
  RemoveAllBreakpoints
  
End

Public Sub DefineVariable(sLocal As String, sObject As String)
  
  Dim aLocal As String[]
  Dim aObject As String[]
  Dim sVar As String
  Dim hPict As Picture
  Dim sParent As String
  Dim bBold As Boolean
  Dim hBold As Font
  Dim vLayout As Variant
  Dim I As Integer
  Dim sPrefix As String
  
  If cvwVariable.Count Then vLayout = cvwVariable.Layout
  
  aLocal = Split(sLocal, " ")
  aObject = Split(sObject, " ")
  
  If sObject <> $sLastObject Then
    
    $sLastObject = sObject
    
    Try cvwVariable.Remove("^")
    
    hBold = cvwVariable.Font.Copy()
    hBold.Bold = True
    
    With cvwVariable.Add("^", ("Current object")) ', Picture["img/16/current.png"])
      .Expanded = True
      .Font = lvwStack.Font
    End With
    
    sPrefix = " :"
    For I = 0 To aObject.Max
      sVar = aObject[I]
      If Right(sVar) = ":" Then
        sPrefix = sVar
      Else
        aObject[I] = sPrefix & aObject[I]
      Endif
    Next
    
    aObject.Sort
    
    sParent = "^"
    For I = 0 To aObject.Max
      sVar = aObject[I]
      If Right(sVar) = ":" Then
        sVar = Left(sVar)
        bBold = sVar = UCase(sVar)
        hPict = Picture["img/symbol/" & If(sVar == "S", "s-", "") & "variable.png"]
      Else
        sVar = Mid$(sVar, 3)
        aObject[I] = sVar
        With cvwVariable.Add("^" & sVar, sVar, hPict, sParent)
          If bBold Then .Font = hBold
        End With
      Endif
    Next
    
    If cvwVariable["^"].Children = 0 Then cvwVariable.Remove("^")
    
  Endif
  
  If sLocal <> $sLastLocal Then
    
    $sLastLocal = sLocal
    
    Try cvwVariable.Remove("~")
    
    hBold = cvwVariable.Font.Copy()
    hBold.Bold = True
    
    With cvwVariable.Add("~", ("Local variables")) ', Picture["img/16/local.png"])
      .Expanded = True
      .Font = lvwStack.Font
    End With
    
    For Each sVar In aLocal
      cvwVariable.Add("~" & sVar, sVar, Picture["img/symbol/symbol.png"], "~")
    Next
    
  Endif
  
  If vLayout Then cvwVariable.Layout = vLayout
  
  If wizDebug.Index <> TAB_DEBUG Then Return
  
  For Each sVar In aObject
    If Right(sVar) = ":" Then Continue
    Design.Command("&V^" & sVar & "\t" & sVar)
  Next
  
  For Each sVar In aLocal
    Design.Command("&V~" & sVar & "\t" & sVar)
  Next
  
  ' If bFill Then
  '   
  '   ClearView(hView)
  '   
  '   If hView = tbvLocal Then
  '     $aLocal = aVar
  '     $aValLocal = New String[$aLocal.Count]
  '     cCol = $cLocal
  '     bSort = True 'chkSortLocal.Value
  '   Else
  '     $aObject = aVar
  '     $aValObject = New String[$aObject.Count]
  '     cCol = $cObject
  '     bSort = True 'chkSortObject.Value
  '   Endif
  '   
  '   While iPos <= aVar.Max
  '     sVar = aVar[iPos]
  '     If Right(sVar) = ":" Then 
  '       If iPos = aVar.Max Or If Right(aVar[iPos + 1]) = ":" Then
  '         aVar.Remove(iPos)
  '         Continue
  '       Endif
  '     Endif
  '     Inc iPos
  '   Wend
  '   
  '   If bSort Then SortVariable(aVar)
  '   
  '   If hView = tbvLocal Then
  '     UpdateLocal
  '   Else
  '     hView.Rows.Count = aVar.Count
  '   Endif
  ' 
  '   For iPos = 0 To aVar.Max
  '     cCol[aVar[iPos]] = iPos
  '     If Right(aVar[iPos]) = ":" Then hView[iPos, 0].ColumnSpan = 2
  '   Next
  '   
  ' Endif
  ' 
  ' If wizDebug.Index <> iIndex Then Return
  ' 
  ' For Each sVar In aVar
  '   If Right(sVar) = ":" Then Continue
  '   Design.Command("&" & sCmd & sVar & "\t" & sVar)
  ' Next
  '   
  
End

Public Sub AddVariable(sVar As String, sValue As String, Optional bAssign As Boolean)
  
  If Not cvwVariable.Exist(sVar) Then Return
  
  If bAssign Then
    If Left(sValue) = "!" Then
      With cvwVariable[sVar]
        Balloon.Error(Mid$(sValue, 2), cvwVariable, Design.BalloonX, Design.BalloonY)
      End With
    Endif
    Design.Command("&V" & sVar & "\t" & Mid$(sVar, 2))
  Else
    cvwVariable[sVar][1] = sValue
  Endif
  
End

Public Sub cvwVariable_Activate()
  
  Dim sExpr As String 
  Dim sVal As String 
  
  With cvwVariable.Current
    
    If .Children Then Return
    
    sExpr = .Text
    sVal = .[1]
    
    If Left(sVal) = "(" Then 
      Design.Command("#X" & sExpr & "\t" & sExpr)
    Else
      If .Key Begins "@" Then Return
      .Editable = True
      .Rename(1)
      .Editable = False
    Endif
    
  End With
  
End

Public Sub OnProjectDebug()
  
  $sLastLocal = ""
  $sLastObject = ""
  If Settings["/ShowDebugPanelAutomatically", True] Then FDebugButton.SelectButton(TAB_CONSOLE)
  
End

Public Sub OnProjectDebugState()
  
  panBreakpoint.Enabled = Not Design.IsRunning()
  gvwBreakpoint.Enabled = panBreakpoint.Enabled
  
End


Public Sub ShowDebugging()
  
  If Settings["/ShowDebugPanelAutomatically", True] Then FDebugButton.SelectButton(TAB_DEBUG)
  
End

Public Sub cvwVariable_Rename()
  
  Dim sVar As String
  
  With cvwVariable.Current
    
    sVar = .Key
    
    Design.SetBalloon(cvwVariable, cvwVariable.Columns[1].X + Desktop.Scale, .Y + .H / 2)
    Design.Command("=V" & sVar & "\t" & .Text & " = " & .[1])
    'Design.Command("&V" & sVar & "\t" & .Text)
    
  End With
  
End

Public Sub btnVcCommit_Click()

  FVersionControl.Run

End

Public Sub InsertVersionControl(sText As String)
  
  trmVersionControl.Print(Replace(sText, "\n", "\r\n"))
  
End

Public Sub btnVcUpdate_Click()

  VersionControl.Update

End

Public Sub btnVcRevert_Click()

  VersionControl.Revert

End

Public Sub btnVcAddAll_Click()

  FMain.mnuAddVersionAll_Click()

End

Public Sub OnVersionControlChange()

  UpdateView

  If VersionControl.Enabled Then
    lblVcName.Text = VersionControl.Name
    UpdateBranchMenu
  Endif
  
End

Private Sub UpdateBranchMenu()

  Dim sCurrent As String
  Dim aBranches As String[]
  Dim sBranch As String
  Dim hMenu As Menu
  
  aBranches = VersionControl.GetBranches(ByRef sCurrent)
  
  If Not sCurrent Then
    btnVcBranch.Hide
  Else
    btnVcBranch.Show
    btnVcBranch.Text = sCurrent
    mnuVcBranch.Children.Clear
    
    For Each sBranch In aBranches
      hMenu = New Menu(mnuVcBranch) As "mnuVcBranchSet"
      hMenu.Text = sBranch
      hMenu.Tag = sBranch
      hMenu.Radio = True
      hMenu.Value = sBranch = sCurrent
    Next
  Endif

End

Public Sub mnuVcBranchSet_Click()
  
  VersionControl.SetBranch(Last.Tag)
  UpdateBranchMenu
  
End

