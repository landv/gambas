' Gambas class file

Private $sMenuSystem As String
Private $sGroupSystem As String
Private $sDepSystem As String
Private $sFileSystem As String
Private $cCatCache As New Collection
Private $sLastCat As String
Private $aDep As String[]
Private $aFile As String[]

Private Const TAB_GROUP As Integer = 3
Private Const TAB_MENU As Integer = 4
Private Const TAB_MIME As Integer = 5
Private Const TAB_DEP As Integer = 6
Private Const TAB_FILE As Integer = 7
Private Const TAB_TEST As Integer = 8
Private Const TAB_DIR As Integer = 9
Private Const TAB_CREATE As Integer = 10

Private Sub HasDebianTarget() As Boolean
  
  If Project.Systems.Exist("debian") Or If Project.Systems.Exist("ubuntu") Then Return True
  
End


Private Sub MakeChangeLog() As String

  Dim aLine As String[]
  Dim sLine As String
  Dim sChangeLog As String
 
  aLine = Split(txtChange.Text, "\n")
  For Each sLine In aLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If Left(sLine) <> "-" Then sLine = "- " & sLine
    sChangeLog &= sLine & "\n"
  Next

  sChangeLog = "* " & Package.GetChangeDate() & "\n" & sChangeLog & "\n"

  sChangeLog &= txtChangeLog.Text
  Return sChangeLog
  
End

Public Sub Form_Open()
  
  If Project.Maintainer Then
    txtName.Text = Project.Maintainer
  Else 
    txtName.Text = Settings["/Identity/Name", User.Name]
  Endif
  
  txtName.SelectAll
  txtName.SetFocus
  
  If Project.Address Then
    txtMail.Text = Project.Address
  Else 
    txtMail.Text = Settings["/Identity/Mail", User.Name & "@" & System.Host]
  Endif
  
  If Project.Vendor Then
    txtVendor.Text = Project.Vendor
  Else
    txtVendor.Text = Settings["/Packager/Vendor"]
  Endif
    
  If Project.VendorPrefix Then
    txtVendorPrefix.Text = Project.VendorPrefix
  Else
    txtVendorPrefix.Text = Settings["/Packager/VendorPrefix"]
  Endif
    
  If Project.License Then
    txtLicense.Text = Project.License
  Else 
    txtLicense.Text = Settings["/Packager/License", "General Public License"]
  Endif
  
  If Project.Url Then
    txtUrl.Text = Project.Url
  Else 
    txtUrl.Text = Settings["/Packager/URL", Project.DEFAULT_URL]
  Endif

  txtDescribe.Text = Project.Description

  Try txtChangeLog.Text = File.Load(Project.Dir &/ ".hidden" &/ "CHANGELOG")
  txtChangeLog.Pos = 0
  txtTests.Text = Project.ExtraAutoconfTest

  If Project.Prefix
    chkPrefix.Value = True
  Else
    chkPrefix.Value = Settings["/Packager/UsePrefix", False]
  Endif

  txtPackageVersion.Value = Max(1, Project.PackageVersion)

  chkSignature.Value = Project.PackageSignature
  
  spnVersionMin.MinValue = 0
  spnVersionMin.MaxValue = CInt(Split(System.FullVersion, ".")[1]) 
  If Project.RuntimeVersion Then
    chkVersionMin.Value = True
    spnVersionMin.Value = CInt(Split(Project.RuntimeVersion, ".")[1])
  Else
    chkVersionMin.Value = False
    spnVersionMin.Value = spnVersionMin.MaxValue
  Endif
  
  Project.SetEditorFont(txtDesktop)

  'InitSystemControls
  InitSystems

  If Project.Type <> Project.TYPE_NORMAL Then
    chkPrefix.Value = True
    chkPrefix.Enabled = False
  Endif 

  UpdatePackageName

  cmbCategories.List = Split(File.Load("install/categories"), "\n", "", True)

  txtLicense.List = ["General Public License", "Freeware", "Public Domain", "Lesser General Public License", "Other License(s)", "Non-Free License"]
  
  chkCreateDir.Value = Project.CreateEachDirectory

  tvwDep.Columns.Count = 3
  tvwDep.Columns[0].Text = ("Package")
  tvwDep.Columns[1].Text = ("Min. version")
  tvwDep.Columns[2].Text = ("Max. version")
  tvwDep.Columns[0].Width = Desktop.Scale * 32
  tvwDep.Columns[1].Width = Desktop.Scale * 16
  tvwDep.Columns[2].Width = Desktop.Scale * 16

  tvwFile.Columns.Count = 2
  tvwFile.Columns[0].Text = ("File or directory")
  tvwFile.Columns[1].Text = ("Destination directory")
  tvwFile.Columns[0].Width = Desktop.Scale * 24
  tvwFile.Columns[1].Width = Desktop.Scale * 40
  'tvwFile.Rows.H = Desktop.Scale * 4
 
  chkDep.Value = Project.SameDependencies
  chkFile.Value = Project.SameFiles
  
  lstMime.List = Project.MimeTypes
  txtDesktop.Text = Project.ExtraDesktop

  edtLog.ReadConfig
  edtLog.ShowModified = False
  edtLog.ShowLineNumber = False
  edtLog.ShowIcon = False
  edtLog.ShowExpand = False
  edtLog.ShowPosition = False
  edtLog.Font = Font[Settings["/ConsoleFont", Project.DEFAULT_FONT]]

End

Public Sub wizInstall_Cancel()

  Me.Close  

End

Private Sub UpdatePackageName()
  
  txtPackage.Text = Package.GetPackageFullName(txtVendor.Text, txtVendorPrefix.Text, chkPrefix.Value, True)
  
End


Public Sub chkPrefix_Click()

  UpdatePackageName

End

Private Sub GetSystemControls() As Control[]
  
  Dim aObject As New Control[]
  Dim hCtrl As Control
  Dim hCont As Container

  For Each hCtrl In panSystem.Children
    If Not hCtrl Is Container Then Continue
    hCont = hCtrl
    For Each hCtrl In hCont.Children
      If hCtrl Is CheckBox Then
        aObject.Add(hCtrl)
      Endif
    Next
  Next
  
  Return aObject  
  
End

Private Sub InitSystemControls()
  
  Dim hCtrl As Control
  Dim hCont As HBox
  Dim aMsg As New String[]
  Dim sMsg As String
  Dim hPanel As Panel
  Dim hCheckBox As CheckBox
  Dim hPictureBox As PictureBox

  Inc Application.Busy
  
  Package.CheckProgram
  
  For Each hCtrl In panSystem.Children
    
    If Not hCtrl Is Container Then Continue
    hCont = hCtrl
  
    'hCont.H = Desktop.Scale * 6
    sMsg = Package.CheckSystem(hCont.Tag)
    If sMsg And If Not aMsg.Exist(sMsg) Then aMsg.Add(sMsg)
    
    hPanel = Null
    For Each hCtrl In hCont.Children
      If hCtrl Is PictureBox Then
        hPictureBox = hCtrl
      Else If hCtrl Is CheckBox Then 
        hCheckBox = hCtrl
      Else If hCtrl Is Panel And If Panel(hCtrl).Tag Then 
        hPanel = hCtrl
      Endif 
    Next
    
    hCheckBox.Enabled = Not sMsg
    If Not hCheckBox.Enabled Then hCheckBox.Value = False

    With hPictureBox
      .Enabled = hCheckBox.Value
      .Width = hCont.H - hCont.Padding * 2
    End With
    
  Next
  
  If aMsg.Count Then
    txtMessage.Text = aMsg.Join("<br>")
    txtMessage.Show
  Else
    txtMessage.Hide
  Endif
  
  Dec Application.Busy
  
End


Private Sub InitSystems()

  Dim hCtrl As CheckBox

  For Each hCtrl In GetSystemControls()
    hCtrl.Value = hCtrl.Enabled And Project.Systems.Find(hCtrl.Parent.Tag) >= 0
  Next

End

Public Sub wizInstall_Close()

  Project.WriteProject
  
  spnCreatePackage.Show
  spnCreatePackage.Start
  
  ShowMessage(("Creating packages..."))

  If Not Package.Make() Then 
    ShowMessage(("The packages have been successfully created."))
  Endif
  
  spnCreatePackage.Stop
  spnCreatePackage.Hide
  
End

Private Function CheckSys(cCol As Collection) As Boolean

  Dim sSys As String

  For Each sSys In Project.Systems
    If sSys = "autotools" Or If sSys = "self" Then Continue
    If Not cCol.Exist(sSys) Then Return True
  Next

End


Public Sub wizInstall_BeforeChange()

  Dim sFile As String
  Dim aFile As String[]
  Dim bEnabled As Boolean
  Dim sSys As String
  Dim aVer As String[]

  Select Case wizInstall.Index

    Case 0
      
      ' If Project.Type = Project.TYPE_COMPONENT Then
      '   
      '   If InStr(Project.Name, ".") = 0 Then
      '     Message.Warning(("Your project is a component, so its name must be prefixed by the vendor name followed by a dot:") & " <tt>&lt;vendor&gt;." & Project.Name & "</tt>\n\n" & ("Please rename your project if you want to create a package."))
      '     Stop Event
      '     Return
      '   Endif
      '   
      ' Endif
      
      
      Project.Maintainer = Trim(txtName.Text)
      Project.Address = Trim(txtMail.Text)
      Project.Vendor = Trim(txtVendor.Text)
      Project.VendorPrefix = Trim(txtVendorPrefix.Text)
      Project.License = Trim(txtLicense.Text)
      Project.Url = Trim(txtUrl.Text)
      
      If Not Project.Maintainer Then
        Message.Warning(("Please enter your name."))
        Stop Event
        Return
      Endif
      If Not Project.Address Then
        Message.Warning(("Please enter your e-mail address."))
        Stop Event
        Return
      Endif
      
      If Project.Type = Project.TYPE_LIBRARY Then
        If Not Project.Vendor Then
          Message.Warning(("Please enter the vendor name."))
          Stop Event
          Return
        Endif
      Endif

      Project.Description = txtDescribe.Text
      Project.Prefix = chkPrefix.Value
      Project.PackageName = txtPackage.Text
      Project.PackageVersion = txtPackageVersion.Value
      Project.PackageSignature = chkSignature.Value

    Case 1
      
      If Not Trim(txtChange.Text) Then 
        If Message.Warning(("There is no CHANGELOG entry for this release."), ("Continue"), ("Cancel")) = 2 Then 
          Stop Event
          Return 
        Endif
      Endif
      Package.ChangeLog = MakeChangeLog()
      If Not Package.ChangeLog Then
        Message.Warning(("Please enter the first CHANGELOG entry."))
        Stop Event
        Return
      Endif

      InitSystemControls

    Case 2
      
      Project.Systems = GetSystems()
      If Project.Systems.Count = 0 Then
        Message.Warning(("Please choose at least one target distribution."))
        Stop Event
        Return
      Endif
      
      bEnabled = False
      For Each sSys In Project.Systems
        If sSys <> "autotools" And If sSys <> "self" Then
          bEnabled = True
          Break
        Endif
      Next

      wizInstall[TAB_GROUP].Enabled = bEnabled
      wizInstall[TAB_MENU].Enabled = bEnabled

      bEnabled = False
      For Each sSys In Project.Systems
        If sSys <> "autotools" Then
          bEnabled = True
          Break
        Endif
      Next

      wizInstall[TAB_DEP].Enabled = bEnabled
      wizInstall[TAB_FILE].Enabled = bEnabled
      
      wizInstall[TAB_TEST].Enabled = Project.Systems.Exist("autotools")
      
      If Project.Type <> Project.TYPE_NORMAL
        wizInstall[TAB_MENU].Enabled = False
        wizInstall[TAB_MIME].Enabled = False
      Endif
      
    Case TAB_GROUP
      
      If CheckSys(Project.Groups) Then
        If cmbGroup.Count > 1 Then
          Message.Warning(("Please choose the package group for each target distribution."))
        Else 
          Message.Warning(("Please choose a package group."))
        Endif
        Stop Event
        Return
      Endif

    Case TAB_MENU
      
      If CheckSys(Project.Menus) Then
        If cmbMenu.Count > 1 Then
          Message.Warning(("Please choose the menu location for each target distribution."))
        Else 
          Message.Warning(("Please choose a menu location."))          
        Endif 
        Stop Event
        Return
      Endif
      
    Case TAB_MIME
      
      Project.MimeTypes = lstMime.List
      Project.ExtraDesktop = Trim(txtDesktop.Text)
      
    Case TAB_DEP
      
      If chkVersionMin.Value Then
        aVer = Split(System.FullVersion, ".")
        aVer[1] = CStr(spnVersionMin.Value)
        Project.RuntimeVersion = aVer[0] & "." & aVer[1]
      Else
        Project.RuntimeVersion = ""
      Endif
    
    Case TAB_FILE
      
      tvwFile.Save
      For Each sFile In $aFile
        aFile = Scan(sFile, "*\t*")
        If Not Exist(Project.Dir &/ ".hidden" &/ aFile[0]) Then
          Message.Warning(Subst(("Cannot found extra file: &1"), aFile[0]))
          Stop Event
          Return
        Endif
        
        If aFile[1] = "" Then
          Message.Warning(("Please choose a target directory for each extra file."))
          Stop Event
          Return
        Endif
        
        If HasDebianTarget() Then
        
          If InStr(aFile[0], " ") Then
            Message.Warning(("Debian packaging system cannot handle spaces in file names."))
            Stop Event
            Return
          Endif
          
          If InStr(aFile[1], " ") Then
            Message.Warning(("Debian packaging system cannot handle spaces in directories."))
            Stop Event
            Return
          Endif
          
        Endif
      Next
    
    Case TAB_TEST
      
      Project.ExtraAutoconfTest = txtTests.Text
    
    Case TAB_DIR
      
      Package.Dir = dchInstall.SelectedPath
      If Package.Dir = Project.Dir Or If Package.Dir Begins Project.Dir &/ "/" Then 
        Message.Warning(("The package cannot be stored inside the project directory."))
        Stop Event 
        Return 
      Endif
      Settings["/FMakeInstall/PackagePath"] = Package.Dir
      
    Case TAB_CREATE
      
      ' If chkSignature.Value And If Not txtPassPhrase.Text Then
      '   txtPassPhrase.SetFocus
      '   Balloon.Warning(("Please enter your passphrase."), txtPassPhrase)
      '   Stop Event
      '   Return
      ' Endif
      ' Package.Signature = If(chkSignature.Value, txtPassPhrase.Text, "")
      
  End Select
  
End 

Private Sub UpdateDepCombo()

  If chkDep.Value Then
    cmbDep.Hide
    cmbDep.Index = 0
  Else  
    cmbDep.Visible = cmbDep.Count > 1 
  Endif
  
End

Private Sub UpdateFileCombo()

  If chkFile.Value Then
    cmbFile.Hide
    cmbFile.Index = 0
  Else  
    cmbFile.Visible = cmbFile.Count > 1 
  Endif
  
End

Public Sub wizInstall_Change()

  Select Case wizInstall.Index

    Case 1
      lblChangeDate.Text = Package.GetChangeDate()
      If Not txtChangeLog.Text Then txtChange.Text = ("Initial release")
      txtChange.SetFocus
      
    Case TAB_GROUP
      InitGroupTree
      cmbGroup.Visible = cmbGroup.Count > 1
      
    Case TAB_MENU
      InitMenuTree
      cmbMenu.Visible = cmbMenu.Count > 1
      
    Case TAB_MIME
      lstMime.SetFocus
    
    Case TAB_DEP
      FillComboWithSystems(cmbDep)
      chkDep.Visible = cmbDep.Count > 1
      UpdateDepCombo
      'cmbDep_Click
      
    Case TAB_FILE
      FillComboWithSystems(cmbFile)
      chkFile.Visible = cmbFile.Count > 1
      UpdateFileCombo
      'cmbFile_Click
      
    Case TAB_DIR
      dchInstall.SelectedPath = Settings["/FMakeInstall/PackagePath", System.User.Home]
      
    Case TAB_CREATE
      chkSignature.Value = Settings["/FMakeInstall/SignPackage", False]
      panError.Hide
      
  End Select
  
  btnCreateNow.Visible = wizInstall.Index <> TAB_CREATE

End

Private Function GetSystems() As String[]

  Dim hCtrl As CheckBox
  Dim aSys As New String[]

  For Each hCtrl In GetSystemControls()
    If hCtrl.Value Then aSys.Add(hCtrl.Parent.Tag)
  Next

  Return aSys

End



Private Function GetSystemFromName(sName As String) As String

  Dim hCtrl As CheckBox

  For Each hCtrl In GetSystemControls()
    If Replace(hCtrl.Text, "&", "") = sName Then Return hCtrl.Parent.Tag
  Next

End


Public Function GetSystemName(sTag As String) As String

  Dim hCtrl As CheckBox

  For Each hCtrl In GetSystemControls()
    If hCtrl.Parent.Tag = sTag Then Return Replace(hCtrl.Text, "&", "")
  Next

End



Public Sub AddLog(sText As String, Optional bNoNewLine As Boolean)

  If Not bNoNewLine Then sText &= "\n"
  edtLog.Goto(0, edtLog.Count)
  edtLog.ReadOnly = False
  edtLog.Print(sText)
  edtLog.ReadOnly = True
  Wait

End

Public Sub ClearLog()
  
  edtLog.Clear
  Wait
  
End


Private Sub FillComboWithSystems(hCombo As ComboBox)

  Dim sSys As String
  Dim hCtrl As CheckBox

  hCombo.Clear

  For Each hCtrl In GetSystemControls()
    sSys = hCtrl.Parent.Tag 
    If hCombo = cmbDep Or If hCombo = cmbFile Then
      If sSys = "autotools" Then Continue
    Else If hCombo = cmbGroup Or If hCombo = cmbMenu Then
      If sSys = "autotools" Or If sSys = "self" Then Continue
    Endif
    If hCtrl.Value Then hCombo.Add(GetSystemName(sSys))
  Next

  hCombo.Index = 0

End


Private Sub InitMenuTree()

  FillComboWithSystems(cmbMenu)

End


Private Sub InitGroupTree()

  FillComboWithSystems(cmbGroup)

End

Private Sub FindCategoriesFromMenu(sMenu As String) As String
  
  Dim sCat As String
  Dim aCat As New String[]
  
  sMenu = Replace(sMenu, " ", "")
  
  For Each sCat In Split(sMenu, "/")
    If cmbCategories.Find(sCat) >= 0 Then aCat.Add(sCat)
  Next
  
  Return aCat.Join(";")
  
End


Private Sub FillTreeWith(hTree As TreeView, sTitle As String, sIcon As String, sFile As String, hTextBox As TextBox, sSelect As String, Optional bCat As Boolean)

  Dim hFile As File
  Dim sLig As String
  Dim iLevel As Integer
  Dim iNewLevel As Integer
  Dim sParent As String
  Dim sKey As String
  Dim iPos As Integer
  Dim sCat As String
  Dim sAdd As String
  Dim sElt As String
  
  hTree.Clear
  hTree.Add("/", sTitle, Picture[sIcon]).Expanded = True
  sParent = "/"
  
  If bCat Then
    $cCatCache.Clear
    $sLastCat = ""
  Endif

  hFile = Open sFile

  While Not Eof(hFile)

    Line Input #hFile, sLig
    sLig = RTrim(sLig)
    If Not sLig Then Continue

    If bCat Then
      iPos = InStr(sLig, "#")
      If iPos Then 
        sCat = Trim(Mid(sLig, iPos + 1))
        sLig = RTrim(Left(sLig, iPos - 1))
      Else 
        sCat = ""
      Endif  
    Endif

    If InStr(sLig, "/") Then 
    
      sKey = "/"
      sParent = "/"
      
      For Each sElt In Split(Trim(sLig), "/")
        sKey &/= sElt
        If Not hTree.Exist(sKey) Then
          hTree.Add(sKey, File.Name(sKey),, sParent).Expanded = True
          hTree[sParent].Expanded = True
        Endif
        sParent = sKey
      Next
      
      sParent = File.Dir(sLig)
      If sParent = "" Then sParent = "/"
      sLig = File.Name(sLig)
    
    Else

      iNewLevel = Len(sLig) - Len(LTrim(sLig))
  
      If iNewLevel > iLevel Then
        sParent = sKey
      Else If iNewLevel < iLevel Then
        While iLevel > iNewLevel
          hTree.MoveTo(sParent)
          If hTree.MoveParent() Then
            sParent = ""
          Else
            sParent = hTree.Item.Key
          Endif
          Dec iLevel
        Wend
      Endif
  
      iLevel = iNewLevel

      If sParent = "" Then sParent = "/"
      sKey = sParent &/ Trim(sLig)
  
      hTree.Add(sKey, Trim(sLig),, sParent)
      hTree[sParent].Expanded = True
      'DEBUG sKey
    
    Endif
    
    If bCat Then
      sAdd = FindCategoriesFromMenu(sKey)
      If sAdd And If sCat Then sCat &= ";"
      $cCatCache[sKey] = sCat & sAdd
    Endif 
    
  Wend

  Close #hFile

  sSelect = "/" &/ sSelect
  hTextBox.Clear
  If sSelect Then
    Try hTree[sSelect].Selected = True
    Try hTree[sSelect].EnsureVisible
  Endif

End



Public Sub cmbMenu_Click()

  $sMenuSystem = GetSystemFromName(cmbMenu.Text)

  cmbCategories.Text = Project.Categories[$sMenuSystem]
  FillTreeWith(tvwMenu, ("Menus"), "img/16/menu.png", "install/menu" &/ $sMenuSystem, txtMenu, Project.Menus[$sMenuSystem], True)

End

Private Sub AddCategory(sAdd As String)
  
  Dim sAll As String = cmbCategories.Text & ";" & sAdd
  Dim aCat As New String[]
  Dim sCat As String
  
  For Each sCat In Split(sAll, ";").Sort()
    If Not sCat Then Continue 
    If aCat.Exist(sCat) Then Continue 
    aCat.Add(sCat)
  Next
  
  cmbCategories.Text = aCat.Join(";")
  
End

Private Sub RemoveCategory(sAdd As String)
  
  Dim aRemove As String[] = Split(sAdd, ";")
  Dim aCat As New String[]
  Dim sCat As String
  
  For Each sCat In Split(cmbCategories.Text, ";").Sort()
    If Not sCat Then Continue 
    If aRemove.Exist(sCat) Then Continue 
    aCat.Add(sCat)
  Next
  
  cmbCategories.Text = aCat.Join(";")
  
End



Public Sub tvwMenu_Select()

  Dim sMenu As String

  If tvwMenu.Item.Children Then Return

  RemoveCategory($sLastCat)
  $sLastCat = $cCatCache[tvwMenu.Key]
  AddCategory($sLastCat)

  tvwMenu.MoveCurrent
  While tvwMenu.Item.Key <> "/"
    sMenu = tvwMenu.Item.Text &/ sMenu
    tvwMenu.MoveParent
  Wend

  txtMenu.Text = sMenu
  
  'sSys = GetSystemFromName(cmbMenu.Text)
  
  Project.Menus[$sMenuSystem] = sMenu
  Project.Categories[$sMenuSystem] = cmbCategories.Text
  
End

Public Sub cmbGroup_Click()

  $sGroupSystem = GetSystemFromName(cmbGroup.Text)

  txtGroup.Clear
  FillTreeWith(tvwGroup, ("Groups"), "icon:/small/package", "install/group" &/ $sGroupSystem, txtMenu, Project.Groups[$sGroupSystem])

End

Public Sub tvwGroup_Select()

  Dim sGroup As String

  tvwGroup.MoveCurrent
  While tvwGroup.Item.Key <> "/"
    sGroup = tvwGroup.Item.Text &/ sGroup
    tvwGroup.MoveParent
  Wend

  txtGroup.Text = sGroup
  Project.Groups[GetSystemFromName(cmbGroup.Text)] = sGroup

End

Public Sub cmbCategories_LostFocus()

  AddCategory("")
  Project.Categories[$sMenuSystem] = cmbCategories.Text  

End

Public Sub cmbCategories_Click()

  Dim sCat As String = cmbCategories[cmbCategories.Index].Text
  
  cmbCategories.Text = Project.Categories[$sMenuSystem]
  AddCategory(sCat)  
  Project.Categories[$sMenuSystem] = cmbCategories.Text  

End

Public Sub tvwMenu_Collapse()

  tvwMenu.Item.Expanded = True  

End

Public Sub tvwGroup_Collapse()

  tvwGroup.Item.Expanded = True    

End

Public Sub cmbDep_Click()

  $sDepSystem = GetSystemFromName(cmbDep.Text)

  $aDep = Split(Project.ExtraDependencies[$sDepSystem], "\n")
  tvwDep.Rows.Count = $aDep.Count
  'txtGroup.Clear
  'lstDep.List = Split(Project.ExtraDependencies[$sDepSystem], ",")

End

Public Sub chkDistro_Click()

  Dim hCheckBox As CheckBox = Last
  Dim hPictureBox As PictureBox = hCheckBox.Parent.Children[0]
  
  hPictureBox.Enabled = hCheckBox.Value
  
End

Public Sub txtVendor_Change()

  UpdatePackageName  

End

Public Sub txtVendorPrefix_Change()

  UpdatePackageName  

End

Public Sub chkCreateDir_Click()

  Project.CreateEachDirectory = chkCreateDir.Value

End

Public Sub tvwDep_Click()

  tvwDep.Edit

End

Public Sub tvwDep_Data(Row As Integer, Column As Integer)

  Dim aRow As String[] = Split($aDep[Row], "\t")
  Try tvwDep.Data.Text = aRow[Column]

End

Private Sub SaveExtraDependencies()
  
  Project.ExtraDependencies[$sDepSystem] = $aDep.Join("\n")
  
End

Private Sub SaveExtraFiles()
  
  Project.ExtraFiles[$sFileSystem] = $aFile.Join("\n")
  
End


Public Sub tvwDep_Save(Row As Integer, Column As Integer, Value As String)

  Dim aRow As String[]
  Dim iInd As Integer
  Dim sCar As String
 
  For iInd = 1 To String.Len(Value)
    sCar = String.Mid$(Value, iInd, 1)
    If Len(sCar) = 1 Then
      If Column = 0 And If IsLetter(sCar) Then Continue
      If IsDigit(sCar) Or If InStr("-.", sCar) Then Continue
    Endif
    Balloon.Warning(("Incorrect characters"), tvwDep, tvwDep.Editor.ScreenX - tvwDep.ScreenX + tvwDep.Editor.W / 2, tvwDep.Editor.ScreenY - tvwDep.ScreenY + tvwDep.Editor.H / 2)
    Stop Event
    Return
  Next
  
  aRow = Split($aDep[Row], "\t")
  
  While aRow.Count < 3
    aRow.Add("")
  Wend
  
  aRow[Column] = Value
  $aDep[Row] = aRow.Join("\t")
  SaveExtraDependencies

End

Public Sub btnAddDep_Click()

  $aDep.Add("\t\t")
  SaveExtraDependencies
  Inc tvwDep.Rows.Count
  tvwDep.Save
  tvwDep.MoveTo($aDep.Max, 0)
  tvwDep.Edit

End

Public Sub tvwDep_Insert()

  btnAddDep.Value = True

End

Public Sub btnRemoveDep_Click()

  If tvwDep.Row < 0 Then Return
  tvwDep.Cancel
  $aDep.Remove(tvwDep.Row)
  SaveExtraDependencies
  Dec tvwDep.Rows.Count

End

Public Sub btnUpDep_Click()

  If tvwDep.Row >= 1 Then
    tvwDep.Save
    Swap $aDep[tvwDep.Row], $aDep[tvwDep.Row - 1]
    SaveExtraDependencies
    tvwDep.Refresh
    Dec tvwDep.Row
    tvwDep.Edit
  Endif

End

Public Sub btnDownDep_Click()

  If tvwDep.Row < $aDep.Max Then
    tvwDep.Save
    Swap $aDep[tvwDep.Row], $aDep[tvwDep.Row + 1]
    SaveExtraDependencies
    tvwDep.Refresh
    Inc tvwDep.Row
    tvwDep.Edit
  Endif
  

End

Public Sub btnClearDep_Click()

  If Message.Warning(("Do you really want to remove all extra dependencies?"), ("Cancel"), ("Remove")) <> 2 Then Return
  tvwDep.Cancel
  $aDep.Clear
  SaveExtraDependencies
  tvwDep.Rows.Count = 0

End

Public Sub chkDep_Click()

  Project.SameDependencies = chkDep.Value
  UpdateDepCombo

End

Public Sub chkFile_Click()

  Project.SameFiles = chkFile.Value
  UpdateFileCombo

End

Public Sub cmbFile_Click()

   $sFileSystem = GetSystemFromName(cmbFile.Text)

  $aFile = Split(Project.ExtraFiles[$sFileSystem], "\n")
  tvwFile.Rows.Count = $aFile.Count
 
End

Public Sub tvwFile_Insert()

  btnAddFile.Value = True  

End


Public Sub tvwFile_Data(Row As Integer, Column As Integer)

  Dim aRow As String[] = Split($aFile[Row], "\t")
  Try tvwFile.Data.Text = aRow[Column]

End

Public Sub btnAddFile_Click()

  Dim sFic As String
  
  sFic = FSelectExtraFile.Run("")
  If Not sFic Then Return
  
  $aFile.Add(sFic & "\t")
  SaveExtraFiles
  Inc tvwFile.Rows.Count
  tvwFile.MoveTo($aFile.Max, 0)
  'tvwFile.Refresh
  'tvwFile.Current.Text = sFic
  'tvwFile.Save
  'tvwFile_Save(tvwFile.Row, tvwFile.Column, sFic)
  
End

Public Sub btnRemoveFile_Click()

  If tvwFile.Row < 0 Then Return
  tvwFile.Cancel
  $aFile.Remove(tvwFile.Row)
  SaveExtraFiles
  Dec tvwFile.Rows.Count

End

Public Sub btnUpFile_Click()

  If tvwFile.Row >= 1 Then
    tvwFile.Save
    Swap $aFile[tvwFile.Row], $aFile[tvwFile.Row - 1]
    SaveExtraFiles
    tvwFile.Refresh
    Dec tvwFile.Row
  Endif

End

Public Sub btnDownFile_Click()

  If tvwFile.Row < $aFile.Max Then
    tvwFile.Save
    Swap $aFile[tvwFile.Row], $aFile[tvwFile.Row + 1]
    SaveExtraFiles
    tvwFile.Refresh
    Inc tvwFile.Row
  Endif

End

Public Sub btnClearFile_Click()

  If Message.Warning(("Do you really want to remove all extra files?"), ("Cancel"), ("Remove")) <> 2 Then Return
  tvwFile.Cancel
  $aFile.Clear
  SaveExtraFiles
  tvwFile.Rows.Count = 0

End

Public Sub tvwFile_Save(Row As Integer, Column As Integer, Value As String)

  Dim aRow As String[]
  aRow = Split($aFile[Row], "\t")
  
  While aRow.Count < 2
    aRow.Add("")
  Wend
  
  aRow[Column] = Value
  $aFile[Row] = aRow.Join("\t")
  SaveExtraFiles

End

Public Sub tvwFile_Click()

  tvwFile.EditWith(txtFileDest)

End

Public Sub txtFileDest_Click()

  Dim sFic As String

  If tvwFile.Column = 0 Then
    
    sFic = FSelectExtraFile.Run(tvwFile.Current.Text)
    If Not sFic Then Return
    
    txtFileDest.Text = sFic
    tvwFile.Save

    'tvwFile.Current.Text = sFic
    'tvwFile_Save(tvwFile.Row, tvwFile.Column, sFic)
    'tvwFile.Refresh
    ' tvwFile.Edit(Dir(Project.Dir, "*[^~]", gb.File), True)
    
  Else If tvwFile.Column = 1 Then
  
    Dialog.Title = ("Select the destination directory")
    Dialog.Path = tvwFile.Current.Text
    If Dialog.SelectDirectory() Then Return
    
    txtFileDest.Text = Dialog.Path
    tvwFile.Save

    'tvwFile.Current.Text = Dialog.Path
    'tvwFile_Save(tvwFile.Row, tvwFile.Column, Dialog.Path)
    'tvwFile.Refresh
    
  Endif
  

End

Public Sub ShowError(sMsg As String)

  txtError.Text = Replace(sMsg, "\n", "<br>")
  txtError.Foreground = Color.Red
  spnCreatePackage.H = Desktop.Scale
  panError.Show
  
End

Public Sub ShowMessage(sMsg As String)
  
  txtError.Text = Replace(sMsg, "\n", "<br>")
  txtError.Foreground = Color.TextForeground
  spnCreatePackage.H = Desktop.Scale
  panError.Show
  
End

Public Sub txtVendor_KeyPress()

  Project.OnVendorKeyPress

End

Public Sub txtVendorPrefix_KeyPress()

  Project.OnVendorKeyPress(True)

End

Public Sub btnCopy_Click()

  Clipboard.Copy(edtLog.Text, "text/plain;charset=utf-8")

End

Public Sub chkSignature_Click()

  Settings["/FMakeInstall/SignPackage"] = CBool(chkSignature.Value)
  txtPassPhrase.Enabled = chkSignature.Value
  If txtPassPhrase.Enabled Then txtPassPhrase.SetFocus

End

Public Sub panError_Arrange()

  spnCreatePackage.W = spnCreatePackage.H

End

Public Sub Form_Arrange()

  btnCreateNow.Move(Desktop.Scale, Me.ClientH - Desktop.Scale - btnCreateNow.H)

End

Public Sub btnCreateNow_Click()

  Dim iIndex As Integer
  Dim bSave As Boolean
  
  'wizInstall.Animated = False
  bSave = Application.Animations
  Application.Animations = False
  Do
    iIndex = wizInstall.Index
    wizInstall.MoveNext
    If iIndex = TAB_CREATE Then Break
    If wizInstall.Index = iIndex Then Break
  Loop
  Application.Animations = bSave
  'wizInstall.Animated = True

End

Public Sub dwgVersionMin_Draw()

  Style.PaintBox(0, 0, Paint.W, Paint.H)
  Paint.DrawText(System.Version & ".", 0, 0, spnVersionMin.X, Paint.H, Align.Right)

End

Public Sub dwgVersionMin_Arrange()

  Dim FW As Integer = Style.BoxFrameWidth
  Dim FH As Integer = Style.BoxFrameHeight

  spnVersionMin.Move(dwgVersionMin.W - spnVersionMin.W - FW, FH, spnVersionMin.W, dwgVersionMin.H - FH * 2)
  
End

Public Sub chkVersionMin_Click()

  dwgVersionMin.Enabled = chkVersionMin.Value
  If chkVersionMin.Value Then
    spnVersionMin.SetFocus
  Else
    spnVersionMin.Value = spnVersionMin.MaxValue
  Endif
  dwgVersionMin.Refresh

End
