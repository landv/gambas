' Gambas class file

Public NoMessage As Integer

Private $sKey As String
Private $bCtrl As Boolean
Private $sKeyDrag As String
Private $sDeleteKey As String
Private $bNeedProperty As Boolean

Private $bUpdateRecentMenu As Boolean
Private $bInTreeView As Boolean
Private $bInRename As Boolean
Private $bHasJustCollapsed As Boolean
Private $bExpandOnMouseUp As Boolean

Private frmWelcome As FWelcome
Private $hCornerNW As Image
Private $hCornerNE As Image
Private $hCornerSW As Image
Private $hCornerSE As Image
Private $hBorderN As Image
Private $hBorderS As Image
Private $hBorderW As Image
Private $hBorderE As Image

Private $bFirstProject As Boolean

Static Private $sCompressMessage As String

Public Sub _new()
  
  Me.Resize(800, 600)
  
  Project.ProjectTree = tvwProject
  Project.Workspace = wrkProject
  
  ScrollArea(tvwProject.Proxy.Proxy).Shadow = True
  'tvwProject.Columns.Count = 2
  
  Design.Init
  
  FDebugInfo.Load(panDebug)
  FToolbox.Load(panTool)
  FProperty.Load(tabProperty)
  FImageProperty.Load(panImageProperty)
  tabProperty.Index = 1
  FFormStack.Load(tabProperty)
  tabProperty.Index = 0
  
  'FSearch.Load
  FOption.Load
  
  OnBackgroundChange
  'FHelpBrowser.Load
  
  'tvwProject.Columns.Count = 1
End

Public Sub Form_Open()
  
  'DEBUG
  Settings.Read(Me)
  Settings.Read(panProject, "panProject")
  Settings.Read(panProperty, "panProperty")
  Settings.Read(panTool, "panTool")
  'Settings.Read(panStack, "panStack")
  Settings.Read(panDebug, "panDebug")
  
  'ShowTool(FALSE)
  
  ReadConfig
  
  FDebugInfo.UpdateView
  
  tvwProject_Select
  'tabProperty_Click
  'btnShowMenu_Click
  
  mnuOpenExample.Tag = "."
  
  Try Project.ActiveForm.SetFocus
  'tvwProject_LostFocus
  
  frmWelcome = New FWelcome(dwgWelcome)
  
End

Public Sub Form_Close()
  
  If Project.Close() Then
    Stop Event
  Else
    Settings.Write(Me)
    Settings.Write(panProject, "panProject") 
    Settings.Write(panProperty, "panProperty") 
    Settings.Write(panTool, "panTool") 
    'Settings.Write(panStack, "panStack") 
    Settings.Write(panDebug, "panDebug") 
    
    ' We must close them now, otherwise the Close event is raised when the embedded forms
    ' are destroyed, and then the Settings.Save() method gets no TopLevel form anymore for generating the
    ' settings key !
    FProperty.Close
    FDebugInfo.Close
    
    Design.Exit
    Project.Exit
  Endif
  
End

Private Sub OpenProject()
  
  Dim sPath As String
  
  sPath = FOpenProject.Run(True)
  If Not sPath Then Return
  
  Project.Open(sPath, FOpenProject.InAnotherWindow)
  UpdateRecentMenu
  
End

Public Sub tvwProject_Activate()
  
  Dim sKey As String
  
  sKey = tvwProject.Key
  
  If sKey Then
    tvwProject[sKey].Expanded = True
    If CanEdit(sKey) Then
      If $bCtrl Then
        If File.Ext(sKey) <> "module" Then
          sKey = File.SetExt(sKey, "class")
        Endif
      Endif
      Project.OpenFile(sKey)
    Endif
  Endif
  
  Stop Event
  
End

Public Sub mnuEditFile_Click()
  
  tvwProject_Activate()
  
End

Public Sub mnuEditClass_Click()
  
  $bCtrl = True
  tvwProject_Activate()
  
End

Public Sub mnuQuit_Click()
  
  Me.Close
  
End

Public Sub mnuSaveFile_Click()
  
  Dim sPath As String
  Dim hForm As Object
  
  sPath = GetCurrent()
  If Not sPath Then Return
  
  hForm = Project.Files[sPath]
  If Not hForm Then Return
  
  hForm.Save
  
End

Public Sub mnuView_Show()
  
  'mnuViewTool.Checked = Project.ToolForm.Visible
  'mnuViewProperty.Checked = Project.PropertyForm.Visible
  'mnuViewMessage.Checked = Project.MessageForm.Visible
  
End

Public Sub mnuAbout_Click()
  
  FAbout.Run
  
End

Public Sub mnuSystemInfo_Click()
  
  FSystemInfo.ShowModal
  
End

Public Sub mnuDeleteFile_Click()
  
  Dim sPath As String
  Dim sName As String
  
  sPath = GetCurrent()
  If Not sPath Then Return
  
  If IsDir(sPath) Then
    
    If Stat(sPath).Type = gb.Link Then
      If Message.Delete(File.Name(sPath) & "\n\n" & ("Do you really want to delete this link ?"), ("Delete"), ("Cancel")) <> 1 Then Return
      Project.DeleteFile(sPath)
    Else
      If Message.Delete(File.Name(sPath) & "\n\n" & ("Do you really want to delete this directory ?"), ("Delete"), ("Cancel")) <> 1 Then Return
      Project.DeleteDir(sPath)
    Endif
    
  Else
    
    If Project.IsSourcePath(sPath) Or Project.IsConnectionPath(sPath) Then
      sName = File.BaseName(sPath)
    Else
      sName = File.Name(sPath)
    Endif
    
    If Message.Delete(sName & "\n\n" & ("Do you really want to delete this file ?"), ("Delete"), ("Cancel")) <> 1 Then Return
    Project.DeleteFile(sPath)
    
  Endif
  
Catch
  
  FMain.ShowError(("Cannot delete file or directory") & "\n\n" & Error.Text)
  
End

Public Sub tvwProject_Menu()
  
  'mnuPopup.Enabled = TRUE
  GetCurrent()
  If Not $sKey Then Return
  Project.FillDir($sKey)
  
  If $sKey And If Project.IsLocked($sKey) Then Return
  
  If $sKey = Project.KEY_CONNECTION Or If Project.IsConnectionPath($sKey) Then
    mnuDatabase.Popup
  Else
    
    If Left($sKey) <> "$" And If Not Exist($sKey) Then
      Message.Warning($sKey & "\n\n" & ("File or directory does not exist anymore."))
      Project.Refresh
      Return
    Endif
    
    mnuPopup.Popup
  Endif
  'mnuPopup.Enabled = FALSE
  
End

Private Function GetCurrent() As String
  
  $sKey = ""
  If Not tvwProject.Key Then Return
  If Not tvwProject.Current.Selected Then Return
  $sKey = tvwProject.Key
  If Left$($sKey) = "$" Then Return
  If IsProject($sKey) Or If Project.IsLocked($sKey) Then Return
  Return $sKey
  
End

Private Function GetCurrentDir(Optional sKey As String) As String
  
  If sKey Then 
    $sKey = sKey
  Else
    GetCurrent
  Endif
  If Not $sKey Then Return 
  If Project.IsLocked($sKey) Then Return
  If $sKey = Project.KEY_MISC Then Return Project.Dir
  If $sKey = Project.KEY_PROJECT Then Return Project.Dir &/ ".hidden"
  If $sKey = Project.KEY_PUBLIC Then Return Project.Dir &/ ".public"
  If Project.SourceDir <> Project.Dir
    If $sKey = Project.KEY_SOURCE Then Return Project.SourceDir
  Endif
  If Left$($sKey) = "$" Then Return
  
  If IsDir($sKey) Then
    Return $sKey
  Else
    Return File.Dir($sKey)
  Endif
  
End

Public Sub mnuPopup_Show()
  
  Dim sCurrent As String
  Dim bCurrent As Boolean
  Dim bFile As Boolean
  Dim bCanStoreFile As Boolean
  Dim hMenu As Menu
  Dim sParent As String
  Dim sMime As String
  Dim hProgList As DesktopFile[]
  
  sCurrent = GetCurrent()
  bCurrent = sCurrent
  
  UpdateMenu
  
  If sCurrent And If Project.IsReadOnly(sCurrent) Then
    'mnuNew.Visible = False
    If Not IsDir(sCurrent) Or If Stat(sCurrent).Type <> gb.Link Then
      mnuCut.Visible = False
      mnuCopy.Visible = False
      mnuPaste.Visible = False
    Endif
    mnuRenameFile.Visible = False
  Endif
  
  If $sKey = Project.KEY_SOURCE Or If sCurrent Begins Project.SourceDir &/ "/" Then
    
    mnuRenameFile.Visible = mnuRenameFile.Visible And bCurrent And Not Project.Running
    mnuDeleteFile.Visible = mnuDeleteFile.Visible And CanDelete(sCurrent) And Not Project.Running
    
    mnuEditFile.Visible = mnuEditFile.Visible And CanEdit(sCurrent)
    mnuEditClass.Visible = mnuEditFile.Visible And Project.IsFormPath(sCurrent)
    
    mnuStartup.Visible = mnuEditFile.Visible 
    If mnuStartup.Visible Then
      mnuStartup.Checked = (Project.Startup = File.BaseName(sCurrent))
      mnuStartup.Enabled = Not Project.Running
    Endif
    
    If mnuCut.Visible Then
      
      mnuCut.Visible = bCurrent
      mnuCopy.Hide
      mnuPaste.Visible = True
      
      sParent = tvwProject[$sKey].ParentKey
      
      mnuPaste.Enabled = False
      mnuCut.Enabled = False
      
      If Not Project.Running Then
        
        If Clipboard.Format = MMime.CLASS Then
          If IsDir(sParent) Or If Not Project.IsSourcePath(sParent) Then mnuPaste.Enabled = True
        Endif
        
        If IsDir(sParent) Or If Not Project.IsSourcePath(sParent) Then mnuCut.Enabled = True
        
      Endif
      
    Endif
    
    mnuEditWith.Visible = False
    mnuCopyPath.Visible = mnuCopy.Visible
    
    If mnuNew.Visible Then
      
      mnuAddDirectory.Visible = Project.Dir <> Project.SourceDir
      mnuAddProjectLink.Visible = False 'mnuAddDirectory.Visible
      
      For Each hMenu In mnuNew.Children
        If Not hMenu.Tag Then Continue
        If Not CModule.All.Exist(hMenu.Tag) Then 
          hMenu.Hide
        Else
          hMenu.Visible = CModule[hMenu.Tag].Used
        Endif
      Next
      mnuNewClass.Show
      mnuNewModule.Show
      
    Endif
    
  Else
    
    mnuRenameFile.Visible = mnuRenameFile.Visible And bCurrent
    mnuDeleteFile.Visible = mnuDeleteFile.Visible And CanDelete(sCurrent)
    
    mnuCompressAll.Hide
    mnuUncompressAll.Hide
    
    If $sKey = Project.KEY_MISC Or If IsDir(sCurrent) Then
      If MCompressFile.CanCompress(If($sKey = Project.KEY_MISC, Project.Dir, sCurrent)) Then
        mnuCompressAll.Show
        mnuUncompressAll.Show
      Endif
    Endif
    
    mnuEditFile.Visible = mnuEditFile.Visible And CanEdit(sCurrent)
    mnuEditClass.Visible = False
    
    mnuStartup.Visible = False
    
    If $sKey = Project.KEY_MISC Or If $sKey = Project.KEY_PROJECT Or If $sKey = Project.KEY_PUBLIC Then
      bCanStoreFile = True '$sKey = Project.KEY_MISC Or $sKey = Project.KEY_PROJECT
    Else
      bCanStoreFile = False
    Endif
    
    bFile = bCurrent
    
    If mnuCut.Visible Then
      mnuCut.Visible = bFile And Not IsDir($sKey)
      mnuCopy.Visible = bFile And Not IsDir($sKey)
      mnuPaste.Visible = bFile Or bCanStoreFile
      mnuPaste.Enabled = Clipboard.Format = MMime.FILE
    Endif
    
    mnuEditWith.Visible = False
    If mnuEditFile.Visible Then
      sMime = MMime.GetMime(sCurrent)
      If sMime Then
        hProgList = DesktopFile.FromMime(sMime)
        If hProgList And If hProgList.Count Then
          mnuEditWith.Visible = sMime
          mnuEditWith.Tag = hProgList
        Endif
      Endif
    Endif
    
    mnuCopyPath.Visible = mnuCopy.Visible
    
    If mnuNew.Visible Then 
      
      mnuAddDirectory.Visible = True
      
      For Each hMenu In mnuNew.Children
        If Not hMenu.Tag Then Continue
        If CModule.All.Exist(hMenu.Tag) Then 
          hMenu.Hide
        Else
          hMenu.Visible = bFile Or bCanStoreFile
        Endif
      Next
      mnuNewClass.Hide
      mnuNewModule.Hide
      
    Endif
    
  Endif
  
  mnuAddVersion.Visible = Project.IsAdded($sKey)
  
End

Public Sub mnuDatabase_Show()
  
  Dim bVisible As Boolean
  
  bVisible = $sKey <> Project.KEY_CONNECTION
  
  mnuEditConnection.Visible = bVisible
  mnuKillConnection.Visible = bVisible
  mnuInfoConnection.Visible = bVisible
  If bVisible Then 
    mnuAddVersionConnection.Visible = Project.IsAdded($sKey)
  Else
    mnuAddVersionConnection.Visible = False
  Endif
  
End

Private Function FormatFile(sPath As String) As String
  
  Dim sText As String
  
  sText = File.Name(sPath)
  
  If Left$(sPath, Len(User.Home)) = User.Home Then
    sPath = "~" &/ Mid$(sPath, Len(User.Home) + 1)
  Endif
  
  Return sText & "  (" & File.Dir(sPath) & ")"
  
End

Public Sub UpdateRecentMenu()
  
  Dim hMenu As Menu
  Dim sMenu As String
  Dim sPath As String
  Dim aList As CRecentFile[]
  Dim iSort As Integer
  Dim hRecentFile As CRecentFile
  Dim sTitle As String
  Dim sLastTitle As String
  Dim hMenuTitle As Menu
  Dim cMenu As New Collection
  Dim cParent As New Collection
  Dim aMenu As New String[]
  Dim sDir As String
  Dim iVal As Integer
  
  Inc Application.Busy
  
  iSort = Settings["/FWelcome/SortRecent", CRecentFile.SORT_BY_DATE]
  
  mnuOpenRecent.Children.Clear
  mnuOpenRecent.Enabled = CRecentFile.All.Count > 0
  
  If mnuOpenRecent.Enabled Then
    
    aList = CRecentFile.Get(iSort)
    
    If iSort = CRecentFile.SORT_BY_PATH Then
      
      For Each hRecentFile In aList
        
        sPath = hRecentFile.Path
        Repeat
          If cMenu.Exist(sPath) Then Break
          cMenu[sPath] = True
          sPath = File.Dir(sPath)
          iVal = 0
          Try iVal = cParent[sPath]
          Inc iVal
          cParent[sPath] = iVal
        Until sPath = "/"
        
      Next
      
      For Each iVal In cParent
        If iVal >= 2 Then aMenu.Add(cParent.Key)
      Next
      aMenu.Sort
      Try aMenu.Remove(0)
      
      For Each hRecentFile In aList
        aMenu.Add(hRecentFile.Path)
      Next
      
      cMenu.Clear
      
      For Each sPath In aMenu
        
        sDir = sPath
        
        Do
          sDir = File.Dir(sDir)
          If sDir = "/" Then Break
          hMenuTitle = cMenu[sDir]
          If hMenuTitle Then Break
        Loop
        If Not hMenuTitle Then hMenuTitle = mnuOpenRecent
        
        If Exist(sPath &/ ".project") Then
          hMenu = New Menu(hMenuTitle) As "mnuOpenRecentFile"
          hMenu.Picture = Project.GetIcon(sPath, 16)
        Else
          hMenu = New Menu(hMenuTitle)
        Endif
        If hMenuTitle <> mnuOpenRecent Then 
          sTitle = Mid$(Replace(sPath, hMenuTitle.Tag, ""), 2)
        Else
          sTitle = Replace(sPath, System.User.Home, "~")
        Endif
        hMenu.Text = sTitle
        hMenu.Tag = sPath
        cMenu[sPath] = hMenu
        
      Next
      
    Else
      
      For Each hRecentFile In aList
        
        sPath = hRecentFile.Path
        
        sTitle = hRecentFile.GetTitle(iSort)
        
        If sTitle <> sLastTitle Then
          If sTitle = ("Today") Then
            hMenuTitle = mnuOpenRecent
          Else
            hMenuTitle = New Menu(mnuOpenRecent)
            hMenuTitle.Text = sTitle
          Endif
          sLastTitle = sTitle
        Endif
        
        hMenu = New Menu(hMenuTitle) As "mnuOpenRecentFile"
        hMenu.Tag = sPath
        hMenu.Text = FormatFile(sPath)
        hMenu.Picture = Project.GetIcon(hMenu.Tag, 16)
        
      Next
      
    Endif
    
    hMenu = New Menu(mnuOpenRecent)
    
    hMenuTitle = New Menu(mnuOpenRecent)
    hMenuTitle.Text = ("Sort history")
    hMenuTitle.Picture = Picture["icon:/small/sort-ascent"]
    
    iVal = 0
    For Each sMenu In [("Sort by date"), ("Sort by name"), ("Sort by path")]
      hMenu = New Menu(hMenuTitle) As "mnuSortRecent"
      hMenu.Text = sMenu
      hMenu.Tag = iVal
      Object.Lock(hMenu)
      hMenu.Checked = iSort = iVal
      Object.Unlock(hMenu)
      Inc iVal
    Next
    
    hMenu = New Menu(mnuOpenRecent) As "mnuClearRecent"
    hMenu.Text = ("&Clear history")
    hMenu.Picture = Picture["icon:/small/trash"]
    
  Endif
  
  Dec Application.Busy
  
End

Public Sub mnuSortRecent_Click()
  
  Settings["/FWelcome/SortRecent"] = Last.Tag
  UpdateRecentMenu
  
End

' PUBLIC SUB UpdateRunWithMenu()
'   
'   DIM hMenu AS Menu
'   DIM iInd AS Integer
'   DIM sArg AS String
' 
'   mnuRunWith.Children.Clear
'   'mnuOpenRecent.Enabled = Project.Recent.Count > 0
' 
'   'IF Project.Recent.Count = 0 THEN RETURN
' 
'   mnuRunWithNoArg = NEW Menu(mnuRunWith) AS "mnuRunWithArg"
'   mnuRunWithNoArg.Text = ("(&None)")
'   mnuRunWithNoArg.Tag = 0
'   
'   hMenu = NEW Menu(mnuRunWith)
' 
'   FOR EACH sArg IN Project.Arguments
'     hMenu = NEW Menu(mnuRunWith) AS "mnuRunWithArg"
'     sArg = Replace(sArg, "\n", " ")
'     sArg = Replace(sArg, "&", "&&")
'     INC iInd
'     hMenu.Tag = iInd
'     IF Len(sArg) > 64 THEN sArg = Left(sArg, 64) & "..."
'     hMenu.Text = sArg
'   NEXT  
'   
'   hMenu = NEW Menu(mnuRunWith)
' 
'   hMenu = NEW Menu(mnuRunWith) AS "mnuEditArgument"
'   hMenu.Text = ("&Edit arguments...")
'   hMenu.Picture = Picture["icon:/small/edit"]
' 
'   SetArgument
'   
' END

Private Sub UpdateExampleMenu(Optional hParent As Menu)
  
  Dim hMenu As Menu
  Dim aList As String[]
  Dim sPath As String
  
  If Not hParent Then hParent = mnuOpenExample
  
  If Not hParent.Tag Then Return
  
  Inc Application.Busy 
  
  hParent.Children.Clear
  
  aList = Project.GetExamples(hParent.Tag)
  hParent.Tag = ""
  
  If aList Then 
    
    For Each sPath In aList
      
      ' IF InStr(sPath, "/") THEN
      '   sDir = File.Dir(sPath)
      '   IF sDir <> sParent THEN
      '     sParent = sDir
      '     hParent = NEW Menu(mnuOpenExample)
      '     hParent.Text = Project.ExampleTitle[sParent]
      '     IF NOT hParent.Text THEN hParent.Text = sParent
      '   ENDIF
      ' ELSE
      '   hParent = mnuOpenExample
      '   sParent = ""
      ' ENDIF
      
      If Exist(Project.EXAMPLES_DIR &/ sPath &/ ".project") Then
        hMenu = New Menu(hParent) As "mnuOpenRecentFile"
        hMenu.Tag = Project.EXAMPLES_DIR &/ sPath
        hMenu.Text = File.Name(sPath) 'FormatFile(sPath)
        hMenu.Picture = Project.GetIcon(hMenu.Tag, 16)
      Else 
        hMenu = New Menu(hParent) As "mnuOpenExample"
        hMenu.Tag = sPath
        hMenu.Text = Project.ExampleTitle[File.Name(sPath)]
        hMenu = New Menu(hMenu)
      Endif
      
    Next
    
  Endif
  
  Dec Application.Busy
  
End

Public Sub mnuOpenRecentFile_Click()
  
  Project.Open(Last.Tag)
  UpdateRecentMenu
  
End

Public Sub mnuClearRecent_Click()
  
  CRecentFile.Clear
  UpdateRecentMenu
  
End

Private Sub NewProject()
  
  Dim sPath As String
  
  sPath = FCreateProject.Run(True)
  If Not sPath Then Return
  
  Project.Open(sPath, FCreateProject.InAnotherWindow)
  UpdateRecentMenu
  
End

Public Sub mnuTip_Click()
  
  FTips.Run
  
End

' PUBLIC SUB mnuAddIcon_Click()
' 
'   IF FNewIcon.Run(GetCurrentDir()) THEN RETURN
'   Project.InsertFile(FNewIcon.Name, FNewIcon.DestDir, FNewIcon.Template)
' 
' END
' 
' 
' PUBLIC SUB mnuAddText_Click()
' 
'   IF FNewText.Run(GetCurrentDir()) THEN RETURN
'   Project.InsertFile(FNewText.Name, FNewText.DestDir, FNewText.Template)
' 
' END

Private Sub Rename(sKey As String)
  
  $bInRename = True
  tvwProject[sKey].Rename
  
End

Public Sub mnuAddDirectory_Click()
  
  Dim sPath As String
  Dim iInd As Integer = 1
  
  sPath = GetCurrentDir() &/ ("New folder")
  While Exist(sPath)
    Inc iInd
    sPath = GetCurrentDir() &/ ("New folder") & " (" & iInd & ")"
  Wend
  
  If Not Project.InsertDirectory(sPath, True) Then Return
  $sDeleteKey = sPath
  
  Rename(sPath)  
  'IF FNewDirectory.Run(GetCurrentDir()) THEN RETURN
  'Project.InsertDirectory(FNewDirectory.ParentDir &/ FNewDirectory.Name)
  
End

Private Function CanEdit(sPath As String) As Boolean
  
  If Not sPath Then Return
  If Left$(sPath) = "$" Then Return
  Return Not IsDir(sPath)

Catch

End

Private Function CanDelete(sPath As String) As Boolean
  
  If Not sPath Then Return
  If Left$(sPath) = "$" Then Return
  If Stat(sPath).Type = gb.Link Then Return True
  If Project.IsReadOnly(sPath) Then Return False
  If tvwProject[sPath].Count = 0 Then Return True

Catch
  
End

Public Sub UpdateTranslate()
  
  Action["translate"].Visible = Project.Localize And Not Project.ReadOnly
  Action["translate"].Enabled = Not Project.Running
  'Action["component"].Visible = Project.CreateComponent 'AND NOT (Project.ReadOnly OR Project.Running)
  
End

Public Sub UpdateConsoleAction()
  
  'DIM bVal AS Boolean
  
  'HideDebug(Not bDebug)
  
  'bVal = Action["console"].Value
  panDebug.Action = If(FOutput.Parent, "console", "")
  FOutput.Action = If(FOutput.Parent, "", "console")
  
  If FOutput.Parent Then 
    Action["console"].Value = Not panDebug.Hidden
  Else 
    Action["console"].Value = FOutput.Visible
  Endif
  
  'Action["console"].Value = bVal  
  
End

Private Sub Translate()
  
  If Project.Running Then Return
  If Project.Compile() Then Return
  
  If Project.CheckProgram("msgmerge") Or If Project.CheckProgram("msgfmt") Then
    Message.Warning(("The GNU translation tools are not installed on your system.\n\nPlease install them to be able to do the translation."))
    Return
  Endif
  
  FTranslate.Run
  
End

Public Sub mnuDatabaseManager_Click()
  
  'Project.RunTool("gambas" & System.Version & "-database-manager")
  Project.RunTool("gambas-database-manager")
  
End

Public Sub mnuStartup_Click()
  
  If mnuStartup.Checked Then Return
  mnuStartup.Checked = True
  Project.DefineStartup(GetCurrent())
  
End

Private Function IsProject(sKey As String) As Boolean
  
  Return sKey = Project.Dir
  
End

Public Sub mnuCopy_Click()
  
  Dim sPath As String
  Dim sType As String
  
  sPath = GetCurrent()
  If Project.IsSourcePath(sPath) Then
    sType = MMime.CLASS
  Else
    sType = MMime.FILE
  Endif
  Clipboard.Copy("C" & sPath, sType)
  
  mnuPopup_Show
  
End

Public Sub mnuCopyPath_Click()
  
  Dim sPath As String
  
  sPath = GetCurrent()
  If Left(sPath, Len(Project.Dir)) = Project.Dir Then
    sPath = Mid$(sPath, Len(Project.Dir) + 2)
    'IF Left(sPath) = "/" THEN sPath = Mid$(sPath, 2)
  Endif
  
  Clipboard.Copy(sPath)
  
End

Public Sub mnuCut_Click()
  
  Dim sPath As String
  Dim sType As String
  
  sPath = GetCurrent()
  If Project.IsSourcePath(sPath) Then
    sType = MMime.CLASS
  Else
    sType = MMime.FILE
  Endif
  Clipboard.Copy("X" & sPath, sType)
  
  mnuPopup_Show
  
End

Public Sub mnuPaste_Click()
  
  Dim sFile As String
  Dim sAction As String
  Dim sSrc As String
  Dim sDst As String
  Dim sType As String
  Dim bSource As Boolean
  
  sDst = GetCurrentDir()
  bSource = Project.IsSourcePath(sDst)
  If bSource Then
    sType = MMime.CLASS
  Else
    sType = MMime.FILE
  Endif
  
  sFile = Clipboard.Paste(sType)
  If Not sFile Then Return
  
  sAction = Left$(sFile)
  sSrc = Mid$(sFile, 2)
  sDst &/= File.Name(sFile)
  
  Select Case sAction
      
    Case "C"
      Project.CopyFile(sSrc, sDst)
      Rename(tvwProject.Key)
      
    Case "X"
      If sSrc = sDst Then Return
      Project.MoveFile(sSrc, sDst, sType = MMime.CLASS)
      Clipboard.Clear
      
  End Select
  
End

Public Sub tvwProject_Select()
  
  RefreshMenu
  
  If tvwProject.Current And If tvwProject.Current.Children Then 
    ' Print Mouse.X ;; Mouse.Y ' generates crashes on random places, strange...
    'If Not tvwProject.Find(Mouse.X, Mouse.Y) Then
    $bExpandOnMouseUp = True
    'Endif
  Endif
  
End

Public Sub tvwProject_MouseUp()
  
  If $bExpandOnMouseUp And If Not $bHasJustCollapsed Then
    Try tvwProject.Current.Expanded = True
  Endif
  $bExpandOnMouseUp = False
  $bHasJustCollapsed = False
  
End

' PUBLIC SUB tvwProject_Expand()
' 
'   IF tvwProject.Item.Picture = Picture["img/16/close.png"] THEN
'     tvwProject.Item.Picture = Picture["img/16/open.png"]
'   ENDIF
' 
' END

' PUBLIC SUB tvwProject_Collapse()
' 
'   IF tvwProject.Item.Picture = Picture["img/16/open.png"] THEN
'     tvwProject.Item.Picture = Picture["img/16/close.png"]
'   ENDIF
' 
' END

Public Sub mnuCloseAll_Click()
  
  Project.CloseAllWindows
  
End

Public Sub ReadConfig()
  
  Project.SetNormalFont(tvwProject)
  'lblMessage.Font = tvwProject.Font
  tabProperty.TextFont = Project.GetSmallFont()
  wrkProject.Font = tabProperty.TextFont
  'wrkProject.Font = tvwProject.Font
  'tabProperty.Font = tvwProject.Font
  '$bCanShowBalloon = Settings["/ShowBalloon", TRUE]
  'IF NOT $bCanShowBalloon THEN HideBalloon
  
  'panMessage.Height = lblMessage.Font.Height + lblMessage.Padding * 2 + 2
  ' bShow = Settings["/ShowMessages", True]
  ' panMessage.Visible = bShow
  ' mnuStatusBar.Value = bShow
  
  Me.Menus.Visible = Settings["/ShowMenus", True]
  
End

' PUBLIC SUB mnuViewDebug_Click()
' 
'   HideOrShow(FDebugInfo)
' 
' END

Private Sub UpdateProperty()
  
  Dim hCtrl As Control
  
  Action["property"].Visible = (Not Project.ReadOnly) And $bNeedProperty
  'Action["property"].Enabled = Not Project.Running
  For Each hCtrl In panProperty.Children
    hCtrl.Enabled = Not Project.Running
  Next
  
End

Public Sub UpdateMenu()
  
  Dim bVisible As Boolean
  Dim bEnabled As Boolean
  Dim sAction As String
  
  bVisible = Not Project.ReadOnly
  bEnabled = Not Project.Running
  
  UpdateTranslate
  
  For Each sAction In ["exec", "install", "compile", "compile-all"]
    Action[sAction].Visible = bVisible
    Action[sAction].Enabled = bEnabled
  Next
  
  UpdateProperty
  
  Action["version-control"].Visible = VersionControl.CanControlProject()
  Action["project-version"].Visible = VersionControl.Enabled()
  
  mnuStartup.Visible = bVisible
  mnuRenameFile.Visible = bVisible
  mnuCut.Visible = bVisible
  mnuCopy.Visible = bVisible
  mnuPaste.Visible = bVisible
  mnuDeleteFile.Visible = bVisible
  mnuClean.Visible = bVisible
  mnuNew.Visible = bVisible
  mnuEditFile.Visible = bVisible
  
  mnuClearDebugWindows.Enabled = Project.Running
  
  With Action["component-property"]
    Select Case Project.Type
      Case Project.TYPE_NORMAL
        .Visible = False
      Case Project.TYPE_LIBRARY
        .Visible = True
        mnuPropertyComp.Text = ("Library properties") & "..."
        btnComponent.Tooltip = ("Library properties")
      Case Project.TYPE_COMPONENT
        .Visible = True
        mnuPropertyComp.Text = ("Component properties") & "..."
        btnComponent.Tooltip = ("Component properties")
    End Select
  End With
  
  mnuUseHttpServer.Visible = Project.CanUseHttpServer()
  
End

Public Sub OnProjectChange()
  
  Dim hCtrl As Control
  Dim hMenu As Menu
  
  If Not $bFirstProject Then
    
    $bFirstProject = True
    
    dwgWelcome.Hide
    For Each hMenu In [mnuProject, mnuDebug, mnuView, mnuTool, mnuSave, mnuSaveAs]
      hMenu.Show
    Next
    For Each hCtrl In [panDebug, panProject, tlbMain]
      hCtrl.Show
    Next
    
  Endif
  
  UpdateMenu
  mnuFilterAdd.Visible = VersionControl.Enabled() 'And panSearchProject.Hovered
  mnuUseTerminal.Value = Project.UseTerminal
  mnuUseHttpServer.Value = Project.UseHttpServer
  mnuProfile.Value = Project.Profiling
  'UpdateTranslate
  'RefreshInfo
  'IF $bHidden THEN HideAll
  
End

Public Sub OnProjectDebug()
  
  UpdateMenu
  
End

Public Sub tvwProject_MouseDown()
  
  Balloon.Hide(tvwProject)
  $bCtrl = Mouse.Control
  
End 

' PUBLIC SUB Form_Show()
' 
'   Project.Activate(NULL)  
' 
' END

Public Sub ShowTool(sType As String)
  
  $bNeedProperty = sType = "FForm" Or sType = "FImageEditor"
  panTool.Visible = sType = "FForm"
  panTabProperty.Visible = panTool.Visible
  panImageProperty.Visible = sType = "FImageEditor"
  UpdateProperty
  
  ' If bShow <> panProperty.Hidden Then Return
  ' 
  ' If Not bShow Then $bTool = Not panTool.Hidden
  ' 
  ' Action["property"].Value = bShow
  
End

Public Sub ShowDebug(bShow As Boolean)
  
  panDebug.Hidden = Not bShow
  FDebugInfo.OnVisibilityChange
  
End

Public Sub HideDebug(bHide As Boolean)
  
  panDebug.Visible = Not bHide
  FDebugInfo.OnVisibilityChange
  
End

Public Sub IsDebugVisible() As Boolean
  
  Return panDebug.Visible And Not panDebug.Hidden
  
End

' PUBLIC SUB mnuHideAll_Click()
' 
'   HideAll  
' 
' END
' 
' PRIVATE SUB HideAll()
'   
'   IF FOption.Visible THEN RETURN
'   
'   IF $bHidden THEN
'     
'     panProject.Hidden = $aHiddenState["panProject"]
'     panProperty.Hidden = $aHiddenState["panProperty"]
'     panTool.Hidden = $aHiddenState["panTool"]
'     
'   ELSE
'     
'     $aHiddenState.Clear
'     $aHiddenState["panProject"] = panProject.Hidden
'     $aHiddenState["panProperty"] = panProperty.Hidden
'     $aHiddenState["panTool"] = panTool.Hidden
'     
'     panProject.Hidden = TRUE
'     panProperty.Hidden = TRUE
'     panTool.Hidden = TRUE
'     
'   ENDIF
'   
'   $bHidden = NOT $bHidden
'   
' END

Public Sub wrkProject_Activate()
  
  Project.Activate(wrkProject.ActiveWindow)
  
End

Public Sub ActivateCurrentWindow()
  
  Try wrkProject.ActiveWindow.SetFocus
  wrkProject_Activate ' If it already has the focus
  
End

Public Sub Action_Activate(Key As String) As Boolean
  
  Dim hEditor As FEditor
  
  'DEBUG Key
  
  Select Key
      
    Case "project"
      panProject.Hidden = Not Action[Key].Value
    Case "start"
      Project.Run(False)
    Case "pause"
      Design.Pause
    Case "stop"
      Design.Stop
    Case "forward"
      Project.Run(False, 2)
    Case "step"
      Project.Run(False, 1)
    Case "return"
      Project.Run(False, 3)
    Case "new-project"
      NewProject
    Case "open-project"
      OpenProject
    Case "save-project"
      Project.Save
    Case "save-project-as"
      Project.SaveAs
    Case "refresh-project"
      Project.RefreshAll
    Case "project-property"
      If Not FProjectProperty.Run() Then Project.Refresh
    Case "component-property"
      If Not Project.Compile() Then FPropertyComponent.Run
    Case "translate"
      Translate
    Case "compile"
      Project.Compile()
    Case "compile-all"
      Project.Compile(True)
    Case "archive"
      Project.MakePackage
    Case "send-mail"
      Project.SendMail
    Case "exec"
      Project.MakeExecutable
    Case "install"
      Project.MakeInstall
    Case "shortcut"
      Action.Configure
    Case "version-control"
      VersionControl.ControlProject
      UpdateMenu
    Case "project-version"
      FProjectVersion.Run
      
    Case "find-next"
      FSearch.FindNext
    Case "find-previous"
      FSearch.FindPrevious
      'Case "find-project"
      'cmbFind_Activate
      
    Case "console"
      If Action["console"].Value Then 
        FDebugInfo.ShowConsole
      Else
        Try Project.ActiveForm.SetFocus
      Endif
      'FOutput.Toggle(Action["console"].Value)
      
      ' Case "break"
      '   'Debug Action["break"].Value
      '   Try hEditor = Project.ActiveForm
      '   If Not Error Then Design.SetBreakpoint(hEditor.Name, hEditor.Editor.Line, Action["break"].Value)
      ' Case "watch"
      '   Try hEditor = Project.ActiveForm
      '   If Not Error Then hEditor.WatchExpression
    Case "until"
      Try hEditor = Project.ActiveForm
      If Not Error Then hEditor.RunUntil
    Case "info"
      If tvwProject.Key = Project.Dir Then
        If Not FProjectProperty.Run() Then Project.Refresh
      Else
        FFileProperty.Run(tvwProject.Key)
      Endif
      
    Case "go-back"
      CPosition.MovePrevious
    Case "go-forward"
      CPosition.MoveNext
    
    Case "terminal"
      Project.UseTerminal = Action["terminal"].Value
      Project.WriteProject(True)
      
    Case "httpserver"
      Project.UseHttpServer = Action["httpserver"].Value
      Project.WriteProject(True)
      
    Case "profile"
      Project.Profiling = Action["profile"].Value
      Project.WriteProject(True)
    
    Case "open-profile"
      OpenProfile
    
    Case "menu-file"
      mnuFile.Popup(btnMnuFile.ScreenX, btnMnuFile.ScreenY + btnMnuFile.H)
    Case "menu-project"
      mnuProject.Popup(btnMnuProject.ScreenX, btnMnuProject.ScreenY + btnMnuProject.H)
    Case "menu-debug"
      mnuDebug.Popup(btnMnuDebug.ScreenX, btnMnuDebug.ScreenY + btnMnuDebug.H)
    Case "menu-tool"
      mnuTool.Popup(btnMnuTool.ScreenX, btnMnuTool.ScreenY + btnMnuTool.H)
    
    Case "compress-all"
      
      Inc Application.Busy
      $sCompressMessage = ""
      CompressAll(tvwProject.Key, False)
      Dec Application.Busy
      If $sCompressMessage Then 
        Message.Error($sCompressMessage)
        $sCompressMessage = ""
      Endif
      
    Case "uncompress-all"
      CompressAll(tvwProject.Key, True)
    
  End Select 
  
End

Private Sub RefreshMenu()
  
  GetCurrent
  
  If $sKey = Project.KEY_CONNECTION Or If Project.IsConnectionPath($sKey) Then
    If tvwProject.HasFocus Then Project.SetCurrentPopup(mnuDatabase)
    mnuDatabase_Show
  Else
    If tvwProject.HasFocus Then Project.SetCurrentPopup(mnuPopup)
    mnuPopup_Show
  Endif
  
End

Public Sub tvwProject_GotFocus()
  
  RefreshMenu
  'txtSearchProject.SetFocus
  
End

Public Sub wrkProject_WindowMenu()
  
  'DEBUG
  
End

Public Sub tvwProject_Rename()
  
  Dim sPath As String
  Dim sNew As String
  
  $bInRename = False
  sPath = GetCurrent()
  If Not sPath Then Return
  
  'DEBUG Before;; tvwProject.Item.Text
  If $sDeleteKey Then
    sNew = File.Dir($sDeleteKey) &/ tvwProject.Item.Text
    Project.DeleteDir(sPath, True)
    Project.InsertDirectory(sNew)
    $sDeleteKey = ""
  Else
    Project.RenameFile(sPath, tvwProject.Item.Text)
  Endif
  
End

Public Sub mnuRenameFile_Click()
  
  Rename(tvwProject.Key)
  
End

Private Sub IsDataKey(sKey As String) As Boolean
  
  Dim sPrevious As String
  
  tvwProject.MoveTo(sKey)
  Do
    tvwProject.MoveParent
    If Not tvwProject.Available Then Break
    sPrevious = sKey
    sKey = tvwProject.Item.Key
  Loop 
  
  Return sPrevious = Project.KEY_MISC Or sPrevious = Project.KEY_PROJECT Or sPrevious = Project.KEY_PUBLIC
  
End

Public Sub tvwProject_DragMove()
  
  If Not tvwProject.FindAt(Drag.X, Drag.Y) Then 
    
    $sKey = tvwProject.Item.Key
    
    If Project.IsLocked($sKey) Then Goto STOP_EVENT
    If Drag.Format = MMime.DATA And If Drag.Source Then 
      If Not IsDataKey($sKey) Then Goto STOP_EVENT
    Else If Drag.Format = MMime.CLASS And If Drag.Source Then
      If $sKey <> Project.KEY_SOURCE Then
        If Not Project.IsSourcePath($sKey, True) Then Goto STOP_EVENT
      Endif
    Else If Drag.Format = MMime.URI Then
      If Not IsDataKey($sKey) Then Goto STOP_EVENT
    Else
      Goto STOP_EVENT
    Endif
    With tvwProject[$sKey] 
      If .Children Then 
        If Not timOpen.Enabled Or $sKey <> $sKeyDrag Then 
          $sKeyDrag = $sKey
          timOpen.Enabled = True
        Endif
      Else  
        timOpen.Enabled = False
      Endif
      Drag.Show(tvwProject, .X, .Y, Min(tvwProject.ClientW - .X, tvwProject.Font.TextWidth(.Text) + 8 + .Picture.Width), .H)
      'Drag.Show(tvwProject)
    End With
    Return
  Endif
  
STOP_EVENT:
  
  Stop Event
  
End

Private Sub AddDataFiles(aFile As String[], bLink As Boolean)
  
  Dim sPath As String
  Dim sDir As String
  Dim sName As String
  
  Inc Application.Busy
  
  sDir = GetCurrentDir($sKey)
  
  For Each sPath In aFile
    
    If Not (sPath Begins "file://") Then Continue
    
    sPath = MMime.UnEscapeURI(Mid$(sPath, 8))
    If IsDir(sPath) Then Continue
    
    sName = Project.GetUniqueName(sDir, File.Name(sPath))
    Project.InsertFile(sName, sDir, sPath, True, bLink)
    
  Next
  
  Project.SelectKey(sDir &/ sName)
  
  Dec Application.Busy
  
Catch
  
  Application.Busy = 0
  ShowError(("Unable to drop file into the project.") & "\n\n" & Error.Text, $sKey)
  
End

Public Sub tvwProject_Drop()
  
  Dim aFile As String[]
  Dim sSrc As String = Drag.Data
  
  'Debug Drag.Format;; Drag.Data
  '
  Project.FillDir($sKey)
  
  If Drag.Format = MMime.URI Then
    
    aFile = Split(Replace(sSrc, "\r", ""), "\n")
    If Drag.Action = Drag.Copy Or If Drag.Action = Drag.Move Then
      AddDataFiles(aFile, False)
    Else If Drag.Action = Drag.Link Then
      AddDataFiles(aFile, True)
    Endif
    
  Else 'If Drag.Format = MMime.CLASS Then
    
    If Drag.Action = Drag.Move Then
      Project.MoveFile(sSrc, GetCurrentDir($sKey) &/ File.Name(sSrc), Drag.Format = MMime.CLASS)
    Else If Drag.Action = Drag.Copy Then
      If Drag.Format <> MMime.CLASS Then
        Project.CopyFile(sSrc, GetCurrentDir($sKey) &/ File.Name(sSrc))
      Endif
    Else If Drag.Action = Drag.Link Then
      If Drag.Format <> MMime.CLASS Then
        Project.LinkFile(sSrc, GetCurrentDir($sKey) &/ File.Name(sSrc))
      Endif
    Endif
    
  Endif
  
End

Public Sub tvwProject_MouseDrag()
  
  Dim sKey As String
  
  If Not Mouse.Left Then Return
  
  If tvwProject.FindAt(Mouse.StartX, Mouse.StartY) Then Return
  sKey = tvwProject.Item.Key
  If tvwProject.Key <> sKey Then Return
  'If Project.IsSourcePath(sKey) Then Return
  If Left(sKey) = "$" Then Return
  
  mnuPopup_Show
  If Not mnuCut.Visible Or If Not mnuCut.Enabled Then Return
  
  Drag.Icon = tvwProject.Item.Picture
  tvwProject[sKey].Selected = True
  Drag(tvwProject, sKey, If(Project.IsSourcePath(sKey), MMime.CLASS, MMime.DATA))
  
End

Public Sub timOpen_Timer()
  
  If Drag.Pending Then 
    Try tvwProject[$sKeyDrag].Expanded = True
  Endif
  timOpen.Enabled = False
  
End

Public Sub mnuNewFile_Click()
  
  FCreateFile.Run(GetCurrent(), GetCurrentDir(), Last.Tag)
  
End

Public Sub mnuAddProjectLink_Click()
  
  Dim sPath As String 
  
  sPath = FOpenProject.Run() 
  If Not sPath Then Return
  
  Project.InsertFile(File.Name(sPath), GetCurrentDir(), sPath &/ ".src", True, True)
  
End

Public Sub tvwProject_Cancel()
  
  Dim sPath As String
  
  $bInRename = False
  sPath = GetCurrent()
  If Not sPath Then Return
  
  If sPath = $sDeleteKey Then Project.DeleteDir(sPath, True)
  $sDeleteKey = ""
  
End

Public Sub tvwProject_Expand()
  
  Project.FillDir(tvwProject.Item.Key)
  
End

Public Sub tvwProject_Collapse()
  
  Dim sKey As String = tvwProject.Item.Key
  
  $bHasJustCollapsed = True
  If Not sKey Then Return
  If File.Dir(sKey) = Project.Dir And If Not IsDir(sKey) Then tvwProject[sKey].Expanded = True
  
End

Public Sub mnuClean_Click()
  
  If Message.Warning(("All backup or generated files will be removed from the project directory."), ("Clean"), ("Cancel")) = 2 Then Return 
  
  Project.CleanUp
  
End

Public Sub mnuClearBreakpoints_Click()
  
  Design.ClearBreakpoints
  
End

Public Sub panInfo_Show()
  
  'RefreshInfo  
  
End

Public Sub mnuOpenRecent_Show()
  
  If $bUpdateRecentMenu And If Not CRecentFile.OutOfDate Then Return  
  UpdateRecentMenu
  $bUpdateRecentMenu = True
  
End

Public Sub mnuOpenExample_Show()
  
  UpdateExampleMenu(Last)
  
End

' Public Sub tabProperty_Click()
' 
'   With tabProperty
' 
'   Select Case .Index
'   
'     Case 0
'       FFormStack.Hide
'       'FProperty.Move(.X, .Y + .ClientY - 2, .W, .ClientH + 2)
'       FProperty.Show
'     
'     Case 1
'       FProperty.Hide
'       'FFormStack.Move(.X, .Y + .ClientY - 2, .W, .ClientH + 2)
'       FFormStack.Show
'   
'   End Select 
'   
'   End With
'   
' End

Public Sub panProperty_Arrange()
  
  'tabProperty_Click  
  
End

Public Sub tvwProject_Leave()
  
  $bInTreeView = False
  'tvwProject.ScrollBar = Scroll.None
  
End

Public Sub tvwProject_Enter()
  
  $bInTreeView = True
  'tvwProject.ScrollBar = Scroll.Vertical
  
End

Public Sub HidePanels()
  
  FSearch.Hide 'Action["find"].Value = False
  Action["console"].Value = False
  Balloon.Hide
  
End

Public Sub Form_KeyPress()
  
  Dim hEditor As FEditor
  
  If Key.Code = Key.Escape Then 

    If $bInRename Then Return ' Prevent Balloon.Hide from calling WAIT, reentering the event loop, and crashing Qt.

    ' Top-level forms get key event before now.
    Try hEditor = Project.ActiveForm
    If hEditor And If FCompletion.VisibleFrom(hEditor.Editor) Then Return
    
    If FSearch.InBrowse Then
      FSearch.Cancel
      Return
    Endif
    
    HidePanels
    FProperty.HideProperty
    Try Project.ActiveForm.SetFocus
    
  Else If Key.Code = Key["M"] And If Key.Control And If Key.Alt Then
    If Me.Menus.Visible Then
      mnuHideMenu_Click
    Else
      btnShowMenu_Click
    Endif
  
  Else If Key.Code = Key["L"] And If Key.Control Then
    
    txtSearchProject.SetFocus
    
  Else If Key.Code = Key.F2 Then
    
    If Key.Shift Then 
      CPosition.MovePrevious
      Stop Event
    Endif

  Endif
  
End

Public Sub ActivatePropertyTab()
  
  tabProperty.Index = 0
  
End

' Public Sub SetMessage(sMsg As String)
'   
'   'lblMessage.Text = sMsg
'   timMessage.Stop
'   timMessage.Start
'   'Wait
'   
' End
' 
' Public Sub timMessage_Timer()
'   
'   lblMessage.Text = ""
'   timMessage.Stop
'   
' End

Public Sub mnuBrowse_Click()
  
  Desktop.Open(Project.Dir)
  
End

Public Sub mnuEditWith_Show()
  
  Dim hProg As DesktopFile
  Dim hMenu As Menu
  
  mnuEditWith.Children.Clear
  For Each hProg In mnuEditWith.Tag
    hMenu = New Menu(mnuEditWith) As "mnuEditWithProg"
    hMenu.Caption = hProg.Name & " (" & hProg.ProgramName & ")"
    Try hMenu.Picture = hProg.GetIcon().Picture
    hMenu.Tag = hProg
  Next
  
End

Public Sub mnuEditWithProg_Click()
  
  Dim sKey As String = tvwProject.Key
  Dim hProcess As Process
  
  If sKey Then
    If CanEdit(sKey) Then
      hProcess = Last.Tag.Run(sKey)
      hProcess.Ignore = True
    Endif
  Endif
  
End

Public Sub mnuClearDebugWindows_Click()
  
  FDebugExpr.Clear
  
End

Public Sub btnClose_Click()
  
  panError.Hide
  
End

Public Sub mnuTerminal_Click()
  
  ' If Desktop.Type = "KDE4" Then
  '   Exec ["konsole", "--workdir", Project.Dir, "--notransparency"]
  ' Else
  Desktop.OpenTerminal(Project.Dir)  
  'Endif
  
End

Public Sub mnuHideMenu_Click()
  
  If Me.Menus.Visible Then
    Me.Menus.Hide
    sepMenu.Hide
    'btnShowMenu.Show
    Settings["/ShowMenus"] = Me.Menus.Visible
    Message.Optional(Subst(("To show the menu bar again, hit the following keys:<p><b>&1</b>"), mnuHideMenu.Shortcut), ("OK"), "HideMenu", "menu", Settings["/AlwaysDisplayOptionalMessages"])
  Else
    btnShowMenu_Click
  Endif
  
End

Public Sub btnShowMenu_Click()
  
  Me.Menus.Show
  sepMenu.Show
  'btnShowMenu.Hide
  Settings["/ShowMenus"] = Me.Menus.Visible
  
End

Public Sub tvwProject_Drag()
  
End

Public Sub mnuStatusBar_Click()
  
  Settings["/ShowMessages"] = mnuStatusBar.Value
  ReadConfig
  
End

Public Sub mnuNewConnection_Click()
  
  FNewConnection.Run()
  
End

Public Sub mnuInfoConnection_Click()
  
  FNewConnection.Run($sKey)
  
End

Public Sub mnuEditConnection_Click()
  
  tvwProject_Activate
  
End

Public Sub ShowMessage(sMsg As String, sIcon As String, Optional sKey As String)
  
  Dim X, Y As Integer
  
  If NoMessage Then Return
  
  If Not sKey Then sKey = Project.Dir
  
  'Try tvwProject[sKey].Selected = True
  'Wait
  Try tvwProject[sKey].EnsureVisible
  Y = 8
  Try Y = tvwProject[sKey].Y + tvwProject[sKey].H \ 2
  
  X = tvwProject.W \ 2
  
  If FMain.Visible Then
    Balloon(sMsg, tvwProject, Picture["icon:/32/" & sIcon], X, Y)
    ' lblError.Text = Replace$(sMsg, "\n", "<br>")
    ' imgIcon.Picture = Picture["icon:/32/" & sIcon]
    ' panError.Height = lblError.Height
    ' panError.Show
  Else
    sMsg = Replace(sMsg, "\n", "<br>")
    If sIcon = "error" Then
      Message.Error(sMsg)
    Else If sIcon = "warning" Then
      Message.Warning(sMsg)
    Else
      Message(sMsg)
    Endif
  Endif
  
End

Public Sub ShowError(sMsg As String, Optional sKey As String)
  
  ShowMessage(sMsg, "error", sKey)
  
End

Public Sub ShowWarning(sMsg As String, Optional sKey As String)
  
  ShowMessage(sMsg, "warning", sKey)
  
End

Public Sub ShowInfo(sMsg As String, Optional sKey As String)
  
  ShowMessage(sMsg, "info", sKey)
  
End

Public Sub mnuAddVersion_Click()
  
  If Not Project.IsAdded($sKey, True) Then Return
  
  If Message.Question(("Do you really want to add this file to the repository?"), ("Add"), ("Cancel")) = 2 Then Return
  
  VersionControl.AddFile($sKey)
  If Project.IsFormPath($sKey) Then VersionControl.AddFile(File.SetExt($sKey, "class"))
  Project.Refresh
  
End

Public Sub panErrorFrame_Arrange()
  
  btnClose.Move(panErrorFrame.Width - btnClose.Width, 0)
  
End

' Public Sub cmbFind_Change()
' 
'   FSearch.UpdateSearchString(cmbFind.Text)
' 
' End
' 
' Public Sub UpdateSearchString(sText As String)
'   
'   If sText <> cmbFind.Text Then cmbFind.Text = sText
'   
' End

Public Sub mnuFind_Click()
  
  FSearch.WakeUp(False)
  
End

Public Sub mnuReplace_Click()
  
  FSearch.WakeUp(True)
  
End

Public Sub btnSearchClear_Click()
  
  txtSearchProject.Clear
  Project.ProjectFilter = ""
  timSearchProject_Timer
  txtSearchProject.SetFocus
  
End

Public Sub txtSearchProject_Change()
  
  Project.ProjectFilter = Trim(txtSearchProject.Text)
  timSearchProject.Start
  
End

Public Sub txtSearchProject_GotFocus()
  
  If txtSearchProject.Font.Italic Then
    txtSearchProject.Clear
    txtSearchProject.Font.Italic = False
    timSearchProject_Timer    
  Endif
  
End


Public Sub timSearchProject_Timer()
  
  Project.Refresh
  timSearchProject.Stop
  
End

Public Sub txtSearch_Click()
  
  'Project.StoreCombo(cmbFind)
  If txtSearch.Text Then
    FSearch.FindProject(txtSearch.Text)
  Else
    FSearch.WakeUp(False)
  Endif
  
End

Public Sub txtSearch_Activate()
  
  txtSearch_Click
  
End

Public Sub mnuFilterAdd_Click()
  
  txtSearchProject.Font.Italic = True
  txtSearchProject.Text = Last.Text
  Project.ProjectFilter = Project.FILTER_ADDED
  tvwProject.SetFocus
  timSearchProject_Timer
  
End

' Public Sub panSearchProject_Enter()
' 
'   btnSearchAdd.Visible = VersionControl.Enabled()
'   btnSearchClear.Visible = True
'   btnSearchExported.Visible = True
' 
' End
' 
' Public Sub panSearchProject_Leave()
' 
'   btnSearchAdd.Visible = False
'   btnSearchClear.Visible = False
'   btnSearchExported.Visible = False
' 
' End

Public Sub mnuFilterExport_Click()

  txtSearchProject.Font.Italic = True
  txtSearchProject.Text = Last.Text
  Project.ProjectFilter = Project.FILTER_EXPORTED
  tvwProject.SetFocus
  timSearchProject_Timer

End

Public Sub mnuBackward_Show()
  
  CPosition.FillMenu(mnuBackward)
  
End

' Public Sub panProject_Resize()
' 
'   tvwProject.Columns[0].Width = panProject.W + 64
' 
' End

Private Sub OpenProfile()
  
  Dialog.Title = ("Choose a profile")
  Dialog.Filter = [Project.Name & "*.prof", Subst(("Profile for &1 project"), Project.Name)]
  Dialog.Path = Settings["/FMain/OpenProfile"]
  If Dialog.OpenFile() Then Return
  
  Settings["/FMain/OpenProfile"] = File.Dir(Dialog.Path)
  FProfile.Open(Dialog.Path)
  
End

Public Sub tvwProject_KeyPress()

  If Key.Code = Key.Enter Or If Key.Code = Key.Return Then tvwProject_Activate

End

Public Sub txtSearchProject_Activate()

  tvwProject_Activate

End

Public Sub txtSearchProject_KeyPress()

  Dim I As Integer

  If Key.Text = "+" Then
    Try tvwProject.Current.Expanded = True
    Stop Event
    Return
  Else If Key.Text = "-"
    Try tvwProject.Current.Expanded = False
    Stop Event
    Return
  Endif

  Select Case Key.Code
    
    Case Key.Esc
      btnSearchClear_Click
      Return
    
    Case Key.Up
      tvwProject.MoveCurrent()
      tvwProject.MoveAbove()
      
    Case Key.PageUp
      tvwProject.MoveCurrent()
      For I = 1 To tvwProject.ClientHeight \ tvwProject.Item.Height
        If tvwProject.MoveAbove() Then 
          GoSub GOTO_TOP
          Break
        Endif
      Next
    
    Case Key.Down
      tvwProject.MoveCurrent()
      tvwProject.MoveBelow()
      
    Case Key.PageDown
      tvwProject.MoveCurrent()
      For I = 1 To tvwProject.ClientHeight \ tvwProject.Item.Height
        If tvwProject.MoveBelow() Then
          GoSub GOTO_BOTTOM
          Break
        Endif
      Next
    
    Case Key.Home
      If Key.Control Then GoSub GOTO_TOP
    
    Case Key.End, Key.PageDown
      If Key.Control Then GoSub GOTO_BOTTOM
      
  End Select

   Try tvwProject.Item.Selected = True
   Try tvwProject.Item.EnsureVisible()
   Return
   
GOTO_TOP:

  tvwProject.MoveFirst()
  Return
  
GOTO_BOTTOM:

  tvwProject.MoveFirst()
  Do
    tvwProject.MoveLast()
    If tvwProject.Item.Count = 0 Then Break
    tvwProject.MoveChild()
  Loop
  Return
   
End

Public Sub UpdatePosition((bStart) As Boolean, bEnd As Boolean)
  
  'btnGoBack.Enabled = Not bStart
  btnGoForward.Enabled = Not bEnd
  
End

Public Sub picFilter_MouseDown()

  mnuFilter.Popup(picFilter.ScreenX, picFilter.ScreenY + picFilter.H)

End

Public Sub tlbMain_Configure()

  UpdateMenu

End

Public Sub Form_Resize()

  Dim W, H As Integer
  
  If dwgWelcome.Visible Then
    W = Desktop.Scale * 90 + 64
    H = Max(Desktop.Scale * 80 + 64, Me.ClientH - 64)
    dwgWelcome.Move((Me.ClientW - W) \ 2, (Me.ClientH - H) \ 2, W, H)
  Endif

End

Public Sub dwgWelcome_Draw()

  Dim X As Integer
  Dim Y As Integer
  
  If Not $hCornerNW Then
    $hCornerNW = Image.Load("img/welcome/corner.png")
    $hCornerNE = $hCornerNW.Copy().RotateRight()
    $hCornerSE = $hCornerNE.Copy().RotateRight()
    $hCornerSW = $hCornerSE.Copy().RotateRight()
    $hBorderN = Image.Load("img/welcome/border.png")
    $hBorderE = $hBorderN.Copy().RotateRight()
    $hBorderS = $hBorderE.Copy().RotateRight()
    $hBorderW = $hBorderS.Copy().RotateRight()
  Endif

  For X = 64 To dwgWelcome.W - 64 Step 64
    Draw.Image($hBorderN, X, 0, Min(64, dwgWelcome.W - 64 - X), 64)
    Draw.Image($hBorderS, X, dwgWelcome.H - 64, Min(64, dwgWelcome.W - 64 - X), 64)
  Next

  For Y = 64 To dwgWelcome.H - 64 Step 64
    Draw.Image($hBorderW, 0, Y, 64, Min(64, dwgWelcome.H - 64 - Y))
    Draw.Image($hBorderE, dwgWelcome.W - 64, Y, 64, Min(64, dwgWelcome.H - 64 - Y))
  Next

  Draw.Image($hCornerNW, 0, 0)
  Draw.Image($hCornerNE, dwgWelcome.W - 64, 0)
  Draw.Image($hCornerSW, 0, dwgWelcome.H - 64)
  Draw.Image($hCornerSE, dwgWelcome.W - 64, dwgWelcome.H - 64)

End

Public Sub OnBackgroundChange()
  
  wrkProject.Picture = Project.GetBackground()
  
End

Public Sub mnuPatch_Click()

  FMakePatch.ShowModal()

End

Public Sub mnuPatchProject_Click()

  FPatch.ShowModal()

End

Private Sub CompressAll(sPath As String, bUncompress As Boolean)
  
  Dim sFile As String
  Dim hTextEditor As FTextEditor
  
  If sPath = Project.KEY_MISC Then sPath = Project.Dir
  
  If Not IsDir(sPath) Then
    Try hTextEditor = Project.LoadFile(sPath)
    If hTextEditor Then 
      If bUncompress Then
        hTextEditor.Uncompress()
      Else
        If hTextEditor.Compress() Then
          If $sCompressMessage Then $sCompressMessage &= "<p>"
          $sCompressMessage &= "<tt>" & Mid$(sPath, Len(Project.Dir) + 2) & "</tt><p>" & FTextEditor.CompressMessage
        Endif
      Endif
    Endif
    Return
  Endif
  
  For Each sFile In Dir(sPath)
    If Left(sFile) = "." Then Continue
    If MCompressFile.CanCompress(sPath &/ sFile) Then CompressAll(sPath &/ sFile, bUncompress)
  Next
  
End
