' Gambas class file

Static Private $cTypeName As New Collection
Static Private $cNameType As New Collection(gb.IgnoreCase)

Public Name As String
Public Type As String
Public Kind As String
Public Signature As String
Public Value As String
Public Class As String
Public Component As String
Public NotPublic As Boolean
Public LineNumber As Integer
Public Help As String

Private $sArgBefore As String
Private $sArgAfter As String
Private $iArg As Integer
Private $iShowArg As Integer

Static Public Sub _init()

  Dim sType As String

  $cTypeName["b"] = "Boolean"
  $cTypeName["c"] = "Byte"
  $cTypeName["h"] = "Short"
  $cTypeName["i"] = "Integer"
  $cTypeName["l"] = "Long"
  $cTypeName["d"] = "Date"
  $cTypeName["g"] = "Single"
  $cTypeName["f"] = "Float"
  $cTypeName["v"] = "Variant"
  $cTypeName["s"] = "String"
  $cTypeName["o"] = "Object"
  $cTypeName["p"] = "Pointer"

  For Each sType In $cTypeName
    $cNameType[sType] = $cTypeName.Key
  Next

End

Static Public Sub NameToType(sType As String) As String
  
  If $cNameType.Exist(sType) Then sType = $cNameType[sType]
  Return sType
  
End


Public Sub Copy(sType As String, sNewType As String) As CSymbolInfo
  
  Dim hSym As New CSymbolInfo
  
  With hSym
    .Name = Name
    .Type = Replace(Type, sType, sNewType)
    .Kind = Kind
    .Signature = Replace(Signature, sType, sNewType)
    .Value = Value
    .Class = Class
    .Component = Component
    .NotPublic = NotPublic
    .LineNumber = 0
  End With
  
  Return hSym
  
End


Public Function IsHidden() As Boolean

  If Left(Name) = "_" Then Return True
  Return InStr(Name, "_") > 0 And Kind <> "C"

End


Public Function IsStatic() As Boolean

  Return UCase(Kind) = Kind

End

Public Sub IsProperty() As Boolean
  
  Return InStr("rpRPv", Kind) > 0
  
End

Public Sub IsFunction() As Boolean
  
  Return InStr("mMx", Kind) > 0
  
End

Public Function GetIcon() As String

  Dim bStatic As Boolean
  Dim sIcon As String

  bStatic = UCase(Kind) = Kind

  Select Case LCase(Kind)

    Case "r"
      sIcon = If(bStatic, "s-property-ro.png", "property-ro.png")
    Case "p"
      sIcon = If(bStatic, "s-property.png", "property.png")
    Case "v"
      sIcon = If(bStatic, "s-variable.png", "variable.png")
    Case "c"
      sIcon = "constant.png"
    Case ":"
      sIcon = "event.png"
    Case "t"
      sIcon = "control.png"
    Case "m", "x"
      sIcon = If(bStatic, "s-method.png", "method.png")
    Default
      sIcon = "unknown.png"

  End Select

  Return "img/symbol" &/ sIcon

End


Private Sub NextArg()
  
  Inc $iArg  
  
  If $iArg = $iShowArg Then 
    $sArgBefore = "<u>"
    $sArgAfter = "</u>"
  Else 
    $sArgBefore = ""
    $sArgAfter = ""
  Endif

End

' Private Sub MakeArgBold(sCode As String, iShowArg As Integer) As String
'   
'   Dim sCar As String
'   Dim iInd As Integer
'   Dim aWait As New String[]
'   Dim bString As Boolean
'   Dim sSign As String
'   Dim bOptional As Boolean
'   
'   If iShowArg < 0 Then Return sCode
'   
'   $iArg = -1
'   $iShowArg = iShowArg
'   NextArg
'   sSign = $sArgBefore
' 
'   Do
'     
'     Inc iInd
'     If iInd > Len(sCode) Then Break
'     
'     sCar = Mid$(sCode, iInd, 1)
' 
'     If bString Then
'       sSign &= sCar
'       If sCar = "\\" Then
'         Inc iInd
'         If iInd > Len(sCode) Then Break
'         sSign &= Mid$(sCode, iInd, 1)
'       Endif
'       Continue
'     Endif
'     
'     If sCar = Chr$(34) Then
'       sSign &= sCar
'       bString = Not bString
'       Continue
'     Endif
'     
'     If sCar = "(" Then
'       sSign &= sCar
'       aWait.Push(")")
'     Else If sCar = "[" Then
'       sSign &= sCar
'       aWait.Push("]")
'     Else If aWait.Count Then
'       sSign &= sCar
'       If sCar = aWait[aWait.Max] Then
'         aWait.Pop
'       Endif
'     Else If Mid$(sCode, iInd, 9) = "OPTIONAL " Then
'       iInd += 7
'       If Not bOptional Then 
'         sSign &= " ["
'       Endif
'       bOptional = True
'     Else If Mid$(sCode, iInd, 2) = ", " Then
'       sSign &= $sArgAfter 
'       If Mid$(sCode, iInd, 11) = ", OPTIONAL " Then
'         If Not bOptional Then 
'           sSign &= " ["
'           bOptional = True
'         Endif 
'         iInd += 9
'       Endif
'       sSign &= ", "
'       NextArg
'       sSign &= $sArgBefore
'     Else If Mid$(sCode, iInd, 3) = "..." Then 
'       If $iShowArg > $iArg Then
'         sSign &= "<u>...</u>"
'       Else 
'         sSign &= "..."
'       Endif 
'       iInd += 2
'     Else
'       sSign &= sCar
'     Endif
'     
'   Loop
'   
'   If bOptional Then
'     sSign &= $sArgAfter & " ]"
'   Else 
'     sSign &= $sArgAfter
'   Endif
'   
'   Return sSign  
'   
' End

Private Sub MakeSignature(sSign As String) As String
  
  Dim aSym As String[]
  Dim iInd As Integer
  Dim aWait As New String[]
  Dim bOptional As Boolean
  Dim sSym As String
  Dim sType As String
  Dim sDefault As String
  Dim bByRef As Boolean
  Dim iPos, iPos2 As Integer
  Dim sResult As String
  
  Highlight.Analyze(sSign)
  aSym = Highlight.Symbols
  
  Do
    
    If iInd > aSym.Max Then Break
    
    sSym = aSym[iInd]
    
    If sSym = "..." Then
      sResult &= "."
      Break
    Endif
    
    If UCase(sSym) = "OPTIONAL" Then
      If Not bOptional Then
        sResult &= "["
        bOptional = True
      Endif
      Inc iInd
      sSym = aSym[iInd]
    Endif
    
    bByRef = False
    If UCase(sSym) = "BYREF" Then
      bByRef = True
      Inc iInd
      sSym = aSym[iInd]
    Endif
    
    If sSym = "(" And If aSym[iInd + 2] = ")" Then
      sSym = aSym[iInd + 1]
      iInd += 2
    Endif
    
    If bByRef Then sSym = "&" & sSym
    
    Inc iInd
    If aSym[iInd] <> "AS" Then Break
    
    Inc iInd
    sType = aSym[iInd]
    If $cNameType.Exist(sType) Then
      sType = $cNameType[sType]
    Else
      sType = UCase(Left(sType)) & Mid$(sType, 2) & ";"
    Endif
    sResult &= "(" & sSym & ")" & sType
    
    If bOptional And If iInd < aSym.Max Then
      If aSym[iInd + 1] = "=" Then
        iInd += 2
        sDefault = ""
        iPos = Highlight.Positions[iInd]
        While iInd <= aSym.Max
          sSym = aSym[iInd]
          If sSym = "(" Then
            aWait.Push(")")
          Else If sSym = "[" Then
            aWait.Push("]")
          Else If aWait.Count Then
            If sSym = aWait[aWait.Max] Then
              aWait.Pop
            Endif
          Else
            If sSym = ")" Or If sSym = "," Then 
              iPos2 = Highlight.Positions[iInd]
              sDefault = Trim(Mid$(sSign, iPos + 1, iPos2 - iPos))
              Dec iInd
              Break
            Else If iInd = aSym.Max Then
              sDefault = Trim(Mid$(sSign, iPos + 1))
              Break
            Endif
          Endif
          Inc iInd
        Wend
        sResult &= "=" & sDefault & "\t"
      Endif
    Endif
    
    Inc iInd
    If iInd > aSym.Max Then Break
    sSym = aSym[iInd]
    If sSym <> "," Then Break
    Inc iInd

  Loop
  
  If bOptional Then sResult &= "]"
  
  Return sResult
  
Catch

End

Public Function GetNativeSignature() As String
  
  If Left(Signature) = "#" Then Return MakeSignature(Mid$(Signature, 2))
  Return Signature
  
End

Private Sub SplitSignature(sSign As String) As String[]
  
  Dim iPos As Integer
  Dim aSign As New String[2]
  
  iPos = InStr(sSign, "[")
  If iPos Then
    aSign[0] = Left(sSign, iPos - 1)
    aSign[1] = Mid$(sSign, iPos + 1, -1)
  Else
    aSign[0] = sSign
  Endif
  Return aSign
  
End

Private Sub MergeSignature(sSign As String, sParentSign As String) As String
  
  Dim aParentSign As String[]
  Dim aSign As String[]

  aSign = SplitSignature(sSign)
  aParentSign = SplitSignature(sParentSign)
  sSign = aParentSign[0] & aSign[0] & "[" & aParentSign[1] & aSign[1] & "]"
  If sSign Ends "[]" Then sSign = Left(sSign, -2)
  Return sSign
  
End


Public Function GetSignature(bBalise As Boolean, Optional iShowArg As Integer = -1) As String

  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String
  Dim iPos As Integer
  Dim bName As Boolean
  Dim bFirst As Boolean
  Dim sSign As String
  Dim sKeywordAs As String
  Dim sKeywordByRef As String
  Dim sSym As String
  Dim hClass As CClassInfo
  Dim hSym As CSymbolInfo

  sKeywordAs = If(Settings["/Editor/KeywordsUseUpperCase"], "AS", "As")
  sKeywordByref = If(Settings["/Editor/KeywordsUseUpperCase"], "BYREF", "ByRef")
  
  sSign = GetNativeSignature()
  
  If Name = "_new" Then
    hClass = CComponent.GetClassDescription({Component} &/ {Class})
    Do
      If Not hClass.Parent Then Break
      'If hClass.ParentComponent = hClass.Component Then Break
      hClass = CComponent.GetClassDescription(hClass.ParentComponent &/ hClass.Parent)
      'hClass = CComponent.Classes[hClass.ParentComponent &/ hClass.Parent]
      hSym = hClass.Symbols["_new"]
      If hSym Then sSign = MergeSignature(sSign, hClass.Symbols["_new"].GetNativeSignature())
    Loop
  Endif
  
  bFirst = True
  
  $iArg = -1
  $iShowArg = iShowArg

  Do

    Inc iInd

    If iInd > Len(sSign) Then Break

    sCar = Mid$(sSign, iInd, 1)

    If sCar = "'" Or sCar = "(" Then

      If sCar = "'" Then
        iPos = InStr(sSign, "'", iInd + 1)
      Else
        iPos = InStr(sSign, ")", iInd + 1)
      Endif

      If iPos = 0 Then Break
      
      GoSub ADD_COMMA

      sSym = Mid$(sSign, iInd + 1, iPos - iInd - 1)

      sRes &= $sArgBefore 
      
      If Left(sSym) = "&" Then
        sSym = Mid$(sSym, 2)
        sRes &= sKeywordByRef & " "
      Endif
      
      sRes &= sSym & " " & sKeywordAs & " "

      iInd = iPos
      bName = True

      Continue

    Endif

    If sCar = "<" Then

      iPos = InStr(sSign, ">", iInd + 1)
      If iPos = 0 Then Break
      iInd = iPos
      Continue

    Endif

    If sCar = "[" Then

      sRes &= $sArgAfter
      If bBalise Then 
        sRes &= "<font color=#808080>"
      Else
        GoSub ADD_COMMA
        sRes &= "["
        bFirst = True
      Endif
      
      $sArgAfter = ""
      Continue

    Endif

    If sCar = "]" Then

      sRes &= $sArgAfter 
      If bBalise Then
        sRes &= "</font>"
      Else
        sRes &= "]"
      Endif
      $sArgAfter = ""
      Continue

    Endif
    
    If sCar = "=" Then
    
      iPos = InStr(sSign, "\t", iInd + 1)
      If iPos = 0 Then Break
      $sArgAfter &= " = " & Mid$(sSign, iInd + 1, iPos - iInd - 1)
      iInd = iPos
    
    Endif

    If sCar = "." Then
      
      GoSub ADD_COMMA
      'NextArg
      If bBalise And If $iShowArg >= 0 And If $iShowArg > $iArg Then sRes &= "<u>"
      sRes &= $sArgBefore & "..."
      If bBalise And If $iShowArg >= 0 And If $iShowArg > $iArg Then sRes &= "</u>"
      Continue
      
    Endif

    If Not bName Then

      GoSub ADD_COMMA

      sRes &= $sArgBefore & "? " & sKeywordAs & " " 
      bName = False

    Endif
    
    If (sCar >= "A" And sCar <= "Z") Or sCar = "." Then

      iPos = InStr(sSign, ";", iInd)
      If iPos = 0 Then iPos = Len(sSign) + 1

      sRes &= Mid$(sSign, iInd, iPos - iInd)

      iInd = iPos
      Continue

    Endif

    sRes &= GetType(sCar)

  Loop
  
  sRes &= $sArgAfter
    
  If Name = "_get" Or Name = "_put" Then
    sRes = If(bBalise, "<b>[</b>", "[") & sRes & If(bBalise, "<b>]</b>", "]")
  Else
    sRes = If(bBalise, "<b>(</b>", "(") & sRes & If(bBalise, "<b>)</b>", ")")
  Endif
  
  If Type Then sRes &= " " & sKeywordAs & " " & GetType(Type)

  Return sRes
  
ADD_COMMA:

  If bFirst Then
    bFirst = False
  Else
    sRes &= $sArgAfter & ", "
  Endif
  NextArg
  Return

End

Public Function GetDescription(Optional bBalise As Boolean) As String

  Dim bStatic As Boolean
  Dim sAccess As String
  Dim sStatic As String
  Dim sDesc As String
  Dim sSign As String

  bStatic = UCase(Kind) = Kind
  sStatic = If(bStatic, "Static ", "")
  sAccess = If(NotPublic, "Private ", "Public ")

  Select LCase(Kind)
  
    Case "r"
      sDesc = sStatic & "Property Read"
    Case "p"
      sDesc = sStatic & "Property"
    'CASE "v"
    '  sIcon = "img/16" &/ If(bStatic, "s-variable.png", "variable.png")
    Case "c"
      sDesc = sAccess & "Const"
    Case ":"
      sDesc = "Event"
    'CASE "t"
    '  sIcon = "img/16/control.png"
    Case "m"
      sDesc = sStatic & sAccess & " " & If(Type, "Function", "Sub")
    Case "v"
      sDesc = sStatic & sAccess
    Case "l"
      sDesc = "Dim"
    Case "x"
      sDesc = sAccess & " Extern"

  End Select  
  
  If Settings["/Editor/KeywordsUseUpperCase"] Then sDesc = UCase(sDesc)

  If Kind = ":" Then
    sDesc &= " " & Mid$(Name, 2) & " "
  Else
    sDesc &= " " & Name & " "
  Endif
  
  If InStr(":mx", LCase(Kind)) Then 
    sSign = GetSignature(bBalise)
    If sSign Then
      sDesc &= sSign
    Else
      sDesc &= "(...)"
    Endif
  Else
    If Type Then sDesc &= " " & If(Settings["/Editor/KeywordsUseUpperCase"], "AS", "As") & " " & GetType(Type, bBalise)
  Endif
  
  Return sDesc
  
End


Static Public Function GetType(sType As String, Optional bBalise As Boolean) As String

  If Len(sType) = 1 Then
    sType = $cTypeName[sType]
  Else If Left$(sType) = "." Then
    'IF bBalise THEN
    '  sType = "<I>" & Mid$(sType, 2) & "</I>"
    'ELSE
    sType = "Object"
    'ENDIF
  Endif

  If bBalise Then
    Return "<b>" & sType & "</b>"
  Else
    Return sType
  Endif

End

Static Public Function TransformSignature(sSign As String, bBalise As Boolean) As String

  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String
  Dim iPos As Integer
  Dim bName As Boolean
  Dim bFirst As Boolean

  Dim sBold As String
  Dim sNoBold As String

  If bBalise Then
    sBold = "<B>"
    sNoBold = "</B>"
  Endif

  bFirst = True

  Do

    iInd = iInd + 1

    If iInd > Len(sSign) Then Break

    sCar = Mid$(sSign, iInd, 1)

    If sCar = "'" Or sCar = "(" Then

      If sCar = "'" Then
        iPos = InStr(sSign, "'", iInd + 1)
      Else
        iPos = InStr(sSign, ")", iInd + 1)
      Endif

      If iPos = 0 Then Break

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & sBold & "," & sNoBold & " "
      Endif

      sRes = sRes & Mid$(sSign, iInd + 1, iPos - iInd - 1) & " " & sBold & "AS" & sNoBold & " "

      iInd = iPos
      bName = True

      Continue

    Endif

    If sCar = "<" Then

      iPos = InStr(sSign, ">", iInd + 1)
      If iPos = 0 Then Break
      iInd = iPos
      Continue

    Endif

    If sCar = "[" Then

      sRes = sRes & " " & sBold & "[" & sNoBold
      Continue

    Endif

    If sCar = "]" Then

      sRes = sRes & " " & sBold & "] " & sNoBold
      Continue

    Endif

    If Not bName Then

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & sBold & "," & sNoBold & " "
      Endif

      sRes = sRes & sBold & "? AS " & sNoBold
      bName = False

    Endif

    If sCar >= "A" And sCar <= "Z" Then

      iPos = InStr(sSign, ";", iInd)
      If iPos = 0 Then iPos = Len(sSign) + 1

      sRes = sRes & Mid$(sSign, iInd, iPos - iInd)

      iInd = iPos
      Continue

    Endif

    sRes = sRes & GetType(sCar, bBalise)

  Loop

  Return sRes

End

Public Function GetHelpURL(Optional bShowFile As Boolean) As String
  
  Dim sPath As String
  Dim sName As String
  Dim sComp As String
  Dim hComp As CComponent
  
  If Component = "gb" And If Class = "." Then
    Return MHelp.GetLangURL(Name)
  Endif

  If Component And If Component <> CComponent.PROJECT_NAME Then hComp = CComponent.All[Component]
  
  If hComp Then

    If hComp.Library Or If hComp.ThirdParty Then
      
      Return Subst("gambas://library/&1/&2/&3", Component, Class, Name)

    Else

      sPath = MHelp.GetURL("comp")
      sComp = Component
      'If sComp = "gb.qt4" Or If sComp = "gb.gtk" Or If sComp = "gb.gui" Then sComp = "gb.qt"
      'If sComp = "gb.qt4.ext" Then sComp = "gb.qt.ext"
      sPath &/= LCase(sComp)
      sPath &/= LCase(Left(Class) & Replace(Mid(Class, 2), "_", "."))
      
      sName = LCase(Name)
      sName = Left(sName) & Replace(Mid$(sName, 2), "_", ".")
      sName = Replace(sName, ":", ".")
      sPath &/= sName
      
      Return sPath & "?help&v3&" & MHelp.GetLanguage()
      
    Endif
    
  Else
  
    Return Subst("gambas://project/&1/&2#&3&4", Class, Name, LineNumber, If(bShowFile, "?showfile", ""))
    
  Endif
  
End

'' Transform one line of help into HTML by decoding some sort of light wiki syntax.
''
'' - #sLine# is the line of help text.
''
'' The HTML is returned.

' Private Sub DecodeHelpLine(sLine As String) As String
'   
'   Dim iPos As Integer
'   Dim iLen As Integer = String.Len(sLine)
'   Dim sChar As String
'   Dim sHtml As String
'   Dim sWait As String
'   Dim bBold, bItalic, bMonospace, bUnderline As Boolean
'   Dim iSavePos As Integer
'   Dim sLink As String
'   Dim iPoint As Integer
'   Dim hClass As CClassInfo
'   Dim hSymbol As CSymbolInfo
'   Dim sHtmlAfter As String
'   
'   sLine = RTrim(sLine)
'   If Not sLine Then Return "<p>"
'   If sLine = "--" Then Return "<hr>"
'   
'   If sLine Begins "-" Then 
'     sHtml = "<li>"
'     sHtmlAfter = "</li>"
'     sLine = Mid$(sLine, 2)
'   Else If sLine Begins "+" Then
'     iPoint = 2
'     While Left(sLine) = "+" 
'       sLine = Mid$(sLine, 2)
'       Inc iPoint
'     Wend
'     sHtml = "<h" & iPoint & ">"
'     sHtmlAfter &= "</h" & iPoint & ">"
'   Endif
'   
'   Do
'   
'     Inc iPos
'     If iPos > iLen Then Break
' 
'     sChar = String.Mid(sLine, iPos, 1)
'   
'     If sWait = ">" Then
'       sHtml &= sChar
'       If sChar = ">" Then sWait = ""
'       Continue
'     Else If sWait = "]" Then
'       If sChar <> "]" Then Continue
'       sWait = ""
'       sLink = String.Mid$(sLine, iSavePos, iPos - iSavePos)
'       sChar = sLink
'       If sLink Like "*://*" Then
'       Else
'         iPoint = InStr(sLink, "|")
'         If iPoint Then
'           sChar = Mid$(sLink, iPoint + 1)
'           sLink = Left(sLink, iPoint - 1)
'         Endif
'         iPoint = RInStr(sLink, ".")
'         If iPoint = 0 Then
'           If UCase(sLink) = sLink Then
'             sLink = MHelp.GetLangURL(sLink)
'           Else
'             hClass = Null
'             Try hClass = CComponent.Classes[sLink]
'             If hClass Then
'               sLink = hClass.GetHelpURL()
'             Else
'               sLink = ""
'             Endif
'           Endif
'         Else
'           hSymbol = Null
'           Try hSymbol = CComponent.Classes[Trim(Left(sLink, iPoint - 1))].Symbols[Trim(Mid$(sLink, iPoint + 1))]
'           If hSymbol Then
'             sLink = hSymbol.GetHelpURL()
'           Else
'             sLink = ""
'           Endif
'         Endif
'       Endif
'       If sLink Then
'         sHtml &= "<a href=\"" & sLink & "\">" & Html(sChar) & "</a>"
'       Else
'         sHtml &= "<i>" & Html(sChar) & "?</i>"
'       Endif
'       Continue
'     Endif
'     
'     If sChar = "\\" Then
'       sHtml &= Html(String.Mid$(sLine, iPos + 1, 1))
'       Inc iPos
'     Else If sChar = "<" Then
'       sHtml &= sChar
'       sWait = ">"
'     Else If sChar = "*" Then
'       bBold = Not bBold
'       sHtml &= If(bBold, "<b>", "</b>")
'     Else If sChar = "=" Then
'       bMonospace = Not bMonospace
'       sHtml &= If(bMonospace, "<tt>", "</tt>")
'     Else If sChar = "'" Then
'       bItalic = Not bItalic
'       sHtml &= If(bItalic, "<i>", "</i>")
'     Else If sChar = "#" Then
'       bUnderline = Not bUnderline
'       sHtml &= If(bUnderline, "<u>", "</u>")
'     Else If sChar = "[" Then
'       sWait = "]"
'       iSavePos = iPos + 1
'     Else
'       sHtml &= Html(sChar)
'     Endif
'   
'   Loop
'   
'   sHtml &= sHtmlAfter
'   Return sHtml
'   
' End

Public Sub GetHelpMarkup() As String
  
  Dim sPath As String
  Dim hClass As CClassInfo
  Dim hForm As Object
  Dim hEdit As Editor
  Dim iLine As Integer
  
  If Help Then
    Return Help
  Endif
  
  If Component Then Return
  
  sPath = Project.FindPath({Class})
  If Not sPath Then
    hClass = CComponent.Classes[{Class}]
    If hClass And If hClass.DeclareIn Then
      sPath = Project.FindPath(hClass.DeclareIn)
    Endif
  Endif
  If Not sPath Then Return
  
  hForm = Project.LoadFile(sPath)
  Try hEdit = hForm.Editor
  If Not hEdit Then Return  
  iLine = Me.LineNumber - 1
  If iLine < 0 Then Return
  
  Return MHelp.FindMarkup(hEdit, iLine)
  
End

Private Sub KeywordCase(sKeyword As String) As String
  
  If Settings["/Editor/KeywordsUseUpperCase"] Then
    Return UCase(sKeyword)
  Else
    Return sKeyword
  Endif
  
End


Public Function GetHelpHTML() As String
  
  Dim sHTML, sHelp As String
  Dim I As Integer
  Dim sSyntax As String
  Dim sMarkup As String
  Dim sTitle As String
  Dim sSym As String
  Dim bArg As Boolean
  
  sMarkup = GetHelpMarkup()
  If sMarkup Then 
    Try sHelp = Markup.Convert(sMarkup)
    If Error Then sHelp = "<b>" & Error.Text & "</b>"
  Endif
  
  sHTML = File.Load("help/symbol-help.html")
  sHTML = Replace(sHTML, "$(hide-title)", "")
  sHTML = Replace(sHTML, "$(class)", {Class})
  sHTML = Replace(sHTML, "$(name)", Name)
  
  'If Me.IsStatic() Then sHTML &= "<font color=\"blue\">STATIC </font>"

  sSyntax &= Me.GetDescription(False)
  ' sSyntax = Replace(Replace(sSyntax, "</b>", ""), "<b>", "")
  ' 
  Highlight.Analyze(sSyntax, True)
  sSyntax = ""
  
  For I = 0 To Highlight.Symbols.Max
    sSym = Highlight.Symbols[I]
    If sSym = "[" Or If sSym = "]" Then
      sSyntax = RTrim(sSyntax) & "<b> " & sSym & " </b>"
      Continue
    Else If sSym = "," Then
      sSyntax = RTrim(sSyntax) & sSym & " "
      Continue
    Endif
    Select Case Highlight.Types[I]
      Case Highlight.Symbol
        If bArg Then
          sSyntax &= "<u>" & sSym & "</u> "
        Else
          sSyntax &= "<b>" & sSym & "</b> "
          bArg = True
        Endif
      Case Highlight.Operator
        sSyntax &= "<font color=\"blue\">" & Highlight.Symbols[I] & "</font> "
      Case Highlight.DataType
        sSyntax &= "<font color=\"#0080FF\">" & sSym & "</font> "
      Case Highlight.Keyword
        sSyntax &= "<font color=\"blue\">" & KeywordCase(sSym) & "</font> "
      Case Else
        sSyntax &= sSym
    End Select
  Next
  
  sHTML = Replace(sHTML, "$(syntax)", sSyntax)
  sHTML = Replace(sHTML, "$(help)", sHelp)

  If Not Component Or If Component = CComponent.PROJECT_NAME Then sTitle = "<a href=\"" & "gambas://project/" & {Class} & "#" & Me.LineNumber & "?showfile" & "\">"
  sTitle &= {Class} & "." & Name
  If Not Component Or If Component = CComponent.PROJECT_NAME Then sTitle &= "</a>"

  sHTML = Replace(sHTML, "$(title)", sTitle)

  Return sHTML

End

