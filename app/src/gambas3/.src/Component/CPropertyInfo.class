' Gambas class file

Public Const EVENT_NAME As String = "Group"
Public Const SCALE_NAME As String = "Scaled"
Public Const PUBLIC_NAME As String = "Public"
Public Const TRANSLATE_NAME As String = "Translate"

Static Public MULTI_CONTAINER_PROP As String[] = ["Index", "Count", "Text", "Picture"]

Static Public CreatingSpecialProperty As Boolean

Static Private $cRedirect As New Collection
Static Private $cTranslate As New Collection
Static Private $cUpdateName As New Collection
Static Private $cAlwaysRead As New Collection
Static Private $cShortcut As New Collection


Public Name As String
Public Type As String
Public DefaultValue As Variant 
Public Coord As Boolean '' If a property is a coordinate
Public Required As Boolean
Public Exclude As Boolean
Public Hidden As Boolean
Public DoNotApply As Boolean
Public AlwaysRead As Boolean
Public Virtual As Boolean
Public Translate As Boolean
Public Argument As String
Public UpdateName As Boolean 
Public (Shortcut) As Boolean
'PUBLIC Control AS Boolean

Public ConstantClass As String
Public ConstantList As Collection


Static Public Sub _init()

  $cRedirect["Visible"] = True
  '$cRedirect["*.Enabled"] = True
  $cRedirect["Action"] = True
  $cRedirect["Tag"] = True
  $cRedirect["Password"] = True
  $cRedirect["Mouse"] = True
  $cRedirect["ToolTip"] = True
  $cRedirect["Drop"] = True
  $cRedirect["List"] = True
  $cRedirect["Arrangement"] = True
  $cRedirect["Padding"] = True
  $cRedirect["Ignore"] = True
  $cRedirect["Indent"] = True
  $cRedirect["Spacing"] = True
  $cRedirect["Expand"] = True
  $cRedirect["X"] = True
  $cRedirect["Y"] = True
  $cRedirect["Width"] = True
  $cRedirect["Height"] = True

  $cRedirect["Label.Padding"] = False
  $cRedirect["LCDLabel.Padding"] = False
  $cRedirect["TextLabel.Padding"] = False
  $cRedirect["GridView.Padding"] = False
  $cRedirect["TableView.Padding"] = False

  $cRedirect["Form.Border"] = True
  $cRedirect["Form.FullScreen"] = True
  $cRedirect["Form.Icon"] = True
  $cRedirect["Form.Maximized"] = True
  $cRedirect["Form.Mask"] = True
  $cRedirect["Form.Transparent"] = True
  $cRedirect["Form.Minimized"] = True
  $cRedirect["Form.Persistent"] = True
  $cRedirect["Form.Picture"] = True
  $cRedirect["Form.Resizable"] = True
  $cRedirect["Form.SkipTaskbar"] = True
  $cRedirect["Form.Stacking"] = True
  $cRedirect["Form.Sticky"] = True
  $cRedirect["Form.Type"] = True
  $cRedirect["Form.Text"] = True
  $cRedirect["Form.X"] = True
  $cRedirect["Form.Y"] = True

  'Nein!
  '$cRedirect["Button.Default"] = TRUE
  '$cRedirect["Button.Cancel"] = TRUE

  $cRedirect["Menu.Visible"] = False
  $cRedirect["Menu.Enabled"] = True
  $cRedirect["Menu.Shortcut"] = True
  $cRedirect["Menu.Text"] = True
  
  $cRedirect["DrawingArea.Cached"] = True
  $cRedirect["DrawingArea.NoBackground"] = True
  
  $cRedirect["Timer.Enabled"] = True
  $cRedirect["WebView.Editable"] = True
  
  $cRedirect["AutoResize"] = True
  $cRedirect["Connection"] = True

  $cTranslate["Text"] = True
  $cTranslate["Title"] = True
  $cTranslate["List"] = True
  $cTranslate["FileChooser.Filter"] = True
  $cTranslate["Caption"] = True
  $cTranslate["ToolTip"] = True
  $cTranslate["Wizard.ActionText"] = True

  $cUpdateName["ComboBox.ReadOnly"] = True
  $cUpdateName["Text"] = True
  $cUpdateName["Picture"] = True

  $cAlwaysRead["RadioButton.Value"] = True
  $cAlwaysRead["ToggleButton.Value"] = True
  $cAlwaysRead["ToolButton.Value"] = True
  $cAlwaysRead["Button.Default"] = True
  $cAlwaysRead["Button.Cancel"] = True
  $cAlwaysRead["ProgressBar.Value"] = True
  $cAlwaysRead["ProgressBar.Max"] = True
  
  $cShortcut["Button.Text"] = True
  $cShortcut["Menu.Text"] = True
  $cShortcut["ToolButton.Text"] = True
  $cShortcut["RadioButton.Text"] = True
  $cShortcut["CheckBox.Text"] = True
  $cShortcut["ToggleButton.Text"] = True
  $cShortcut["DataCheckBox.Text"] = True
  
End

Private Sub GetFlag(cCol As Collection, sClass As String, sName As String) As Boolean
  
  If cCol.Exist(sClass & "." & sName) Then
    Return cCol[sClass & "." & sName]
  Else If cCol.Exist(sName) Then 
    Return True
  Endif
  
End


Public Sub _new(sComponent As String, sClass As String, sName As String, sKind As String, Optional bVirtual As Boolean, Optional bDoNotApply As Boolean, Optional sDefVal As String)

  Dim iPos As Integer
  Dim sList As String
  Dim cList As String[]
  Dim hSym As CSymbolInfo
  'DIM sDefVal AS String
  Dim sSign As String
  Dim sFirst As String
  Dim sArg As String
  Dim hClass As CClassInfo

  Name = sName

  If CreatingSpecialProperty Then
    
    If Name = EVENT_NAME Then
      Type = "s"
      Virtual = True
      Exclude = True
      DoNotApply = True
      Return
    Else If Name = SCALE_NAME Then 
      Type = "b"
      Virtual = True
      Exclude = False
      DoNotApply = True
      DefaultValue = True
      Return
    Else If Name = PUBLIC_NAME Then
      Type = "b"
      Virtual = True
      Exclude = False
      DoNotApply = True
      DefaultValue = False
      Return
    Else If Name = TRANSLATE_NAME Then
      Type = "b"
      Virtual = True
      Exclude = False
      DoNotApply = True
      DefaultValue = True
      Return
    Endif
    
  Endif

  If sComponent Then
    hClass = CComponent.Classes[sComponent &/ sClass]
    Try hSym = hClass.Symbols[sName]
    Type = hSym.Type
    sSign = hSym.Signature
  Else
    hClass = CComponent.Classes[sClass]
    If Name = "X" Or If Name = "Y" Then
      Type = "i"
      sKind = "Position"
    Endif
  Endif
  'sClass = hSym.Class

  Required = sKind = "Position"

  If Len(Type) = 1 Then
    If Name = "Tag" Then
      Type = "s"
    Endif
  Else
    DefaultValue = Null
  Endif

  If sDefVal Then
    Select Case Type
      Case "i"
        Try DefaultValue = CInt(sDefVal)
        If Error Then DefaultValue = sDefVal
      Case "f"
        DefaultValue = CFloat(sDefVal)
      Case "b"
        DefaultValue = LCase(sDefVal) <> "false"
      Case "s"
        DefaultValue = sDefVal
    End Select
  Else If IsNull(DefaultValue) Then
    Select Case Type
      Case "b"
        DefaultValue = False
      Case "i", "f"
        DefaultValue = 0
    End Select
  Endif

  If sKind Then 

    iPos = InStr(sKind, ".")
    If iPos Then
    
      Type = "Constant"
  
      ConstantList = New Collection
      ConstantClass = Left(sKind, iPos - 1)      
      sArg = Mid$(sKind, iPos + 1)
      
      If sArg = "*" Then 

        For Each hSym In CComponent.Classes[ConstantClass].Symbols

          If hSym.Kind = "C" Then
            If Not hSym.IsHidden() Then
              ConstantList["#" & CStr(hSym.Value)] = hSym.Name
              If Not sFirst Then sFirst = hSym.Name
            Endif
          Endif

        Next

      Else 
        
        cList = Split(sArg, ";")

        For Each sList In cList

          hSym = CComponent.Classes[ConstantClass].Symbols[sList]
          ' Maybe the constant declared in the property don't really exist
          Try ConstantList["#" & CStr(hSym.Value)] = sList

        Next

      Endif

      ' if the default value is numeric, transform it into its symbol
      sList = ConstantList["#" & CStr(DefaultValue)]
      If sList Then DefaultValue = sList

    Else
  
      iPos = InStr(sKind, ":")
      If iPos Then 
        sArg = Mid$(sKind, iPos + 1)
        sKind = Left$(sKind, iPos - 1)
      Endif
  
      Select Case sKind
      
        Case Else ' Color,Path,Font,Range
  
          Type = sKind
          Argument = sArg
  
      End Select
      
    Endif
  
  Else

    If Type = "i" Then
      If Name = "Background" Or Name = "Foreground" Or InStr(Name, "Color") > 0 Then
        Type = "Color"
      Endif
    Else If Type = "s" Then
      If InStr(Name, "Path") Then
        Type = "Path"
      Else If Name = "Menu" Then
        Type = "Menu"
      Endif
  
    Endif
    
  Endif

  If Type = "Color" Then DefaultValue = Color.Default

  If Left(Name) = "#" Then
    Coord = Name = "#X" Or Name = "#Y" Or Name = "#Width" Or Name = "#Height"
    If Coord Then DefaultValue = Null
  Endif
  
  If bDoNotApply Then
    DoNotApply = True
  Else
    DoNotApply = GetFlag($cRedirect, sClass, Name)
    If Not DoNotApply And If Name = "Enabled" And If hClass.Container Then 
      DoNotApply = True
    Endif
  Endif

  'IF DoNotApply THEN PRINT "DoNotApply: "; sClass; "."; Name
  
  AlwaysRead = GetFlag($cAlwaysRead, sClass, Name)

  If hClass.MultiContainer Then
    Exclude = Name = "Text" Or Name = "Index" Or Name = "Picture"
    'AlwaysRead = Name = "Text" OR Name = "Picture"
    Hidden = Name = "Index"
  Endif

  'Translate = $cTranslate.Exist(Name) Or $cTranslate.Exist(sClass & "." & Name)
  Translate = GetFlag($cTranslate, sClass, Name)
  Shortcut = GetFlag($cShortcut, sClass, Name)
  UpdateName = GetFlag($cUpdateName, sClass, Name)
  
  Virtual = bVirtual

Catch

  Debug sComponent; ": "; sClass; "."; sName; ": "; Error.Text
  'hSym = CComponent.Classes["System"].Symbols["Language"]

  Type = "s"
  DoNotApply = True
  DefaultValue = Null

End

Public Sub GetConstantList() As String[]
  
  Dim aList As New String[]
  Dim sConst As String
  
  For Each sConst In ConstantList
    aList.Add(sConst)
  Next
  
  Return aList
  
End

