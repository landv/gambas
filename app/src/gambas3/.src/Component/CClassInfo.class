' Gambas class file

Public Name As String
Public Parent As String
Public Symbols As Collection
Public Creatable As Boolean
Public AutoCreatable As Boolean
Public Component As String
Public ParentComponent As String
Public DefaultEvent As String
Public Events As String[]
Public PropertyList As String[]
Public Properties As Collection
Public VirtualControl As Boolean
Public DrawWith As String
Public Container As Boolean
Public Form As Boolean
Public MultiContainer As Boolean
Public DefaultWidth As Short
Public DefaultHeight As Short
Public Group As String
Public Family As String
Public Similars As String[]
Public Structure As Boolean
Public DeclareIn As String
Public DeclareAtLine As Integer
Public Help As String

Public Sub _new(sName As String, sComp As String, Optional sParent As String)

  Dim hSym As CSymbolInfo
  Dim hParent As CClassInfo

  Name = sName
  {Parent} = sParent
  Component = sComp
  Symbols = New Collection(gb.IgnoreCase)

  If {Parent} Then
    'IF Parent = "GridView" THEN STOP
    'IF ERROR THEN
    '  STOP
    '  Error.Raise(Error.Text)
    'ENDIF
    For Each hSym In CComponent.GetClassSymbols(sParent) ' CComponent.Classes[sParent].Symbols
      Symbols[hSym.Name] = hSym
    Next
    
    hParent = CComponent.Classes[sComp &/ sParent]
    If Not hParent Then hParent = CComponent.Classes[sParent]
    ParentComponent = hParent.Component
  Endif

End

Public Sub CopyFrom(hClass As CClassInfo, sType As String, sNewType As String) 

  Dim hSym As CSymbolInfo
  Dim hCopySym As CSymbolInfo

  With hClass
  
    Parent = .Parent
    Symbols = New Collection(gb.IgnoreCase)
    
    For Each hSym In .Symbols
      hCopySym = hSym.Copy(sType, sNewType)
      hCopySym.Class = Name
      Symbols[hSym.Name] = hCopySym
    Next
    
    Creatable = .Creatable
    AutoCreatable = .AutoCreatable
    Component = .Component
    ParentComponent = .ParentComponent
    
    If .Properties Then
      Error "gambas3: warning: cannot use "; hClass.Name; " as template class"
      Return
    Endif
  
  End With  
  
End


Public Sub InitControl()

  Dim sProp As String
  Dim sStr As String
  Dim sParent As String
  Dim hProp As CPropertyInfo
  Dim hSym As CSymbolInfo
  'DIM hCtrl AS Object
  Dim sDefVal As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim bRemove As Boolean
  Dim aCont As String[]
  Dim sKind As String
  Dim bDoNotApply As Boolean
  Dim bTranslate As Boolean

  'DEBUG Component;; Name

  hSym = Symbols["_Family"]
  If hSym Then Family = hSym.Value

  hSym = Symbols["_Group"]
  If hSym Then Group = hSym.Value
  If Not Group Then Group = Family

  hSym = Symbols["_IsForm"]
  If hSym Then Form = hSym.Value
  
  If Form Then CModule.Activate(Family)

  hSym = Symbols["_IsVirtual"]
  If hSym Then VirtualControl = hSym.Value

  hSym = Symbols["_IsContainer"]
  If hSym Then 
    Container = hSym.Value
  Endif
  
  hSym = Symbols["_IsMultiContainer"]
  If hSym Then 
    MultiContainer = hSym.Value
  Endif

  hSym = Symbols["_Similar"]
  If hSym Then Similars = Split(hSym.Value, ",")

  If Similars Then
    For Each sStr In Similars
      CComponent.AddSimilar(Name, sStr)
    Next
  Endif

  hSym = Symbols["_Properties"]
  If hSym Then
    If hSym.Class = Name And If hSym.Component = Component Then
      sProp = hSym.Value
    Else 
      sProp = "*"
    Endif
  Endif

  sParent = ParentComponent &/ Parent
  While Left$(sProp) = "*"
    sProp = Mid$(sProp, 3)
    sStr = ""
    Try sStr = CComponent.Classes[sParent].Symbols["_Properties"].Value 
    If sStr Then 
      If sProp Then
        sProp = sStr & "," & sProp
      Else 
        sProp = sStr
      Endif 
    Endif
    sParent = CComponent.Classes[sParent].ParentComponent &/ CComponent.Classes[sParent].Parent
    ' If Error Then
    '   Debug Error.Text; " !"
    '   Debug System.Backtrace.Join(" ")
    '   Debug Name;; Parent;; sParent
    ' Endif
  Wend

'   IF Left$(sProp) = "*" THEN
'     sProp = Mid$(sProp, 3)
'     sParent = CComponent.Classes[Parent].Symbols["_Properties"].Value
'     IF Left(sParent, Len(CPropertyInfo.EVENT_NAME)) = CPropertyInfo.EVENT_NAME THEN
'       sParent = Mid$(sParent, Len(CPropertyInfo.EVENT_NAME) + 2)
'     ENDIF
'     IF sParent THEN
'       IF sProp THEN sProp = "," & sProp
'       sProp = sParent & sProp
'     ENDIF
'   ENDIF

  Properties = New Collection
  For Each sProp In Split(sProp)

    ' Name can be "Name{Kind}=Default"
    iPos = InStr(sProp, "{")
    If iPos Then
      iPos2 = InStr(sProp, "}", iPos + 1)
      If iPos2 = 0 Then iPos2 = Len(sProp)
      sKind = Mid$(sProp, iPos + 1, iPos2 - iPos - 1)
      sProp = Left$(sProp, iPos - 1) & Mid$(sProp, iPos2 + 1)
    Else 
      sKind = ""
    Endif
    iPos = InStr(sProp, "=")
    If iPos Then
      sDefVal = Mid$(sProp, iPos + 1)
      sProp = Left$(sProp, iPos - 1)
    Else
      sDefVal = ""
    Endif

    bRemove = Left(sProp) = "-"
    If bRemove Then sProp = Mid$(sProp, 2)

    ' IF sProp = "Action" AND Name = "ToolBar" THEN 
    '   DEBUG CComponent.Classes.Count;; Component;; CComponent.Classes[Component &/ Name].Symbols[sProp]
    '   STOP
    ' ENDIF

    If bRemove Then
      Properties[sProp] = Null
    Else

      If Component Then
        'PRINT "? "; Component; ": "; Name; "."; sProp
        If Not CComponent.Classes[Component &/ Name].Symbols[sProp] Then
          Error Component; ": "; Name; "."; sProp; " declared but not implemented"
          Continue
        Endif
      Endif

      If Family <> "Form" Then 
        If MultiContainer Then
          bDoNotApply = Not CPropertyInfo.MULTI_CONTAINER_PROP.Exist(sProp)
        Else
          bDoNotApply = True
        Endif
      Else
        bDoNotApply = VirtualControl
      Endif
      
      hProp = New CPropertyInfo(Component, Name, sProp, sKind, False, bDoNotApply, sDefVal)
      Properties[sProp] = hProp
    Endif

  Next

  Try DefaultEvent = Symbols["_DefaultEvent"].Value

  Events = New String[]
  For Each hSym In Symbols
    If hSym.Kind = ":" Then
      If Left$(hSym.Name) = ":" Then
        Events.Add(Mid$(hSym.Name, 2))
      Else
        Events.Add(hSym.Name)
      Endif
    Endif
  Next
  Events.Sort

  ' Taille par défaut
  
  'IF Name = "Button" THEN STOP
  Try sStr = Symbols["_DefaultSize"].Value 
  If sStr Then 
    aCont = Split(sStr)
    Try DefaultWidth = Val(aCont[0]) * Desktop.Scale
    Try DefaultHeight = Val(aCont[1]) * Desktop.Scale
  Endif
  
  ' Modification des propriétés

  PropertyList = New String[]

  For Each hProp In Properties
    PropertyList.Add(hProp.Name)
    If hProp.Translate Then bTranslate = True
  Next

  Properties["#X"] = New CPropertyInfo("", Name, "#X", "", True, True)
  Properties["#Y"] = New CPropertyInfo("", Name, "#Y", "", True, True)
  If Not VirtualControl Then
    Properties["#Width"] = New CPropertyInfo("", Name, "#Width", "", True, True)
    Properties["#Height"] = New CPropertyInfo("", Name, "#Height", "", True, True)
  Endif
  
  If VirtualControl Then
    
    hProp = New CPropertyInfo("", Name, "X", "", True, True, "0")
    hProp.Exclude = True
    Properties["X"] = hProp
    PropertyList.Add("X")
    
    hProp = New CPropertyInfo("", Name, "Y", "", True, True, "0")
    hProp.Exclude = True
    Properties["Y"] = hProp
    PropertyList.Add("Y")
    
  Endif

  CPropertyInfo.CreatingSpecialProperty = True
  
  If bTranslate Then
    Properties[CPropertyInfo.TRANSLATE_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.TRANSLATE_NAME, "")
    PropertyList.Add(CPropertyInfo.TRANSLATE_NAME, 0)
  Endif

  If {Form} Then 
    If Family = "Form" Then
      Properties[CPropertyInfo.SCALE_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.SCALE_NAME, "")
      PropertyList.Add(CPropertyInfo.SCALE_NAME, 0)
    Endif
  Else
    Properties[CPropertyInfo.PUBLIC_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.PUBLIC_NAME, "")
    PropertyList.Add(CPropertyInfo.PUBLIC_NAME, 0)
  Endif

  Properties[CPropertyInfo.EVENT_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.EVENT_NAME, "")
  PropertyList.Add(CPropertyInfo.EVENT_NAME, 0)

  CPropertyInfo.CreatingSpecialProperty = False
  
  'IF Name = "Timer" THEN
  Try DrawWith = Symbols["_DrawWith"].Value
  If Family <> "Form" And If MultiContainer And If Not DrawWith Then DrawWith = "TabStrip"
  'IF DrawWith THEN ?Me. <= CRASH!
  '  PRINT ME.Name;; "->";; DrawWith
  'ENDIF

  ' IF hCtrl <> hWin THEN
  '   TRY hCtrl.Delete
  ' ENDIF
  
  If DefaultWidth = 0 Or If DefaultHeight = 0 Then
    DefaultWidth = 8 * Desktop.Scale
    DefaultHeight = 8 * Desktop.Scale
  Endif
End


Public Function GetProperties() As Collection

  If Properties Then
    If Properties.Count Then
      Return Properties
    Endif
  Endif

  If {Parent} Then
    Return CComponent.Classes[ParentComponent &/ {Parent}].GetProperties()
  Endif

End


Public Function Inherits(sClass As String) As Boolean

  Dim hClass As CClassInfo
  
  If {Parent} = sClass Then Return True
  If Not Parent Then Return False
  
  hClass = CComponent.Classes[ParentComponent &/ Parent] 
  Return hClass.Inherits(sClass)

End


Public Sub GetHelpURL() As String
  
  Dim sPath As String
  Dim sComp As String
  Dim hComp As CComponent
  
  If Component And If Component <> CComponent.PROJECT_NAME Then hComp = CComponent.All[Component]
  
  If hComp Then

    If hComp.Library Or If hComp.ThirdParty Then
      
      Return "gambas://library" &/ hComp.Key &/ Name
      
    Else

      sPath = MHelp.GetURL("comp")
      sComp = Component
      'If sComp = "gb.qt4" Or If sComp = "gb.gtk" Or If sComp = "gb.gui" Then sComp = "gb.qt"
      'If sComp = "gb.qt4.ext" Then sComp = "gb.qt.ext"
      sPath &/= LCase(sComp)
      'sPath &/= LCase(Left(Name) & Replace(Mid(Name, 2), "_", "."))
      sPath &/= LCase(Name)
      
      Return sPath & "?help&v3&" & MHelp.GetLanguage()
    
    Endif
    
  Else
  
    Return Subst("gambas://project/&1", Name)
    
  Endif
  
End

Public Sub GetSimilars() As String[]
  
  Dim cSimilar As New Collection(gb.IgnoreCase)
  Dim sSimilar As String
  Dim aSimilar As New String[]
  
  For Each sSimilar In CComponent.GetSimilars(Name)
    cSimilar[sSimilar] = True
  Next
  
  If Similars Then
    For Each sSimilar In Similars
      cSimilar[sSimilar] = True
      For Each sSimilar In CComponent.GetSimilars(sSimilar)
        If sSimilar <> Name Then cSimilar[sSimilar] = True
      Next
    Next
  Endif
  
  For Each sSimilar In cSimilar
    aSimilar.Add(cSimilar.Key)
  Next
  aSimilar.Sort(gb.IgnoreCase)
  
  Return aSimilar
  
End

Public Sub GetHelpMarkup() As String
  
  Dim hForm As FEditor
  Dim hEdit As Editor
  Dim I As Integer
  Dim sLine As String
  Dim sMarkup As String
  
  If Help Then Return Help
  If Component And If Component <> CComponent.PROJECT_NAME Then Return
  
  If Structure Then
    
    hForm = Project.LoadFile(Project.FindPath(DeclareIn))
    Try hEdit = hForm.Editor
    
    If Not hEdit Then Return  
  
    Return MHelp.FindMarkup(hEdit, DeclareAtLine)
  
  Else
  
    hForm = Project.LoadFile(Project.FindPath(Name))
    Try hEdit = hForm.Editor
    
    If Not hEdit Then Return  
  
    For I = 0 To hEdit.Lines.Count - 1
      sLine = Trim(hEdit.Lines[I].Text)
      If sLine Begins "''' " Then
        sMarkup &= Trim(Mid$(sLine, 4)) & "\n"
      Else
        If sMarkup Then Break
        If Not sLine Then Continue
        If sLine Not Begins "'" Then Break
      Endif
    Next
    
  Endif

  Return sMarkup
  
End

Private Sub SubstPart(sHtml As String, sPart As String, bShow As Boolean) As String
  
  If bShow Then
    sHtml = Replace(sHtml, sPart & "[", "")
    sHtml = Replace(sHtml, sPart & "]", "")
  Else
    sHtml = Replace(sHtml, sPart & "[", "<!--")
    sHtml = Replace(sHtml, sPart & "]", "-->")
  Endif
  
  Return sHtml
  
End

Private Sub GetSymbolLink(hSymbol As CSymbolInfo, sName As String) As String
  
  Return Subst("<a class=\"none\" href=\"&1\">&2</a>", Html(hSymbol.GetHelpURL()), sName)
  
End


Public Sub GetHelpHTML() As String
  
  Dim sClass As String = Name
  Dim sHelp, sHtml, sWhere, sSymbols, sParSymbols, sInfo As String
  Dim hSymbol As CSymbolInfo
  Dim cClassSymbols As Collection
  Dim hClassInfo, hParentClass As CClassInfo
  Dim aProperty, aEvent, aMethod, aConst, aVar As New String[]
  Dim aParentProperty, aParentEvent, aParentMethod, aParentConst, aParentVar As New String[]
  Dim sComp, sSymbolName As String
  Dim hArray As String[]
  Dim sParent As String
  Dim sTitle As String
  Dim bHasDynamic As Boolean

  sHelp = Markup.Convert(GetHelpMarkup())
  
  hClassInfo = CComponent.GetClassDescription(sClass)
  cClassSymbols = hClassInfo.Symbols 'CComponent.GetClassSymbols(sClass)
  
  'If hClassInfo.Name = sClass Then hClassInfo.Name = hClassInfo.Parent ????? Do not modify the class info!
  
  If cClassSymbols.Count > 0 Then
    
    For Each hSymbol In cClassSymbols
      
      sSymbolName = hSymbol.Name
      If Left(sSymbolName) = ":" Then sSymbolName = Mid$(sSymbolName, 2)
      
      sComp = GetSymbolLink(hSymbol, sSymbolName)
      
      If hSymbol.NotPublic Or If hSymbol.IsHidden() Then Continue

      If IsLetter(hSymbol.Kind) Then
        If hSymbol.Kind = UCase(hSymbol.Kind) Then 
          sComp = "<b>" & sComp & "</b>"
        Else
          bHasDynamic = True
        Endif
      Endif

      If hSymbol.Class = sClass Then
        
        Select Case LCase(hSymbol.Kind)
          Case ":" 
            aEvent.Add(sComp)
          Case "m"
            aMethod.Add(sComp)
          Case "p", "r"
            aProperty.Add(sComp)
          Case "c"
            aConst.Add(sComp)
          Case "v"
            aVar.Add(sComp)
        End Select
        
      Else
        
        Select Case LCase(hSymbol.Kind)
          Case ":" 
            aParentEvent.Add(sComp)
          Case "m"
            aParentMethod.Add(sComp)
          Case "p", "r"
            aParentProperty.Add(sComp)
          Case "c"
            aParentConst.Add(sComp)
          Case "v"
            aParentVar.Add(sComp)
        End Select
        
      Endif
      
    Next
    
    For Each hArray In [aConst, aEvent, aMethod, aProperty, aVar, aParentConst, aParentEvent, aParentMethod, aParentProperty, aParentVar]
      hArray.Sort
    Next
    
    sParSymbols = ""
    If aParentProperty.Count + aParentMethod.Count + aParentEvent.Count + aParentVar.Count Then
      sParSymbols &= "<tr>"
      If aParentProperty.Count Then sParSymbols &= "<td><b>" & ("Properties") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aParentVar.Count Then sParSymbols &= "<td><b>" & ("Variables") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aParentMethod.Count Then sParSymbols &= "<td><b>" & ("Methods") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aParentEvent.Count Then sParSymbols &= "<td><b>" & ("Events") & "</b></td><td width=\"32\">&nbsp;</td>"
      sParSymbols &= "</tr>"
      sParSymbols &= "<tr valign=\"top\">"
      If aParentProperty.Count Then sParSymbols &= "<td>" & aParentProperty.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aParentVar.Count Then sParSymbols &= "<td>" & aParentVar.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aParentMethod.Count Then sParSymbols &= "<td>" & aParentMethod.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aParentEvent.Count Then sParSymbols &= "<td>" & aParentEvent.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      sParSymbols &= "</tr>"
    Endif
    
    sSymbols = ""
    If aProperty.Count + aMethod.Count + aEvent.Count + aVar.Count Then
      sSymbols &= "<tr>"
      If aProperty.Count Then sSymbols &= "<td><b>" & ("Properties") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aVar.Count Then sSymbols &= "<td><b>" & ("Variables") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aMethod.Count Then sSymbols &= "<td><b>" & ("Methods") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aEvent.Count Then sSymbols &= "<td><b>" & ("Events") & "</b></td><td width=\"32\">&nbsp;</td>"
      sSymbols &= "</tr>"
      sSymbols &= "<tr valign=\"top\">"
      If aProperty.Count Then sSymbols &= "<td>" & aProperty.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aVar.Count Then sSymbols &= "<td>" & aVar.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aMethod.Count Then sSymbols &= "<td>" & aMethod.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aEvent.Count Then sSymbols &= "<td>" & aEvent.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      sSymbols &= "</tr>"
    Endif
    
  Endif

  If Not bHasDynamic Then sInfo &= ("This class is static.")
  
  If hClassInfo.AutoCreatable Then sInfo &= ("This class can be used like an object by creating an hidden instance on demand.") & "<br>"
  If hClassInfo.Creatable Then 
    hSymbol = cClassSymbols["_new"]
    If hSymbol Then
      sInfo &= Subst(("This class is &1."), GetSymbolLink(hSymbol, ("creatable")))
    Else
      sInfo &= Subst(("This class is &1."), ("creatable"))
    Endif
    sInfo &= "<br>"
  Endif
  
  hSymbol = cClassSymbols["_call"]
  If hSymbol Then
    sInfo &= Subst(("This class can be used as a &1."), GetSymbolLink(hSymbol, ("function"))) & "<br>"
  Endif
  
  If cClassSymbols.Exist("_put") Then
    If cClassSymbols.Exist("_get") Then
      sInfo &= Subst(("This class acts like a &1 / &2 array."), GetSymbolLink(cClassSymbols["_get"], ("read")), GetSymbolLink(cClassSymbols["_put"], ("write"))) & "<br>"
    Else
      sInfo &= Subst(("This class acts like a &1 array."), GetSymbolLink(cClassSymbols["_put"], ("write-only"))) & "<br>"
    Endif
  Else If cClassSymbols.Exist("_get") Then
    sInfo &= Subst(("This class acts like a &1 array."), GetSymbolLink(cClassSymbols["_get"], ("read-only"))) & "<br>"
  Endif
  
  hSymbol = cClassSymbols["_next"]
  If hSymbol Then
    sInfo &= Subst(("This class is &1 with the FOR EACH keyword."), GetSymbolLink(hSymbol, ("enumerable"))) & "<br>"
  Endif
  
  If Not Component Or If Component = CComponent.PROJECT_NAME Then sWhere = "gambas://project/" & sClass & "?showfile"
  sTitle = sClass
  If sWhere Then sTitle = "<a href=\"" & sWhere & "\">" & sTitle & "</a>"
  
  sHtml = File.Load("help/class-help.html")
  sHtml = Replace(sHtml, "$(help)", sHelp)
  
  If sInfo Then 
    sHtml = Replace(sHtml, "<!--$(Info)-->", sInfo & "<hr class=\"border\">")
  Endif
  
  If hClassInfo.Parent Then 
    
    sParent = hClassInfo.Parent
    
    hParentClass = CComponent.Classes[hClassInfo.ParentComponent &/ sParent]
    If Not hParentClass Then hParentClass = CComponent.GetClassDescription(sParent)
    
    sHtml = SubstPart(sHtml, "ShowInherits", True)
    sHtml = SubstPart(sHtml, "ShowParConst", aParentConst.Count > 0)
    sHtml = Replace(sHtml, "$(ParConst)", aParentConst.Join(" "))
    
    sHtml = Replace(sHtml, "$(Inherits)", Subst(("This class inherits &1."), Subst("<a href=\"&1\">&2</a>", Html(hParentClass.GetHelpURL()), sParent)))
    sHtml = Replace(sHtml, "$(ParSymbols)", sParSymbols)
    
  Else
    
    sHtml = SubstPart(sHtml, "ShowInherits", False)
    
  Endif
  
  sHtml = SubstPart(sHtml, "ShowConst", aConst.Count > 0)
  sHtml = Replace(sHtml, "$(Const)", aConst.Join(" "))
  
  sHtml = Replace(sHtml, "$(title)", sTitle)
  sHtml = Replace(sHtml, "$(Symbols)", sSymbols)
  
  sHtml = Replace(sHtml, "''Symbols''", ("Symbols"))
  sHtml = Replace(sHtml, "''Constants''", ("Constants"))
  
  sHtml = Replace(sHtml, "$(hide-title)", "")
  
  Return sHtml

End
