' Gambas class file

Public Documentation As CDocumentation
Public Name As String
Public Parent As String
Public Symbols As Collection
Public (Component) As String
Public ParentComponent As String
Public DefaultEvent As String
Public Events As String[]
Public PropertyList As String[]
Public Properties As Collection
Public Control As Boolean
Public VirtualControl As Boolean
Public DrawWith As String
Public DefaultWidth As Short
Public DefaultHeight As Short
Public Group As String
Public Family As String
Public Similars As String[]
Public Structure As Boolean
Public DeclareIn As String
Public DeclareAtLine As Integer
Public Help As String
Public Creatable As Boolean
Public AutoCreatable As Boolean
Public HasEvents As Boolean
Public Container As Boolean
Public (Form) As Boolean
Public MultiContainer As Boolean

Public Sub _new(hDoc As CDocumentation, sName As String, sComp As String, Optional sParent As String)

  Dim hSym As CSymbolInfo
  Dim hParent As CClassInfo

  Documentation = hDoc
  Name = sName
  {Parent} = sParent
  Component = sComp
  Symbols = New Collection(gb.IgnoreCase)

  If {Parent} Then
    'IF Parent = "GridView" THEN STOP
    'IF ERROR THEN
    '  STOP
    '  Error.Raise(Error.Text)
    'ENDIF
    hParent = Documentation.Classes[sComp &/ sParent]
    If Not hParent Then hParent = hDoc.Classes[sParent]
    ParentComponent = hParent.Component

    For Each hSym In Documentation.GetClassSymbols(sParent, ParentComponent)
      Symbols[hSym.Name] = hSym
    Next
    
    HasEvents = hParent.HasEvents
    
  Endif

End

Public Sub CopyFrom(hClass As CClassInfo, sType As String, sNewType As String) 

  Dim hSym As CSymbolInfo
  Dim hCopySym As CSymbolInfo

  With hClass
  
    Parent = .Parent
    Symbols = New Collection(gb.IgnoreCase)
    
    For Each hSym In .Symbols
      hCopySym = hSym.Copy(sType, sNewType)
      hCopySym.Class = Name
      Symbols[hSym.Name] = hCopySym
    Next
    
    Creatable = .Creatable
    AutoCreatable = .AutoCreatable
    Component = .Component
    ParentComponent = .ParentComponent
    
    If .Properties Then
      Error "gambas3: warning: cannot use "; hClass.Name; " as template class"
      Return
    Endif
  
  End With  
  
End


Public Sub InitEvents()
  
  Dim hSym As CSymbolInfo
  
  If Not HasEvents Then Return
  
  Events = New String[]
  
  For Each hSym In Symbols
    If hSym.IsHidden() Then Continue
    If hSym.IsEvent() Then 
      If Left$(hSym.Name) = ":" Then
        Events.Add(Mid$(hSym.Name, 2))
      Else
        Events.Add(hSym.Name)
      Endif
    Endif
  Next
  
  Events.Sort
  
End


Public Sub InitControl()

  Dim sProp As String
  Dim sStr As String
  Dim sParent As String
  Dim hProp As CPropertyInfo
  Dim hSym As CSymbolInfo
  'DIM hCtrl AS Object
  Dim sDefVal As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim bRemove As Boolean
  Dim aCont As String[]
  Dim sKind As String
  Dim bDoNotApply As Boolean
  Dim bTranslate As Boolean

  'DEBUG Component;; Name
  
  Control = True

  hSym = Symbols["_Family"]
  If hSym Then Family = hSym.Value

  hSym = Symbols["_Group"]
  If hSym Then Group = hSym.Value
  If Not Group Then Group = Family

  hSym = Symbols["_IsForm"]
  If hSym Then Form = hSym.Value
  
  If Form Then CModule.Activate(Name)

  hSym = Symbols["_IsVirtual"]
  If hSym Then VirtualControl = hSym.Value

  hSym = Symbols["_IsContainer"]
  If hSym Then 
    Container = hSym.Value
  Endif
  
  hSym = Symbols["_IsMultiContainer"]
  If hSym Then 
    MultiContainer = hSym.Value
  Endif

  hSym = Symbols["_Similar"]
  If hSym Then Similars = Split(hSym.Value, ",")

  If Similars Then
    For Each sStr In Similars
      Documentation.AddSimilar(Name, sStr)
    Next
  Endif

  hSym = Symbols["_Properties"]
  If hSym Then
    If hSym.Class = Name And If hSym.Component = Component Then
      sProp = hSym.Value
    Else 
      sProp = "*"
    Endif
  Endif

  sParent = ParentComponent &/ Parent
  While Left$(sProp) = "*"
    sProp = Mid$(sProp, 3)
    sStr = ""
    Try sStr = Documentation.Classes[sParent].Symbols["_Properties"].Value 
    If sStr Then 
      If sProp Then
        sProp = sStr & "," & sProp
      Else 
        sProp = sStr
      Endif 
    Endif
    sParent = Documentation.Classes[sParent].ParentComponent &/ Documentation.Classes[sParent].Parent
    ' If Error Then
    '   Debug Error.Text; " !"
    '   Debug System.Backtrace.Join(" ")
    '   Debug Name;; Parent;; sParent
    ' Endif
  Wend

'   IF Left$(sProp) = "*" THEN
'     sProp = Mid$(sProp, 3)
'     sParent = Classes[Parent].Symbols["_Properties"].Value
'     IF Left(sParent, Len(CPropertyInfo.EVENT_NAME)) = CPropertyInfo.EVENT_NAME THEN
'       sParent = Mid$(sParent, Len(CPropertyInfo.EVENT_NAME) + 2)
'     ENDIF
'     IF sParent THEN
'       IF sProp THEN sProp = "," & sProp
'       sProp = sParent & sProp
'     ENDIF
'   ENDIF

  Properties = New Collection
  For Each sProp In Split(sProp)

    ' Name can be "Name{Kind}=Default"
    iPos = InStr(sProp, "{")
    If iPos Then
      iPos2 = InStr(sProp, "}", iPos + 1)
      If iPos2 = 0 Then iPos2 = Len(sProp)
      sKind = Mid$(sProp, iPos + 1, iPos2 - iPos - 1)
      sProp = Left$(sProp, iPos - 1) & Mid$(sProp, iPos2 + 1)
    Else 
      sKind = ""
    Endif
    iPos = InStr(sProp, "=")
    If iPos Then
      sDefVal = Mid$(sProp, iPos + 1)
      sProp = Left$(sProp, iPos - 1)
    Else
      sDefVal = ""
    Endif

    bRemove = Left(sProp) = "-"
    If bRemove Then sProp = Mid$(sProp, 2)

    If bRemove Then
      Properties[sProp] = Null
    Else

      If Component Then
        'PRINT "? "; Component; ": "; Name; "."; sProp
        If Not Documentation.Classes[Component &/ Name].Symbols[sProp] Then
          Error Component; ": "; Name; "."; sProp; " declared but not implemented"
          Continue
        Endif
      Endif

      If Family <> "Form" Then 
        If MultiContainer Then
          bDoNotApply = Not CPropertyInfo.ALLOWED_MULTI_CONTAINER_PROP.Exist(sProp)
        Else
          bDoNotApply = Not CPropertyInfo.ALLOWED_CONTROL_PROP.Exist(sProp)
        Endif
      Else
        bDoNotApply = VirtualControl
      Endif
      
      hProp = New CPropertyInfo(Documentation, Component, Name, sProp, sKind, False, bDoNotApply, sDefVal)
      Properties[sProp] = hProp
    Endif

  Next

  Try DefaultEvent = Symbols["_DefaultEvent"].Value

  ' Taille par défaut
  
  'IF Name = "Button" THEN STOP
  Try sStr = Symbols["_DefaultSize"].Value 
  If sStr Then 
    aCont = Split(sStr)
    Try DefaultWidth = Val(aCont[0]) * Desktop.Scale
    Try DefaultHeight = Val(aCont[1]) * Desktop.Scale
  Endif
  
  ' Modification des propriétés

  PropertyList = New String[]

  For Each hProp In Properties
    PropertyList.Add(hProp.Name)
    If hProp.Translate Then bTranslate = True
  Next

  Properties["#X"] = New CPropertyInfo(Documentation, "", Name, "#X", "", True, True)
  Properties["#Y"] = New CPropertyInfo(Documentation, "", Name, "#Y", "", True, True)
  If Not VirtualControl Then
    Properties["#Width"] = New CPropertyInfo(Documentation, "", Name, "#Width", "", True, True)
    Properties["#Height"] = New CPropertyInfo(Documentation, "", Name, "#Height", "", True, True)
  Endif
  
  If VirtualControl Then
    
    hProp = New CPropertyInfo(Documentation, "", Name, "X", "", True, True, "0")
    hProp.Exclude = True
    Properties["X"] = hProp
    PropertyList.Add("X")
    
    hProp = New CPropertyInfo(Documentation, "", Name, "Y", "", True, True, "0")
    hProp.Exclude = True
    Properties["Y"] = hProp
    PropertyList.Add("Y")
    
  Endif

  CPropertyInfo.CreatingSpecialProperty = True
  
  If bTranslate Then
    Properties[CPropertyInfo.TRANSLATE_NAME] = New CPropertyInfo(Documentation, Component, Name, CPropertyInfo.TRANSLATE_NAME, "")
    PropertyList.Add(CPropertyInfo.TRANSLATE_NAME, 0)
  Endif

  If {Form} Then 
    If Family = "Form" Then
      Properties[CPropertyInfo.SCALE_NAME] = New CPropertyInfo(Documentation, Component, Name, CPropertyInfo.SCALE_NAME, "")
      PropertyList.Add(CPropertyInfo.SCALE_NAME, 0)
    Endif
  Else
    Properties[CPropertyInfo.PUBLIC_NAME] = New CPropertyInfo(Documentation, Component, Name, CPropertyInfo.PUBLIC_NAME, "")
    PropertyList.Add(CPropertyInfo.PUBLIC_NAME, 0)
  Endif

  Properties[CPropertyInfo.EVENT_NAME] = New CPropertyInfo(Documentation, Component, Name, CPropertyInfo.EVENT_NAME, "")
  PropertyList.Add(CPropertyInfo.EVENT_NAME, 0)

  CPropertyInfo.CreatingSpecialProperty = False
  
  'IF Name = "Timer" THEN
  Try DrawWith = Symbols["_DrawWith"].Value
  If Family <> "Form" And If MultiContainer And If Not DrawWith Then DrawWith = "TabStrip"
  'IF DrawWith THEN ?Me. <= CRASH!
  '  PRINT ME.Name;; "->";; DrawWith
  'ENDIF

  ' IF hCtrl <> hWin THEN
  '   TRY hCtrl.Delete
  ' ENDIF
  
  If DefaultWidth = 0 Or If DefaultHeight = 0 Then
    DefaultWidth = 9 * Desktop.Scale
    DefaultHeight = 3 * Desktop.Scale
  Endif
  
End


Public Function GetProperties() As Collection

  If Properties Then
    If Properties.Count Then
      Return Properties
    Endif
  Endif

  If {Parent} Then
    Return Documentation.Classes[ParentComponent &/ {Parent}].GetProperties()
  Endif

End


Public Function Inherits(sClass As String) As Boolean

  Dim hClass As CClassInfo
  
  If {Parent} = sClass Then Return True
  If Not Parent Then Return False
  
  hClass = Documentation.Classes[ParentComponent &/ Parent]
  Return hClass.Inherits(sClass)

End


Public Sub GetHelpURL() As String
  
  Dim sPath As String
  Dim sComp As String
  Dim hComp As CComponent
  
  If Component And If Component <> CComponent.PROJECT_NAME Then hComp = Documentation[Component]
  
  If hComp Then

    If hComp.Library Or If hComp.ThirdParty Then
      
      Return "gambas://library" &/ hComp.Key &/ Name
      
    Else

      sPath = MHelp.GetURL("comp")
      sComp = MHelp.ActualComponent(Component)
      sPath &/= LCase(sComp)
      sPath &/= LCase(Name)
      
      Return sPath & "?v&nh&l=" & MHelp.GetLanguage()
    
    Endif
    
  Else
  
    Return Subst("gambas://project/&1", Name)
    
  Endif
  
End

Public Sub GetSimilars() As String[]
  
  Dim cSimilar As New Collection(gb.IgnoreCase)
  Dim sSimilar As String
  Dim aSimilar As New String[]
  
  For Each sSimilar In Documentation.GetSimilars(Name)
    cSimilar[sSimilar] = True
  Next
  
  If Similars Then
    For Each sSimilar In Similars
      cSimilar[sSimilar] = True
      For Each sSimilar In Documentation.GetSimilars(sSimilar)
        If sSimilar <> Name Then cSimilar[sSimilar] = True
      Next
    Next
  Endif
  
  For Each sSimilar In cSimilar
    aSimilar.Add(cSimilar.Key)
  Next
  aSimilar.Sort(gb.IgnoreCase)
  
  Return aSimilar
  
End

Public Sub GetHelpMarkup() As String
  
  Dim hForm As FEditor
  Dim hEdit As TextEditor
  Dim I As Integer
  Dim sLine As String
  Dim sMarkup As String
  
  If Help Then Return Help
  If Component And If Component <> CComponent.PROJECT_NAME Then Return
  
  If Structure Then
    
    hForm = Project.LoadFile(Project.FindPath(DeclareIn))
    Try hEdit = hForm.GetEditor()
    
    If Not hEdit Then Return  
  
    Return MHelp.FindMarkup(hEdit, DeclareAtLine)
  
  Else
  
    hForm = Project.LoadFile(Project.FindPath(Name))
    Try hEdit = hForm.GetEditor()
    
    If Not hEdit Then Return  
  
    For I = 0 To hEdit.Count - 1
      sLine = Trim(hEdit[I].Text)
      If sLine Begins "''' " Then
        sMarkup &= Trim(Mid$(sLine, 4)) & "\n"
      Else
        If sMarkup Then Break
        If Not sLine Then Continue
        If sLine Not Begins "'" Then Break
      Endif
    Next
    
  Endif

  Return sMarkup
  
End

Private Sub SubstPart(sHtml As String, sPart As String, bShow As Boolean) As String
  
  If bShow Then
    sHtml = Replace(sHtml, sPart & "[", "")
    sHtml = Replace(sHtml, sPart & "]", "")
  Else
    sHtml = Replace(sHtml, sPart & "[", "<!--")
    sHtml = Replace(sHtml, sPart & "]", "-->")
  Endif
  
  Return sHtml
  
End

Private Sub GetSymbolLink(hSymbol As CSymbolInfo, sName As String) As String
  
  Return Subst("<a class=\"none\" href=\"&1\">&2</a>", Html(hSymbol.GetHelpURL()), sName)
  
End


Public Sub GetHelpHTML() As String
  
  Dim sClass As String = Name
  Dim sHelp, sHtml, sWhere, sSymbols, sInfo As String
  Dim hSymbol As CSymbolInfo
  Dim cClassSymbols As Collection
  Dim hClassInfo As CClassInfo
  Dim aProperty, aEvent, aMethod, aConst, aVar As New String[]
  Dim aStaticProperty, aStaticMethod, aStaticVar As New String[]
  Dim sComp, sSymbolName As String
  Dim hArray As String[]
  Dim sTitle As String
  Dim bHasDynamic As Boolean
  Dim bHasSymbol As Boolean
  Dim bHasDynamicVariable As Boolean
  Dim sParent As String
  Dim hParentClass As CClassInfo
  Dim sStr As String

  ' sHelp = GetHelpMarkup()
  ' sHelp &= "\n" & WikiGetSymbols().Join("\n")
  ' Return WikiMarkdown.ToHTML(sHelp)

  sHelp = Markup.Convert(GetHelpMarkup())
  
  hClassInfo = Documentation.GetClassDescription(sClass)
  cClassSymbols = hClassInfo.Symbols 'CComponent.GetClassSymbols(sClass)
  
  'If hClassInfo.Name = sClass Then hClassInfo.Name = hClassInfo.Parent ????? Do not modify the class info!
  
  If cClassSymbols.Count > 0 Then
    
    For Each hSymbol In cClassSymbols
      
      sSymbolName = hSymbol.Name
      If Left(sSymbolName) = ":" Then sSymbolName = Mid$(sSymbolName, 2)
      
      sComp = GetSymbolLink(hSymbol, sSymbolName)
      
      If hSymbol.NotPublic Or If hSymbol.IsHidden() Then Continue
      If hSymbol.Class = sClass Then sComp = "<u>" & sComp & "</u>"

      If IsLetter(hSymbol.Kind) Then
        If hSymbol.IsStatic() Then 
          'sComp = "<b>" & sComp & "</b>"
        Else
          bHasDynamic = True
        Endif
      Endif

      bHasSymbol = True
      
      Select Case hSymbol.Kind
        Case ":"
          aEvent.Add(sComp)
        Case "m"
          aMethod.Add(sComp)
        Case "M"
          aStaticMethod.Add(sComp)
        Case "p", "r"
          aProperty.Add(sComp)
        Case "P", "R"
          aStaticProperty.Add(sComp)
        Case "C"
          aConst.Add(sComp)
        Case "v"
          aVar.Add(sComp)
          bHasDynamicVariable = True
        Case "V"
          aStaticVar.Add(sComp)
      End Select
        
    Next
    
    For Each hArray In [aConst, aEvent, aMethod, aProperty, aVar, aStaticMethod, aStaticProperty, aStaticVar]
      hArray.Sort
    Next
    
    ' sParSymbols = ""
    ' If aParentProperty.Count + aParentMethod.Count + aParentEvent.Count + aParentVar.Count Then
    '   sParSymbols &= "<tr>"
    '   If aParentProperty.Count Then sParSymbols &= "<td><b>" & ("Properties") & "</b></td><td width=\"32\">&nbsp;</td>"
    '   If aParentVar.Count Then sParSymbols &= "<td><b>" & ("Variables") & "</b></td><td width=\"32\">&nbsp;</td>"
    '   If aParentMethod.Count Then sParSymbols &= "<td><b>" & ("Methods") & "</b></td><td width=\"32\">&nbsp;</td>"
    '   If aParentEvent.Count Then sParSymbols &= "<td><b>" & ("Events") & "</b></td><td width=\"32\">&nbsp;</td>"
    '   sParSymbols &= "</tr>"
    '   sParSymbols &= "<tr valign=\"top\">"
    '   If aParentProperty.Count Then sParSymbols &= "<td>" & aParentProperty.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
    '   If aParentVar.Count Then sParSymbols &= "<td>" & aParentVar.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
    '   If aParentMethod.Count Then sParSymbols &= "<td>" & aParentMethod.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
    '   If aParentEvent.Count Then sParSymbols &= "<td>" & aParentEvent.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
    '   sParSymbols &= "</tr>"
    ' Endif
    
    sSymbols = ""
    
    If aStaticMethod.Count + aStaticProperty.Count + aStaticVar.Count + aConst.Count Then
      
      sSymbols &= "<table class=\"none\"><tr valign=\"top\">"
      
      If aStaticProperty.Count Then sSymbols &= "<td nowrap><b>" & ("Static properties") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aStaticVar.Count Then sSymbols &= "<td nowrap><b>" & ("Static variables") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aStaticMethod.Count Then sSymbols &= "<td nowrap><b>" & ("Static methods") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aConst.Count Then sSymbols &= "<td><b>" & ("Constants") & "</b></td><td width=\"32\">&nbsp;</td>"

      sSymbols &= "</tr><tr valign=\"top\">"

      If aStaticProperty.Count Then sSymbols &= "<td>" & aStaticProperty.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aStaticVar.Count Then sSymbols &= "<td>" & aStaticVar.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aStaticMethod.Count Then sSymbols &= "<td>" & aStaticMethod.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aConst.Count Then sSymbols &= "<td>" & aConst.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      
      sSymbols &= "</tr></table>"
      
    Endif
      
    If aProperty.Count + aVar.Count + aMethod.Count + aEvent.Count Then
      
      sSymbols &= "<table class=\"none\"><tr valign=\"top\">"
      
      If aProperty.Count Then sSymbols &= "<td><b>" & ("Properties") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aVar.Count Then sSymbols &= "<td><b>" & ("Variables") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aMethod.Count Then sSymbols &= "<td><b>" & ("Methods") & "</b></td><td width=\"32\">&nbsp;</td>"
      If aEvent.Count Then sSymbols &= "<td><b>" & ("Events") & "</b></td><td width=\"32\">&nbsp;</td>"
      
      sSymbols &= "</tr><tr valign=\"top\">"
      
      If aProperty.Count Then sSymbols &= "<td>" & aProperty.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aVar.Count Then sSymbols &= "<td>" & aVar.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aMethod.Count Then sSymbols &= "<td>" & aMethod.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      If aEvent.Count Then sSymbols &= "<td>" & aEvent.Join(" ") & "</td><td width=\"32\">&nbsp;</td>"
      
      sSymbols &= "</tr></table>"
      
    Endif
    
  Endif

  If hClassInfo.Parent Then
    
    sParent = hClassInfo.Parent
    hParentClass = Documentation.Classes[hClassInfo.ParentComponent &/ sParent]
    If Not hParentClass Then hParentClass = Documentation.GetClassDescription(sParent)
    
    If hClassInfo.Parent = hClassInfo.Name Then
      sStr = ("This class reimplements &1")
    Else
      sStr = ("This class inherits &1")
    Endif

    sInfo &= Subst(sStr, Subst("<a href=\"&1\">&2</a>", Html(hParentClass.GetHelpURL()), hParentClass.Name))

    If hClassInfo.ParentComponent <> hClassInfo.Component Then
      sInfo &= " " & Subst(("in &1"), Subst("<a href=\"&1\">&2</a>", Html(Documentation[hClassInfo.ParentComponent].GetHelpURL()), hClassInfo.ParentComponent))
    Endif
    
    sInfo &= "<br>"
    
  Endif
  
  If hClassInfo.AutoCreatable And If bHasDynamic Then
    sInfo &= ("This class can be used like an object by creating an hidden instance on demand.") & "<br>"
  Endif
  
  If hClassInfo.Creatable And If cClassSymbols.Exist("_new") Then 
    hSymbol = cClassSymbols["_new"]
   sInfo &= Subst(("This class is &1."), GetSymbolLink(hSymbol, ("creatable"))) & "<br>"
  Else If hClassInfo.Creatable And If bHasDynamicVariable Then
   sInfo &= Subst(("This class is &1."), ("creatable")) & "<br>"
  Else
    If Not bHasDynamic Then 
      sInfo &= ("This class is static.") & "<br>"
    Else
      sInfo &= ("This class is not creatable.") & "<br>"
    Endif
  Endif
  
  hSymbol = cClassSymbols["_call"]
  If hSymbol Then
    sInfo &= Subst(("This class can be used as a &1."), GetSymbolLink(hSymbol, ("function"))) & "<br>"
  Endif
  
  If cClassSymbols.Exist("_put") Then
    If cClassSymbols.Exist("_get") Then
      sInfo &= Subst(("This class acts like a &1 / &2 array."), GetSymbolLink(cClassSymbols["_get"], ("read")), GetSymbolLink(cClassSymbols["_put"], ("write"))) & "<br>"
    Else
      sInfo &= Subst(("This class acts like a &1 array."), GetSymbolLink(cClassSymbols["_put"], ("write-only"))) & "<br>"
    Endif
  Else If cClassSymbols.Exist("_get") Then
    sInfo &= Subst(("This class acts like a &1 array."), GetSymbolLink(cClassSymbols["_get"], ("read-only"))) & "<br>"
  Endif
  
  hSymbol = cClassSymbols["_next"]
  If hSymbol Then
    sInfo &= Subst(("This class is &1 with the FOR EACH keyword."), GetSymbolLink(hSymbol, ("enumerable"))) & "<br>"
  Endif
  
  If Not Component Or If Component = CComponent.PROJECT_NAME Then sWhere = "gambas://project/" & sClass & "?showfile"
  sTitle = sClass
  If sWhere Then sTitle = "<a href=\"" & sWhere & "\">" & sTitle & "</a>"
  
  sHtml = File.Load("help/class-help.html")
  sHtml = Replace(sHtml, "$(help)", sHelp)
  
  If sInfo Then 
    sHtml = Replace(sHtml, "<!--$(info)-->", sInfo)
  Endif
  
  ' If hClassInfo.Parent Then 
  '   
  '   sParent = hClassInfo.Parent
  '   
  '   hParentClass = CComponent.Classes[hClassInfo.ParentComponent &/ sParent]
  '   If Not hParentClass Then hParentClass = CComponent.GetClassDescription(sParent)
  '   
  '   sHtml = SubstPart(sHtml, "ShowInherits", True)
  '   sHtml = SubstPart(sHtml, "ShowParConst", aParentConst.Count > 0)
  '   sHtml = Replace(sHtml, "$(ParConst)", aParentConst.Join(" "))
  '   
  '   sHtml = Replace(sHtml, "$(Inherits)", Subst(("This class inherits &1."), Subst("<a href=\"&1\">&2</a>", Html(hParentClass.GetHelpURL()), sParent)))
  '   sHtml = Replace(sHtml, "$(ParSymbols)", sParSymbols)
  '   
  ' Else
  '   
  '   sHtml = SubstPart(sHtml, "ShowInherits", False)
  '   
  ' Endif
  
  sHtml = Replace(sHtml, "$(title)", sTitle)
  sHtml = Replace(sHtml, "$(symbols)", sSymbols)
  sHtml = SubstPart(sHtml, "ShowSymbols", bHasSymbol)
  sHtml = Replace(sHtml, "$(hide-title)", "")
  
  Return sHtml

End

Public Function IsVirtual() As Boolean

  Return Left$(Name) = "." Or Left$(Name) = "_"

End

Private Function GetSymbolType(aSym As String[]) As String

  Dim sRes As String
  Dim hSym As CSymbolInfo
  Dim sName As String

  If aSym.Count = 0 Then Return

  For Each sName In aSym
    hSym = Symbols[sName]
    sName = Replace(sName, ":", ".")
    If hSym.Class <> Name Or If hSym.Component <> Component Then
      sRes &= "[/comp" &/ LCase(hSym.Component &/ hSym.Class &/ sName) & "]&nbsp;&nbsp;\n"
    Else If hSym.Class <> Wiki.Class Or If hSym.Component <> Wiki.Component Then
      sRes &= "<span class=\"inherit\">~[/comp" &/ LCase(hSym.Component &/ hSym.Class &/ sName) & "]~</span>&nbsp;&nbsp;\n"
    Else
      sRes &= "<span class=\"inherit\">~[./" & LCase(sName) & "]~</span>&nbsp;&nbsp;\n"
    Endif
  Next

  Return sRes

End


Public Function WikiGetSymbols() As String[]

  Dim aResult As New String[]
  Dim sSymbol As String
  Dim cSymbol As New Collection
  Dim hSym As CSymbolInfo
  Dim bDynamic As Boolean
  Dim bStatic As Boolean
  Dim sBreak As String
  Dim sPrefix As String
  Dim aArray As String[]
  Dim bHasSymbols As Boolean
  Dim bHasDynamicVariable As Boolean
  Dim sCreatable As String

  If Symbols.Count Then

    For Each sSymbol In ["P", "C", "M", "p", "e", "m"]
      cSymbol[sSymbol] = New String[]
      cSymbol[">" & sSymbol] = New String[]
    Next

    For Each hSym In Symbols
      If hSym.IsHidden() Then Continue
      If Right$(hSym.Name) = "$" Then Continue

      bHasSymbols = True

      Select Case hSym.Kind
        Case "r", "p", "v"
          cSymbol[sPrefix & "p"].Add(hSym.Name)
          If hSym.Kind = "v" Then bHasDynamicVariable = True
        Case "R", "P", "V"
          cSymbol[sPrefix & "P"].Add(hSym.Name)
        Case "C"
          cSymbol[sPrefix & "C"].Add(hSym.Name)
        Case ":", "e", "E"
          hSym.Kind = "e"
          cSymbol[sPrefix & "e"].Add(hSym.Name)
        Case "m"
          cSymbol[sPrefix & "m"].Add(hSym.Name)
        Case "M"
          cSymbol[sPrefix & "M"].Add(hSym.Name)
        Default
          Print hSym.Kind; " ?"
      End Select
      'IF InStr("rpm", hSym.Kind) THEN bDynamic = TRUE
      If hSym.IsStatic() Then
        'If bParent Then
        '  bParentStatic = True
        'Else
          bStatic = True
        'Endif
      Else
        'If bParent Then
        '  bParentDynamic = True
        'Else
          bDynamic = True
        'Endif
      Endif
    Next

    For Each aArray In cSymbol
      aArray.Sort
    Next

  Endif

  'aResult.Add("### Symbols")
  aResult.Add("[[ desc")
  aResult.Add("==")
  
  sBreak = "\\\n"

  If Parent Then
    
    If Parent = Name Then
      aResult.Add(("This class reimplements"))
    Else
      aResult.Add(("This class inherits"))
    Endif

    'sRes = sRes & " " & GetLink("/comp" &/ $hClass.ParentComponent &/ $hClass.Parent,,, "arrow")
    aResult.Add("[/comp" &/ ParentComponent &/ LCase(Parent) & "]")

    If ParentComponent <> Component Then
      aResult.Add(Subst(("in &1"), "[/comp" &/ ParentComponent & "]"))
    Endif
    
    aResult[aResult.Max] &= ".\\"
    
  Endif
  
  If IsVirtual() Then
    aResult.Add(("This class is virtual.") & "\\")
  Else If AutoCreatable Then
    aResult.Add(("This class can be used like an object by creating a hidden instance on demand.") & "\\")
  Endif

  sCreatable = ""
  
  If Creatable And If Not IsVirtual() Then
    If Symbols.Exist("_new") Then
      'GetSymbolLink($hClass.Symbols["_new"], $hClass, ("creatable"))) & sBreak
      sCreatable = Subst(("This class is &1."), Wiki.GetSymbolLink(Me, "_new", ("creatable"))) & "\\"
    Else 
      sCreatable = Subst(("This class is &1."), ("creatable")) & "\\"
    Endif
  Endif
  
  If Not sCreatable Then
    If Not bDynamic Then
      sCreatable = ("This class is static.") & "\\"
    Else
      sCreatable = ("This class is not creatable.") & "\\"
    Endif
  Endif
  
  aResult.Add(sCreatable)

  If Symbols.Exist("_call") Then
    aResult.Add(Subst(("This class can be used as a &1."), Wiki.GetSymbolLink(Me, "_call", ("function"), ("static function"))) & "\\")
  Endif

  hSym = Symbols["_get"]
  If hSym Then
    If hSym.IsStatic() Then
      If Symbols.Exist("_put") Then
        aResult.Add(Subst(("This class acts like a &1 / &2 static array."), Wiki.GetSymbolLink(Me, "_get", ("read")), Wiki.GetSymbolLink(Me, "_put", ("write"))) & "\\")
      Else
        aResult.Add(Subst(("This class acts like a &1 static array."), Wiki.GetSymbolLink(Me, "_get", ("read-only"))) & "\\")
      Endif
    Else
      If Symbols.Exist("_put") Then
        aResult.Add(Subst(("This class acts like a &1 / &2 array."), Wiki.GetSymbolLink(Me, "_get", ("read")), Wiki.GetSymbolLink(Me, "_put", ("write"))) & "\\")
      Else
        aResult.Add(Subst(("This class acts like a &1 array."), Wiki.GetSymbolLink(Me, "_get", ("read-only"))) & "\\")
      Endif
    Endif
  Endif

  If Symbols.Exist("_next") Then
    aResult.Add(Subst(("This class is &1 with the &2 keyword."), Wiki.GetSymbolLink(Me, "_next", ("enumerable"), ("statically enumerable")), "[/lang/foreach]") & "\\")
  Endif

  'If aResult[aResult.Max] <> "==" And If bHasSymbols Then aResult.Add("==")
  'If bHasSymbols Then aResult.Add("\\")

  If bStatic Then

    aResult.Add("[[ symbols")
    If cSymbol["P"].Count Then aResult.Insert([Replace(("Static properties"), " ", "&nbsp;"), "--"])
    If cSymbol["M"].Count Then aResult.Insert([Replace(("Static methods"), " ", "&nbsp;"), "--"])
    'IF cSymbol["E"].Count THEN sRes = sRes & "<td align=left><b>" & ("Events") & "</b></td>" & sSpace & "\n"
    If cSymbol["C"].Count Then aResult.Insert([("Constants"), "--"])
    aResult[aResult.Max] = "=="
    
    If cSymbol["P"].Count Then 
      aResult.Add(GetSymbolType(cSymbol["P"]))
      aResult.Add("--")
    Endif
    
    If cSymbol["M"].Count Then         
      aResult.Add(GetSymbolType(cSymbol["M"]))
      aResult.Add("--")
    Endif
    
    If cSymbol["C"].Count Then 
      aResult.Add(GetSymbolType(cSymbol["C"]))
      aResult.Add("--")
    Endif
    aResult[aResult.Max] = "]]"

  Endif

  If bDynamic Then

    aResult.Add("[[ symbols")
    If cSymbol["p"].Count Then aResult.Insert([("Properties"), "--"])
    If cSymbol["m"].Count Then aResult.Insert([("Methods"), "--"])
    If cSymbol["e"].Count Then aResult.Insert([("Events"), "--"])
    aResult[aResult.Max] = "=="
    
    If cSymbol["p"].Count Then 
      aResult.Add(GetSymbolType(cSymbol["p"]))
      aResult.Add("--")
    Endif
    
    If cSymbol["m"].Count Then         
      aResult.Add(GetSymbolType(cSymbol["m"]))
      aResult.Add("--")
    Endif
    
    If cSymbol["e"].Count Then 
      aResult.Add(GetSymbolType(cSymbol["e"]))
      aResult.Add("--")
    Endif
    aResult[aResult.Max] = "]]"

  Endif
  
  aResult.Add("]]")
  Return aResult

Catch

  Return ["`" & Error.Where & ": " & Error.Text & "`"]

End


Public Sub AddSymbol(hSym As CSymbolInfo)

  Symbols[hSym.Name] = hSym
  If hSym.IsEvent() And Not hSym.IsHidden() Then HasEvents = True
  
End

Public Sub WikiGetDescription() As String
  
  Dim sPath As String
  Dim aData As String[]
  Dim iPos As Integer
  Dim sData As String
  Dim sDesc As String
  
  sPath = Wiki.GetPagePathFrom("/comp" &/ LCase(Component &/ Name))
  If Not Exist(sPath) Then Return 
  
  aData = Split(File.Load(sPath), "\n")
  While iPos < aData.Count
    sData = aData[iPos]
    If sData Then
      If IsLetter(Left(sData)) Then
        sData = Replace(sData, "[../", "[./")
        sData = Replace(sData, "[./../", "[../")
        sDesc &= sData & "\n"
      Endif
    Else If sDesc Then
      Break
    Endif
    Inc iPos
  Wend
  
  Return sDesc
  
End

' If a control needs a parent

Public Sub ConstructorNeedParent() As Boolean

  Dim hClass As CClassInfo

  If Not Control Then Return False
  If Not VirtualControl Then Return True
  If Not Parent Then Return False
  
  hClass = Documentation.Classes[ParentComponent &/ Parent]
  Return hClass.ConstructorNeedParent()
  
End
