' Gambas class file

Inherits CFamily

Public Const Name As String = "Report"
Public Const DropImageClass As String = "ReportImage"
Public Const DropImageProperty As String = "Image"
Public Const EmbedContainer As String = "ReportPanel"

Static Private $aBorderName As String[] = ["topleftcorner", "toprightcorner", "bottomrightcorner", "bottomleftcorner"]

Static Private Function GetFactor(Unit As String) As Float

  Select Case Unit
    Case "cm"
      Return 0.3937
    Case "ft"
      Return 12
    Case "in"
      Return 1
    Case "m"
      Return 39.37
    Case "mm"
      Return 0.03937
    Case "pt"
      Return 1 / 72
    Case Else
      Return 1 / 96 '* (300 / 96) ' Trick to get a 300 DPI like
  End Select

End

Static Public Function ToPixel(sSize As String) As Float

  Dim fValue As Float
  Dim I As Integer
  Dim sCar As String
  Dim sUnit As String
  'Dim Size As String = Coord
  sSize = Trim(sSize)

  If Not sSize Then
    Try sUnit = "px"
    Return
  Endif

  For I = 1 To Len(sSize)
    sCar = Mid$(sSize, I, 1)
    If Not IsDigit(sCar) And If (sCar <> "." And sCar <> "-") Then Break
  Next

  Try fValue = CFloat(Left$(sSize, I - 1))
  Try sUnit = Trim(Mid$(sSize, I))

  Return fValue * GetFactor(sUnit) / GetFactor("px")

End

' Static Private Sub HasBorder(sBorder As String, sSide As String) As Boolean
' 
'   Dim aBorder As String[] = Split(LCase(sBorder))
'   Dim sTest As String
'   Dim bBorder As Boolean
' 
'   For Each sTest In ["left", "right", "top", "bottom", "border"]
'     If aBorder.Exist(sTest, gb.IgnoreCase) Then
'       bBorder = True
'       If UCase(sTest) = UCase(sSide) Then Return True
'     Endif
'   Next
' 
'   Return Not bBorder
' 
' End




Static Public Sub PaintBorder(sBorder As String) As Float

  Dim sElt As String
  Dim fWidth As Float
  Dim ars, ars2 As String[]
  Dim aX, aY As New Integer[4]
  Dim B As Integer

  If Not sBorder Then Return
  
  If InStr(LCase(sBorder), "corner") Then
    
    For Each sElt In Split(LCase(sBorder), ";")
      ars = Scan(sElt, "*:*")
      If ars.Count < 2 Then Return
      If ars[0] = "top" Or If ars[0] = "border" Then
        ars2 = Split(ars[1], " ")
        Try Paint.LineWidth = CFamilyReport.ToPixel(ars2[0])
        Try Paint.Brush = CReportBrush[ars2[1]].GetBrush(0, 0, Paint.Width, Paint.Height)
      Endif
      
      For B = 0 To 3
        
        If ars[0] = $aBorderName[B] Then
          ars2 = Split(ars[1], " ")
          Try aX[B] = (CFamilyReport.ToPixel(ars2[0]))
          If ars2.Count = 2 Then
            Try aY[B] = (CFamilyReport.ToPixel(ars2[1]))
          Else
            aY[B] = aX[B]
          Endif
        Endif
        
      Next

    Next
    RoundRect(Paint.LineWidth / 2, Paint.LineWidth / 2, Paint.Width - Paint.LineWidth, Paint.Height - Paint.LineWidth, aX, aY)
    fWidth = Paint.LineWidth
    Paint.Stroke

  Else
    For Each sElt In Split(LCase(sBorder), ";")
      ars = Scan(sElt, "*:*")
      If ars.Count < 2 Then Return
      ars2 = Split(ars[1], " ")
      ars[0] = Trim(ars[0])

      Try Paint.Brush = CReportBrush[ars2[1]].GetBrush(0, 0, Paint.Width, Paint.Height)
      Try fWidth = CFamilyReport.ToPixel(ars2[0])
      
      If ars[0] = "left" Or If ars[0] = "border" Then
        Paint.Rectangle(0, 0, fWidth, Paint.Height)
        Paint.Fill
      Endif
      If ars[0] = "right" Or If ars[0] = "border" Then
        Paint.Rectangle(Paint.Width - fWidth, 0, fWidth, Paint.Height)
        Paint.Fill
      Endif
      If ars[0] = "top" Or If ars[0] = "border" Then
        Paint.Rectangle(0, 0, Paint.Width, fWidth)
        Paint.Fill
      Endif
      If ars[0] = "bottom" Or If ars[0] = "border" Then
        Paint.Rectangle(0, Paint.Height - fWidth, Paint.Width, fWidth)
        Paint.Fill
      Endif
      'Endif

      If ars[0] = "border" Then Break
    Next
  Endif
  
  Return fWidth

End

Public Sub _new()

  Me.Background = Color.TextBackground

End

Public Sub IsTransparent(hCtrl As CControl) As Boolean

  If hCtrl.Kind = "Report" Then Return False
  If hCtrl.Kind = "ReportHBox" Then Return False
  If hCtrl.Kind = "ReportVBox" Then Return False
  Return True
  If hCtrl.Kind = "ReportLabel" Then Return True
  If hCtrl.Kind = "ReportTextLabel" Then Return True
  If hCtrl.Kind = "ReportLine" Then Return True

End

Private Sub GetBrush(hCtrl As CControl)

  While hCtrl

    If hCtrl["Brush"] Then
      Paint.Brush = CReportBrush[hCtrl["Brush"]].GetBrush(0, 0, Paint.Width, Paint.Height)
      Return
    Endif

    hCtrl = hCtrl.Parent

  Wend

  Paint.Brush = Paint.Color(Color.Black)

End

Private Sub AlignRect(hRect As Rect, hFrame As Rect, iAlign As Integer)
  
  Select Case iAlign
    Case Align.TopNormal
      iAlign = If(System.RightToLeft, Align.TopRight, Align.TopLeft)
    Case Align.BottomNormal
      iAlign = If(System.RightToLeft, Align.BottomRight, Align.BottomLeft)
    Case Align.Normal
      iAlign = If(System.RightToLeft, Align.Right, Align.Left)
  End Select
  
  Select Case iAlign
    Case Align.Top, Align.TopLeft, Align.TopRight, Align.TopNormal
      hRect.Y = 0
    Case Align.Bottom, Align.BottomLeft, Align.BottomRight, Align.BottomNormal
      hRect.Y = hFrame.H - hRect.H
    Case Else
      hRect.Y = (hFrame.H - hRect.H) / 2
  End Select
  
  Select Case iAlign
    Case Align.Left, Align.TopLeft, Align.BottomLeft
      hRect.X = 0
    Case Align.Right, Align.TopRight, Align.BottomRight
      hRect.X = hFrame.W - hRect.W
    Case Else
      hRect.X = (hFrame.W - hRect.W) / 2
  End Select
  
End


Private Sub StretchImage(hRect As Rect, sMode As String, iAlign As Integer, W As Integer, H As Integer)
  
  Dim fRatio As Float
  Dim hFrame As Rect = hRect.Copy()
  
  Select Case sMode
    Case "Fill"
      Return
    Case "None"
      hRect.W = W
      hRect.H = H
    Case "Proportional"
      fRatio = Min(hRect.W / W, hRect.H / H)
      hRect.W = W * fRatio
      hRect.H = H * fRatio
  End Select
  
  AlignRect(hRect, hFrame, iAlign)
  
End


Public Sub DrawControl(hCtrl As CControl) As Boolean

  Dim X, Y, W, H, W2, H2 As Float
  Dim fVal As Float
  Dim sPath As String
  Dim hImage As Image
  Dim hSvgImage As SvgImage
  Dim hRect As Rect

  X = 0
  Y = 0
  W = hCtrl.Width
  H = hCtrl.Height
  
  'If paint.Device Then Paint.Begin(Draw.Device)

  If hCtrl["Background"] Then
    Paint.Brush = CReportBrush[hCtrl["Background"]].GetBrush(0, 0, Paint.Width, Paint.Height)
    Paint.Rectangle(0, 0, Paint.Width, Paint.Height)
    Paint.Fill
  Endif

  If hCtrl["Border"] Then
    fVal = PaintBorder(hCtrl["Border"])
  Endif

  'If Draw.Device Then Paint.End

  If Not hCtrl.IsContainer() And If hCtrl["Padding"] Then
    fVal = Max(ToPixel(hCtrl["Padding"]), fVal)
  Endif

  If fVal > 0 Then
    X += fVal
    Y += fVal
    W -= fVal * 2
    H -= fVal * 2
  Endif

  If W <= 0 Or If H <= 0 Then Return

  If Paint.Device Then GetBrush(hCtrl)

  Select Case hCtrl.Kind

    Case "ReportLabel"

      Draw.Foreground = &H819AFF&
      Draw.LineStyle = Line.DashDot
      Draw.Rect(0, 0, hCtrl.Width, hCtrl.Height)
      
      Try Paint.Font = Font[hCtrl["Font"]]
      If hCtrl["Rotate"] = 0.0 Then
        Paint.Text(hCtrl["Text"], X, Y, W, H, Classes["Align"][hCtrl["Alignment"]].Value)
      Else
        Paint.Translate(X + W / 2, Y + H / 2)    
        Try Paint.Rotate(Rad(hCtrl["Rotate"]))
        Paint.Translate(- (X + W / 2), - (Y + H / 2))
        Paint.Text(hCtrl["Text"], X, Y, W, H, Classes["Align"][hCtrl["Alignment"]].Value)
        'Paint.Text(hCtrl["Text"], X, Y, W, H, Align.Center)
      Endif
      Paint.Fill

    Case "ReportTextLabel"
      
      Draw.Foreground = &H819AFF&
      Draw.LineStyle = Line.Dash
      Draw.Rect(X, Y, Paint.Width, Paint.H)
      Try Paint.Font = Font[hCtrl["Font"]]
      Paint.RichText(hCtrl["Text"], X, Y, W, H, Align.Center)
      'Paint.Fill

    Case "ReportLine"

      Paint.LineWidth = 1
      Paint.Brush = Paint.Color(Color.Black)
      Try Paint.LineWidth = hCtrl["LineWidth"]
      Try Paint.Brush = Paint.Color(hCtrl.GetPropertyReal("LineColor"))
      X += Paint.LineWidth / 2
      Y += Paint.LineWidth / 2
      W = X + W - Paint.LineWidth
      H = Y + H - Paint.LineWidth
      W2 = (X + W) / 2
      H2 = (Y + H) / 2
      Select Case hCtrl["Direction"]
        Case "TopLeft"
          Paint.MoveTo(W, H)
          Paint.LineTo(X, Y)
        Case "Top"
          Paint.MoveTo(W2, H)
          Paint.LineTo(W2, Y)
        Case "TopRight"
          Paint.MoveTo(X, H)
          Paint.LineTo(W, Y)
        Case "Left"
          Paint.MoveTo(W, H2)
          Paint.LineTo(X, H2)
        Case "Right"
          Paint.MoveTo(X, H2)
          Paint.LineTo(W, H2)
        Case "BottomLeft"
          Paint.MoveTo(W, Y)
          Paint.LineTo(X, H)
        Case "Bottom"
          Paint.MoveTo(W2, Y)
          Paint.LineTo(W2, H)
        Case "BottomRight"
          Paint.MoveTo(X, Y)
          Paint.LineTo(W, H)
      End Select
      Paint.Stroke

    Case "ReportHBox"

      Draw.Foreground = &HFF8080&
      Draw.LineStyle = Line.Dash
      Draw.Rect(0, 0, hCtrl.W, hCtrl.H)



    Case "ReportVBox", "Report"

      Draw.Foreground = &HFF8080&
      Draw.LineStyle = Line.Dash
      Draw.Rect(0, 0, hCtrl.W, hCtrl.H)
      If hCtrl["Expand"] Then
        Draw.LineStyle = Line.Solid
        Draw.FillStyle = Fill.Solid
        Draw.Foreground = Color.Red
        
        DrawVArrow(10, 0, 10, hCtrl.Height)
        
        
      Endif

    Case "ReportImage"

      sPath = hCtrl["Image"]
      If Not sPath Then Return True
      
      If hCtrl["#Image"] <> sPath Then
        hCtrl["#Image"] = sPath
        hCtrl["#ImageObject"] = Null
        Try hCtrl["#ImageObject"] = Image.Load(Project.Dir &/ sPath)
      Endif
      
      hImage = hCtrl["#ImageObject"]
      If hImage Then
        hRect = New Rect(X, Y, W, H)
        StretchImage(hRect, hCtrl["Stretch"], Classes["Align"][hCtrl["Alignment"]].Value, hImage.W, hImage.H)
        Paint.DrawImage(hImage, hRect.X, hRect.Y, hRect.W, hRect.H)
      Else
        CFamily.PaintBroken
      Endif

    Case "ReportSvgImage"

      sPath = hCtrl["Image"]
      If Not sPath Then Return True
      
      If hCtrl["#Image"] <> sPath Then
        hCtrl["#Image"] = sPath
        hCtrl["#ImageObject"] = Null
        Try hSvgImage = SvgImage.Load(Project.Dir &/ sPath)
        If Not Error Then
          hCtrl["#ImageObject"] = hSvgImage
          hCtrl["#ImageW"] = hSvgImage.Width
          hCtrl["#ImageH"] = hSvgImage.Height
        Endif
      Endif
      
      hSvgImage = hCtrl["#ImageObject"]
      
      If hSvgImage Then
        hRect = New Rect(X, Y, W, H)
        StretchImage(hRect, hCtrl["Stretch"], Classes["Align"][hCtrl["Alignment"]].Value, hCtrl["#ImageW"], hCtrl["#ImageH"])
        hSvgImage.Resize(hRect.W, hRect.H)
        Paint.MoveTo(hRect.X, hRect.Y)
        hSvgImage.Paint
      Else
        CFamily.PaintBroken
      Endif

    Case Else

      Return True

  End Select

End

Public Sub GetIcon(hCCtrl As CControl) As String
  
  Dim sImage As String
  
  Select hCCtrl.Kind

    Case "ReportHBox"
      sImage = "horizontal"

    Case "ReportVBox"
      sImage = "vertical"

  End Select

  Return sImage
  
End

Static Private Sub RoundRect(x As Float, y As Float, w As Float, h As Float, Radius_X As Float[], radius_y As Float[])

  Dim ARC_TO_BEZIER As Float = 0.55228475
  Dim c1, c2 As Float
  Dim i As Integer

  For i = 0 To 3
    If radius_x[i] > w - radius_x[i] Then
      radius_x[i] = w / 2
    Endif

    If radius_y[i] > h - radius_y[i] Then
      radius_y[i] = h / 2
    Endif
    
  Next
  'approximate(quite Close )the arc using a bezier curve

  '        A**********B
  '       H            C
  '       *            *
  '       *            *
  '       G            D
  '        F**********E

  '-->A
  Paint.MoveTo(x + radius_x[0], y)

  '-->B
  Paint.LineTo(x + w - radius_x[1], y)

  '-->C
  c1 = ARC_TO_BEZIER * radius_x[1]
  c2 = ARC_TO_BEZIER * radius_y[1]
  Paint.RelCurveTo(c1, 0.0, radius_x[1], c2, radius_x[1], radius_y[1])

  '-->D
  Paint.LineTo(x + w, y + h - radius_y[2])

  '-->E
  c1 = ARC_TO_BEZIER * radius_x[2]
  c2 = ARC_TO_BEZIER * radius_y[2]
  Paint.RelCurveTo(0.0, c2, c1 - radius_x[2], radius_y[2], - radius_x[2], radius_y[2])

  '-->F
  Paint.LineTo(x + radius_x[3], y + h)

  '-->G
  c1 = ARC_TO_BEZIER * radius_x[3]
  c2 = ARC_TO_BEZIER * radius_y[3]
  Paint.RelCurveTo(- c1, 0, - radius_x[3], - c2, - radius_x[3], - radius_y[3])
  
  '-->H
  Paint.LineTo(x, y + radius_y[0])

  '-->A
  c1 = ARC_TO_BEZIER * radius_x[0]
  c2 = ARC_TO_BEZIER * radius_y[0]
  Paint.relcurveto(0.0, - c2, radius_x[0] - c1, - radius_y[0], radius_x[0], - radius_y[0])

  'Paint.closepath()

End


Private Sub DrawVArrow(X As Integer, Y As Integer, W As Integer, H As Integer)
  Dim iMid As Integer = W / 2
  Draw.Line(X, Y, X, Y + H)
  Draw.Polygon([X, Y, X - iMid, Y + iMid, X + iMid, Y + iMid])
  Draw.Polygon([X, Y + H, X - iMid, Y + H - iMid, X + iMid, Y + H - iMid])
End


Public Sub ActionDialog(sAction As String) As Boolean

  'Dim vColor As Variant
  
  Select Case sAction
    
    Case Like ".text-*"
      Return Super.ActionDialog(sAction)
      
    Case Like ".format-*"
      FProperty.EditProperty(If(sAction = ".format-background", "Background", "Brush"))
      Return True
      'If FColorChooser.Run() Then Return True
      ' vColor = FColorChooser.Color
      ' If Not IsNull(Val(vColor)) Then vColor = Val(vColor)
      ' Me.ActionValue = vColor
      
  End Select
  
End

Public Sub ActionExec(hCtrl As CControl, sAction As String)
  
  Select Case sAction
    
    Case Like ".text-*"
      Super.ActionExec(hCtrl, sAction)
      
    ' Case ".format-background"
    '   If hCtrl.HasProperty("Background") Then hCtrl.SetProperty("Background", Me.ActionValue)
    ' 
    ' Case ".format-foreground"
    '   If hCtrl.HasProperty("Foreground") Then hCtrl.SetProperty("Foreground", Me.ActionValue)
    
  End Select
  
End
