' Gambas class file

Export 

Class _Desktop

'STATIC PROPERTY READ Menus AS _DesktopMenus
'STATIC PROPERTY READ Icons AS _DesktopIcons
Static Property Read ScreenSaver As _Desktop_ScreenSaver
Static Property Read Type As String
Static Property Count As Integer
Static Property Current As Integer
Static Property Read Windows As _Desktop_Windows
Static Property ActiveWindow As Integer
Static Property Read RootWindow As Integer
Static Property Showing As Boolean
'Static Property Read Width As Integer
'Static Property Read Height As Integer
'Static Property Read W As Integer
'Static Property Read H As Integer
Static Property Read Passwords As _Desktop_Passwords
Static Property Read Path As String

Static Private $sDesktop As String
Static Private $cDesktop As Collection

Static Public Sub SendMail({To} As String[], Optional Cc As String[], Optional Bcc As String[], Optional Subject As String, Optional Body As String, Optional Attachment As String)
  
  Dim aArg As String[]
  'xdg-email [--utf8] [--cc address] [--bcc address] [--subject text] [--body text
  ' ] [--attach file] { mailto-uri | address(es) }
  
  aArg = ["--utf8"]
  If CC And If CC.Count Then 
    aArg.Add("--cc")
    aArg.Insert(CC)
  Endif
  If BCC And If BCC.Count Then 
    aArg.Add("--bcc")
    aArg.Insert(BCC)
  Endif
  If Subject Then 
    aArg.Add("--subject")
    aArg.Add(Subject)
  Endif 
  If Body Then 
    aArg.Add("--body")
    aArg.Add(Body)
  Endif
  If Attachment Then 
    aArg.Add("--attach")
    aArg.Add(Attachment)
  Endif 
  
  If {To} And If To.Count Then 
    aArg.Insert({To})
  Endif
  
  Main.RunXdgUtil("xdg-email", aArg)
  
End

Static Public Sub {Open}(URL As String, Optional {Wait} As Boolean)
  
  If URL = "~" Then
    URL = User.Home
  Else If URL Begins "~/" Then
    URL = User.Home & Mid$(URL, 2)
  Endif
  
  Main.RunXdgUtil("xdg-open", [URL], {Wait})
  
End

' Static Private Function Menus_Read() As _DesktopMenus
' 
'   Return _DesktopMenus  
' 
' End
' 
' 
' Static Private Function Icons_Read() As _DesktopIcons
' 
'   Return _DesktopIcons
' 
' End

Static Private Function ScreenSaver_Read() As _Desktop_ScreenSaver

  Return _Desktop_ScreenSaver

End

'  GB_STATIC_METHOD("Find", "Integer[]", CDESKTOP_find, "[(Title)s(Application)s(Role)s]"),

Static Public Sub FindWindow(Optional Title As String, Application As String, Role As String) As Integer[]
  
  Return _Desktop.FindWindow(Title, Application, Role)
  
End

' STATIC PRIVATE SUB InitKeys()
'   
'   $cKeys = NEW Collection
'   $cKeys["Ã©"] = "eacute"
'   
' END

Static Public Sub SendKeys(Keys As String)
  
  Dim iInd As Integer
  Dim sCar As String
  Dim iPos As Integer
  Dim aRelease As New String[]
  Dim bHold As Boolean
  Dim sErr As String
  Dim iLen As Integer = String.Len(Keys)
  
  Do
  
    Inc iInd
    If iInd > iLen Then Break
    
    sCar = String.Mid$(Keys, iInd, 1)
    
    If sCar = "[" Then 
      iPos = String.InStr(Keys, "]", iInd)
      If iPos = 0 Then Break
      sCar = String.Mid$(Keys, iInd + 1, iPos - iInd - 1)
      iInd = iPos
      If Not sCar Then Continue
    Else If sCar = "{" And If Not bHold Then
      bHold = True
      Continue
    Else If sCar = "}" And If bHold Then 
      bHold = False
      aRelease.Reverse
      For Each sCar In aRelease
        'DEBUG sCar;; FALSE
        _Desktop.SendKey(sCar, False)
      Next
      aRelease.Clear
      Continue
    Endif
    
    If Len(sCar) >= 2 Then 
      Try sCar = Conv(sCar, "UTF-8", "LATIN1")
    Endif
    
    If bHold Then
      'DEBUG sCar;; TRUE
      _Desktop.SendKey(sCar, True)
      aRelease.Add(sCar)
    Else
      'DEBUG sCar;; TRUE
      _Desktop.SendKey(sCar, True)
      'DEBUG sCar;; FALSE
      _Desktop.SendKey(sCar, False)
    Endif
    
  Loop 
  
Catch 

  sErr = Error.Text & ": '" & sCar & "'"
  
  For Each sCar In aRelease
    _Desktop.SendKey(sCar, False)
  Next

  Error.Raise(sErr)
  
End

Static Private Sub GetDesktop() As String
  
  If Not $sDesktop Then
    
    If Application.Env["KDE_FULL_SESSION"] Then
      If Application.Env["KDE_SESSION_VERSION"] = "4" Then
        $sDesktop = "KDE4"
      Else
        $sDesktop = "KDE"
      Endif
    Else If Application.Env["GNOME_DESKTOP_SESSION_ID"] Then
      $sDesktop = "GNOME"
    Else If Application.Env["MATE_DESKTOP_SESSION_ID"] Or If Application.Env["MATECORBA_SOCKETDIR"] Then
      $sDesktop = "MATE"
    Else If Application.Env["E_BIN_DIR"] And If Application.Env["E_LIB_DIR"] Then
      $sDesktop = "ENLIGHTENMENT"
    Else If Application.Env["WMAKER_BIN_NAME"] Then
      $sDesktop = "WINDOWMAKER"
    Else If Application.Env["DESKTOP_SESSION"] = "LXDE" Then
      $sDesktop = "LXDE"
    Else If InStr(_Desktop.GetWindowProperty("_DT_SAVE_MODE"), "xfce4") Then
      $sDesktop = "XFCE"
    Else
      Select Case Application.Env["XDG_CURRENT_DESKTOP"]
        Case "LXDE"
          $sDesktop = "LXDE"
        Default
          $sDesktop = "?"
      End Select
    Endif
    
  Endif
  
  '$sDesktop = "GNOME"
  Return $sDesktop
  
End


Static Public Sub OpenTerminal(Optional {Dir} As String)
  
  Dim sExec As String
  Dim sCmd As String
  Dim bNoDir As Boolean
  
  Select Case GetDesktop()
  
    Case "KDE"
      sExec = "konsole"
    Case "KDE4"
      If {Dir} Then
        sExec = "konsole --workdir " & Shell$({Dir})
        bNoDir = True
      Else
        sExec = "konsole"
      Endif
    Case "GNOME"
      sExec = "gnome-terminal"
      If {Dir} Then
        sExec &= "--working-directory=" & Shell$({Dir})
        bNoDir = True
      Endif
    Case "MATE"
      sExec = "mate-terminal"
      If {Dir} Then
        sExec &= "--working-directory=" & Shell$({Dir})
        bNoDir = True
      Endif
    Case "XFCE"
      sExec = "Terminal"
    Case "LXDE"
      sExec = "lxterminal"
    Case Else
      sExec = "xterm"
  
  End Select
  
  If {Dir} And If Not bNoDir Then
    sCmd = "(cd " & Shell$({Dir}) & "; " & sExec & ")"
  Else
    sCmd = sExec
  Endif
  
  Shell sCmd
  
End


Static Private Function Type_Read() As String

  Return GetDesktop()  

End


Static Public Sub _get(Index As Integer) As _DesktopVirtual

  Dim hVirtual As _DesktopVirtual
  
  If Not $cDesktop Then $cDesktop = New Collection
  
  hVirtual = $cDesktop[Index]
  If Not hVirtual Then
    hVirtual = New _DesktopVirtual(Index)
    $cDesktop[Index] = hVirtual
  Endif
  Return hVirtual
  
End


Static Private Function Current_Read() As Integer

  Try Return _Desktop.GetWindowProperty(Atom["_NET_CURRENT_DESKTOP"])[0]  

End

Static Private Sub Current_Write(Value As Integer)

  _Desktop.SendClientMessageToRootWindow(Atom["_NET_CURRENT_DESKTOP"], [Value])

End

Static Private Function Count_Read() As Integer

  Try Return _Desktop.GetWindowProperty(Atom["_NET_NUMBER_OF_DESKTOPS"])[0]
  Return 1

End

Static Private Sub Count_Write(Value As Integer)

  _Desktop.SendClientMessageToRootWindow(Atom["_NET_NUMBER_OF_DESKTOPS"], [Value])  

End

Static Private Function Windows_Read() As _Desktop_Windows

  Return _Desktop_Windows

End

Static Private Function ActiveWindow_Read() As Integer

  Return _Desktop.GetWindowProperty(Atom["_NET_ACTIVE_WINDOW"])[0]

End

Static Private Sub ActiveWindow_Write(Value As Integer)

  _Desktop.SendClientMessageToRootWindow(Atom["_NET_ACTIVE_WINDOW"], [1, 0, Value, 0, 0], Value)

End

Static Private Function Showing_Read() As Boolean

  Return _Desktop.GetWindowProperty(Atom["_NET_SHOWING_DESKTOP"])[0]

End

Static Private Sub Showing_Write(Value As Boolean)

  _Desktop.SendClientMessageToRootWindow(Atom["_NET_SHOWING_DESKTOP"], [If(Value, 1, 0)])  

End

' Static Private Function Width_Read() As Integer
' 
'   Dim iWidth As Integer
'   
'   Try iWidth = _Desktop.GetWindowProperty(Atom["_NET_DESKTOP_GEOMETRY"])[0]
'   If iWidth = 0 Then iWidth = Super.Width
'   Return iWidth
' 
' End
' 
' Static Private Function Height_Read() As Integer
' 
'   Dim iHeight As Integer
' 
'   Try iHeight = _Desktop.GetWindowProperty(Atom["_NET_DESKTOP_GEOMETRY"])[1]
'   If iHeight = 0 Then iHeight = Super.Height
'   Return iHeight
' 
' End

' Static Private Function W_Read() As Integer
' 
'   Return Width_Read()
' 
' End
' 
' Static Private Function H_Read() As Integer
' 
'   Return Height_Read()
' 
' End

Static Private Function Passwords_Read() As _Desktop_Passwords

  Return _Desktop_Passwords

End


Static Private Function Path_Read() As String

  Return Main.GetDesktopPath()

End

Static Private Function RootWindow_Read() As Integer

  Return _Desktop.RootWindow

End

Static Public Sub RunAsRoot(Command As String)
  
  Main.RunXdgUtil("xdg-su", ["-c", Command])
  
End
