' Gambas class file

Export

Class Stock

Static Private $aMimesSuffix As New DesktopMime[]   ''Normal pattern for extentions
Static Private $aMimesPrefix As New DesktopMime[]   ''Pattern for prefix
Static Private $aMimesSpecial As New DesktopMime[]  ''Special Pattern
Static Private $cHash As New Collection             ''Quick access on First position of a letter
Static Private TypeToMInfo As New Collection        ''Table that return a mimeobject from its mimetype
Static Private $aCurMimes As DesktopMime[]          ''Temporary table for _Next walking
Static Private $cIconCache As New Collection        ''Cache for icons
Static Private $cCommentCache As New Collection     ''Cache for comments

Public _$iWeight As Integer
Public _$sType As String
Public _$sPattern As String
Public _$aMagic As New String[]
Public _$sGenericIcon As String
Public _$bIsSuffix As Boolean

Static Private $bPreciseSearch As Boolean
Static Property PreciseSearch As Boolean

Property Read Weight As Integer                            ''Weight of a mime entry for a type
Property Read Type As String                               ''Type mime
Property Read Pattern As String                            ''Pattern of a mime type
Property Read Magic As String[]                            ''Magic strings for binary tests
Property Read GenericIcon As String                        ''Generic icons in case no other was found
Property Read IsSuffix As Boolean                          ''Return true if the pattern is a suffix

Public Function _compare(Other As DesktopMime) As Integer
  
  Return Comp(_$sPattern, Other._$sPattern, gb.IgnoreCase)
  
End

Public Sub GetIcon(Optional Size As Integer = 16) As Image
  
  Dim sPath As String
  Dim hImage As Image
  Dim sKey As String
  Dim sMime As String = _$sType
  Dim sDir As String
  Dim sSize As String
  
  sKey = sMime & ":" & CStr(Size)
  sMime = Replace(sMime, "/", "-")
  hImage = $cIconCache[sKey]
  
  For Each sDir In [Desktop.DataDir &/ "icons", "/usr/share/icons"]
    For Each sSize In [CStr(Size), "128", "64", "32"]      
      sPath = Subst(sDir &/ "hicolor/&1x&1/mimetypes/&2.png", sSize, sMime)
      If Exist(sPath) Then 
        Try hImage = Image.Load(sPath)
        If hImage Then Break
      Endif
    Next
    If hImage Then Break
  Next
  
  If Not hImage Then
    sPath = Subst("/usr/share/pixmaps/&1.png", sMime)
    If Exist(sPath) Then Try hImage = Image.Load(sPath)
  Endif

  If Not hImage Then
    Try hImage = Stock[CStr(Size) &/ "$(mime)" &/ sMime, CStr(Size) &/ "$(mime)" &/ _$sGenericIcon].Image
  Endif
  
  If hImage.W <> Size Or If hImage.H <> 16 Then hImage = hImage.Stretch(Size, Size)
  
  $cIconCache[sKey] = hImage
  Return hImage
  
End

Public Function GetApplications() As DesktopFile[]
  
  Return DesktopFile.FindMime(_$sType)
  
End

'****************** Static Functions ****************
Static Private Sub LoadMimeDatabase()
  
  Dim sPath As String
  Dim bIsOk As Boolean = True
  
  'Empty all entry before filling
  If $aMimesPrefix.Count > 0 Then Refresh
  
  For Each sPath In Main.GetDataDir()
    
    bIsOk = bIsOk And ReadMimeFile(sPath &/ "mime/globs2")
    
  Next
  If bIsOk Then 
    If $aMimesSuffix.Count = 0 Then
      Error "gb.desktop: unable to find mime database"
    Else
      Error "gb.desktop: unable to read mime database: " & Error.Text & ": " & Error.Where
      Refresh
    Endif
  Endif
End


Static Private Function ReadMimeFile(sPath As String) As Boolean
  Dim s, ss As String  ''Temp String Vars
  Dim hFile As File    ''File handle
  Dim hMInfo As DesktopMime   
  Dim ars As String[]
  Dim i As Integer
  
  If Not Exist(sPath) Then Return True
  
  hfile = Open sPath For Read
    
    'Load the file into Class tables
    While Not Eof(hfile)
      
      Line Input #hfile, s
      If Trim(s) Begins "#" Then Continue
      ars = Scan(s, "*:*:*")
      If ars[2] Begins "*." Then
        hMInfo = New DesktopMime
        hMInfo._$iWeight = ars[0]
        hMInfo._$sType = ars[1]
        hMInfo._$sPattern = Right(ars[2], -2)
        hMInfo._$bIsSuffix = True 
        $aMimesSuffix.Add(hMInfo)
      Else If ars[2] Ends "*" Then 
        hMInfo = New DesktopMime
        hMInfo._$iWeight = ars[0]
        hMInfo._$sType = ars[1]
        hMInfo._$sPattern = ars[2]
        $aMimesPrefix.Add(hMInfo)
      Else
        hMInfo = New DesktopMime
        hMInfo._$iWeight = ars[0]
        hMInfo._$sType = ars[1]
        hMInfo._$sPattern = ars[2]
        $aMimesSpecial.Add(hMInfo)
      Endif
      If InStr(hMInfo._$sType, "/") Then 
        hMInfo._$sGenericIcon = Left(hMInfo._$sType, InStr(hMInfo._$sType, "/") - 1) & "-x-generic"
      Endif
      'If ars.Count = 3 Then hMInfo.GenericIcon = ars[0] & "-" & ars[2] & "-generic"
      TypeToMInfo[hMInfo.Type] = hMInfo
    Wend
    
    'Sort the Globs by pattern
    $aMimesSuffix.Sort
    
    'Make the quick access hash table
    s = Left($aMimesSuffix[0]._$sPattern)
    $cHash.Add(0, s)
    For i = 0 To $aMimesSuffix.max
      ss = Left($aMimesSuffix[i]._$sPattern)
      If ss = s Then Continue
      $cHash.Add(i, ss)
      s = ss
    Next
    ' For Each hMInfo In $aMimesSpecial
    '   Print hMInfo.Pattern
    ' Next
    Close #hfile
    
    If $bPreciseSearch Then
      'Chargement du fichier Magic
      If Exist(sPath &/ "mime/magic") Then
        hFile = Open sPath &/ "mime/magic" For Read
        
        While Not Eof(hFile)
          Line Input #hFile, s
          If s Begins "[" Then
            Try hMInfo = TypeToMInfo[Split(Mid(s, 2, Len(s) - 2), ":")[1]]
            Continue
          Endif
          If IsNull(hMInfo) Then Continue
          hMInfo._$aMagic.Add(s)
        Wend
        Close #hfile
      Endif
    Endif
    
    'Chargement des Icones Génériques
    If Exist(sPath &/ "mime/generic-icons") Then
      hFile = Open sPath &/ "mime/generic-icons" For Read
      
      While Not Eof(hFile)
        Line Input #hFile, s
        ars = Split(s, ":")
        Try TypeToMInfo[ars[0]]._$sGenericIcon = ars[1]
      Wend
      Close #hfile
    Endif
  
  Catch
    Return True
  
End



Static Private Function FindByExt(sFile As String) As DesktopMime[]
  
  Dim aMInfo As New DesktopMime[]
  Dim i As Integer 
  Dim sExt As String
  Dim s As String 
  
  sExt = Right(sFile, - InStr(sFile, "."))
  Do
    If sExt = "" Then Return aMInfo
    s = Left(sExt)
    If $cHash.Exist(s) Then
      i = $cHash[s]
      Do
        If sExt = $aMimesSuffix[i].Pattern Then aMInfo.Add($aMimesSuffix[i])
        Inc i 
        If i > $aMimesSuffix.Max Then Break
        If Left($aMimesSuffix[i].Pattern) <> s Then Break
      Loop
    Endif
    If Not InStr(sExt, ".") Then Break
    sExt = Right(sExt, - InStr(sExt, "."))
  Loop
  Return aMInfo
  
End

Static Private Function FindByPrefix(sFile As String) As DesktopMime[]
  
  Dim aMInfo As New DesktopMime[]
  Dim i As Integer
  
  For i = 0 To $aMimesPrefix.Max
    If LCase(sFile) Begins Left($aMimesPrefix[i].Pattern, -1) Then aMInfo.Add($aMimesPrefix[i])
  Next
  Return aMInfo
  
End

Static Private Function FindBySpecial(sFile As String) As DesktopMime[]
  
  Dim aMInfo As New DesktopMime[]
  Dim i As Integer
  
  For i = 0 To $aMimesSpecial.Max
    If LCase(sFile) Like $aMimesSpecial[i].Pattern Then aMInfo.Add($aMimesSpecial[i])
  Next
  Return aMInfo
  
End
'TODO: Make the binary magic test
' Static Private Function TestMagic(sPath As String, hMInfo As DesktopMime) As Boolean
'   
'   Dim iStartOffset, iValueLength, iWordSize, iRangeSize As Integer
'   Dim sValue, sMask As String
'   Dim ars As String[]
'   Dim hfile As File
' 
'   Return False
'   If hMInfo.Magic.Count = 0 Then Return False
'   
'   ars = Scan(hMInfo.Magic[0], ">*=*")
'   iStartOffset = ars[0]
'   iValueLength = Int@(Swap$(Left(ars[1], 2)))
'   sValue = Right(ars[1], -2)
'   'sMask = ars[2]
'   'iRangeSize = ars[4]
'   
'   hfile = Open sPath For Read
'   Seek #hFile, iStartOffset
'   
' End
' 
''Return The Mime info of a file

Static Public Function FromFile(Path As String) As DesktopMime
  
  Dim aMInfo As DesktopMime[]
  Dim sFileName As String = File.Name(Path)
  'Dim hMInfo As DesktopMime
  
  If Exist(Path) Then
    If $aMimesSuffix.Count = 0 Then LoadMimeDatabase
    
    aMInfo = FindByExt(LCase(sFileName))
    If aMInfo.Count = 0 Then
      aMInfo = FindByPrefix(LCase(sFileName))
      If aMInfo.Count = 0 Then
        aMInfo = FindBySpecial(LCase(sFileName))
      Endif
    Endif
    If aMInfo.Count = 1 Then Return aMInfo[0]
    
    If aMInfo.Count = 0 Then
      aMInfo.Add(TypeToMInfo["text/plain"])
      aMInfo.Add(TypeToMInfo["application/octet-stream"])
    Endif
    
    ' For Each hMInfo In aMInfo
    '   TestMagic(Path, hMInfo)
    ' Next
    
    If aMInfo.Count > 0 Then Return aMInfo[0]
  Endif
  
End

''Return the desktopmime for a given type mime.
Static Public Function _get(Type As String) As DesktopMime
  
  If $aMimesSpecial.Count = 0 Then LoadMimeDatabase
  Return TypeToMInfo[Type]
  
End

''Unload the datas
Static Public Sub Refresh()
  
  $aMimesPrefix.Clear
  $aMimesSpecial.Clear
  $aMimesSuffix.Clear
  $cHash.Clear
  TypeToMInfo.Clear
  $cIconCache.Clear
  $cCommentCache.Clear
End

Static Public Function _next() As DesktopMime
  
  If $aMimesSuffix.Count = 0 Then LoadMimeDatabase
  If Not $aCurMimes Then $aCurMimes = $aMimesSuffix
  If Not Enum.Index Then 
    Enum.Index = 0
    $aCurMimes = New DesktopMime[]
    $aCurMimes.Insert($aMimesSuffix)
    $aCurMimes.Insert($aMimesPrefix)
    $aCurMimes.Insert($aMimesSpecial)
  Endif
  Enum.Index += 1
  If Enum.Index = $aCurMimes.count + 1 Then 
    Enum.Stop
    $aCurMimes = Null
    Return
  Endif
  Return $aCurMimes[Enum.Index - 1]
  
End

Static Public Sub _exit()
  
  $aMimesPrefix = Null
  $aMimesSpecial = Null
  $aMimesSuffix = Null
  $cHash = Null
  TypeToMInfo = Null
  $cIconCache = Null
  $cCommentCache = Null
End

''Return if a TypeMime exist in the database
Static Public Sub Exist(Type As String) As Boolean
  
  Return TypeToMInfo.Exist(Type)
  
End

Private Function Weight_Read() As Integer
  
  Return _$iWeight
  
End

Private Function Type_Read() As String
  
  Return _$sType
  
End

Private Function Pattern_Read() As String
  
  Return _$sPattern
  
End

Private Function Magic_Read() As String[]
  
  Return _$aMagic
  
End

Private Function GenericIcon_Read() As String
  
  Return _$sGenericIcon
  
End

Private Function IsSuffix_Read() As Boolean
  
  Return _$bIsSuffix
  
End

Static Private Function PreciseSearch_Read() As Boolean
  
  Return $bPreciseSearch
  
End

Static Private Sub PreciseSearch_Write(Value As Boolean)
  
  $bPreciseSearch = Value
  
End

Public Function GetComment(Optional Common As Boolean) As String
  
  Dim sPath As String 
  Dim s As String
  Dim sLine As String
  Dim sLang As String = Left(System.Language, 2)
  Dim sRet As String
  'Dim sTypePath As String = Type & ".xml"
  If $cCommentCache.Exist(_$sType) Then Return $cCommentCache[_$sType]
    'If _$sType = "application/vnd.sun.xml.calc.template" Then Stop
  For Each s In Main.GetDataDir()
    sPath = s &/ "mime" &/ _$sType & ".xml"
    If Exist(sPath) Then
      
      For Each sLine In Split(File.Load(sPath), "\n")
        
        If Not common Then 
          If InStr(sline, "<comment xml:lang=\"" & sLang & "\">") Then
            sRet = Scan(sLine, "*>*<*")[1]
            Break
          Endif
        Endif
        If InStr(sLine, "<comment>") Then 
          sRet = Scan(sLine, "*>*<*")[1]
          If sRet And If common Then Break
        Endif
        
      Next
      If sRet Then 
        $cCommentCache[_$sType] = sRet
        Return sRet  
      Endif
    Endif
  Next
  
End
