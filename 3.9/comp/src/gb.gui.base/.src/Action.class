' Gambas class file

Export

Static Private $aVoid As New Object[]
Static Private $cControls As New Collection(gb.IgnoreCase)
Static Private $cLock As New Collection
Static Private $iGlobalLock As Integer

'Static Property Read List As String[]

Property Enabled As Boolean
Property Visible As Boolean
Property Tooltip As String
Property Text As String
Property Picture As Picture
Property Value As Boolean
Property Shortcut As String
Property Read Controls As Object[]
'Property Icon As Picture

Private $sKey As String
Private $aKey As String[]
Private $hParent As Control

Static Private Sub IsToggle(hCtrl As Object) As Boolean
  
  If hCtrl Is Menu And If hCtrl.Toggle Then Return True
  If hCtrl Is ToggleButton Then Return True
  If hCtrl Is ToolButton And If hCtrl.Toggle Then Return True
  If hCtrl Is Window Then Return True
  If hCtrl Is CheckBox Then Return True
  If Object.Type(hCtrl) = "SidePanel" Then Return True
  If Object.Type(hCtrl) = "ToolBar" Then Return True
  
End

Static Private Sub GetToggle(hCtrl As Object) As Boolean
  
  If hCtrl Is Menu And If hCtrl.Toggle Then Return hCtrl.Checked
  If hCtrl Is ToggleButton Then Return hCtrl.Value
  If hCtrl Is ToolButton And If hCtrl.Toggle Then Return hCtrl.Value
  If hCtrl Is Window Then Return hCtrl.Visible
  If hCtrl Is CheckBox Then Return hCtrl.Value = CheckBox.True
  If Object.Type(hCtrl) = "SidePanel" Then Return Not hCtrl.Hidden
  If Object.Type(hCtrl) = "ToolBar" Then Return Not hCtrl.Hidden
  
End

Static Private Sub SetToggle(hCtrl As Object, bVal As Boolean)
  
  If hCtrl Is Menu And If hCtrl.Toggle Then
    hCtrl.Checked = bVal
  Else If hCtrl Is ToggleButton Then
    hCtrl.Value = bVal
  Else If hCtrl Is ToolButton And If hCtrl.Toggle Then 
    hCtrl.Value = bVal
  Else If hCtrl Is Window Then 
    hCtrl.Visible = bVal
  Else If hCtrl Is CheckBox Then 
    hCtrl.Value = bVal
  Else If Object.Type(hCtrl) = "SidePanel" Then 
    hCtrl.Hidden = Not bVal
  Else If Object.Type(hCtrl) = "ToolBar" Then 
    hCtrl.Hidden = Not bVal
  Endif
  
End



Static Private Sub HasHandler(hForm As Object) As Boolean

  Dim bHasHandler As Boolean
  
  Try bHasHandler = Object.Class(hForm)["Action_Activate"].Type
  Return bHasHandler
  
End

Static Private Sub GetHandleWindow(hCtrl As Object) As Window
  
  Dim hCtrlWin As Window = hCtrl.Window
  
  'RETURN hForm
  
  Do
    If HasHandler(hCtrlWin) Then Break
    Try hCtrlWin = hCtrlWin.Parent.Window
    If Error Then Break
  Loop

  Return hCtrlWin  
  
End

Static Private Sub GetActiveWindow(hCtrl As Object) As Window
  
  Dim hForm As Window = Application.ActiveWindow
  Dim hCtrlWin As Window
  
  'RETURN hForm
  
  hCtrlWin = GetHandleWindow(hCtrl)
  
  While hForm
    If hForm = hCtrlWin Then Return Application.ActiveWindow  
    Try hForm = hForm.Parent.Window
    If Error Then Break
  Wend 
  
  Return hCtrl.Window
  
End

Static Public Sub _Register(Control As Object, Old As String, (Key) As String)
  
  Dim aCtrl As Object[]
  
  If Not $cControls Then Return
  If Old = Key Then Return
  
  If Old Then
    aCtrl = $cControls[Old]
    aCtrl.Remove(aCtrl.Find(Control))
  Endif
  
  If Key Then
  
    If Not $cControls.Exist(Key) Then
      $cControls[Key] = New Object[]
    Endif

    aCtrl = $cControls[Key]
    aCtrl.Add(Control)
    
  Endif
  
End

Static Public Sub Lock()
  
  Inc $iGlobalLock
  
End

Static Public Sub Unlock()
  
  $iGlobalLock = Max(0, $iGlobalLock - 1)
  
End

Static Public Sub IsLocked() As Boolean
  
  Return $iGlobalLock
  
End


Static Public Sub Raise(Control As Object)
  
  Dim hForm As Control
  Dim hObject As Object
  Dim sKey As String
  Dim bCont As Boolean
  Dim hLock As Integer[]

  If $iGlobalLock Then Return
  If Not Object.IsValid(Control) Then
    Error "gb.gui: warning: cannot raise action: invalid control: "; Control
    Error "gb.gui: "; System.Backtrace.Join("\n")
    Return
  Endif

  sKey = Control.Action
  'DEBUG Control;; sKey
  If Not sKey Then Return

  If $cLock.Exist(sKey) Then 
    If Object.Count($cLock[sKey]) = 2 Then 
      'DEBUG sKey;; "is locked"
      Return 
    Endif
    'DEBUG sKey;; Object.Count($cLock[sKey])
  Endif
  
  hLock = New Integer[]
  $cLock[sKey] = hLock

  If IsToggle(Control) Then
    If Left(sKey) = "." Then
      Action[sKey, Object.Parent(Control)].Value = GetToggle(Control)
    Else
      Action[sKey].Value = GetToggle(Control)
    Endif
  Endif

  hForm = GetActiveWindow(Control)
  'DEBUG "Active: ";; hForm;; Application.ActiveWindow

  If hForm Then

      While hForm

        If Not Object.IsValid(hForm) Then Break
        If Object.IsLocked(hForm) Then Break

        If hForm Is Window Then
          hObject = hForm
          If HasHandler(hObject) Then
            bCont = False
            bCont = hObject.Action_Activate(sKey)
            If Not bCont Then Break
          Endif
        Endif

        hForm = hForm.Parent
      Wend
        
  Endif
  
  $cLock[sKey] = Null

' FINALLY 
' 
'   $cLock[sKey] = NULL
'   
' CATCH
'   
'   DEBUG "******* "; Error.Where; ": "; Error.Text  
'   Error.Propagate
  
End

Static Public Sub _get((Key) As String, Optional Parent As Control) As Action ', OPTIONAL Window AS Window) AS Action

  Dim hAction As Action
  
  'IF Left(Key) = "." AND IF NOT Parent THEN Error.Raise("Parent must be specified for a local action")
  
  hAction = New Action(Key, Parent)
  Return hAction  
  
End

' Static Private Sub IsChildOfWindow(hWindow As Window, hMain As Window) As Boolean
'   
'   Do
'     If hWindow = hMain Then Return True
'     Try hWindow = hWindow.Parent.Window
'     If Error Then Return
'   Loop
'   
' End

Static Private Sub FindKey(sPattern As String) As String[]
  
  Dim aKey As New String[]
  Dim aCtrl As Object[]
  Dim sKey As String
  
  For Each aCtrl In $cControls
    sKey = $cControls.Key
    If sKey Like sPattern Then aKey.Add(sKey)
  Next
  
  Return aKey
  
End


Private Function GetControls() As Object[]

  Dim aObj As Object[]
  Dim aObj2 As Object[]
  Dim hCtrl As Object
  Dim iInd As Integer
  Dim sKey As String
  
  If $aKey Then
    
    aObj2 = New Object[]
    
    For Each sKey In $aKey
    
      Try aObj = $cControls[sKey]
      If Not aObj Then Continue
      
      If Not $hParent Then
        aObj2.Insert(aObj)
      Else
        For Each hCtrl In aObj
          If Object.Parent(hCtrl) = $hParent Then
            aObj2.Add(hCtrl)
          Endif
        Next
      Endif

    Next
    
    aObj = aObj2

  Else If $sKey Then

    Try aObj = $cControls[$sKey]
    If Not aObj Then Return $aVoid
    
    If $hParent Then 
  
      aObj2 = New Object[]
      For Each hCtrl In aObj
        If Object.Parent(hCtrl) = $hParent Then
          aObj2.Add(hCtrl)
        Endif
      Next
  
      aObj = aObj2
      
    Endif

  Else 

    Return $aVoid

  Endif
  
  iInd = 0
  While iInd < aObj.Count
    If Object.IsValid(aObj[iInd]) Then
      Inc iInd
    Else
      aObj.Remove(iInd)
    Endif
  Wend
  
  Return aObj
  
End


Public Sub _new((Key) As String, Parent As Control)
  
  Dim sKey As String
  
  If InStr(Key, ",") = 0 And InStr(Key, "*") = 0 Then
    $sKey = Key
  Else
    $aKey = New String[]
    For Each sKey In Split(Key, ",")
      If Right(sKey) = "*" Then
        $aKey.Insert(FindKey(sKey))
      Else
        $aKey.Add(sKey)
      Endif
    Next
  Endif
  
  $hParent = Parent
  
End


Private Function Enabled_Read() As Boolean

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    If Not hCtrl.Enabled Then Return False
  Next
  Return True

End

Private Sub Enabled_Write(Value As Boolean)

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    hCtrl.Enabled = Value
  Next

End

Private Function Visible_Read() As Boolean

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    If Not hCtrl.Visible Then Return False
  Next
  Return True

End

Private Sub Visible_Write(Value As Boolean)

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    hCtrl.Visible = Value
  Next

End

Private Function Tooltip_Read() As String

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    If hCtrl.Tooltip Then Return hCtrl.Tooltip
  Next

End

Private Sub Tooltip_Write(Value As String)

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    hCtrl.Tooltip = Value
  Next

End

Private Function Text_Read() As String

  Dim hCtrl As Object
  Dim sText As String
  
  For Each hCtrl In GetControls()
    Try sText = hCtrl.Text
    If sText Then Return sText
  Next

End

Private Sub Text_Write(Value As String)

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    Try hCtrl.Text = Value
  Next  

End

Private Function Picture_Read() As Picture

  Dim hCtrl As Object
  Dim hPict As Picture
  
  For Each hCtrl In GetControls()
    Try hPict = hCtrl.Picture
    If hPict Then Return hPict
  Next

End

Private Sub Picture_Write(Value As Picture)

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    Try hCtrl.Picture = Value
  Next    

End

Private Function Value_Read() As Boolean

  Dim hCtrl As Object
  
  'Debug $sKey
  
  For Each hCtrl In GetControls()
    'Debug hCtrl.Name;; Object.Type(hCtrl)
    If IsToggle(hCtrl) Then 
      'Debug "-->";; GetToggle(hCtrl)
      Return GetToggle(hCtrl)
    Endif
  Next    

End

Private Sub Value_Write(Value As Boolean)

  Dim hCtrl As Object
  Dim aCtrl As Object[] = GetControls()
  Dim cKey As New Collection
  
  For Each hCtrl In aCtrl
    'Debug hCtrl;; Value
    If IsToggle(hCtrl) Then 
      SetToggle(hCtrl, Value)
    Else 
      cKey[hCtrl.Action] = hCtrl
    Endif
  Next    

  For Each hCtrl In cKey
    Action.Raise(hCtrl)
  Next

End

Private Function Shortcut_Read() As String

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    If hCtrl Is Menu Then Return hCtrl.Shortcut
  Next
  

End

Private Sub Shortcut_Write(Value As String)

  Dim hCtrl As Object
  
  For Each hCtrl In GetControls()
    If hCtrl Is Menu Then hCtrl.Shortcut = Value
  Next  

End

Private Function Controls_Read() As Object[]

  Return GetControls()

End
