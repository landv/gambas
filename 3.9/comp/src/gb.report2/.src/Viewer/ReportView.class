' Gambas class file

Export
Inherits UserControl

Public Const _IsControl As Boolean = True
Public Const _IsContainer As Boolean = False

Public Enum Custom, Page, DualPage, FullWidth, RealSize 

Private $aRangePage As New Integer[]

Property Report As Report
Property Read LayoutInProgress As Boolean
Property ScaleMode As Integer
Property ShowPageNumbers As Boolean
Property Range As String
Property _GrayScale As Boolean
Property Zoom As Float
Property Read Count, PageCount As Integer
Private $bGrayScale As Boolean
Private $hReport As Report
Private $hView As New DocumentView(Me) As "View"
Private hOBS As Observer
Private tmrLayout As New Timer As "TmrLayout"
Private $sRange As String
Private $iScaleMode As Integer
Private $bShowPageNumbers As Boolean
Private $bLockLayout As Boolean
Property Read RangePages As Integer[]

Event Zoom
Public Sub _new()

  hOBS = New Observer($hView.Children[0], True) As "Area"
  tmrLayout.Delay = 5
  Me.Proxy = $hView
  'Me.Report = report2
  'Report.Debug = True
  
End


Private Function _GrayScale_Read() As Boolean
  
  Return $bGrayScale
  
End

Private Sub _GrayScale_Write(Value As Boolean)
  
  $bGrayScale = Value
  
End

Public Sub View_Draw((Page) As Integer, Width As Integer, Height As Integer)
  '$hReport.Layout()
  'Print page

  Dim hImg As Image
  Dim iPage As Integer
  
  If $aRangePage.Count > 0 Then 
    Try iPage = $aRangePage[Page]
      If Error Then iPage = Page
  Else
    iPage = Page
  Endif
  
  Paint.AntiAlias = True
  If $bGrayScale Then
    hImg = New Image(Width, Height, Color.White)
    Paint.Begin(hImg)
  Endif
  
  $hReport.Scale = $hView.Zoom
  $hReport.Paint(ipage + 1)
  If $bShowPageNumbers Then
    Paint.Brush = Paint.Color(Color.SetAlpha(Color.Black, 125))
    Paint.Font = Font["Arial,Bold,+20"]
    Paint.Text(iPage + 1, 0, 0, Width, Height, Align.Center)
    Paint.Fill
  Endif
  
  If $bGrayScale Then
    Paint.End
    Paint.DrawImage(hImg.Desaturate(), 0, 0)
  Endif
  $hReport.Scale = 1.0
End

Public Sub View_Zoom()
  
  tmrLayout.Stop
  Raise Zoom
End

Public Sub View_Finished()
  'If $hView.Count <> $hReport.PageCount Then $hView.Count = $hReport.PageCount
  If $hReport._LayoutNotFinished Then tmrLayout.start
  
End

Public Sub Area_Scroll()
  
  tmrLayout.Stop
  
End


Public Sub Area_MouseWheel()

  If Not $hView.Arrangement = Arrange.Row Then
  $hView.Arrangement = Arrange.Row
  $hView.Column = 0
  Endif
  
End

Public Sub Area_Draw()
  
  Dim sText As String
  Dim iTextWidth As Integer
  'Paint.Reset
  
  sText = Str($hView.FirstVisibleDocument + 1) & "/" & Str($hView.Count)
  iTextWidth = Paint.TextSize(sText).Width + 10
  Paint.Rectangle(Paint.Width - iTextWidth - 10, 10, iTextWidth, 25, 5)
  Paint.Brush = Paint.Color(Color.SetAlpha(Color.black, 125))
  Paint.Fill(True)
  Paint.Brush = Paint.Color(Color.black)
  Paint.Stroke
  
  Paint.Brush = Paint.Color(Color.White)
  Paint.Font.Bold = True
  Paint.Text(sText, Paint.Width - iTextWidth - 10, 10, iTextWidth, 25, Align.Center)
  Paint.fill
  
  
End

Public Sub tmrLayout_Timer()
  
  If Not $hReport._LayoutNotFinished Or If $bLOckLayout Then 
    tmrLayout.Stop
    $hView.Refresh
    Return
  Endif
  
  $hReport.Layout($hReport.PageCount)
  $hView.Count = $hReport.PageCount
  '  $hView.Refresh

End

Private Function Report_Read() As Report
  
  Return $hReport
  
End

Private Sub Report_Write(Value As Report)
  
  'If $hReport = Value Then Return
  If Not Value Then Return
  
  $hReport = Value
  $hReport.Layout(1)
  'Print "View Pages: " & $hReport.PageCount
  $hView.Count = $hReport.PageCount 
  $hView.Padding = Report.UnitTo(5, "mm", "px")
  $hView.Spacing = $hView.Padding
  $hView.DocWidth = Report.UnitTo(TSizeParse[Value.Width].ToInch(), "in", "px")
  'Print "ReportWidth: " & Value._Width
  
  $hView.DocHeight = Report.UnitTo(TSizeParse[Value.Height].ToInch(), "in", "px")
  'Print "ReportHeight: " & Value._Height
  '$hView.Zoom = 1
  $hView.Reset
  '$hView.Arrangement = Arrange.f297ill
  '$hView.Column = 2
  '$hView.AutoCenter = True
  
End

Public Sub MoveNext()
  
  $hView.MoveNext
  $hView.Item.EnsureVisible
  
End

Public Sub MovePrevious()
  
  $hView.MovePrevious
  $hView.Item.EnsureVisible
  
End

Public Sub MoveFirst()
  
  $hView.MoveFirst
  $hView.Item.EnsureVisible
  
End

Public Sub MoveLast()
  
  $hView.MoveLast
  $hView.Item.EnsureVisible
  
End

Public Sub MoveTo((Page) As Integer)
  
  $hView.MoveTo(Page)
  $hView.Item.EnsureVisible
  
End

'Public Sub 

Private Function LayoutInProgress_Read() As Boolean

  Return $hReport._LayoutNotFinished

End

Private Function ScaleMode_Read() As Integer

  Return $iScaleMode

End

Private Sub ScaleMode_Write(Value As Integer)

  $iScaleMode = Value
  
  $hView.AutoCenter = False
  
  Select Case Value
    Case Me.Custom
      $hView.Column = 0
      $hView.Arrangement = Arrange.Row
    Case Me.Page
      $hView.Column = 0
      $hView.Arrangement = Arrange.Fill
      $hView.AutoCenter = True
    Case Me.DualPage
      $hView.Column = 2
      $hView.Arrangement = Arrange.Row
      $hView.AutoCenter = True
    Case Me.FullWidth
      $hView.Column = 0
      $hView.Arrangement = Arrange.Vertical
    Case Me.RealSize
      $hView.Column = 0
      $hView.Arrangement = Arrange.Row
      $hView.Zoom = 1
  End Select
  
  $hView.Refresh

End

Private Function ShowPageNumbers_Read() As Boolean

  Return $bShowPageNumbers

End

Private Sub ShowPageNumbers_Write(Value As Boolean)
  $bShowPageNumbers = Value
  $hView.Refresh

End

Private Function Range_Read() As String

  Return $sRange

End

Private Sub Range_Write(Value As String)


  
  Dim ars As String[]
  Dim ars2 As String[]
  Dim s As String
  Dim iStart, iEnd, i As Integer
  
  $sRange = Value
  $aRangePage.Clear
  
  If Not $sRange Then Goto Fin
  ars = Split($sRange, ";")
  
  For Each s In ars
    If InStr(s, "-") Then
      ars2 = Scan(s, "*-*")
      iStart = CInt(Val(ars2[0])) - 1
      iEnd = Val(ars2[1]) - 1
      If iStart < 0 Or If iEnd < 0 Or If iEnd < iStart Then Goto Fin
      If $aRangePage.Count > 0 And If iStart < $aRangePage[$aRangePage.Max] Then Goto Fin
      For i = iStart To iEnd
        
        $aRangePage.Add(i)
        
      Next
    Else
      iStart = CInt(Val(s)) - 1
      If $aRangePage.Count > 0 And If iStart < $aRangePage[$aRangePage.Max] Then Goto Fin
      $aRangePage.Add(iStart)
    Endif
  Next
  'Return
  
Finally
Fin:
If $aRangePage.Count > 0 Then
  $hView.Count = $aRangePage.Count
  Me.MoveFirst
Else
  Me.MoveFirst
  $hView.Count = $hReport.PageCount
Endif
$hView.Refresh
'_$aRangePage.Clear
Catch
  
End

Private Function Zoom_Read() As Float

  Return $hView.Zoom

End

Private Sub Zoom_Write(Value As Float)

  $hView.Zoom = Value

End

Private Function Settings_Read() As Variant[]

  Return [$hView.Zoom, CVariant($iScaleMode)]

End

Private Sub Settings_Write(Value As Variant[])

   $hView.Zoom = Value[0]
   $iScaleMode = Value[1]

Catch
  
End

Public Sub _ForceLayout()
  Dim htmpImage As New Image(1, 1)
  tmrLayout.Stop
  Paint.Begin(htmpImage)
  $hReport.Layout()
  Paint.End
  $hView.Count = $hReport.PageCount
  
End

Public Sub LockLayout()
  
  $bLockLayout = True
  
End

Public Sub UnlockLayout()
  
  
  $bLockLayout = False
  tmrLayout.Start
  
End

Public Sub Refresh()
  
  Me.Report = Me.Report
  $hView.Refresh
End



Private Function Count_Read() As Integer

  If $aRangePage.Count > 0 Then Return $aRangePage.Count
  Return $hReport.PageCount
  
End


Private Function RangePages_Read() As Integer[]

  Return $aRangePage

End
