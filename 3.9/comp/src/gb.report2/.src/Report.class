' Gambas class file

Create Static
Export
Inherits ReportSection

' For Stretch properties
Public Enum None, Proportional, Fill

Public Const _Properties As String = "*,-Left,-Top,-Width,-Height,Count{Range:1;256}=1,Index,Text,"
"Paper{Printer.A3;A4;A5;B5;Letter;Executive;Legal;Custom}=A4,"
"Orientation{Printer.Portrait;Landscape}=Portrait"
Public Const _HiddenControls As String = "Report,ReportControl,ReportContainer,ReportFrame,ReportSection"
Public Const _IsForm As Boolean = True
Public Const _IsContainer As Boolean = True
Public Const _IsMultiContainer As Boolean = True
Public Const _DrawWith As String = "TabPanel"
Public Const _DefaultEvent As String = "Open"
Static Public AllowedUnits As String[] = ["m", "cm", "mm", "in", "pt", "px"]

Public _LayoutNotFinished As Boolean

Public _Container As ReportSection

Public {Debug} As Boolean = False
Public _bInExec As Boolean


Private $aSections As New TControl[]
Private iCurPage As Integer = 0
Private $iPageCount As Integer = -1
Public _LayoutIsDirty As Boolean = True
Private $fScale As Float = 1.0
Private $iIndex As Integer
Private $iResolution As Integer = -1
Private $iCurSection As Integer
Private $iCurPage As Integer = -1
Private $iPaper As Integer = 2
Private $iOrientation As Integer
' Private $hPrinter As New Printer As "Printer"
Private $bOpened As Boolean
Private $fCurReportWidth As Float

' Property Read Printer As Printer
Property Resolution As Integer
Property Scale As Float
Property Read PageCount As Integer
Property Count As Integer
Property Index As Integer

'All ReportControl Properties
Property Left As String
Property Top As String
Property X As String
Property Y As String

Property Width As String
Property Height As String

Property Visible As Boolean
Property {Font} As Font
Property Expand As Boolean
Property Ignore As Boolean
Property Fixed As Boolean

Property Autoresize As Boolean
Property Padding As ReportPadding
'All ReportFrame Properties
Property Border As ReportBorder
Property BackGround As ReportBrush

'All ReportContainer Properties
Property Read Children As ReportControl[]
Property Spacing As String
Property Data As Object

'All ReportSection Properties
Property Text As String

Property Paper As Integer
Property Orientation As Integer
Property Read _Width As Float
Property Read _Height As Float

Event Open

Static Public Sub Main()
  
  Dim hObject As Object
  
  hObject = Application.Startup.AutoCreate()
  If Not hObject Is Report Then Return
  FPreview.Run(hObject)
  
End

Public Sub _New()
  
  Dim hSection As New ReportSection
  Dim TSection As New TControl
  
  object.Attach(Me, Me, "Report")
  
  '$hReportTControl.RelPage = 0
  ReportControl._ObjectFromId[Me.id] = Me
  hSection = New ReportSection
  hSection._ReportId = Me.Id
  
  ReportControl._ObjectFromId[hSection.Id] = hSection
  TSection.Ctrl = hSection
  $aSections.Add(TSection)
  hSection.Text = ("Section ") & $aSections.Max
  _Container = hSection
  Me.paper = Printer.A4
  'Me.Orientation = Printer.Landscape
End

Public Sub Layout(Optional iPage As Integer = -1)
  
  
  'Dim iCurPage As Integer
  Dim TSection As TControl
  Dim CSection As ReportContainer
  Dim CBaseSection As ReportContainer
  Dim i As Integer
  Dim hImg As Image
  'Utilise un device par défaut si nécéssaire
  If Not Paint.Device Then 
    hImg = New Image(1, 1)
    Paint.Begin(hImg)
  Endif
  Paint.Font = Me.Font
  If Not $bOpened Then 
    Raise Open
    $bOpened = True
  Endif
  

  If Not _LayoutIsDirty Then Return
  If _bInExec Then Return
  If iPage > -1 Then
    'La page a déja été calculée
    If iPage <= $iCurPage Then Return
  Else
    'Mise a zéro
    $iCurPage = -1
    $iCurSection = 0
    $iPageCount = 0
    Me._Reset
  Endif
  'Set execution Flag to true
  _bInExec = True
  CBaseSection = $aSections[0].Ctrl
  
  
  For i = $iCurSection To $aSections.Max
    Tsection = $aSections[i]
    CSection = TSection.Ctrl
    CSection.Padding = CBaseSection.Padding
    CSection.Spacing = CBaseSection.Spacing
    CSection._NormalizeUnits()
    $fCurReportWidth = CBaseSection._Width
    TSection._SetGeometry(0, 0, CSection._Width, CSection._Height)
    Inc $iCurPage
    Do
      
      CSection._SetChildGeometry(0, 0, CSection._Width, CSection._Height, $iCurPage, TSection, False)
      
      If CSection._CurItem > CSection.Children.Max Then Break
      
      Inc $iCurPage
      $iPageCount = $iCurPage
      'Print "Fin Page " & $iCurPage
      If iPage > -1 And If $iCurPage > iPage Then
        Dec $iCurPage
        _LayoutNotFinished = True
        $iCurSection = i
        _bInExec = False
        Return
        
      Endif
      
    Loop
    'Inc iCurPage
  Next
  
  $iPageCount = $iCurPage + 1
  _LayoutNotFinished = False
  $iCurSection = 0
  _LayoutIsDirty = False
  
  'End of execution
  _bInExec = False
  'Print "Pages: " & $ipageCount
End

Public Sub Paint(Page As Integer)
  
  Dim TSection As TControl
  'Dim fScale As Float

  
  If Me.Parent = Null Then

  Endif
  Paint.Font = Me.Font
  $fCurReportWidth = $aSections[0].Ctrl._Width

  If _LayoutIsDirty Or $iPageCount = -1 Then Layout(Page)
  Paint.Save
  Paint.Scale($fScale, $fScale)
  'Set execution Flag to true
  _bInExec = True
  

  Dec page

  For Each TSection In $aSections
    TSection.Ctrl._PaintBefore(Page, 0, 0, TSection, -1)
    TSection.Ctrl._Paint(Page, 0, 0, TSection, -1)
    TSection.Ctrl._PaintAfter(Page, 0, 0, TSection, -1)
  Next
  'End of execution
  _bInExec = False
  Paint.Restore
  
  
End

Private Function PageCount_Read() As Integer
  
  If _LayoutIsDirty And Not _LayoutNotFinished Then Layout(1) 
  
  Return $iPageCount
  
End

Private Function Height_Read() As String
  
  Return $aSections[0].Ctrl.Height
  
End

Private Sub Height_Write(Value As String)
  
  SetHeight(Value)
  $iPaper = Printer.Custom
  
End

Private Sub SetHeight(Value As String)
  
  Dim TSection As TControl
  
  If $aSections[0].Ctrl.Height <> Value Then
    
    For Each TSection In $aSections
      TSection.Ctrl.Height = Value
    Next
    _LayoutIsDirty = True
    Me._reset
  Endif
  
End

Private Function Width_Read() As String
  
  Return $aSections[0].Ctrl.Width
  
End

Private Sub Width_Write(Value As String)
  
  SetWidth(Value)
  $iPaper = Printer.Custom
  
End

Private Sub SetWidth(Value As String)
  
  Dim TSection As TControl
  
  If $aSections[0].Ctrl.Width <> Value Then
    For Each TSection In $aSections
      Tsection.Ctrl.Width = Value
    Next
    _LayoutIsDirty = True
    Me._Reset
  Endif
  
End

Private Function Scale_Read() As Float
  
  Return $fScale
  
End

Private Sub Scale_Write(Value As Float)
  
  $fScale = Value
  
End

Public Sub Clear()
  
  Super._Free
  iCurPage = 0
  $iPageCount = -1

  _LayoutIsDirty = True
  $fScale = 1.0

End
'

Public Function Preview()
  
  FPreview.Run(Me)
  
End



Public Sub Refresh()
  
  _LayoutIsDirty = True
  Me._Reset
  
End

Private Function Count_Read() As Integer
  
  Return $aSections.Count
  
End

Private Sub Count_Write(Value As Integer)
  
  Dim i As Integer
  Dim hSection As ReportSection
  Dim TSection As TControl
  
  If Value < 0 Then Return
  If Value < $aSections.Count Then
    $aSections.Resize(Value)
  Else If Value > $aSections.Count Then
    For i = $aSections.Count To Value - 1
      
      TSection = New TControl
      hSection = New ReportSection
      hSection.Text = "Section " & CStr(i)
      hSection._ReportId = Me.Id
      ReportControl._ObjectFromId[hSection.Id] = hSection
      TSection.Ctrl = hSection
      hSection.Padding = Me.Padding
      hSection.Height = Me.Height
      hSection.Width = Me.Width
      $aSections.Add(TSection)
      hSection.Text = ("Section ") & $aSections.Max
    Next
  Endif
  
End

Private Function Index_Read() As Integer
  
  Return $iIndex
  
End

Private Sub Index_Write(Value As Integer)
  
  $iIndex = Max(Min($aSections.Max, Value), 0)
  _Container = $aSections[$iIndex].Ctrl
  
End

Public Sub _get(Index As Integer) As ReportSection
  
  Return $aSections[Index].Ctrl
  
End

Private Function Padding_Read() As ReportPadding
  
  Return $aSections[0].Ctrl.Padding
  
End

Private Sub Padding_Write(Value As ReportPadding)
  
  Dim TSection As TControl
  
  If Me.Padding <> Value Then
    For Each TSection In $aSections
      Tsection.Ctrl.Padding = Value
    Next
  Endif
  
End

Private Function Resolution_Read() As Integer
  
  Return $iResolution
  
End

Private Sub Resolution_Write(Value As Integer)
  
  _LayoutIsDirty = True
  $iResolution = Max(0, Value)
  
End

Private Function Left_Read() As String
  
  Return _Container.Left
  
End

Private Sub Left_Write(Value As String)
  
  _Container.Left = Value
  
End

Private Function Top_Read() As String
  
  Return _Container.Top
  
End

Private Sub Top_Write(Value As String)
  
  _Container.Top = Value
  
End

Private Function X_Read() As String
  
  Return _Container.Left
  
End

Private Sub X_Write(Value As String)
  
  _Container.Left = Value
  
End

Private Function Y_Read() As String
  
  Return _Container.Top
  
End

Private Sub Y_Write(Value As String)
  
  _Container.Top = Value
  
End

Private Function Visible_Read() As Boolean
  
  Return _Container.Visible
  
End

Private Sub Visible_Write(Value As Boolean)
  
  _Container.Visible = Value
  
End

Private Function Font_Read() As Font
  
  Return _Container.Font
  
End

Private Sub Font_Write(Value As Font)
  
  _Container.Font = Value
  
End

Private Function Expand_Read() As Boolean
  
  Return _Container.Expand
  
End

Private Sub Expand_Write(Value As Boolean)
  
  _Container.Expand = Value
  
End

Private Function Ignore_Read() As Boolean
  
  Return _Container.Ignore
  
End

Private Sub Ignore_Write(Value As Boolean)
  
  _Container.Ignore = Value
  
End

Private Function Fixed_Read() As Boolean
  
  Return _Container.Fixed
  
End

Private Sub Fixed_Write(Value As Boolean)
  
  _Container.Fixed = Value
  
End

Private Function Autoresize_Read() As Boolean
  
  Return _Container.Autoresize
  
End

Private Sub Autoresize_Write(Value As Boolean)
  
  _Container.Autoresize = Value
  
End

Private Function Border_Read() As ReportBorder
  
  Return _Container.Border
  
End

Private Sub Border_Write(Value As ReportBorder)
  
  _Container.Border = Value
  
End

Private Function BackGround_Read() As ReportBrush
  
  Return _Container.BackGround
  
End

Private Sub BackGround_Write(Value As ReportBrush)
  
  _Container.BackGround = Value
  
End

Private Function Children_Read() As ReportControl[]
  
  Return _Container.Children
  
End

Private Function Spacing_Read() As String
  
  Return _Container.Spacing
  
End

Private Sub Spacing_Write(Value As String)
  
  Dim TSection As TControl
  Dim hCont As ReportContainer
  
  If Me.Spacing <> Value Then
    For Each TSection In $aSections
      hCont = Tsection.Ctrl
      hCont.Spacing = Value
    Next
  Endif
  
End

Private Function Data_Read() As Object
  
  Return _Container.Data
  
End

Private Sub Data_Write(Value As Object)
  
  _Container.Data = Value
  
End

Private Function Text_Read() As String
  
  Return _Container.Text
  
End

Private Sub Text_Write(Value As String)
  
  _Container.Text = Value
  
End

''Return a new report object
Public Sub Clone() As Report
  
  'Return Object.New(Object.Type(Me))
  Return Object.Class(Me).New()
  
End

Private Function Paper_Read() As Integer
  
  Return $iPaper
  
End

Private Sub Paper_Write(Value As Integer)
  
  $iPaper = Value
  SetPaper
  
End

Private Function Orientation_Read() As Integer
  
  Return $iOrientation
  
End

Private Sub Orientation_Write(Value As Integer)
  
  $iOrientation = Value
  SetPaper
  
End

Public Sub Print(Optional hPrinter As Printer)
  
  If hPrinter Then 
    CPrint.PrintReport(Me, hPrinter)
  Else
    CPrint.PrintReport(Me)
  Endif
  
End

Private Sub SetPaper()
  
  Dim sPrev As String
  
  Select Case $iPaper
    Case Printer.A3
      SetWidth("29.7cm")
      SetHeight("42cm")
    Case Printer.A4
      SetWidth("21cm")
      SetHeight("29.7cm")
    Case Printer.A5
      SetWidth("14.8cm")
      SetHeight("21cm")
    Case Printer.B5
      SetWidth("18.7cm")
      SetHeight("25.7cm")
    Case Printer.Executive
      SetWidth("19.1cm")
      SetHeight("25.4cm")
    Case Printer.Legal
      SetWidth("21.6cm")
      SetHeight("35.6cm")
    Case Printer.Letter
      SetWidth("21.6cm")
      SetHeight("27.9cm")
      
  End Select

  
  If $iOrientation = Printer.Landscape And Not ($iPaper = Printer.Custom) Then
    sPrev = Me.Height
    SetHeight(Me.Width)
    SetWidth(sPrev)
  Endif
  
End

Public Sub _Reset()
  
  Dim hSection As TControl
  
  For Each hSection In $aSections
    hSection.Ctrl._Reset
    hSection._PageChildren = New Collection
  Next
  
  $iCurPage = -1
  $iCurSection = 0
  $iPageCount = 0
  
End

''Convert Internal units to scaled pixels.

Fast Public Function _ToPixels(Value As Float) As Float
  
  Dim f As Float
  
  f = Value / $fCurReportWidth * (Paint.Width / $fScale)

  Return f
  
End

''Shortcut to Convert a Pixel Value to Internal unit (Need a paint device).
Fast Public Function _FromPixels(Value As Float) As Float

  Return (value / Paint.ResolutionX) '* 2.54) 
  
End

Fast Static Private Function GetFactorToInch(Unit As String) As Float
  
  Select Case Unit
    Case "cm"
      Return 0.3937
    Case "ft"
      Return 12
    Case "in"
      Return 1
    Case "m"
      Return 39.37
    Case "mm"
      Return 0.03937
    Case "px"
      If Paint.ResolutionX Then
        Return 1 / Paint.ResolutionX
      Else
        Return 1 / Desktop.Resolution
      Endif
    Case "pt"
      Return 1 / 72  'http://en.wikipedia.org/wiki/Point_(typography)#Current_DTP_point_system
    Case Else
      Error.Raise("Unknown unit")
  End Select
  
End

''Convert any value from any report allowed Unit to another one.
''For Pixel convertions, be carefull to give the Device
''Resolution in parameter.
Fast Static Public Function UnitTo(Value As Float, Unit1 As String, Unit2 As String) As Float
  
  Dim fInch As Float
  Dim f As Float
  
  f = GetFactorToInch(Unit1)
  finch = value * f
  f = GetFactorToInch(Unit2)
  Return finch / f
  
End

''Shortcut to convert any report allowed unit to Inch.
Fast Static Public Function UnitToInch(Value As Float, Unit As String) As Float
  
  Dim fInch As Float
  Dim f As Float
  
  f = GetFactorToInch(Unit)
  finch = value * f
  Return finch
  'f = 0.3937
  'Return finch / f
  
End

Private Function _Width_Read() As Float

  Return $aSections[0].Ctrl._Width

End

Private Function _Height_Read() As Float

  Return $aSections[0].Ctrl._Height

End
