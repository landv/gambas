' Gambas class file

Export
Inherits UserControl

Class Watch

Public Const _Properties As String = "*,Border=True,Root,Picture,ShowHidden,HideRoot"
Public Const _DefaultEvent As String = "Click"
Public Const _Group As String = "View"

Event {Select}
Event Click
Event Activate
Event Menu
Event Icon(Path As String)

Property Root As String
Property Current As String
Property ShowHidden As Boolean
Property Picture As Picture
Property Border As Boolean
Property Icon As Picture
Property Read Renaming As Boolean
Property Settings As Variant[]
Property HideRoot As Boolean

Private $sRoot As String
Private $hTreeView As TreeView
Private $bShowHidden As Boolean
Private $hRootPict As Picture
Private $hPict As Picture
Private $bDeleteOnCancel As Boolean
Private $bNoExpand As Boolean
Private $bNoEvent As Boolean
Private $hTimerExpand As Timer
Private $bInRename As Boolean
Private $bHideRoot As Boolean

Private $cWatch As Collection
Private $bWatch As Boolean
Private $hRefreshTimer As Timer
Private $bRefreshTimerTriggered As Boolean
Private $hWatcher As Watcher

Public Sub _new()

  $bWatch = Component.IsLoaded("gb.inotify")
  If $bWatch Then $hWatcher = New Watcher(Me) As "Watcher"
  
  $hTreeView = New TreeView(Me) As "TreeView"
  $hTreeView.Editable = True
  $hTimerExpand = New Timer As "TimerExpand"
  Me.Proxy = $hTreeView
  $hRootPict = Picture["icon:/small/directory"] 'open
  ClearView
  $hRefreshTimer = New Timer As "Refresh"

End

Private Function GetRoot() As String

  If Trim($sRoot) Then Return $sRoot
  Return User.Home

End

Private Sub UpdateHideRoot()

  Dim hGridView As GridView
  
  hGridView = $hTreeView.Children[0]
  hGridView.Rows[0].H = If($bHideRoot, 0, -1)

End

Private Sub AddWatch(sDir As String)

  If Not $cWatch Then Return
  $cWatch[sDir] = New Watch(sDir) As "Watch"

End

Private Sub RemoveWatch(sDir As String)

  If Not $cWatch Then Return
  $cWatch.Remove(sDir)

End

Private Sub ClearView()

  Dim sRoot As String = GetRoot()

  $bNoEvent = True
  $hTreeView.Clear
  
  If $bWatch Then
    If $cWatch Then $cWatch.Clear
  Endif
  
  AddDir(File.Dir(sRoot), File.Name(sRoot), True)
  '$hTreeView.Add(sRoot, sRoot, $hRootPict)
  '$hTreeView.Add(sRoot & "/", "",, sRoot)

  'IF NOT $hRootPict THEN Picture_Write(Picture["icon:/small/directory"]) 'open

  If $hTreeView.Count Then
    $hTreeView.MoveFirst
    $hTreeView.Item.Expanded = True
    TreeView_Expand
  Endif
  $bNoEvent = False

  UpdateHideRoot
  
End


Private Function Root_Read() As String

  Return $sRoot

End

Private Sub Root_Write(sRoot As String)

  sRoot = Trim(sRoot)
  While Right(sRoot) = "/" And Len(sRoot) > 1
    sRoot = Left(sRoot, -1)
  Wend
  If sRoot = $sRoot Then Return
  
  If Not IsDir(sRoot) Then Error.Raise("Unknown directory")
  
  $sRoot = sRoot
  RefreshView
  Raise Click

End

Private Sub AddDir(sDir As String, sFile As String, Optional bIgnoreHidden As Boolean)
  
  Dim sParent As String
  Dim hPict As Picture
  Dim bNoEdit As Boolean
  Dim sAfter As String
  Dim sName As String
  Dim hStat As Stat
  Dim bRichText As Boolean
  Dim sText As String
  
  If Not $bShowHidden And If Left(sFile) = "." And If Not bIgnoreHidden Then Return
  If Not Exist(sDir) Then Return
  
  sParent = sDir
  If GetRoot() = (sDir &/ sFile) Then 
    sParent = ""
    hPict = $hRootPict
    If Not hPict Then hPict = Picture["icon:/small/directory"]
    sName = sDir &/ sFile
    bNoEdit = True
  Else 
    hPict = GetIcon(sDir &/ sFile)
    sName = sFile
  Endif
  
  sAfter = FindAfter($hTreeView, sName, sParent)
  
  With $hTreeView.Add(sDir &/ sFile, sName, hPict, sParent)
    .Editable = Not bNoEdit
    .MoveAfter(sAfter)
    
    'hStat = Stat(sDir &/ sFile)
    hStat = DirCache[sDir].GetInfo(sFile)

    bRichText = False
    
    sText = sFile
    If hStat.Link Then
      sText = "<i>" & sText & "</i>"
      bRichText = True
    Endif
    If hStat.Hidden Then
      sText = "<font color=\"#" & Hex$(FileView._GetHiddenColor(), 6) & "\">" & sText & "</font>"
      bRichText = True
    Endif

    If bRichText Then .RichText = sText
    
  End With
  
  $hTreeView.Add((sDir &/ sFile) & "/", "",, sDir &/ sFile).Expanded = False

End

Public Sub TreeView_Expand()

  Dim sFile As String
  Dim sDir As String
  Dim sDelete As String
  Dim hCache As DirCache

  If Not $hTreeView.Item Then Stop

  $hTreeView.Item.Selected = True
  
  sDir = $hTreeView.Item.Key
  
  If $bWatch Then AddWatch(sDir)
  
  If sDir = GetRoot() Then
    $hTreeView.Item.Picture = $hRootPict
  Else
    $hTreeView.Item.Picture = GetIcon($hTreeView.Item.key) 'open
  Endif

  If $hTreeView.MoveChild() Then Return
  If $hTreeView.Item.Text Then Return
  sDelete = $hTreeView.Item.Key
  
  Inc Application.Busy

  $hTreeView[sDelete].Delete

  hCache = DirCache[sDir]
  hCache.Lock
  For Each sFile In hCache.GetFiles().Sort(gb.Natural + gb.IgnoreCase)
    If Not hCache.IsDir(sFile) Then Continue
    AddDir(sDir, sFile)
  Next
  hCache.Unlock

  If $hTreeView[sDir].Children = 0 Then
    $hTreeView[sDir].Picture = GetIcon(sDir)
  Else
    '$hTreeView[sDir].Expanded = TRUE
  Endif

Finally

  Dec Application.Busy

Catch

  Debug Error.Where; ": "; Error.Text 
  
End

Public Sub TreeView_Collapse()

  '$hTreeView.Item.Selected = TRUE
  'IF $hTreeView.Item.Key = GetRoot() THEN RETURN
 ' $hTreeView.Item.Picture = GetIcon(

  $bNoExpand = True
  Last.Item.Selected = True
  $bNoExpand = False
  
  If $bWatch Then RemoveWatch(Last.Item.Key)

End

Public Sub TreeView_Select()

  If Not $bNoExpand And If Not $bInRename Then
    If $hTreeView.Current And If Not $hTreeView.Current.Expanded Then 
      $hTimerExpand.Trigger
    Endif
  Endif
  If $bNoEvent Then Return 
  Raise {Select}
  Raise Click

End

Public Sub TimerExpand_Timer()
  
  Try $hTreeView.Current.Expanded = True
  
End

' Public Sub TreeView_MouseUp()
'   
'   'If $bExpandOnMouseUp Then
'     Try Last.Current.Expanded = True
'     $bExpandOnMouseUp = False
'   'Endif
'   
' End


Public Sub TreeView_Activate()

  Raise Activate

End

' Public Sub TreeView_Click()
' 
'   If $bNoEvent Then Return
'   Raise Click
' 
' End


Public Sub TreeView_Menu()

  Raise Menu

End


Private Function Current_Read() As String

  Try Return $hTreeView.Current.Key
  If Error Then Return GetRoot()

End

Private Sub MoveToLastChild()

  $hTreeView.MoveChild
  Repeat
  Until $hTreeView.MoveNext()
  $hTreeView.MoveBack
  $hTreeView.Item.EnsureVisible

Catch

End


Private Sub Current_Write(sDir As String)

  Dim sElt As String
  Dim sSubDir As String

  sDir = Trim(sDir)
  'IF Right(sDir) = "/" THEN sDir = Left(sDir, - 1)
  If sDir = Current_Read() Then Return

  'ClearView

  $bNoEvent = True
  sSubDir = "/"
  For Each sElt In Split(File.Dir(sDir), "/", "", True)
    sSubDir &/= sElt
    Try $hTreeView[sSubDir].Expanded = True
  Next
  $bNoEvent = False

  Try $hTreeView[sDir].Selected = True
  If Not Error Then
    $hTreeView.MoveTo(sDir)
    $hTreeView.Item.Expanded = True
    MoveToLastChild
    'TRY $hTreeView.MoveNext
    'TRY $hTreeView.Item.EnsureVisible
  Endif
  Try $hTreeView.Current.EnsureVisible
  Raise Click
  
  'RAISE Refresh

End


Private Sub RefreshView()

  Dim sDir As String
  Dim SX As Integer
  Dim SY As Integer

  SX = $hTreeView.ScrollX
  SY = $hTreeView.ScrollY
  
  sDir = Current_Read()
  ClearView
  Current_Write(sDir)
  
  $hTreeView.Scroll(SX, SY)
  
  $bRefreshTimerTriggered = False

End

Private Sub RefreshViewLater()
  
  If $bRefreshTimerTriggered Then Return
  
  $bRefreshTimerTriggered = True
  $hRefreshTimer.Trigger
  
End

Public Sub Refresh_Timer()
  
  If Not $bRefreshTimerTriggered Then Return
  'Debug
  RefreshView
  
End



Private Function ShowHidden_Read() As Boolean

  Return $bShowHidden

End

Private Sub ShowHidden_Write(bShowHidden As Boolean)

  If bShowHidden <> $bShowHidden Then
    $bShowHidden = bShowHidden
    RefreshView
  Endif

End

Private Function Picture_Read() As Picture

  Dim hPict As Picture

  hPict = $hTreeView[GetRoot()].Picture
  If hPict <> Picture["icon:/small/directory"] Then Return hPict 'open

End

Private Sub Picture_Write(hPict As Picture)

  If hPict Then
    $hRootPict = hPict
  Else
    $hRootPict = Picture["icon:/small/directory"] 'open
  Endif

  $hTreeView[GetRoot()].Picture = $hRootPict
  UpdateHideRoot

End


Private Sub Border_Write(bBorder As Boolean)

  $hTreeView.Border = bBorder

End

Private Function Border_Read() As Boolean

  Return $hTreeView.Border

End

Private Function GetIcon(sPath As String) As Picture

  If sPath = GetRoot() Then Return $hRootPict  
  $hPict = Null
  Try Raise Icon(sPath)
  If $hPict Then Return $hPict
  Return Picture["icon:/small/directory"]
  
End


Private Function Icon_Read() As Picture

  Return $hPict

End

Private Sub Icon_Write(Value As Picture)

  If Value.Height <> 16 Then 
    Value = Value.Image.Stretch(Value.Width * 16 / Value.Height, 16).Picture
  Endif
  $hPict = Value

End

Public Sub TreeView_Rename()
  
  Dim sKey As String = $hTreeView.Item.Key
  Dim sParent As String
  Dim sNewName As String = $hTreeView.Item.Text
  Dim sMsg As String
  
  $bInRename = False
  
  If $hTreeView.MoveParent() Then Return
  $hTreeView.MoveBack()
  
  If sNewName = File.Name(sKey) Then Return 
  
  sMsg = Help.CheckFileName(sNewName)
  If sMsg Then
    Balloon.Warning(sMsg, $hTreeView, $hTreeView.Item.X + Min(32 + Desktop.Scale * 8, $hTreeView.Item.W) / 2, $hTreeView.Item.Y + $hTreeView.Item.H / 2)
    Return
  Endif
  
  Move sKey To File.SetName(sKey, sNewName)
  
  sParent = File.Dir(sKey)
  
  ' TODO: Optimization
  
  Object.Lock($hTreeView)
  $hTreeView.Remove(sKey)
  sKey = File.SetName(sKey, sNewName)
  AddDir(File.Dir(sKey), File.Name(sKey))
  Object.Unlock($hTreeView)
  
  $hTreeView[sKey].Selected = True
  
  $bDeleteOnCancel = False
  
Catch 
  
  $hTreeView[sKey].Text = File.Name(sKey)
  Message.Error(("Cannot rename directory.") & "\n\n" & Error.Text)
  
End

Public Sub TreeView_Cancel()
  
  Dim sParent As String
  
  $bInRename = False
  
  If Not $bDeleteOnCancel Then Return
  
  sParent = $hTreeView.Item.ParentKey
  
  Try Rmdir $hTreeView.Item.Key
  $hTreeView.Item.Delete

  $hTreeView[sParent].Selected = True

  $bDeleteOnCancel = False
  
End


Public Sub NewFolder()
  
  Dim sDir As String
  Dim sPath As String
  Dim iInd As Integer
  
  sDir = ("New folder")
  iInd = 1
  
  Do
    If Not Exist(Current_Read() &/ sDir) Then Break
    Inc iInd
    sDir = ("New folder") & " (" & CStr(iInd) & ")"
  Loop  
  
  sPath = Current_Read() &/ sDir
  Mkdir sPath
  AddDir(Current_Read(), sDir)
  $bDeleteOnCancel = True
  $bInRename = True
  $hTreeView[sPath].Rename
  
Catch
 
  Message.Error(("Cannot create directory.") & "\n\n" & Error.Text)
  
End

Public Sub Rename()
  
  Dim sPath As String
  
  Try sPath = $hTreeView.Current.Key
  If sPath Then
    $bInRename = True
    $hTreeView[sPath].Rename
  Endif
  
End


Private Sub FindAfter(hView As TreeView, sText As String, Optional sParent As String) As String
  
  Dim sAfter As String
  Dim iConv As Integer
  
  With hView
    If sParent Then
      .MoveTo(sParent)
      .MoveChild
    Else 
      .MoveFirst
    Endif
    While .Available
      If Comp(File.Name(.Item.Key), sText, gb.Natural + gb.IgnoreCase) > 0 Then Break
      If iConv > 0 Then Break
      sAfter = .Item.Key
      .MoveNext
    Wend
  End With

  Return sAfter
  
End

Public Sub Reload()
  
  RefreshView
  
End

Private Function Renaming_Read() As Boolean

  Return $hTreeView.Renaming

End

Private Function Settings_Read() As Variant[]

  Return [1, CVariant(ShowHidden_Read())]

  'Return IIf(ShowDetailed_Read(), "1", "0") & "," & IIf(ShowHidden_Read(), "1", "0") & "," & $hColumnView.Settings

End

Private Sub Settings_Write(Value As Variant[])

  ShowHidden_Write(Value[1])

Catch

  Debug Error.Where; ": "; Error.Text

End

Private Function HideRoot_Read() As Boolean

  Return $bHideRoot

End

Private Sub HideRoot_Write(Value As Boolean)

  $bHideRoot = Value
  UpdateHideRoot

End

Public Sub Watch_Create()

  'Debug Last.Path;; Watch.Name
  DirCache[Last.Path].Invalidate
  RefreshViewLater
  
End

Public Sub Watch_Delete()
  
  'Debug Last.Path;; Watch.Name
  DirCache[Last.Path].Invalidate
  Try $hTreeView.Remove(Last.Path &/ Watch.Name)
  'If Not Error Then RefreshView
  
End

Public Sub Watch_MoveFrom()
  
  'Debug Last.Path;; Watch.Name
  DirCache[Last.Path].Invalidate
  Try $hTreeView.Remove(Last.Path &/ Watch.Name)
  
End

Public Sub Watch_MoveTo()
  
  'Debug Last.Path;; Watch.Name
  DirCache[Last.Path].Invalidate
  RefreshViewLater
  
End

Public Sub Watch_Move()
  
  'Debug Last.Path;; Watch.Name
  DirCache[Last.Path].Invalidate
  RefreshViewLater
  
End

Public Sub Watcher_Show()
  
  'Debug
  If $bWatch And If Not $cWatch Then 
    $cWatch = New Collection
    RefreshView
  Endif
  
End

Public Sub Watcher_Hide()
  
  'Debug  
  $cWatch = Null
  
End
