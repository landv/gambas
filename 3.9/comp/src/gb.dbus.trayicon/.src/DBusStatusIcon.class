' Gambas class file

Inherits DBusObject

' Signals
' NewTitle
' 
' VOID org.freedesktop.StatusNotifierItem.NewTitle ();
' 
' The item has a new title: the graphical representation should read it again immediately.
' NewIcon
Event org_kde_StatusNotifierItem_NewTitle

' 
' VOID org.freedesktop.StatusNotifierItem.NewIcon ();
' 
' The item has a new icon: the graphical representation should read it again immediately.
' NewAttentionIcon
Event org_kde_StatusNotifierItem_NewIcon

' 
' VOID org.freedesktop.StatusNotifierItem.NewAttentionIcon ();
' 
' The item has a new attention icon: the graphical representation should read it again immediately.
' NewOverlayIcon
Event org_kde_StatusNotifierItem_NewAttentionIcon

' 
' VOID org.freedesktop.StatusNotifierItem.NewOverlayIcon ();
' 
' The item has a new overlay icon: the graphical representation should read it again immediately.
' NewToolTip
Event org_kde_StatusNotifierItem_NewOverlayIcon

' 
' VOID org.freedesktop.StatusNotifierItem.NewToolTip ();
' 
' The item has a new tooltip: the graphical representation should read it again immediately.
' NewStatus
Event org_kde_StatusNotifierItem_NewToolTip

' 
' VOID org.freedesktop.StatusNotifierItem.NewStatus (STRING status);
' 
' The item has a new status, that is passed as an argument of the signal.
Event org_kde_StatusNotifierItem_NewStatus(Status As String)

Event org_kde_StatusNotifierItem_XAyatanaNewLabel

' Properties
' org.freedesktop.StatusNotifierItem.Category
'
' STRING org.freedesktop.StatusNotifierItem.Category ();
' 
' Describes the category of this item.
' 
' The allowed values for the Category property are:
' 
'     ApplicationStatus: The item describes the status of a generic application, for instance the current state of a media player. In the case where the category of the item can not be known, such as when the item is being proxied from another incompatible or emulated system, ApplicationStatus can be used a sensible default fallback.
' 
'     Communications: The item describes the status of communication oriented applications, like an instant messenger or an email client.
' 
'     SystemServices: The item describes services of the system not seen as a stand alone application by the user, such as an indicator for the activity of a disk indexing service.
' 
'     Hardware: The item describes the state and control of a particular hardware, such as an indicator of the battery charge or sound card volume control.
Property Read org_kde_StatusNotifierItem_Category As String

' 
' org.freedesktop.StatusNotifierItem.Id
' 
' STRING org.freedesktop.StatusNotifierItem.Id ();
' 
' It's a name that should be unique for this application and consistent between sessions, such as the application name itself.
' org.freedesktop.StatusNotifierItem.Title
Property Read org_kde_StatusNotifierItem_Id As String

' 
' STRING org.freedesktop.StatusNotifierItem.Title ();
' 
' It's a name that describes the application, it can be more descriptive than Id.
Property Read org_kde_StatusNotifierItem_Title As String

' org.freedesktop.StatusNotifierItem.Status
' 
' STRING org.freedesktop.StatusNotifierItem.Status ();
' 
' Describes the status of this item or of the associated application.
' 
' The allowed values for the Status property are:
' 
'     Passive: The item doesn't convey important information to the user, it can be considered an "idle" status and is likely that visualizations will chose to hide it.
' 
'     Active: The item is active, is more important that the item will be shown in some way to the user.
' 
'     NeedsAttention: The item carries really important information for the user, such as battery charge running out and is wants to incentive the direct user intervention. Visualizations should emphasize in some way the items with NeedsAttention status.
' 
Property Read org_kde_StatusNotifierItem_Status As String

' org.freedesktop.StatusNotifierItem.WindowId
' 
' UINT32 org.freedesktop.StatusNotifierItem.WindowId ();
' 
' It's the windowing-system dependent identifier for a window, the application can chose one of its windows to be available trough this property or just set 0 if it's not interested.
' org.freedesktop.StatusNotifierItem.IconName
' 
Property Read org_kde_StatusNotifierItem_WindowId As Integer

' STRING org.freedesktop.StatusNotifierItem.IconName ();
' 
' The StatusNotifierItem can carry an icon that can be used by the visualization to identify the item.
' 
' An icon can either be identified by its Freedesktop-compliant icon name, carried by this property of by the icon data itself, carried by the property IconPixmap. Visualizations are encouraged to prefer icon names over icon pixmaps if both are available (FIXME: still not very defined: could e the pixmap used as fallback if an icon name is not found?)
Property Read org_kde_StatusNotifierItem_IconName As String
Property Read org_kde_StatusNotifierItem_IconThemePath As String

' org.freedesktop.StatusNotifierItem.IconPixmap
' 
' ARRAY(INT, INT, ARRAY BYTE) org.freedesktop.StatusNotifierItem.IconPixmap ();
' 
' Carries an ARGB32 binary representation of the icon, the format of icon data used in this specification is described in Section Icons
' org.freedesktop.StatusNotifierItem.OverlayIconName
' 
Property Read org_kde_StatusNotifierItem_IconPixmap As _DBusStatusIconPixmap

' STRING org.freedesktop.StatusNotifierItem.OverlayIconName ();
' 
' The Freedesktop-compliant name of an icon. This can be used by the visualization to indicate extra state information, for instance as an overlay for the main icon.
' org.freedesktop.StatusNotifierItem.OverlayIconPixmap
' 
Property Read org_kde_StatusNotifierItem_OverlayIconName As String

' ARRAY(INT, INT, ARRAY BYTE) org.freedesktop.StatusNotifierItem.OverlayIconPixmap ();
' 
' ARGB32 binary representation of the overlay icon described in the previous paragraph.
' org.freedesktop.StatusNotifierItem.AttentionIconName
' 
Property Read org_kde_StatusNotifierItem_OverlayIconPixmap As Variant

' STRING org.freedesktop.StatusNotifierItem.AttentionIconName ();
' 
' The Freedesktop-compliant name of an icon. this can be used by the visualization to indicate that the item is in RequestingAttention state.
' org.freedesktop.StatusNotifierItem.AttentionIconPixmap
' 
Property Read org_kde_StatusNotifierItem_AttentionIconName As String

' ARRAY(INT, INT, ARRAY BYTE) org.freedesktop.StatusNotifierItem.AttentionIconPixmap ();
' 
' ARGB32 binary representation of the requesting attention icon describe in the previous paragraph.
' org.freedesktop.StatusNotifierItem.AttentionMovieName
' 
Property Read org_kde_StatusNotifierItem_AttentionIconPixmap As Variant

' STRING org.freedesktop.StatusNotifierItem.AttentionMovieName ();
' 
' An item can also specify an animation associated to the RequestingAttention state. This should be either a Freedesktop-compliant icon name or a full path. The visualization can chose between the movie or AttentionIconPixmap (or using neither of those) at its discretion.
Property Read org_kde_StatusNotifierItem_AttentionMovieName As String

' org.freedesktop.StatusNotifierItem.ToolTip
' 
' (STRING, ARRAY(INT, INT, ARRAY BYTE), STRING, STRING) org.freedesktop.StatusNotifierItem.ToolTip ();
' 
' Data structure that describes extra information associated to this item, that can be visualized for instance by a tooltip (or by any other mean the visualization consider appropriate. Components are:
' 
'     STRING: Freedesktop-compliant name for an icon.
' 
'     ARRAY(INT, INT, ARRAY BYTE): icon data
' 
'     STRING: title for this tooltip
' 
'     STRING: descriptive text for this tooltip. It can contain also a subset of the HTML markup language, for a list of allowed tags see Section Markup.
' 
Property Read org_kde_StatusNotifierItem_ToolTip As _DBusStatusIconTooltip

Property Read org_kde_StatusNotifierItem_ItemIsMenu As Boolean

Property Read org_kde_StatusNotifierItem_Menu As DBusObject

Property Read org_kde_StatusNotifierItem_XAyatanaLabel As String

' Methods
' ContextMenu
' 
' VOID org.freedesktop.StatusNotifierItem.ContextMenu (INT x, INT y);
' 
' Asks the status notifier item to show a context menu, this is typically a consequence of user input, such as mouse right click over the graphical representation of the item.
' 
' the x and y parameters are in screen coordinates and is to be considered an hint to the item about where to show the context menu.
Public Sub org_kde_StatusNotifierItem_ContextMenu((X) As Integer, (Y) As Integer)
  
  'GetParent()._ContextMenu(X, Y)
  
End

' Activate
' 
' VOID org.freedesktop.StatusNotifierItem.Activate (INT x, INT y);
' 
' Asks the status notifier item for activation, this is typically a consequence of user input, such as mouse left click over the graphical representation of the item. The application will perform any task is considered appropriate as an activation request.
' 
' the x and y parameters are in screen coordinates and is to be considered an hint to the item where to show eventual windows (if any).

Public Sub org_kde_StatusNotifierItem_Activate((X) As Integer, (Y) As Integer)
  
  GetParent()._Activate()
  
End

' SecondaryActivate
' 
' VOID org.freedesktop.StatusNotifierItem.SecondaryActivate (INT x, INT y);
' 
' Is to be considered a secondary and less important form of activation compared to Activate. This is typically a consequence of user input, such as mouse middle click over the graphical representation of the item. The application will perform any task is considered appropriate as an activation request.
' 
' the x and y parameters are in screen coordinates and is to be considered an hint to the item where to show eventual windows (if any).
' Scroll
' 

Public Sub org_kde_StatusNotifierItem_SecondaryActivate((X) As Integer, (Y) As Integer)
  
  GetParent()._MiddleClick()
  
End

Public Sub org_kde_StatusNotifierItem_XAyatanaSecondaryActivate((Foo) As Integer)
  
  GetParent()._MiddleClick()
  
End

' VOID org.freedesktop.StatusNotifierItem.Scroll (INT delta, STRING orientation);
' 
' The user asked for a scroll action. This is caused from input such as mouse wheel over the graphical representation of the item.
' 
' The delta parameter represent the amount of scroll, the orientation parameter represent the horizontal or vertical orientation of the scroll request and its legal values are horizontal and vertical.

Public Sub org_kde_StatusNotifierItem_Scroll(Delta As Integer, Orientation As String)
  
  GetParent()._Scroll(Delta, LCase(Orientation) = "vertical")
  
End


Private Function org_kde_StatusNotifierItem_Category_Read() As String

  Return "ApplicationStatus"

End

Private Function org_kde_StatusNotifierItem_Id_Read() As String

  Return GetParent().Name

End

Private Function org_kde_StatusNotifierItem_Status_Read() As String

  Return If(GetParent().Visible, "Active", "Passive")

End

Private Function org_kde_StatusNotifierItem_Title_Read() As String

  Return Application.Title

End

Private Function org_kde_StatusNotifierItem_WindowId_Read() As Integer

  Return 0

End

Private Function org_kde_StatusNotifierItem_IconName_Read() As String

  Return GetParent()._GetIconName()

End

Private Function org_kde_StatusNotifierItem_IconPixmap_Read() As _DBusStatusIconPixmap

  Dim hPict As Picture
  
  hPict = GetParent().Picture
  If Not hPict Then hPict = Picture["default.png"]
  Return New _DBusStatusIconPixmap(hPict)

End

Private Function org_kde_StatusNotifierItem_OverlayIconName_Read() As String

  

End

Private Function org_kde_StatusNotifierItem_OverlayIconPixmap_Read() As Variant

  Return New _DBusStatusIconPixmap(Null)

End

Private Function org_kde_StatusNotifierItem_AttentionIconName_Read() As String

  

End

Private Function org_kde_StatusNotifierItem_AttentionIconPixmap_Read() As Variant

  Return New _DBusStatusIconPixmap(Null)

End

Private Function org_kde_StatusNotifierItem_ToolTip_Read() As _DBusStatusIconTooltip

  Dim sText As String

  sText = GetParent().Text
  Return New _DBusStatusIconTooltip(GetParent().Picture, Application.Title, sText)

End

Private Function org_kde_StatusNotifierItem_AttentionMovieName_Read() As String

End

Private Sub GetParent() As TrayIcon

  Return Object.Parent(Me)

End

Private Function org_kde_StatusNotifierItem_ItemIsMenu_Read() As Boolean

End

Private Function org_kde_StatusNotifierItem_Menu_Read() As DBusObject

  Return GetParent()._GetMenu()

End

Private Function org_kde_StatusNotifierItem_IconThemePath_Read() As String

  Return GetParent()._GetIconThemePath()

End

Private Function org_kde_StatusNotifierItem_XAyatanaLabel_Read() As String

  Return GetParent().Text

End
