' Gambas class file

Export

Public Const _IsControl As Boolean = True
Public Const _IsVirtual As Boolean = True
Public Const _Group As String = "Special"
Public Const _Properties As String = "Name,Picture,Visible=False,PopupMenu{Menu},Tooltip"
Public Const _DefaultEvent As String = "Click"

Public Enum Horizontal, Vertical

Event Click
Event MiddleClick
Event Scroll(Delta As Float, Orientation As Integer)

Property Name As String
Property Picture, Icon As Picture
Property Visible As Boolean
Property PopupMenu As String
Property Text, Tooltip As String
Property Tag As Variant

Static Private $iCount As Integer

Private $bAppIndicator As Boolean
Private $sName As String
Private $iId As Integer
Private $bVisible As Boolean
Private $hObject As DBusStatusIcon
Private $hMenu As DBusStatusIconMenu
Private $hIcon As Picture
Private $sMenu As String
Private $sText As String
Private $bIconDirty As Boolean
Private $vTag As Variant

Public Sub _new()
  
  $hObject = New DBusStatusIcon As "StatusIcon"

  $bAppIndicator = ["unity", "cinnamon", "x-cinnamon"].Exist(Env["XDG_CURRENT_DESKTOP"], gb.IgnoreCase)
  
  Inc $iCount
  $iId = $iCount
  $sName = Application.Name 
  If $iId > 1 Then $sName &= "-" & CStr($iId)
  TrayIcons._All.Add(Me)
  
  $hMenu = New DBusStatusIconMenu As "StatusIconMenu"
  
  If $bAppIndicator Then
    DBus.Register($hObject, "/org/kde/statusnotifieritem" &/ CStr($iId), ["org.kde.StatusNotifierItem"])
    DBus.Register($hMenu, "/org/kde/statusnotifieritem" &/ CStr($iId) &/ "menu", ["com.canonical.dbusmenu"])
    DBus["org.kde.StatusNotifierWatcher"]["/StatusNotifierWatcher", "org.kde.StatusNotifierWatcher"].RegisterStatusNotifierItem("/org/kde/statusnotifieritem" &/ CStr($iId))
    Try Mkdir _GetIconThemePath()
  Endif
  
End

Private Sub GetServiceName() As String

  If $bAppIndicator Then
    Return DBus.Session._Name
  Else
    Return "org.kde.StatusNotifierItem-" & CStr(Application.Handle) & "-" & CStr($iId)
  Endif

End

Public Sub _GetMenu() As DBusStatusIconMenu
  
  Return $hMenu
  
End


Public Sub Show()
  
  Dim sService As String
  
  If $bVisible Then Return

  sService = GetServiceName()
  
  If $bAppIndicator Then
  
    DBus[sService].Raise($hObject, "org.kde.StatusNotifierItem.NewStatus", ["Active"])
    
  Else
    
    DBus[sService].Register($hObject, "/StatusNotifierItem", ["org.kde.StatusNotifierItem"])
    DBus[sService].Register($hMenu, "/StatusNotifierItem/menu", ["com.canonical.dbusmenu"])
    DBus["org.kde.StatusNotifierWatcher"]["/StatusNotifierWatcher", "org.kde.StatusNotifierWatcher"].RegisterStatusNotifierItem(sService)
  
  Endif
  
  $bVisible = True
  
End


Public Sub Hide()

  Dim sService As String
  
  If Not $bVisible Then Return

  sService = GetServiceName()
  
  If $bAppIndicator Then 
    DBus[sService].Raise($hObject, "org.kde.StatusNotifierItem.NewStatus", ["Passive"])
  Else
    DBus[sService].Unregister($hMenu)
    DBus[sService].Unregister($hObject)
  Endif
  
  $bVisible = False

End

Public Sub Delete()

  Dim iIndex As Integer
  
  Hide
  
  If $bAppIndicator Then
    DBus.UnRegister($hMenu) ', "/org/kde/statusnotifieritem" &/ CStr($iId) &/ "menu", ["com.canonical.dbusmenu"])
    DBus.Unregister($hObject) ', "/org/kde/statusnotifieritem" &/ CStr($iId), ["org.kde.StatusNotifierItem"])
  Endif
  
  $hMenu = Null
  
  iIndex = TrayIcons._All.FindByRef(Me)
  If iIndex < 0 Then Return
  
  TrayIcons._All.Remove(iIndex)
  
End


Private Function Visible_Read() As Boolean

  Return $bVisible

End

Private Sub Visible_Write(Value As Boolean)

  If Value Then
    Show
  Else
    Hide
  Endif

End

Private Function Name_Read() As String

  Return $sName

End

Private Sub Name_Write(Value As String)

  $sName = Value

End

Private Function Picture_Read() As Picture

  Return $hIcon

End

Private Sub Picture_Write(Value As Picture)

  $hIcon = Value
  
  If $bAppIndicator Then 
    $bIconDirty = True
    If $bVisible Then
      Hide
      Show
    Endif
  Endif
  
  If $bVisible Or If $bAppIndicator Then DBus[GetServiceName()].Raise($hObject, "org.kde.StatusNotifierItem.NewIcon")

End

Public Sub _Activate()
  
  Raise Click
  
End

Private Sub GetMenu() As Menu
  
  Dim hParent As Control
  Try hParent = Object.Parent(Me)
  If hParent Then Return Main.FindMenu(hParent, $sMenu)

End

' Public Sub _ContextMenu(X As Integer, Y As Integer)
'   
'   Dim hMenu As Menu = GetMenu()
'   
'   If hMenu Then hMenu.Popup(X, Y)
'   
' End

Private Function PopupMenu_Read() As String

  Return $sMenu

End

Private Sub UpdateMenu()

  $hMenu._UpdateMenu(GetMenu())

End

Private Sub PopupMenu_Write(Value As String)

  $sMenu = Value
  UpdateMenu

End

Public Sub _Scroll(Delta As Integer, bVertical As Boolean)
  
  Raise Scroll(Sgn(Delta), If(bVertical, Vertical, Horizontal))
  
End

Private Function Text_Read() As String

  Return $sText

End

Private Sub Text_Write(Value As String)

  $sText = Value
  If $bVisible Or If $bAppIndicator Then 
    DBus[GetServiceName()].Raise($hObject, "org.kde.StatusNotifierItem.NewTooltip")
    DBus[GetServiceName()].Raise($hObject, "org.kde.StatusNotifierItem.XAyatanaNewLabel")
  Endif

End

Public Sub _GetIconName() As String
  
  Dim hPict As Picture
  Dim sPath As String
  Dim sName As String
  
  If $bAppIndicator Then
    
    sPath = _GetIconThemePath()
    sName = "icon-" & CStr($iId) & ".png"
    
    If Not Exist(sPath &/ sName) Or If $bIconDirty Then
      hPict = $hIcon
      If Not hPict Then hPict = Picture["default.png"]
      hPict.Save(sPath &/ sName)
      $bIconDirty = False
    Endif
    
    Return File.BaseName(sName)
    
  Endif
  
End

Public Sub _GetIconThemePath() As String
  
  Return File.SetExt(Temp$("gb.dbus.trayicon"), "")
  
End

Public Sub _Clicked(hMenu As Menu)

  If hMenu.Toggle Then
    hMenu.Value = Not hMenu.Value
    Object.Raise(hMenu, "Click")
    UpdateMenu
  Else
    hMenu.Value = True
  Endif
  
End

Public Sub _AboutToShow(hMenu As Menu) As Boolean
  
  Object.Raise(hMenu, "Show")
  UpdateMenu
  Return True
  
End

Public Sub _MiddleClick()
  
  Raise MiddleClick
  
End

Private Function Tag_Read() As Variant

  Return $vTag

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value

End
