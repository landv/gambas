' Gambas class file

Export
Create Static

Property Format As String
Property Enabled As Boolean
Property Read Handlers As LogHandler[]

Private $sFormat As String = Logger.DefaultFormat

'' Enables or disables the logger programatically
Private $bEnabled As Boolean = True

'' True if Begin() was called
Private $bStarted As Boolean = False

Private $aHandlers As LogHandler[] = New LogHandler[]

Public Sub _new(Optional sFormat As String, Optional sDefaultOutput As LogHandler)

  Dim tmpLogHandler As LogHandler

  If sFormat Then $sFormat = sFormat Else $sFormat = Logger.DefaultFormat

  If sDefaultOutput Then
    $aHandlers.Add(sDefaultOutput)
  Else

    tmpLogHandler = New ConsoleHandler(ConsoleHandler.STDOUT)

    $aHandlers.Add(tmpLogHandler)
    Begin()
  Endif

End

Public Function Begin() As Boolean

  Dim tmpLogHandler As LogHandler

  If $bStarted Then Error.Raise("Begin can't be called twice.")

  For Each tmpLogHandler In $aHandlers
    tmpLogHandler.Open()
  Next

  $bStarted = True

End

Public Sub Log(sMessage As String, Optional iLevel As Integer = LogLevel.Info)

  Dim tmpLogHandler As LogHandler

  If Not $bStarted Then Error.Raise("Logger is not ready. Please call Begin() to start it.")

  If Not $bEnabled Then Return

  sMessage = Formatter(sMessage, $sFormat, iLevel)

  For Each tmpLogHandler In $aHandlers
    tmpLogHandler.Write(sMessage, iLevel)
  Next

End

Public Sub Close()

  Dim tmpLogHandler As LogHandler

  For Each tmpLogHandler In $aHandlers
    tmpLogHandler.Close()
  Next

End

Public Sub _call(sMessage As String, Optional iLevel As Integer = LogLevel.Info)

  Me.Log(sMessage, iLevel)

End

Public Sub addHandler(hLogHandler As LogHandler)

  $aHandlers.Add(hLogHandler)

End

Private Function Enabled_Read() As Boolean

  Return $bEnabled

End

Private Sub Enabled_Write(Value As Boolean)

  $bEnabled = Value

End

Private Function Format_Read() As String

  Return $sFormat

End

Private Sub Format_Write(Value As String)

  $sFormat = Value

End

Private Function Handlers_Read() As LogHandler[]

  Return $aHandlers.Copy()

End
