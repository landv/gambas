' Gambas class file

Export

Property Read Data As String
Property Read DTD As _XmlWriterDTD
Property OutputStream As Stream

Private $stream As Stream ''The stream the XmlWriter is currently writing into
Private $indent As Boolean ''If the XmlWriter must indent its output
Private $sData As String ''The data of the recently closed stream buffer

'Internal state
Private $lastWasBlock As Boolean = False '' If the last instruction was a block, then the current must write a line break before
Private $bTagOpen As Boolean = False ''If a tag is currently open
Private $bStringStream As Boolean ''If we are working on our own internal string stream
Private $aElementsPile As New String[] ''The pile of all the currently open elements

Public Sub Open(Optional fileName As String, Optional Indent As Boolean = $indent, Optional Encoding As String = "UTF-8")
  
  If fileName Then
    If Left(fileName) <> "/" Then fileName = ".." &/ fileName
    $stream = Open fileName For Output Create
  Else If Not $stream
    $stream = Open String For Write
    $bStringStream = True
  Endif
  
  $indent = Indent
  
  Print #$stream, "<?xml version=\"1.0\" encoding=\""; Encoding; "\"?>"
  
End

Public Sub Flush()
  
  CheckStream()
  Flush #$stream
  
End

Public Sub Element(TagName As String, Optional Value As String, Optional Prefix As String, Optional URI As String)
  
  PrintIndent()
  
  If Prefix Then TagName = Prefix & ":" & TagName
  Print #$stream, "<"; TagName; 
  
  If URI Then PrintXmlNsAttribute(Prefix, URI)
  
  If Value Then
    Print #$stream, ">"; Value; "</"; TagName; "> ";
  Else
    Print #$stream, " />";
  Endif
  
End

Public Sub StartElement(TagName As String, Optional Attributes As String[], Optional Prefix As String, Optional URI As String)
  
  Dim i As Integer = 0
  
  PrintIndent()
  
  If Prefix Then TagName = Prefix & ":" & TagName
  
  Print #$stream, "<" & TagName;
  
  If URI Then PrintXmlNsAttribute(Prefix, URI)
  
  If Attributes
    If (Attributes.Count Mod 2) Then Attributes.Push("")
    For i = 0 To Attributes.Max Step 2
      Print #$stream, " "; Attributes[i]; "=\""; Attributes[i + 1]; "\"";
    Next
  Endif
  
  $bTagOpen = True
  $lastWasBlock = True
  $aElementsPile.Push(TagName)
  
End

Public Sub EndElement()
  
  Dim tag As String
  
  If Not $aElementsPile.Count Then Return
  
  tag = $aElementsPile.Pop()
  
  If $bTagOpen Then 'On ferme le tag précédent
    Print #$stream, " />";
    $bTagOpen = False
  Else
    If $lastWasBlock Then PrintIndent()
    Print #$stream, "</"; tag; ">";
  Endif
  
  $lastWasBlock = True
  
End

Public Sub Attribute(Name As String, Value As String, Optional Prefix As String, Optional URI As String)
  
  Dim sData As String 
  If Not $bTagOpen Then Error.Raise("Writing attribute with no open tag")
  If Prefix Then 
    Name = Prefix & ":" & Name
  Endif
  
  sData = " " & Name & "=\"" & XmlElement.NormalizeAttributeContent(Value) & "\""
  
  If URI Then PrintXmlNsAttribute(Prefix, URI)
  
  Print #$stream, sData;
  
End

Public Sub Text(sText As String)
  
  CloseTags()
  Print #$stream, XmlNode.Serialize(sText);
  
  $lastWasBlock = False
  
End

Public Sub Comment(sComment As String)
  
  PrintIndent()
  Print #$stream, "<!--"; sComment; "-->";
  
  $lastWasBlock = True
  
End

Public Sub CDATA(data As String)
  
  PrintIndent()
  Print #$stream, "<![CDATA["; data; "]]>";
  
  $lastWasBlock = True
End

Public Sub PI(Target As String, Content As String)
  
  PrintIndent()
  Print #$stream, "<?"; Target; " "; Content; "?>";
  
  $lastWasBlock = True
End

Public Function EndDocument() As String
  
  CheckStream()
  
  While $aElementsPile.Count
    Me.EndElement()
  Wend
  
  Try Flush #$stream
  
  If $bStringStream Then 
    $sData = Null
    Try $sData = Close $stream
    Return $sData
  Endif
  
End

Public Sub Close() As String
  
  EndDocument()
  If Not $bStringStream Then Close $stream
  Return $sData
  
End

'Utils

Private Sub CheckStream()
  
  If Not $stream Then Error.Raise("No output stream") 
  
End

Private Sub CloseTags()
  
  CheckStream()
  If $bTagOpen Then 
    Print #$stream, ">";
    $bTagOpen = False
  Endif
  
End

Private Sub PrintIndent()
  
  CloseTags()
  If $indent Then 
    If $lastWasBlock Then Print #$stream
    Print #$stream, String$($aElementsPile.Count, " ");
  Endif
  
End

Private Sub PrintXmlNsAttribute(Prefix As String, URI As String)
  
  Print #$stream, " xmlns"; If(Prefix, ":" & Prefix, ""); "=\""; URI; "\"";
  
End

'Properties

Private Function Data_Read() As String

  Return $sData

End

Private Function OutputStream_Read() As Stream

  Return $stream

End

Private Sub OutputStream_Write(Value As Stream)

  $bStringStream = $bStringStream And $stream = Value 
  $stream = Value

End

Private Function DTD_Read() As _XmlWriterDTD

  _XmlWriterDTD._$writer = Me
  Return _XmlWriterDTD

End
