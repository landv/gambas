' Gambas module file

Private $bCheckSVN As Boolean
Private $bHasSVN As Boolean

Private $bSVN As Boolean
Private $bCVS As Boolean
Private $bEnd As Boolean
Private $hEditor As TextEditor
Private $bOutput As Boolean
Private $sOutput As String
Private $dOutput As Date
Private $bIdent As Boolean

Private $sSvnVersion As String
Private $bSvn17 As Boolean

Public (User) As String
Public Password As String
Public UseTerminal As Boolean

Private $sRealDir As String

Private LANG_ENV As String[] = ["LC_ALL=C.UTF-8", "LANG=C.UTF-8", "LANGUAGE=C.UTF-8"]

Public Sub Enabled() As Boolean

  Return $bSVN Or $bCVS

End

Public Sub Refresh()

  Dim sResult As String

  Shell "readlink -f " & Shell$(Project.Dir) To $sRealDir
  $sRealDir = Trim($sRealDir)

  If Not $bCheckSVN Then
    $bHasSVN = System.Exist("svn")
    $bCheckSVN = True
  Endif
  
  If $bHasSVN Then

    If Not $sSvnVersion Then 
      Exec ["svn", "--version", "--quiet"] To $sSvnVersion
      $sSvnVersion = Trim($sSvnVersion)
      $bSvn17 = Comp($sSvnVersion, "1.7", gb.Natural) >= 0
    Endif
  
    If $bSvn17 Then
      $bSVN = False
      Shell "svn status " & Shell$(SvnPath$($sRealDir) &/ ".project") & " 2>&1" To sResult
      If Process.LastValue = 0 And If sResult Not Like "svn:*W155007*:*" And If sResult Not Like "svn:*W155010*:*" Then $bSvn = True
    Else
      $bSVN = Exist($sRealDir &/ ".svn")
    Endif
    
  Endif

  $bCVS = Exist($sRealDir &/ "CVS") Or Exist($sRealDir &/ "CVSROOT")
    
End

Private Sub Insert(sText As String)

  If $hEditor Then
    $hEditor.Print(DConv(sText))
  Else
    If Not Settings["/QuietExternalCommands", False] Then FOutput.Insert(sText)
  Endif

End

Private Sub Run(aCmd As String[], Optional bIdent As Boolean, Optional bOutput As Boolean, Optional aEnv As String[]) As Integer

  Dim sPassword As String
  Dim hProcess As Process
  Dim sCmd As String
  
  $bEnd = False
  $bIdent = bIdent
  $sOutput = ""
  $bOutput = bOutput
  $dOutput = Now
  
  If bIdent Then
    'aCmd.Add("--non-interactive")
    If User Then
      aCmd.Add("--username")
      aCmd.Add(User)
      If Password Then
        sPassword = " --password " & Password
        aCmd.Add("--password")
        aCmd.Add(Password)
      Endif
    Endif
  Endif
  
  hProcess = Exec aCmd With aEnv For Input Output As "Process" 
  
  sCmd = aCmd.Join(" ")
  If sPassword Then sCmd = Replace(sCmd, sPassword, "")

  Insert(sCmd & "\n")

  Do
    Wait
    
    If $bEnd Then Break
    
    If DateDiff($dOutput, Now, gb.Second) >= 30 Then
      Close #hProcess
      hProcess.Kill
      Insert("** " & ("command timeout") & " **\n")
    Endif
    
    Sleep 0.1
  Loop
    
  Return Process.LastValue

End

Public Sub Process_Error(({Error}) As String)
  
  Insert({Error})
  
End


Public Sub Process_Read()

  Dim sData As String
  Dim iPos As Integer
  Dim sLine As String

  sData = Read #Last, -256
  $sOutput &= sData
  If Not $bOutput Then Insert(sData)
  'Insert(sData)
  $dOutput = Now
  
  iPos = RInStr($sOutput, "\n")
  If iPos = 0 Then
    sLine = $sOutput
  Else
    sLine = Mid$($sOutput, iPos + 1)
  Endif
  
  If $bIdent Then
    If Right(RTrim(sLine)) = ":" And If InStr(sLine, "username", 1, gb.IgnoreCase) Then 
      If $bOutput Then Insert(sLine)
      Print #Last, User
      Insert(User & "\n")
      $sOutput = ""
    Else If Right(RTrim(sLine)) = ":" And If InStr(sLine, "password", 1, gb.IgnoreCase) Then 
      If $bOutput Then Insert(sLine)
      Print #Last, Password
      Insert(String$(String.Len(Password), "*") & "\n")
      $sOutput = ""
    Endif
  Endif

End

Public Sub Process_Kill()

  $bEnd = True

End

Private Sub SvnPath$(sPath As String) As String

  If InStr(sPath, "@") Then sPath &= "@"
  If sPath Begins Project.Dir Then sPath = $sRealDir &/ Mid$(sPath, Len(Project.Dir) + 1)
  Return sPath

End

Public Sub AddFile(sPath As String, Optional bForce As Boolean)

  Dim aCmd As String[]

  If $bSVN Then
    aCmd = ["svn", "add", SvnPath$(sPath)]
    If bForce Then aCmd.Add("--force", 2)
    Run(aCmd)
  Endif
  If $bCVS Then
    'NB: For CVS file must already exist
    Run(["cvs", "add", sPath])
  Endif

End

Public Sub AddDir(sPath As String)

  If $bSVN Then
    Run(["svn", "add", SvnPath$(sPath)])
  Endif
  If $bCVS Then
    'NB: For CVS, directory must already exist
    Run(["cvs", "add", sPath])
  Endif

End

' Must be called *after* the file has been deleted

Public Sub RemoveFile(sPath As String, Optional (bForce) As Boolean)

  Dim aCmd As String[]

  If $bSVN Then
    aCmd = ["svn", "remove", SvnPath$(sPath), "--force"]
    'If bForce Then aCmd.Add("--force", 2)
    Run(aCmd)
  Endif
  If $bCVS Then
    'NB: For CVS do 'cvs remove file' first then delete file
    Run(["cvs", "remove", sPath])
  Endif
  UpdatePath([sPath])

End

' Must be called *after* the directory has been deleted
' The directory must be empty

Public Sub RemoveDir(sPath As String)

  If $bSVN Then
    RemoveFile(sPath, True)
  Endif
  If $bCVS Then
    'NB: For CVS do 'cvs remove dirname' first then delete dirname
    Run(["cvs", "remove", sPath])
  Endif
  UpdatePath([sPath])

End

' Must be called *after* the file has been moved

Public Sub MoveFile(sOld As String, sNew As String)

  If $bSVN Then
    'SHELL "svn move " & Shell$(sOld) & " " & Shell$(sNew) WAIT
    AddFile(sNew)
    RemoveFile(sOld, True)
    'RemoveFile(sOld)
  Endif
  If $bCVS Then
    'NB: make sure the file is added BEFORE
    AddFile(sNew)
    'NB: make sure the file deleted AFTER
    RemoveFile(sOld)
  Endif
  UpdatePath([sOld, sNew])

End

Private Sub UpdatePathFromStatus(sStatus As String)

  Dim sFile As String
  Dim sExt As String
  Dim sPath As String

  For Each sStatus In Split(sStatus, "\n")

    sFile = Mid$(sStatus, 9)
    sPath = Project.Dir &/ sFile

    If Left(sStatus) = "D" Then
      Project.LockedPaths[sPath] = True
    Else If Left(sStatus) = "C" Then
      Project.ConflictPaths[sPath] = True
    Else If Left(sStatus) = "?" Then
      If Left(File.Name(sFile)) = "." Then Continue
      If sFile Begins ".lang/" Then Continue
      If sFile Begins ".gambas/" Then Continue
      If sFile = Project.Name & ".gambas" Then Continue
      sExt = File.Ext(sFile)
      If Left(sExt) = "r" And IsDigit(Mid$(sExt, 2)) And If Exist(Project.Dir &/ File.Dir(sFile) &/ File.BaseName(sFile)) Then Continue
      Project.AddedPaths[sPath] = True

      ' If Project.IsSourcePath(sPath) And If sExt = "class" Then
      '   For Each sForm In Dir(Project.Dir &/ File.Dir(sFile), File.BaseName(sFile) & ".*")
      '     Project.AddedPaths[Project.Dir &/ File.Dir(sFile) &/ sForm] = True
      '   Next
      ' Endif

    Endif

  Next

End

Private Sub UpdatePath(aPath As String[])

  Dim sStatus As String
  Dim sCmd As String
  Dim sPath As String

  If $bSVN Then

    ' svn status is automatically recursive!
    sCmd = "cd " & Shell$($sRealDir) & "; svn status --no-ignore"
    For Each sPath In aPath
      sCmd &= " " & Mid$(sPath, Len(Project.Dir) + 2)
      Project.LockedPaths.Remove(sPath)
      Project.AddedPaths.Remove(sPath)
      Project.ConflictPaths.Remove(sPath)
    Next

    Shell sCmd To sStatus

    UpdatePathFromStatus(sStatus)

  Endif

End

Public Sub CheckPaths()

  Dim sStatus As String

  Project.LockedPaths = New Collection
  Project.AddedPaths = New Collection
  Project.ConflictPaths = New Collection

  If $bSVN Then

    Shell "cd " & Shell$($sRealDir) & "; svn status --no-ignore" To sStatus
    UpdatePathFromStatus(sStatus)

  Endif

End

Public Sub MoveDir(sOld As String, sNew As String) As Boolean

  If $bSVN Then
    Run(["svn", "move", "--force", SvnPath$(sOld), SvnPath$(sNew)])
    'AddFile(sNew)
    ' For Each sDir In RDir(sNew, "*", gb.Directory)
    '   If File.Name(sDir) <> ".svn" Then Continue
    '   Shell "rm -rf " & Shell$(sNew &/ sDir) Wait
    ' Next
    ' AddFile(sNew, True)
    ' RemoveFile(sOld, False)
  Endif
  If $bCVS Then
    'NB: make sure the file is added BEFORE
    AddFile(sNew)
    'NB: make sure the file deleted AFTER
    RemoveFile(sOld)
  Endif

  UpdatePath([sOld, sNew])

End

Public Sub Status(Optional sPath As String) As String

  Dim sStatus As String
  Dim sCmd As String

  If $bSVN Then
    sCmd = "cd " & Shell$($sRealDir) & "; svn status -q" 
    If sPath Then sCmd &= " " & Shell$(sPath)
  Endif

  If $bCVS Then
    sCmd = "cd " & Shell$($sRealDir) & "; cvs status" 
    If sPath Then sCmd &= " " & Shell$(sPath)
  Endif

  If sCmd Then
    Shell sCmd To sStatus
    Return sStatus
  Endif
  
End

Public Sub Commit(sChange As String) As Boolean

  Dim hFile As File

  If $bSVN Then
    hFile = Open Temp$("commit") For Create
    Print #hFile, sChange;
    Close #hFile
    
    Run(["svn", "commit", "--file", Temp$("commit"), SvnPath$($sRealDir)], True, False, LANG_ENV)
    Return Process.LastValue
  Endif

End

Public Sub Update() As Boolean

  Dim bResult As Integer
  Dim sFile As String
  Dim sPath As String
  
  If $bSVN Then
    bResult = Run(["svn", "update", SvnPath$($sRealDir), "--accept", "postpone"], True)
    For Each sFile In [".project", ".startup", ".component", ".info"]
      sPath = $sRealDir &/ sFile
      If Exist(sPath) And If InConflict(sPath) Then Resolve(sPath, "theirs-full")
    Next
    For Each sFile In [".settings"]
      sPath = $sRealDir &/ sFile
      If Exist(sPath) And If InConflict(sPath) Then Resolve(sPath, "mine-full")
    Next
    Return bResult
  Endif

End

Public Sub Revert(Optional sPath As String) As Boolean

  If $bSVN Then
    If sPath Then
      Run(["svn", "revert", SvnPath$(sPath)])
    Else
      Run(["svn", "-R", "revert", SvnPath$($sRealDir)])
    Endif
    Return Process.LastValue
  Endif

End

Public Sub CheckoutSVN(sPath As String, sDir As String, hEditor As TextEditor) As Boolean

  $hEditor = hEditor
  Run(["svn", "checkout", SvnPath$(sPath), SvnPath$(sDir)], True)
  $hEditor = Null

End

Public Sub InConflict(sPath As String) As Boolean

  If $bSVN Then
    'IF Exist(sPath & ".mine") THEN RETURN TRUE
    If Not Exist(sPath) Then
      Debug sPath; ": does not exist"
      Return False
    Endif
    If Dir(File.Dir(sPath), File.Name(sPath) & ".r*").Count Then Return True
  Endif

End

Public Sub Resolve(sPath As String, Optional sAccept As String) As Boolean

  Dim aArg As String[]
  
  If $bSVN Then
    If sAccept Then 
      aArg = ["svn", "resolve", SvnPath$(sPath), "--accept", sAccept]
    Else
      aArg = ["svn", "resolved", SvnPath$(sPath)]
    Endif
    Run(aArg)
    Return Process.LastValue
  Endif

End

Public Sub HasConflict() As Boolean

  If $bSVN Then
    If Dir(Project.Dir, "*.module.r*").Count Then Return True
    If Dir(Project.Dir, "*.class.r*").Count Then Return True
    If Dir(Project.Dir, "*.form.r*").Count Then Return True
  Endif

End

Public Sub GetVersion(sDir As String) As String

  Dim sRes As String

  If Exist(sDir &/ ".svn") Then
    Shell "cd " & Shell$(sDir) & "; " & LANG_ENV.Join(" ") & " svn info" To sRes
    Try sRes = Scan(sRes, "*\nRevision: *\n*")[1]
    If Error Then 
      Return "?"
    Else
      Return "r" & sRes
    Endif
  Endif

End

' Private Sub RemoveFirstLines(sStr As String, iCount As Integer) As String
' 
'   Dim iPos As Integer
' 
'   While iCount
'     iPos = InStr(sStr, "\n", iPos + 1)
'     If iPos = 0 Then Return
'     Dec iCount
'   Wend
' 
'   Return Mid$(sStr, iPos + 1)
' 
' End

Public Sub Diff(sPath As String) As String

  Dim sDiff As String

  If $bSVN Then
    Shell "svn diff " & Shell$(SvnPath$(sPath)) To sDiff
    Return sDiff
  Endif

End

Public Sub CanControlProject() As Boolean

  Dim sDir As String

  If $bSVN Or $bCVS Then Return
  
  If $bSvn17 Then
    sDir = $sRealDir
    Do
      sDir = File.Dir(sDir)
      If Exist(sDir &/ ".svn") Then Return True
      If sDir = "/" Then Return False
    Loop
  Else
    If Exist($sRealDir &/ "../.svn") Then Return True
  Endif
  
  If Exist($sRealDir &/ "../CVS") Or Exist($sRealDir &/ "../CVSROOT") Then Return True

End

Public Sub ControlProject()

  If CanControlProject() Then
    Project.CleanUp
    Try Kill Project.Dir &/ ".settings"
    Run(["svn", "add", "--parents", SvnPath$($sRealDir)])
    Project.Config.Save
    Refresh
    Project.Refresh
  Endif

End

Private Sub FormatSvnDate(sDate As String) As String

  Dim aDate As String[]
  
  aDate = Split(sDate, "*-*-* *:*:* *")
  Try Return Format(Date(CInt(aDate[0]), CInt(aDate[1]), CInt(aDate[2]), CInt(aDate[3]), CInt(aDate[4]), CInt(aDate[5])), gb.GeneralDate)
  If Error Then Return sDate & " ?"

End

Public Sub Info(bRemote As Boolean) As Collection
  
  Dim sLine As String
  Dim aLine As String[]
  Dim sUrl As String
  Dim cInfo As New Collection
  Dim cData As New Collection
  
  If $bSvn Then
    
    If Run(["svn", "info", SvnPath$($sRealDir)], False, True, LANG_ENV) = 0 Then
    
      cData.Clear
      For Each sLine In Split($sOutput, "\n", "", True)
        aLine = Scan(sLine, "*: *")
        If aLine[0] = "Repository Root" Then sUrl = Trim(aLine[1])
        cData[Trim(aLine[0])] = Trim(aLine[1])
      Next
      
      cInfo["revision"] = cData["Revision"]
      cInfo["author"] = cData["Last Changed Author"]
      cInfo["date"] = FormatSvnDate(cData["Last Changed Date"])
      cInfo["url"] = sUrl
      cInfo["path"] = cData["Working Copy Root Path"]
      
    Endif
    
    If bRemote And If sUrl Then
    
      If Run(["svn", "info", SvnPath$(sUrl)], True, True, LANG_ENV) = 0 Then
      
        cData.Clear
        For Each sLine In Split($sOutput, "\n", "", True)
          aLine = Scan(sLine, "*: *")
          cData[Trim(aLine[0])] = Trim(aLine[1])
        Next
        
        cInfo["remote.revision"] = cData["Revision"]
        cInfo["remote.author"] = cData["Last Changed Author"]
        cInfo["remote.date"] = FormatSvnDate(cData["Last Changed Date"])
        
      Endif
      
    Endif
    
  Endif
  
  Return cInfo
  
End

Public Sub CleanUp(sPath As String)
  
  If $bSVN Then
    Run(["svn", "cleanup", SvnPath$(sPath)])
  Endif
  
End
