' Gambas class file

' (C) 2013, 2014, almost-2015 Tobias Boege <tobias@gambas-buch.de>

'' Get the edited patch back
Property Read {Patch} As Patch

Private $hPatch As New Patch
Private $hObs As Observer
' Whether we behave like a window or just an embedded control (see FMakePatch, Step #4)
Private $bWindowed As Boolean

Public Sub _new()

  $bWindowed = Not Me.Parent
  panSelectPath.Visible = $bWindowed
  panButton.Visible = $bWindowed
  Me.Margin = $bWindowed

End

Public Sub Form_Open()

  Settings.Read(Me)

  gvwHunks.Font = Project.GetEditorFont()
  gvwHunks.Columns.Count = 4
  gvwHunks.Columns[0].Width = Desktop.Scale * 4
  gvwHunks.Columns[1].Expand = True
  gvwHunks.Columns[2].Expand = False
  gvwHunks.Columns[3].Expand = False

  $hObs = New Observer(gvwHunks.Proxy, True) As "Observer"

  edtPatch.ReadConfig
  edtPatch.ShowLineNumber = True

End

Private Sub Check(iRow As Integer, bActive As Boolean)

  $hPatch[iRow].Active = bActive
  gvwHunks[iRow, 0].Picture = If(bActive, Picture["img/16/checked.png"], Picture["img/16/unchecked.png"])
  edtPatch.Highlight = IIf($hPatch[gvwHunks.Row].Active, "diff", "")

End

Public Sub Observer_MouseDown()

  Dim bSelect As Boolean
  Dim iRow As Integer

  With gvwHunks

    If .ColumnAt(Mouse.X) = 0 Then
      iRow = .RowAt(Mouse.Y)
      If iRow >= 0 Then
        bSelect = Not $hPatch[.Row].Active
        For Each iRow In .Rows.Selection
          Check(iRow, bSelect)
        Next
      Endif
      Stop Event
    Endif
  End With

End

Public Sub gvwHunks_Select()

  With gvwHunks
    If .Row < 0 Then
      edtPatch.Text = ""
      Return
    Endif

    If $hPatch[.Row].Active Then
      'gvwHunks[.Row, 0].Picture = Picture["img/16/checked.png"]
      edtPatch.Highlight = "diff"
    Else
      'gvwHunks[.Row, 0].Picture = Picture["img/16/unchecked.png"]
      edtPatch.Highlight = ""
    Endif
    edtPatch.Text = $hPatch[.Row].Text
  End With

End

' Public Sub gvwHunks_Activate()
' 
'   Dim iRow As Integer = gvwHunks.Row
' 
'   If iRow >= 0 Then Check(iRow, Not $hPatch[iRow].Active)
' 
' End

Public Sub edtPatch_Highlight(Text As String)

  TextHighlighter.Add(Highlight.Preprocessor, String.Len(Text))

End

Private Sub RefreshHunks()

  Dim iInd As Integer
  Dim sToFile As String
  ' Dim sLineInfo As String
  ' Dim iAltColor, iJ As Integer
  Dim aScan As String[]

  ' iAltColor = Color.Merge(Color.TextBackground, Color.LightBackground)

  gvwHunks.Rows.Height = Max(gvwHunks.Font.Height, 20)
  gvwHunks.Rows.Count = $hPatch.Count
  For iInd = 0 To $hPatch.Count - 1
    With $hPatch[iInd]
      gvwHunks[iInd, 0].Picture = Picture["img/16/" & IIf(.Active, "checked.png", "unchecked.png")]
      gvwHunks[iInd, 0].Padding = 2
      If .ToFile Then
        sToFile = Scan(.ToFile, "+++ */*\t*")[1]
      Else
        If iInd Then sToFile = gvwHunks[iInd - 1, 1].Text
      Endif
      gvwHunks[iInd, 1].Text = sToFile
      aScan = Scan(RTrim(.LineInfo), "@@ -* +* @@")
      'sLineInfo = aScan[0] & "\t--> " & aScan[1]
      gvwHunks[iInd, 2].Text = aScan[0]
      gvwHunks[iInd, 3].Text = "--> " & aScan[1]

      ' If Even(iInd) Then
      '   For iJ = 0 To gvwHunks.Columns.Count - 1
      '     gvwHunks[iInd, iJ].Background = iAltColor
      '   Next
      ' Endif
    End With
  Next

  gvwHunks.Columns[2].Width = -1
  gvwHunks.Columns[3].Width = -1

  btnApply.Enabled = True
  btnRevert.Enabled = True

End

Public Sub btnApply_Click()

  $hPatch.Apply()
  Project.ReadProject()
  Project.Refresh(True)

End

Public Sub btnRevert_Click()

  $hPatch.Revert()
  Project.ReadProject()
  Project.Refresh(True)

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub Form_Close()

  ' Save configuration only if we're windowed (else we're just a
  ' control in some other window where it makes no sense to save
  ' our geometry).
  If $bWindowed Then Settings.Write(Me)

End

Public Sub txtPath_Click()

  Dialog.Title = ("Select patch")
  Dialog.Filter = ["*.patch;*.diff", ("Patch/Diff files")]
  Dialog.Path = Project.Config["/FPatch/LastPatch", User.Home]

  If Dialog.OpenFile() Then Return

  If Not Project.IsPatchFile(Dialog.Path) Then
    Message.Warning(("That file does not look like a patch file!"))
    Return
  Endif

  Project.Config["/FPatch/LastPatch"] = Dialog.Path
  txtPath.Text = Dialog.Path

  Inc Application.Busy
    Parse(File.Load(Dialog.Path))
  Dec Application.Busy

End

Public Sub Clear()

  $hPatch = New Patch
  RefreshHunks()

End

Public Sub Parse(sFile As String)

  Inc Application.Busy
  $hPatch.Parse(sFile)
  RefreshHunks()

  Finally
    Dec Application.Busy

End

Private Function Patch_Read() As Patch

  Return $hPatch

End
