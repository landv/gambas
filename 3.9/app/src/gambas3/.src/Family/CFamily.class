' Gambas class file

Static Public List As String[] = ["form", "report", "webpage", "webform"]
Static Public All As New Collection(gb.IgnoreCase)

Static Public LastRect As RectF

Static Private $cCtrlFromIcon As New Collection

Public Const Name As String = ""
Public Const ControlClass As String = ""
Public Const DropImageClass As String = ""
Public Const DropImageProperty As String = ""
Public Background As Integer = Color.Background
Public Const AllowScaledProperty As Boolean = False
Public Const HasMenuEditor As Boolean = False
Public Const EmbedContainer As String = ""
Public Const AutomaticArrangement As Boolean = False

Public AllowedProperties As String[]

Public ActionValue As Variant

Static Private $hExpand As Picture
Static Private $hBroken As SvgImage

Private $hTimer As Timer
Private $hCurrentIcon As Control
Private $bTrigger As Boolean

Private Const ICON_SIZE As Integer = 15

Static Public Sub Get(sFamily As String) As CFamily
  
  Dim hFamily As CFamily
  
  hFamily = All[sFamily]
  If Not hFamily Then 
    Try hFamily = Object.New("CFamily" & sFamily)
    If Not hFamily Then 
      Debug "Family "; sFamily; " not implemented: "; Error.Where; ": "; Error.Text
      Return Get("Form")
    Endif
    All[sFamily] = hFamily
  Endif
  Return hFamily
  
End

Static Public Sub Exit()
  
  All = Null
  $cCtrlFromIcon.Clear
  
End

Public Sub _new()
  
  $hTimer = New Timer As "Timer"
  
End


'' If a control must be drawn with a transparent DrawingArea
Public Sub IsTransparent((hCtrl) As CControl) As Boolean
  
End

'' Draw event implementation of a specific control
'' Return TRUE if the control is not managed: then a default frame with the control icon and the control name will be drawn.
Public Sub DrawControl((hCtrl) As CControl) As Boolean

  Return True

End

Public Sub DeleteIcon(hCCtrl As CControl)
  
  Dim hIcon As Control = hCCtrl["#icon"]
  
  If Not hIcon Then Return
  
  hCCtrl["#icon"] = Null
  $cCtrlFromIcon[Str(hIcon)] = Null
  ' Apparently hIcon can be invalid: maybe when closing forms on project changes?
  Try hIcon.Delete
  
End

Private Sub GetControlPos(hCtrl As Control) As Integer[]
  
  If Not hCtrl.Parent Then Return [hCtrl.X, hCtrl.Y]
  
  Return [hCtrl.ScreenX - hCtrl.Parent.ScreenX, hCtrl.ScreenY - hCtrl.Parent.ScreenY]

End


Private Sub GetContainerSize(hCont As Container) As Integer[]
  
  Dim X, Y, W, H As Integer
  Dim aPos, aSize As Integer[]
  
  W = hCont.Width
  H = hCont.Height

  If hCont.Parent Then
  
    aPos = GetControlPos(hCont)
    X = aPos[0]
    Y = aPos[1]
    aSize = GetContainerSize(hCont.Parent)
    
    If (W > (aSize[0] - X)) Then W = aSize[0] - X
    If (H > (aSize[1] - Y)) Then H = aSize[1] - Y
  
  Endif
  
  Return [W, H]
  
End

Private Sub IsInside(hCtrl As Control) As Boolean
  
  Dim hRect, hRectParent As Rect
  Dim hParent As Container
  Dim hObject As Object
  'Dim aPos, aSize As Integer[]
  Dim X, Y, SX, SY As Integer
  'Dim XC, YC, WC, HC As Integer
  
  If Not Object.IsValid(hCtrl) Then Return
  'Return hCtrl.Hovered
  
  X = Mouse.ScreenX
  Y = Mouse.ScreenY
  SX = hCtrl.ScreenX
  SY = hCtrl.ScreenY
  
  hRect = New Rect(SX, SY, hCtrl.W, hCtrl.H)
  'Debug hCtrl.Name;; hRect.X;; hRect.Y;; hRect.W;; hRect.H
  hParent = hCtrl.Parent
  
  While hParent
    
    hObject = hParent
    SX = SX - hCtrl.X - hParent.ClientX
    Try SX += hObject.ScrollX
    SY = SY - hCtrl.Y - hParent.ClientY
    Try SY += hObject.ScrollY
    
    hRectParent = New Rect(SX + hParent.ClientX, SY + hParent.ClientY, hParent.ClientW, hParent.ClientH)
    
    hRect = hRect.Intersection(hRectParent)
    If Not hRect Then Return
    
    hCtrl = hParent
    hParent = hParent.Parent
  Wend
  
  Return hRect.Contains(X, Y)
  
End

Public Sub GetIcon(hCCtrl As CControl) As String
  
  Dim sImage As String
  
  sImage = LCase(hCCtrl["Arrangement"])
  If sImage = "none" Then Return
  Return sImage
    
End



Private Sub CheckIcons()
  
  Dim hCCtrl As CControl
  Dim hIcon As Control 
  Dim aCtrl As New CControl[]
  
  For Each hCCtrl In $cCtrlFromIcon
    aCtrl.Add(hCCtrl)
  Next
  
  For Each hCCtrl In aCtrl
    hIcon = hCCtrl["#icon"]
    If Not hIcon Then Continue
    If IsInside(hCCtrl.Control) Then Continue
    DeleteIcon(hCCtrl)
  Next
  
End

Public Sub EnterControl(hCont As Container, hCCtrl As CControl)
  
  If hCCtrl.Parent Then EnterControl(hCont, hCCtrl.Parent)
  DrawIcon(hCont, hCCtrl)
  
  If $bTrigger Then Return
  $bTrigger = True
  $hTimer.Trigger
  
End

Public Sub LeaveControl((hCont) As Container, hCCtrl As CControl)
  
  Dim iCount As Integer
  Dim hIconCtrl As CControl
  
  'Debug hCCtrl.Name
  
  For Each hIconCtrl In $cCtrlFromIcon
    If IsInside(hIconCtrl["#icon"]) Then Break
    Inc iCount
  Next
  If iCount = $cCtrlFromIcon.Count Then DeleteIcon(hCCtrl)
  
  If $bTrigger Then Return
  $bTrigger = True
  $hTimer.Trigger
  
End

Public Sub DrawIcon(hCont As Container, hCCtrl As CControl)
  
  Dim hCtrl As Control = hCCtrl.Control
  Dim hPict As Picture
  Dim hImage, hTemp As Image
  Dim hIcon As DrawingArea
  Dim hComp As Control
  Dim X, Y As Integer
  Dim XI, YI, XC, YC As Integer
  Dim sImage As String

  sImage = Me.GetIcon(hCCtrl)
  If Not sImage Then Return
  
  hIcon = hCCtrl["#icon"]
  
  If hIcon Then 
    ' If it was explicitely hidden, then do not show it again
    If Not hIcon.Visible Then Return
    'DeleteIcon(hCCtrl)
  Endif
  
  X = hCtrl.ScreenX + hCtrl.Width - ICON_SIZE
  Y = hCtrl.ScreenY
  If hCtrl = hCont And If hCtrl.Window.Menus.Visible Then Y += hCont.ClientY
  'hIcon.Move(,, hPict.Width, hPict.Height)
  
  If hCCtrl.Parent And If hCCtrl.Parent["#icon"] Then
    hComp = hCCtrl.Parent["#icon"]
    XI = X + ICON_SIZE / 2
    YI = Y + ICON_SIZE / 2
    XC = hComp.ScreenX + hComp.Width / 2
    YC = hComp.ScreenY + hComp.Height / 2
    If Abs(XI - XC) < (ICON_SIZE + 1) And Abs(YI - YC) < (ICON_SIZE + 1) Then
      If hCtrl.Parent.Width > hCtrl.Parent.Height Then
        X = hComp.ScreenX - ICON_SIZE - 1
      Else
        Y = hComp.ScreenY + ICON_SIZE + 1
      Endif
    Endif
  Endif
  
  If Not hIcon Then
  
    hPict = Picture["$arr-" & sImage]
    If Not hPict Then
      
      Try hTemp = Image.Load("img/family" &/ sImage & ".png")
      If Error Then
        Error "gambas3: warning: cannot load arrangement icon: " & sImage
        hTemp = New Image(16, 16, Color.Transparent)
      Endif

      hImage = New Image(ICON_SIZE, ICON_SIZE, Color.RGB(0, 0, 0, 128))
      hImage.PaintImage(hTemp, 0, 0)
      hPict = hImage.Picture
      Picture["$arr-" & sImage] = hPict
      
    Endif
    
    hIcon = New DrawingArea(hCont) As "Icon"
    hCCtrl["#icon"] = hIcon
    hIcon.Ignore = True
    hIcon.Enabled = False
    'hIcon.Background = Color.Black
    hIcon.Tag = hPict
    'hIcon.Raise
    $cCtrlFromIcon[Str(hIcon)] = hCCtrl
  
  Endif
  
  If Not hCont Then hCont = hIcon.Parent
  
  hIcon.Move(X - hCont.ScreenX - hCont.ClientX, Y - hCont.ScreenY - hCont.ClientY, ICON_SIZE, ICON_SIZE)
  
End

Public Sub Icon_MouseDown()
  
  Last.Hide
  
End

Public Sub Icon_Enter()
  
  'Debug
  $hCurrentIcon = Last
  
End

Public Sub Icon_Draw()
  
  Draw.Picture(Last.Tag, 0, 0)
  
End


Public Sub Icon_Leave()
  
  If $hCurrentIcon = Last Then $hCurrentIcon = Null
  'Debug
  If $bTrigger Then Return
  $bTrigger = True
  $hTimer.Trigger
  
End

Public Sub Timer_Timer()
  
  CheckIcons
  
Finally
  
  $bTrigger = False
  
End

Public Sub ActionDialog(sAction As String) As Boolean

  If sAction Begins ".text-" Then Return
  
  Return True
  
End

Private Sub ToggleFont(sFont As String, sProp As String) As String
  
  Dim aFont As String[] = Split(sFont, ",")
  Dim iPos As Integer
  
  iPos = aFont.Find(sProp)
  If iPos < 0 Then
    aFont.Add(sProp, 0)
  Else
    aFont.Remove(iPos)
  Endif
  
  Return aFont.Join(",")
  
End

Private Sub ZoomFont(sFont As String, sAction As String) As String
  
  Dim aFont As String[] = Split(sFont, ",")
  Dim sSize As String
  Dim I As Integer
  Dim iPos As Integer
  
  iPos = -1
  For I = 0 To aFont.Max
    sSize = aFont[I]
    If IsDigit(sSize) Or If Left(sSize) = "+" Or If Left(sSize) = "-" Then 
      iPos = I
      Break
    Endif
    sSize = ""
  Next
  
  Select Case sAction
    
    Case "+"
      
      If Not sSize Then
        sSize = "+1"
      Else If IsDigit(sSize) Then
        sSize = CStr(Min(256, CInt(sSize) + 2))
      Else
        sSize = Format(Min(24, CInt(sSize) + 1), "+0")
      Endif
      
    Case "-"
    
      If Not sSize Then
        sSize = "-1"
      Else If IsDigit(sSize) Then
        sSize = CStr(Max(1, CInt(sSize) - 2))
      Else
        sSize = Format(Max(-8, CInt(sSize) - 1), "+0")
      Endif
      
    Case "0"

      sSize = ""
    
  End Select
  
  If sSize = " 0" Then sSize = ""
  
  If iPos >= 0 Then aFont.Remove(iPos)
  If sSize Then aFont.Add(sSize)
  
  Return aFont.Join(",")
  
End

Public Sub ActionExec(hCtrl As CControl, sAction As String)
  
  Dim sFont As String

  Try sFont = hCtrl.GetProperty("Font")
  If Error Then Return
    
  Select Case sAction
    
    Case ".text-bold"
      sFont = ToggleFont(sFont, "Bold")
    
    Case ".text-italic"
      sFont = ToggleFont(sFont, "Italic")
    
    Case ".text-underline"
      sFont = ToggleFont(sFont, "Underline")
    
    Case ".text-zoom-in"
      sFont = ZoomFont(sFont, "+")
    
    Case ".text-zoom-out"
      sFont = ZoomFont(sFont, "-")
    
    Case ".text-zoom-normal"
      sFont = ZoomFont(sFont, "0")
    
  End Select
  
  Try hCtrl.SetProperty("Font", sFont)

End

Public Sub SelectImage((sPropertyType) As String, sImage As String) As String
  
  Return FSelectIcon.Run(sImage, FSelectIcon.SELECT_IMAGE)
  
End

Static Public Sub PaintContainer(X As Float, Y As Float, W As Float, H As Float)
  
  Paint.Background = &HFFB0B0
  Paint.LineWidth = 1
  Paint.Rectangle(X + 0.5, Y + 0.5, W - 1, H - 1)
  Paint.Stroke
  
End

Static Public Sub PaintExpand(hCCtrl As CControl) As Boolean
  
  Dim hParent As CControl
  
  If Not hCCtrl.HasChildren() And If hCCtrl.GetProperty("Expand") Then
    hParent = hCCtrl.Parent
    If hParent Then
      If Not $hExpand Then $hExpand = Picture["img/family/expand.png"]
      Select Case hParent.GetArrangement()
        Case Like "H", "R"
          Draw.Tile($hExpand, 0, (hCCtrl.H - $hExpand.H) \ 2, hCCtrl.W, $hExpand.H)
          Return True
        Case Like "V", "C"
          Draw.Tile($hExpand, (hCCtrl.W - $hExpand.W) \ 2, 0, $hExpand.W, hCCtrl.H)
          Return True
      End Select
    Endif
  Endif
  
End

Static Public Sub PaintBroken()
  
  Dim W As Integer
  
  If Not $hBroken Then $hBroken = SvgImage.Load("img/broken.svg")
  W = Min(Paint.W, Paint.H)
  $hBroken.Resize(W, W)
  Paint.MoveTo((Paint.W - W) / 2, (Paint.H - W) / 2)
  $hBroken.Paint
  Paint.Background = Color.SetAlpha(Color.Red, 128)
  Paint.Rectangle(0.5, 0.5, Paint.W - 1, Paint.H - 1)
  Paint.Stroke
  
End

Static Public Sub PaintImage(hCtrl As CControl, sRoot As String, Optional iAlign As Integer = Align.Center, Optional iMargin As Integer) As Boolean

  Dim sPath As String
  Dim hImage As Image
  Dim hSvgImage As SvgImage
  Dim sExt As String
  Dim W As Integer
  Dim H As Integer
  Dim hRect As RectF
  
  sPath = hCtrl["Image"]
  If Not sPath Then Return True
      
  If hCtrl["#ImagePath"] <> sPath Then
    hCtrl["#ImagePath"] = sPath
    hCtrl["#Image"] = Null
    hCtrl["#SvgImage"] = Null
    sExt = File.Ext(sPath)
    If sExt = "svg" Or If sExt = "svgz" Then
      Try hCtrl["#SvgImage"] = SvgImage.Load(Project.Dir &/ sRoot &/ sPath)
    Else
      Try hCtrl["#Image"] = Image.Load(Project.Dir &/ sRoot &/ sPath)
    Endif
  Endif
  
  hImage = hCtrl["#Image"]
  If hImage Then
    W = hImage.W
    H = hImage.H
    GoSub GET_RECT
    Paint.DrawImage(hImage, hRect.X, hRect.Y, hRect.W, hRect.H)
    Return
  Endif
  
  hSvgImage = hCtrl["#SvgImage"]
  If hSvgImage Then
    W = hSvgImage.W
    H = hSvgImage.H
    GoSub GET_RECT
    hSvgImage.Paint(hRect.X, hRect.Y, hRect.W, hRect.H)
    Return
  Endif
  
  PaintBroken
  Return
  
GET_RECT:

  hRect = New RectF(0, 0, Paint.W, Paint.H)
  hRect.Adjust(iMargin)
  hRect = RectF.Stretch(W, H, hRect)
  LastRect = hRect
  If Align.IsLeft(iAlign) Then
    hRect.X = iMargin
  Else If Align.IsRight(iAlign) Then
    hRect.X = Paint.W - hRect.W - iMargin
  Endif

  Return
  
End
